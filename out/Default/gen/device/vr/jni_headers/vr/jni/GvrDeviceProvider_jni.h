// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/vr/GvrDeviceProvider

#ifndef org_chromium_device_vr_GvrDeviceProvider_JNI
#define org_chromium_device_vr_GvrDeviceProvider_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kGvrDeviceProviderClassPath[] =
    "org/chromium/device/vr/GvrDeviceProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_GvrDeviceProvider_clazz __attribute__((unused)) = 0;
#define GvrDeviceProvider_clazz(env) base::android::LazyGetClass(env, kGvrDeviceProviderClassPath, &g_GvrDeviceProvider_clazz)

}  // namespace

namespace device {

// Step 2: method stubs.

static base::subtle::AtomicWord g_GvrDeviceProvider_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_GvrDeviceProvider_create(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context) {
  CHECK_CLAZZ(env, GvrDeviceProvider_clazz(env),
      GvrDeviceProvider_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, GvrDeviceProvider_clazz(env),
      "create",

"("
"Landroid/content/Context;"
")"
"Lorg/chromium/device/vr/GvrDeviceProvider;",
      &g_GvrDeviceProvider_create);

  jobject ret =
      env->CallStaticObjectMethod(GvrDeviceProvider_clazz(env),
          method_id, context.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_GvrDeviceProvider_getNativeContext = 0;
static jlong Java_GvrDeviceProvider_getNativeContext(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      GvrDeviceProvider_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, GvrDeviceProvider_clazz(env),
      "getNativeContext",

"("
")"
"J",
      &g_GvrDeviceProvider_getNativeContext);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_GvrDeviceProvider_shutdown = 0;
static void Java_GvrDeviceProvider_shutdown(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      GvrDeviceProvider_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, GvrDeviceProvider_clazz(env),
      "shutdown",

"("
")"
"V",
      &g_GvrDeviceProvider_shutdown);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

}  // namespace device

#endif  // org_chromium_device_vr_GvrDeviceProvider_JNI
