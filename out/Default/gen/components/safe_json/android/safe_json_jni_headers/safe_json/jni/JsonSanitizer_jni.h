// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/safejson/JsonSanitizer

#ifndef org_chromium_components_safejson_JsonSanitizer_JNI
#define org_chromium_components_safejson_JsonSanitizer_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kJsonSanitizerClassPath[] =
    "org/chromium/components/safejson/JsonSanitizer";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_JsonSanitizer_clazz __attribute__((unused)) = 0;
#define JsonSanitizer_clazz(env) base::android::LazyGetClass(env, kJsonSanitizerClassPath, &g_JsonSanitizer_clazz)

}  // namespace

namespace safe_json {

// Step 2: method stubs.

static void OnSuccess(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    jlong id,
    const base::android::JavaParamRef<jstring>& json);

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_components_safejson_JsonSanitizer_nativeOnSuccess(JNIEnv*
    env, jclass jcaller,
    jlong id,
    jstring json) {
  return OnSuccess(env, base::android::JavaParamRef<jclass>(env, jcaller), id,
      base::android::JavaParamRef<jstring>(env, json));
}

static void OnError(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    jlong id,
    const base::android::JavaParamRef<jstring>& error);

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_components_safejson_JsonSanitizer_nativeOnError(JNIEnv*
    env, jclass jcaller,
    jlong id,
    jstring error) {
  return OnError(env, base::android::JavaParamRef<jclass>(env, jcaller), id,
      base::android::JavaParamRef<jstring>(env, error));
}

static base::subtle::AtomicWord g_JsonSanitizer_sanitize = 0;
static void Java_JsonSanitizer_sanitize(JNIEnv* env, jlong nativePtr,
    const base::android::JavaRefOrBare<jstring>& unsafeJson) {
  CHECK_CLAZZ(env, JsonSanitizer_clazz(env),
      JsonSanitizer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, JsonSanitizer_clazz(env),
      "sanitize",

"("
"J"
"Ljava/lang/String;"
")"
"V",
      &g_JsonSanitizer_sanitize);

     env->CallStaticVoidMethod(JsonSanitizer_clazz(env),
          method_id, nativePtr, unsafeJson.obj());
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsJsonSanitizer[] = {
    { "nativeOnSuccess",
"("
"J"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_safejson_JsonSanitizer_nativeOnSuccess)
    },
    { "nativeOnError",
"("
"J"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_safejson_JsonSanitizer_nativeOnError)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsJsonSanitizerSize = arraysize(kMethodsJsonSanitizer);

  if (env->RegisterNatives(JsonSanitizer_clazz(env),
                           kMethodsJsonSanitizer,
                           kMethodsJsonSanitizerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, JsonSanitizer_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace safe_json

#endif  // org_chromium_components_safejson_JsonSanitizer_JNI
