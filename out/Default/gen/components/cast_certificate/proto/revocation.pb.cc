// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: revocation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "revocation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cast_certificate {

void protobuf_ShutdownFile_revocation_2eproto() {
  delete CrlBundle::default_instance_;
  delete Crl::default_instance_;
  delete TbsCrl::default_instance_;
  delete SerialNumberRange::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_revocation_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_revocation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CrlBundle::default_instance_ = new CrlBundle();
  Crl::default_instance_ = new Crl();
  TbsCrl::default_instance_ = new TbsCrl();
  SerialNumberRange::default_instance_ = new SerialNumberRange();
  CrlBundle::default_instance_->InitAsDefaultInstance();
  Crl::default_instance_->InitAsDefaultInstance();
  TbsCrl::default_instance_->InitAsDefaultInstance();
  SerialNumberRange::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_revocation_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_revocation_2eproto_once_);
void protobuf_AddDesc_revocation_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_revocation_2eproto_once_,
                 &protobuf_AddDesc_revocation_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_revocation_2eproto {
  StaticDescriptorInitializer_revocation_2eproto() {
    protobuf_AddDesc_revocation_2eproto();
  }
} static_descriptor_initializer_revocation_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForCrlBundle(
    CrlBundle* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrlBundle::kCrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrlBundle::CrlBundle()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cast_certificate.CrlBundle)
}

void CrlBundle::InitAsDefaultInstance() {
}

CrlBundle::CrlBundle(const CrlBundle& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cast_certificate.CrlBundle)
}

void CrlBundle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrlBundle::~CrlBundle() {
  // @@protoc_insertion_point(destructor:cast_certificate.CrlBundle)
  SharedDtor();
}

void CrlBundle::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CrlBundle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CrlBundle& CrlBundle::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_revocation_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_revocation_2eproto();
#endif
  return *default_instance_;
}

CrlBundle* CrlBundle::default_instance_ = NULL;

CrlBundle* CrlBundle::New(::google::protobuf::Arena* arena) const {
  CrlBundle* n = new CrlBundle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrlBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:cast_certificate.CrlBundle)
  crls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CrlBundle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCrlBundle, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cast_certificate.CrlBundle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cast_certificate.Crl crls = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_crls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_crls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_crls;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cast_certificate.CrlBundle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cast_certificate.CrlBundle)
  return false;
#undef DO_
}

void CrlBundle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cast_certificate.CrlBundle)
  // repeated .cast_certificate.Crl crls = 1;
  for (unsigned int i = 0, n = this->crls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->crls(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cast_certificate.CrlBundle)
}

int CrlBundle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cast_certificate.CrlBundle)
  int total_size = 0;

  // repeated .cast_certificate.Crl crls = 1;
  total_size += 1 * this->crls_size();
  for (int i = 0; i < this->crls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->crls(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrlBundle::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CrlBundle*>(&from));
}

void CrlBundle::MergeFrom(const CrlBundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast_certificate.CrlBundle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  crls_.MergeFrom(from.crls_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CrlBundle::CopyFrom(const CrlBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast_certificate.CrlBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrlBundle::IsInitialized() const {

  return true;
}

void CrlBundle::Swap(CrlBundle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrlBundle::InternalSwap(CrlBundle* other) {
  crls_.UnsafeArenaSwap(&other->crls_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CrlBundle::GetTypeName() const {
  return "cast_certificate.CrlBundle";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrlBundle

// repeated .cast_certificate.Crl crls = 1;
int CrlBundle::crls_size() const {
  return crls_.size();
}
void CrlBundle::clear_crls() {
  crls_.Clear();
}
const ::cast_certificate::Crl& CrlBundle::crls(int index) const {
  // @@protoc_insertion_point(field_get:cast_certificate.CrlBundle.crls)
  return crls_.Get(index);
}
::cast_certificate::Crl* CrlBundle::mutable_crls(int index) {
  // @@protoc_insertion_point(field_mutable:cast_certificate.CrlBundle.crls)
  return crls_.Mutable(index);
}
::cast_certificate::Crl* CrlBundle::add_crls() {
  // @@protoc_insertion_point(field_add:cast_certificate.CrlBundle.crls)
  return crls_.Add();
}
::google::protobuf::RepeatedPtrField< ::cast_certificate::Crl >*
CrlBundle::mutable_crls() {
  // @@protoc_insertion_point(field_mutable_list:cast_certificate.CrlBundle.crls)
  return &crls_;
}
const ::google::protobuf::RepeatedPtrField< ::cast_certificate::Crl >&
CrlBundle::crls() const {
  // @@protoc_insertion_point(field_list:cast_certificate.CrlBundle.crls)
  return crls_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCrl(
    Crl* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Crl::kTbsCrlFieldNumber;
const int Crl::kSignerCertFieldNumber;
const int Crl::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Crl::Crl()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cast_certificate.Crl)
}

void Crl::InitAsDefaultInstance() {
}

Crl::Crl(const Crl& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cast_certificate.Crl)
}

void Crl::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tbs_crl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signer_cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Crl::~Crl() {
  // @@protoc_insertion_point(destructor:cast_certificate.Crl)
  SharedDtor();
}

void Crl::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tbs_crl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signer_cert_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Crl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Crl& Crl::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_revocation_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_revocation_2eproto();
#endif
  return *default_instance_;
}

Crl* Crl::default_instance_ = NULL;

Crl* Crl::New(::google::protobuf::Arena* arena) const {
  Crl* n = new Crl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Crl::Clear() {
// @@protoc_insertion_point(message_clear_start:cast_certificate.Crl)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_tbs_crl()) {
      tbs_crl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_signer_cert()) {
      signer_cert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_signature()) {
      signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Crl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCrl, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cast_certificate.Crl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes tbs_crl = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tbs_crl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signer_cert;
        break;
      }

      // optional bytes signer_cert = 2;
      case 2: {
        if (tag == 18) {
         parse_signer_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signer_cert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_signature;
        break;
      }

      // optional bytes signature = 3;
      case 3: {
        if (tag == 26) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cast_certificate.Crl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cast_certificate.Crl)
  return false;
#undef DO_
}

void Crl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cast_certificate.Crl)
  // optional bytes tbs_crl = 1;
  if (has_tbs_crl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tbs_crl(), output);
  }

  // optional bytes signer_cert = 2;
  if (has_signer_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signer_cert(), output);
  }

  // optional bytes signature = 3;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->signature(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cast_certificate.Crl)
}

int Crl::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cast_certificate.Crl)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes tbs_crl = 1;
    if (has_tbs_crl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tbs_crl());
    }

    // optional bytes signer_cert = 2;
    if (has_signer_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signer_cert());
    }

    // optional bytes signature = 3;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Crl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Crl*>(&from));
}

void Crl::MergeFrom(const Crl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast_certificate.Crl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tbs_crl()) {
      set_has_tbs_crl();
      tbs_crl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tbs_crl_);
    }
    if (from.has_signer_cert()) {
      set_has_signer_cert();
      signer_cert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signer_cert_);
    }
    if (from.has_signature()) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Crl::CopyFrom(const Crl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast_certificate.Crl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crl::IsInitialized() const {

  return true;
}

void Crl::Swap(Crl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Crl::InternalSwap(Crl* other) {
  tbs_crl_.Swap(&other->tbs_crl_);
  signer_cert_.Swap(&other->signer_cert_);
  signature_.Swap(&other->signature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Crl::GetTypeName() const {
  return "cast_certificate.Crl";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Crl

// optional bytes tbs_crl = 1;
bool Crl::has_tbs_crl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Crl::set_has_tbs_crl() {
  _has_bits_[0] |= 0x00000001u;
}
void Crl::clear_has_tbs_crl() {
  _has_bits_[0] &= ~0x00000001u;
}
void Crl::clear_tbs_crl() {
  tbs_crl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tbs_crl();
}
 const ::std::string& Crl::tbs_crl() const {
  // @@protoc_insertion_point(field_get:cast_certificate.Crl.tbs_crl)
  return tbs_crl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Crl::set_tbs_crl(const ::std::string& value) {
  set_has_tbs_crl();
  tbs_crl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_certificate.Crl.tbs_crl)
}
 void Crl::set_tbs_crl(const char* value) {
  set_has_tbs_crl();
  tbs_crl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_certificate.Crl.tbs_crl)
}
 void Crl::set_tbs_crl(const void* value, size_t size) {
  set_has_tbs_crl();
  tbs_crl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_certificate.Crl.tbs_crl)
}
 ::std::string* Crl::mutable_tbs_crl() {
  set_has_tbs_crl();
  // @@protoc_insertion_point(field_mutable:cast_certificate.Crl.tbs_crl)
  return tbs_crl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Crl::release_tbs_crl() {
  // @@protoc_insertion_point(field_release:cast_certificate.Crl.tbs_crl)
  clear_has_tbs_crl();
  return tbs_crl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Crl::set_allocated_tbs_crl(::std::string* tbs_crl) {
  if (tbs_crl != NULL) {
    set_has_tbs_crl();
  } else {
    clear_has_tbs_crl();
  }
  tbs_crl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tbs_crl);
  // @@protoc_insertion_point(field_set_allocated:cast_certificate.Crl.tbs_crl)
}

// optional bytes signer_cert = 2;
bool Crl::has_signer_cert() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Crl::set_has_signer_cert() {
  _has_bits_[0] |= 0x00000002u;
}
void Crl::clear_has_signer_cert() {
  _has_bits_[0] &= ~0x00000002u;
}
void Crl::clear_signer_cert() {
  signer_cert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signer_cert();
}
 const ::std::string& Crl::signer_cert() const {
  // @@protoc_insertion_point(field_get:cast_certificate.Crl.signer_cert)
  return signer_cert_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Crl::set_signer_cert(const ::std::string& value) {
  set_has_signer_cert();
  signer_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_certificate.Crl.signer_cert)
}
 void Crl::set_signer_cert(const char* value) {
  set_has_signer_cert();
  signer_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_certificate.Crl.signer_cert)
}
 void Crl::set_signer_cert(const void* value, size_t size) {
  set_has_signer_cert();
  signer_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_certificate.Crl.signer_cert)
}
 ::std::string* Crl::mutable_signer_cert() {
  set_has_signer_cert();
  // @@protoc_insertion_point(field_mutable:cast_certificate.Crl.signer_cert)
  return signer_cert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Crl::release_signer_cert() {
  // @@protoc_insertion_point(field_release:cast_certificate.Crl.signer_cert)
  clear_has_signer_cert();
  return signer_cert_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Crl::set_allocated_signer_cert(::std::string* signer_cert) {
  if (signer_cert != NULL) {
    set_has_signer_cert();
  } else {
    clear_has_signer_cert();
  }
  signer_cert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signer_cert);
  // @@protoc_insertion_point(field_set_allocated:cast_certificate.Crl.signer_cert)
}

// optional bytes signature = 3;
bool Crl::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Crl::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
void Crl::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
void Crl::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
 const ::std::string& Crl::signature() const {
  // @@protoc_insertion_point(field_get:cast_certificate.Crl.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Crl::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_certificate.Crl.signature)
}
 void Crl::set_signature(const char* value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_certificate.Crl.signature)
}
 void Crl::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_certificate.Crl.signature)
}
 ::std::string* Crl::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:cast_certificate.Crl.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Crl::release_signature() {
  // @@protoc_insertion_point(field_release:cast_certificate.Crl.signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Crl::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:cast_certificate.Crl.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForTbsCrl(
    TbsCrl* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TbsCrl::kVersionFieldNumber;
const int TbsCrl::kNotBeforeSecondsFieldNumber;
const int TbsCrl::kNotAfterSecondsFieldNumber;
const int TbsCrl::kRevokedPublicKeyHashesFieldNumber;
const int TbsCrl::kRevokedSerialNumberRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TbsCrl::TbsCrl()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cast_certificate.TbsCrl)
}

void TbsCrl::InitAsDefaultInstance() {
}

TbsCrl::TbsCrl(const TbsCrl& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cast_certificate.TbsCrl)
}

void TbsCrl::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_ULONGLONG(0);
  not_before_seconds_ = GOOGLE_ULONGLONG(0);
  not_after_seconds_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TbsCrl::~TbsCrl() {
  // @@protoc_insertion_point(destructor:cast_certificate.TbsCrl)
  SharedDtor();
}

void TbsCrl::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TbsCrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TbsCrl& TbsCrl::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_revocation_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_revocation_2eproto();
#endif
  return *default_instance_;
}

TbsCrl* TbsCrl::default_instance_ = NULL;

TbsCrl* TbsCrl::New(::google::protobuf::Arena* arena) const {
  TbsCrl* n = new TbsCrl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TbsCrl::Clear() {
// @@protoc_insertion_point(message_clear_start:cast_certificate.TbsCrl)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TbsCrl, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TbsCrl*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, not_after_seconds_);

#undef ZR_HELPER_
#undef ZR_

  revoked_public_key_hashes_.Clear();
  revoked_serial_number_ranges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TbsCrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForTbsCrl, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cast_certificate.TbsCrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_not_before_seconds;
        break;
      }

      // optional uint64 not_before_seconds = 2;
      case 2: {
        if (tag == 16) {
         parse_not_before_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &not_before_seconds_)));
          set_has_not_before_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_not_after_seconds;
        break;
      }

      // optional uint64 not_after_seconds = 3;
      case 3: {
        if (tag == 24) {
         parse_not_after_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &not_after_seconds_)));
          set_has_not_after_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_revoked_public_key_hashes;
        break;
      }

      // repeated bytes revoked_public_key_hashes = 4;
      case 4: {
        if (tag == 34) {
         parse_revoked_public_key_hashes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_revoked_public_key_hashes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_revoked_public_key_hashes;
        if (input->ExpectTag(42)) goto parse_revoked_serial_number_ranges;
        break;
      }

      // repeated .cast_certificate.SerialNumberRange revoked_serial_number_ranges = 5;
      case 5: {
        if (tag == 42) {
         parse_revoked_serial_number_ranges:
          DO_(input->IncrementRecursionDepth());
         parse_loop_revoked_serial_number_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_revoked_serial_number_ranges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_revoked_serial_number_ranges;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cast_certificate.TbsCrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cast_certificate.TbsCrl)
  return false;
#undef DO_
}

void TbsCrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cast_certificate.TbsCrl)
  // optional uint64 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->version(), output);
  }

  // optional uint64 not_before_seconds = 2;
  if (has_not_before_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->not_before_seconds(), output);
  }

  // optional uint64 not_after_seconds = 3;
  if (has_not_after_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->not_after_seconds(), output);
  }

  // repeated bytes revoked_public_key_hashes = 4;
  for (int i = 0; i < this->revoked_public_key_hashes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->revoked_public_key_hashes(i), output);
  }

  // repeated .cast_certificate.SerialNumberRange revoked_serial_number_ranges = 5;
  for (unsigned int i = 0, n = this->revoked_serial_number_ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->revoked_serial_number_ranges(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cast_certificate.TbsCrl)
}

int TbsCrl::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cast_certificate.TbsCrl)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // optional uint64 not_before_seconds = 2;
    if (has_not_before_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->not_before_seconds());
    }

    // optional uint64 not_after_seconds = 3;
    if (has_not_after_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->not_after_seconds());
    }

  }
  // repeated bytes revoked_public_key_hashes = 4;
  total_size += 1 * this->revoked_public_key_hashes_size();
  for (int i = 0; i < this->revoked_public_key_hashes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->revoked_public_key_hashes(i));
  }

  // repeated .cast_certificate.SerialNumberRange revoked_serial_number_ranges = 5;
  total_size += 1 * this->revoked_serial_number_ranges_size();
  for (int i = 0; i < this->revoked_serial_number_ranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->revoked_serial_number_ranges(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TbsCrl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TbsCrl*>(&from));
}

void TbsCrl::MergeFrom(const TbsCrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast_certificate.TbsCrl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  revoked_public_key_hashes_.MergeFrom(from.revoked_public_key_hashes_);
  revoked_serial_number_ranges_.MergeFrom(from.revoked_serial_number_ranges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_not_before_seconds()) {
      set_not_before_seconds(from.not_before_seconds());
    }
    if (from.has_not_after_seconds()) {
      set_not_after_seconds(from.not_after_seconds());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void TbsCrl::CopyFrom(const TbsCrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast_certificate.TbsCrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TbsCrl::IsInitialized() const {

  return true;
}

void TbsCrl::Swap(TbsCrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TbsCrl::InternalSwap(TbsCrl* other) {
  std::swap(version_, other->version_);
  std::swap(not_before_seconds_, other->not_before_seconds_);
  std::swap(not_after_seconds_, other->not_after_seconds_);
  revoked_public_key_hashes_.UnsafeArenaSwap(&other->revoked_public_key_hashes_);
  revoked_serial_number_ranges_.UnsafeArenaSwap(&other->revoked_serial_number_ranges_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TbsCrl::GetTypeName() const {
  return "cast_certificate.TbsCrl";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TbsCrl

// optional uint64 version = 1 [default = 0];
bool TbsCrl::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TbsCrl::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void TbsCrl::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void TbsCrl::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::uint64 TbsCrl::version() const {
  // @@protoc_insertion_point(field_get:cast_certificate.TbsCrl.version)
  return version_;
}
 void TbsCrl::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cast_certificate.TbsCrl.version)
}

// optional uint64 not_before_seconds = 2;
bool TbsCrl::has_not_before_seconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TbsCrl::set_has_not_before_seconds() {
  _has_bits_[0] |= 0x00000002u;
}
void TbsCrl::clear_has_not_before_seconds() {
  _has_bits_[0] &= ~0x00000002u;
}
void TbsCrl::clear_not_before_seconds() {
  not_before_seconds_ = GOOGLE_ULONGLONG(0);
  clear_has_not_before_seconds();
}
 ::google::protobuf::uint64 TbsCrl::not_before_seconds() const {
  // @@protoc_insertion_point(field_get:cast_certificate.TbsCrl.not_before_seconds)
  return not_before_seconds_;
}
 void TbsCrl::set_not_before_seconds(::google::protobuf::uint64 value) {
  set_has_not_before_seconds();
  not_before_seconds_ = value;
  // @@protoc_insertion_point(field_set:cast_certificate.TbsCrl.not_before_seconds)
}

// optional uint64 not_after_seconds = 3;
bool TbsCrl::has_not_after_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TbsCrl::set_has_not_after_seconds() {
  _has_bits_[0] |= 0x00000004u;
}
void TbsCrl::clear_has_not_after_seconds() {
  _has_bits_[0] &= ~0x00000004u;
}
void TbsCrl::clear_not_after_seconds() {
  not_after_seconds_ = GOOGLE_ULONGLONG(0);
  clear_has_not_after_seconds();
}
 ::google::protobuf::uint64 TbsCrl::not_after_seconds() const {
  // @@protoc_insertion_point(field_get:cast_certificate.TbsCrl.not_after_seconds)
  return not_after_seconds_;
}
 void TbsCrl::set_not_after_seconds(::google::protobuf::uint64 value) {
  set_has_not_after_seconds();
  not_after_seconds_ = value;
  // @@protoc_insertion_point(field_set:cast_certificate.TbsCrl.not_after_seconds)
}

// repeated bytes revoked_public_key_hashes = 4;
int TbsCrl::revoked_public_key_hashes_size() const {
  return revoked_public_key_hashes_.size();
}
void TbsCrl::clear_revoked_public_key_hashes() {
  revoked_public_key_hashes_.Clear();
}
 const ::std::string& TbsCrl::revoked_public_key_hashes(int index) const {
  // @@protoc_insertion_point(field_get:cast_certificate.TbsCrl.revoked_public_key_hashes)
  return revoked_public_key_hashes_.Get(index);
}
 ::std::string* TbsCrl::mutable_revoked_public_key_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:cast_certificate.TbsCrl.revoked_public_key_hashes)
  return revoked_public_key_hashes_.Mutable(index);
}
 void TbsCrl::set_revoked_public_key_hashes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cast_certificate.TbsCrl.revoked_public_key_hashes)
  revoked_public_key_hashes_.Mutable(index)->assign(value);
}
 void TbsCrl::set_revoked_public_key_hashes(int index, const char* value) {
  revoked_public_key_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cast_certificate.TbsCrl.revoked_public_key_hashes)
}
 void TbsCrl::set_revoked_public_key_hashes(int index, const void* value, size_t size) {
  revoked_public_key_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cast_certificate.TbsCrl.revoked_public_key_hashes)
}
 ::std::string* TbsCrl::add_revoked_public_key_hashes() {
  // @@protoc_insertion_point(field_add_mutable:cast_certificate.TbsCrl.revoked_public_key_hashes)
  return revoked_public_key_hashes_.Add();
}
 void TbsCrl::add_revoked_public_key_hashes(const ::std::string& value) {
  revoked_public_key_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cast_certificate.TbsCrl.revoked_public_key_hashes)
}
 void TbsCrl::add_revoked_public_key_hashes(const char* value) {
  revoked_public_key_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cast_certificate.TbsCrl.revoked_public_key_hashes)
}
 void TbsCrl::add_revoked_public_key_hashes(const void* value, size_t size) {
  revoked_public_key_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cast_certificate.TbsCrl.revoked_public_key_hashes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TbsCrl::revoked_public_key_hashes() const {
  // @@protoc_insertion_point(field_list:cast_certificate.TbsCrl.revoked_public_key_hashes)
  return revoked_public_key_hashes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TbsCrl::mutable_revoked_public_key_hashes() {
  // @@protoc_insertion_point(field_mutable_list:cast_certificate.TbsCrl.revoked_public_key_hashes)
  return &revoked_public_key_hashes_;
}

// repeated .cast_certificate.SerialNumberRange revoked_serial_number_ranges = 5;
int TbsCrl::revoked_serial_number_ranges_size() const {
  return revoked_serial_number_ranges_.size();
}
void TbsCrl::clear_revoked_serial_number_ranges() {
  revoked_serial_number_ranges_.Clear();
}
const ::cast_certificate::SerialNumberRange& TbsCrl::revoked_serial_number_ranges(int index) const {
  // @@protoc_insertion_point(field_get:cast_certificate.TbsCrl.revoked_serial_number_ranges)
  return revoked_serial_number_ranges_.Get(index);
}
::cast_certificate::SerialNumberRange* TbsCrl::mutable_revoked_serial_number_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:cast_certificate.TbsCrl.revoked_serial_number_ranges)
  return revoked_serial_number_ranges_.Mutable(index);
}
::cast_certificate::SerialNumberRange* TbsCrl::add_revoked_serial_number_ranges() {
  // @@protoc_insertion_point(field_add:cast_certificate.TbsCrl.revoked_serial_number_ranges)
  return revoked_serial_number_ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::cast_certificate::SerialNumberRange >*
TbsCrl::mutable_revoked_serial_number_ranges() {
  // @@protoc_insertion_point(field_mutable_list:cast_certificate.TbsCrl.revoked_serial_number_ranges)
  return &revoked_serial_number_ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::cast_certificate::SerialNumberRange >&
TbsCrl::revoked_serial_number_ranges() const {
  // @@protoc_insertion_point(field_list:cast_certificate.TbsCrl.revoked_serial_number_ranges)
  return revoked_serial_number_ranges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSerialNumberRange(
    SerialNumberRange* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerialNumberRange::kIssuerPublicKeyHashFieldNumber;
const int SerialNumberRange::kFirstSerialNumberFieldNumber;
const int SerialNumberRange::kLastSerialNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerialNumberRange::SerialNumberRange()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cast_certificate.SerialNumberRange)
}

void SerialNumberRange::InitAsDefaultInstance() {
}

SerialNumberRange::SerialNumberRange(const SerialNumberRange& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cast_certificate.SerialNumberRange)
}

void SerialNumberRange::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_public_key_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_serial_number_ = GOOGLE_ULONGLONG(0);
  last_serial_number_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SerialNumberRange::~SerialNumberRange() {
  // @@protoc_insertion_point(destructor:cast_certificate.SerialNumberRange)
  SharedDtor();
}

void SerialNumberRange::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_public_key_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SerialNumberRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SerialNumberRange& SerialNumberRange::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_revocation_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_revocation_2eproto();
#endif
  return *default_instance_;
}

SerialNumberRange* SerialNumberRange::default_instance_ = NULL;

SerialNumberRange* SerialNumberRange::New(::google::protobuf::Arena* arena) const {
  SerialNumberRange* n = new SerialNumberRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerialNumberRange::Clear() {
// @@protoc_insertion_point(message_clear_start:cast_certificate.SerialNumberRange)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SerialNumberRange, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SerialNumberRange*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(first_serial_number_, last_serial_number_);
    if (has_issuer_public_key_hash()) {
      issuer_public_key_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SerialNumberRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSerialNumberRange, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cast_certificate.SerialNumberRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes issuer_public_key_hash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_issuer_public_key_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_first_serial_number;
        break;
      }

      // optional uint64 first_serial_number = 2;
      case 2: {
        if (tag == 16) {
         parse_first_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_serial_number_)));
          set_has_first_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_serial_number;
        break;
      }

      // optional uint64 last_serial_number = 3;
      case 3: {
        if (tag == 24) {
         parse_last_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_serial_number_)));
          set_has_last_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cast_certificate.SerialNumberRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cast_certificate.SerialNumberRange)
  return false;
#undef DO_
}

void SerialNumberRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cast_certificate.SerialNumberRange)
  // optional bytes issuer_public_key_hash = 1;
  if (has_issuer_public_key_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->issuer_public_key_hash(), output);
  }

  // optional uint64 first_serial_number = 2;
  if (has_first_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->first_serial_number(), output);
  }

  // optional uint64 last_serial_number = 3;
  if (has_last_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_serial_number(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cast_certificate.SerialNumberRange)
}

int SerialNumberRange::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cast_certificate.SerialNumberRange)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes issuer_public_key_hash = 1;
    if (has_issuer_public_key_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->issuer_public_key_hash());
    }

    // optional uint64 first_serial_number = 2;
    if (has_first_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first_serial_number());
    }

    // optional uint64 last_serial_number = 3;
    if (has_last_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_serial_number());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerialNumberRange::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SerialNumberRange*>(&from));
}

void SerialNumberRange::MergeFrom(const SerialNumberRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast_certificate.SerialNumberRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuer_public_key_hash()) {
      set_has_issuer_public_key_hash();
      issuer_public_key_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_public_key_hash_);
    }
    if (from.has_first_serial_number()) {
      set_first_serial_number(from.first_serial_number());
    }
    if (from.has_last_serial_number()) {
      set_last_serial_number(from.last_serial_number());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SerialNumberRange::CopyFrom(const SerialNumberRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast_certificate.SerialNumberRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerialNumberRange::IsInitialized() const {

  return true;
}

void SerialNumberRange::Swap(SerialNumberRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerialNumberRange::InternalSwap(SerialNumberRange* other) {
  issuer_public_key_hash_.Swap(&other->issuer_public_key_hash_);
  std::swap(first_serial_number_, other->first_serial_number_);
  std::swap(last_serial_number_, other->last_serial_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SerialNumberRange::GetTypeName() const {
  return "cast_certificate.SerialNumberRange";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerialNumberRange

// optional bytes issuer_public_key_hash = 1;
bool SerialNumberRange::has_issuer_public_key_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SerialNumberRange::set_has_issuer_public_key_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void SerialNumberRange::clear_has_issuer_public_key_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void SerialNumberRange::clear_issuer_public_key_hash() {
  issuer_public_key_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuer_public_key_hash();
}
 const ::std::string& SerialNumberRange::issuer_public_key_hash() const {
  // @@protoc_insertion_point(field_get:cast_certificate.SerialNumberRange.issuer_public_key_hash)
  return issuer_public_key_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerialNumberRange::set_issuer_public_key_hash(const ::std::string& value) {
  set_has_issuer_public_key_hash();
  issuer_public_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_certificate.SerialNumberRange.issuer_public_key_hash)
}
 void SerialNumberRange::set_issuer_public_key_hash(const char* value) {
  set_has_issuer_public_key_hash();
  issuer_public_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_certificate.SerialNumberRange.issuer_public_key_hash)
}
 void SerialNumberRange::set_issuer_public_key_hash(const void* value, size_t size) {
  set_has_issuer_public_key_hash();
  issuer_public_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_certificate.SerialNumberRange.issuer_public_key_hash)
}
 ::std::string* SerialNumberRange::mutable_issuer_public_key_hash() {
  set_has_issuer_public_key_hash();
  // @@protoc_insertion_point(field_mutable:cast_certificate.SerialNumberRange.issuer_public_key_hash)
  return issuer_public_key_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SerialNumberRange::release_issuer_public_key_hash() {
  // @@protoc_insertion_point(field_release:cast_certificate.SerialNumberRange.issuer_public_key_hash)
  clear_has_issuer_public_key_hash();
  return issuer_public_key_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerialNumberRange::set_allocated_issuer_public_key_hash(::std::string* issuer_public_key_hash) {
  if (issuer_public_key_hash != NULL) {
    set_has_issuer_public_key_hash();
  } else {
    clear_has_issuer_public_key_hash();
  }
  issuer_public_key_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer_public_key_hash);
  // @@protoc_insertion_point(field_set_allocated:cast_certificate.SerialNumberRange.issuer_public_key_hash)
}

// optional uint64 first_serial_number = 2;
bool SerialNumberRange::has_first_serial_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SerialNumberRange::set_has_first_serial_number() {
  _has_bits_[0] |= 0x00000002u;
}
void SerialNumberRange::clear_has_first_serial_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void SerialNumberRange::clear_first_serial_number() {
  first_serial_number_ = GOOGLE_ULONGLONG(0);
  clear_has_first_serial_number();
}
 ::google::protobuf::uint64 SerialNumberRange::first_serial_number() const {
  // @@protoc_insertion_point(field_get:cast_certificate.SerialNumberRange.first_serial_number)
  return first_serial_number_;
}
 void SerialNumberRange::set_first_serial_number(::google::protobuf::uint64 value) {
  set_has_first_serial_number();
  first_serial_number_ = value;
  // @@protoc_insertion_point(field_set:cast_certificate.SerialNumberRange.first_serial_number)
}

// optional uint64 last_serial_number = 3;
bool SerialNumberRange::has_last_serial_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SerialNumberRange::set_has_last_serial_number() {
  _has_bits_[0] |= 0x00000004u;
}
void SerialNumberRange::clear_has_last_serial_number() {
  _has_bits_[0] &= ~0x00000004u;
}
void SerialNumberRange::clear_last_serial_number() {
  last_serial_number_ = GOOGLE_ULONGLONG(0);
  clear_has_last_serial_number();
}
 ::google::protobuf::uint64 SerialNumberRange::last_serial_number() const {
  // @@protoc_insertion_point(field_get:cast_certificate.SerialNumberRange.last_serial_number)
  return last_serial_number_;
}
 void SerialNumberRange::set_last_serial_number(::google::protobuf::uint64 value) {
  set_has_last_serial_number();
  last_serial_number_ = value;
  // @@protoc_insertion_point(field_set:cast_certificate.SerialNumberRange.last_serial_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cast_certificate

// @@protoc_insertion_point(global_scope)
