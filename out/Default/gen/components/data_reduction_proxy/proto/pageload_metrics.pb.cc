// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pageload_metrics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pageload_metrics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace data_reduction_proxy {

void protobuf_ShutdownFile_pageload_5fmetrics_2eproto() {
  delete RecordPageloadMetricsRequest::default_instance_;
  delete PageloadMetrics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_pageload_5fmetrics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_pageload_5fmetrics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::data_reduction_proxy::protobuf_AddDesc_client_5fconfig_2eproto();
  RecordPageloadMetricsRequest::default_instance_ = new RecordPageloadMetricsRequest();
  PageloadMetrics::default_instance_ = new PageloadMetrics();
  RecordPageloadMetricsRequest::default_instance_->InitAsDefaultInstance();
  PageloadMetrics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pageload_5fmetrics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_pageload_5fmetrics_2eproto_once_);
void protobuf_AddDesc_pageload_5fmetrics_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_pageload_5fmetrics_2eproto_once_,
                 &protobuf_AddDesc_pageload_5fmetrics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pageload_5fmetrics_2eproto {
  StaticDescriptorInitializer_pageload_5fmetrics_2eproto() {
    protobuf_AddDesc_pageload_5fmetrics_2eproto();
  }
} static_descriptor_initializer_pageload_5fmetrics_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForRecordPageloadMetricsRequest(
    RecordPageloadMetricsRequest* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordPageloadMetricsRequest::kPageloadsFieldNumber;
const int RecordPageloadMetricsRequest::kMetricsSentTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordPageloadMetricsRequest::RecordPageloadMetricsRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_reduction_proxy.RecordPageloadMetricsRequest)
}

void RecordPageloadMetricsRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  metrics_sent_time_ = const_cast< ::data_reduction_proxy::Timestamp*>(
      ::data_reduction_proxy::Timestamp::internal_default_instance());
#else
  metrics_sent_time_ = const_cast< ::data_reduction_proxy::Timestamp*>(&::data_reduction_proxy::Timestamp::default_instance());
#endif
}

RecordPageloadMetricsRequest::RecordPageloadMetricsRequest(const RecordPageloadMetricsRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data_reduction_proxy.RecordPageloadMetricsRequest)
}

void RecordPageloadMetricsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metrics_sent_time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordPageloadMetricsRequest::~RecordPageloadMetricsRequest() {
  // @@protoc_insertion_point(destructor:data_reduction_proxy.RecordPageloadMetricsRequest)
  SharedDtor();
}

void RecordPageloadMetricsRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete metrics_sent_time_;
  }
}

void RecordPageloadMetricsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RecordPageloadMetricsRequest& RecordPageloadMetricsRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pageload_5fmetrics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pageload_5fmetrics_2eproto();
#endif
  return *default_instance_;
}

RecordPageloadMetricsRequest* RecordPageloadMetricsRequest::default_instance_ = NULL;

RecordPageloadMetricsRequest* RecordPageloadMetricsRequest::New(::google::protobuf::Arena* arena) const {
  RecordPageloadMetricsRequest* n = new RecordPageloadMetricsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordPageloadMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:data_reduction_proxy.RecordPageloadMetricsRequest)
  if (has_metrics_sent_time()) {
    if (metrics_sent_time_ != NULL) metrics_sent_time_->::data_reduction_proxy::Timestamp::Clear();
  }
  pageloads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RecordPageloadMetricsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRecordPageloadMetricsRequest, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:data_reduction_proxy.RecordPageloadMetricsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .data_reduction_proxy.PageloadMetrics pageloads = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pageloads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pageloads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pageloads;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_metrics_sent_time;
        break;
      }

      // optional .data_reduction_proxy.Timestamp metrics_sent_time = 2;
      case 2: {
        if (tag == 18) {
         parse_metrics_sent_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metrics_sent_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data_reduction_proxy.RecordPageloadMetricsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data_reduction_proxy.RecordPageloadMetricsRequest)
  return false;
#undef DO_
}

void RecordPageloadMetricsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data_reduction_proxy.RecordPageloadMetricsRequest)
  // repeated .data_reduction_proxy.PageloadMetrics pageloads = 1;
  for (unsigned int i = 0, n = this->pageloads_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->pageloads(i), output);
  }

  // optional .data_reduction_proxy.Timestamp metrics_sent_time = 2;
  if (has_metrics_sent_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->metrics_sent_time_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:data_reduction_proxy.RecordPageloadMetricsRequest)
}

int RecordPageloadMetricsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data_reduction_proxy.RecordPageloadMetricsRequest)
  int total_size = 0;

  // optional .data_reduction_proxy.Timestamp metrics_sent_time = 2;
  if (has_metrics_sent_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metrics_sent_time_);
  }

  // repeated .data_reduction_proxy.PageloadMetrics pageloads = 1;
  total_size += 1 * this->pageloads_size();
  for (int i = 0; i < this->pageloads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pageloads(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordPageloadMetricsRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RecordPageloadMetricsRequest*>(&from));
}

void RecordPageloadMetricsRequest::MergeFrom(const RecordPageloadMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_reduction_proxy.RecordPageloadMetricsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  pageloads_.MergeFrom(from.pageloads_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_metrics_sent_time()) {
      mutable_metrics_sent_time()->::data_reduction_proxy::Timestamp::MergeFrom(from.metrics_sent_time());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void RecordPageloadMetricsRequest::CopyFrom(const RecordPageloadMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_reduction_proxy.RecordPageloadMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordPageloadMetricsRequest::IsInitialized() const {

  return true;
}

void RecordPageloadMetricsRequest::Swap(RecordPageloadMetricsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordPageloadMetricsRequest::InternalSwap(RecordPageloadMetricsRequest* other) {
  pageloads_.UnsafeArenaSwap(&other->pageloads_);
  std::swap(metrics_sent_time_, other->metrics_sent_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RecordPageloadMetricsRequest::GetTypeName() const {
  return "data_reduction_proxy.RecordPageloadMetricsRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordPageloadMetricsRequest

// repeated .data_reduction_proxy.PageloadMetrics pageloads = 1;
int RecordPageloadMetricsRequest::pageloads_size() const {
  return pageloads_.size();
}
void RecordPageloadMetricsRequest::clear_pageloads() {
  pageloads_.Clear();
}
const ::data_reduction_proxy::PageloadMetrics& RecordPageloadMetricsRequest::pageloads(int index) const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_.Get(index);
}
::data_reduction_proxy::PageloadMetrics* RecordPageloadMetricsRequest::mutable_pageloads(int index) {
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_.Mutable(index);
}
::data_reduction_proxy::PageloadMetrics* RecordPageloadMetricsRequest::add_pageloads() {
  // @@protoc_insertion_point(field_add:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_.Add();
}
::google::protobuf::RepeatedPtrField< ::data_reduction_proxy::PageloadMetrics >*
RecordPageloadMetricsRequest::mutable_pageloads() {
  // @@protoc_insertion_point(field_mutable_list:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return &pageloads_;
}
const ::google::protobuf::RepeatedPtrField< ::data_reduction_proxy::PageloadMetrics >&
RecordPageloadMetricsRequest::pageloads() const {
  // @@protoc_insertion_point(field_list:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_;
}

// optional .data_reduction_proxy.Timestamp metrics_sent_time = 2;
bool RecordPageloadMetricsRequest::has_metrics_sent_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecordPageloadMetricsRequest::set_has_metrics_sent_time() {
  _has_bits_[0] |= 0x00000002u;
}
void RecordPageloadMetricsRequest::clear_has_metrics_sent_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecordPageloadMetricsRequest::clear_metrics_sent_time() {
  if (metrics_sent_time_ != NULL) metrics_sent_time_->::data_reduction_proxy::Timestamp::Clear();
  clear_has_metrics_sent_time();
}
const ::data_reduction_proxy::Timestamp& RecordPageloadMetricsRequest::metrics_sent_time() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return metrics_sent_time_ != NULL ? *metrics_sent_time_ : *default_instance().metrics_sent_time_;
#else
  return metrics_sent_time_ != NULL ? *metrics_sent_time_ : *default_instance_->metrics_sent_time_;
#endif
}
::data_reduction_proxy::Timestamp* RecordPageloadMetricsRequest::mutable_metrics_sent_time() {
  set_has_metrics_sent_time();
  if (metrics_sent_time_ == NULL) {
    metrics_sent_time_ = new ::data_reduction_proxy::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
  return metrics_sent_time_;
}
::data_reduction_proxy::Timestamp* RecordPageloadMetricsRequest::release_metrics_sent_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
  clear_has_metrics_sent_time();
  ::data_reduction_proxy::Timestamp* temp = metrics_sent_time_;
  metrics_sent_time_ = NULL;
  return temp;
}
void RecordPageloadMetricsRequest::set_allocated_metrics_sent_time(::data_reduction_proxy::Timestamp* metrics_sent_time) {
  delete metrics_sent_time_;
  metrics_sent_time_ = metrics_sent_time;
  if (metrics_sent_time) {
    set_has_metrics_sent_time();
  } else {
    clear_has_metrics_sent_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPageloadMetrics(
    PageloadMetrics* ptr) {
  return ptr->mutable_unknown_fields();
}

bool PageloadMetrics_EffectiveConnectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EFFECTIVE_CONNECTION_TYPE_UNKNOWN;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EFFECTIVE_CONNECTION_TYPE_OFFLINE;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EFFECTIVE_CONNECTION_TYPE_SLOW_2G;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EFFECTIVE_CONNECTION_TYPE_2G;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EFFECTIVE_CONNECTION_TYPE_3G;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EFFECTIVE_CONNECTION_TYPE_4G;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EffectiveConnectionType_MIN;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EffectiveConnectionType_MAX;
const int PageloadMetrics::EffectiveConnectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PageloadMetrics::kSessionKeyFieldNumber;
const int PageloadMetrics::kFirstRequestTimeFieldNumber;
const int PageloadMetrics::kLastRequestTimeFieldNumber;
const int PageloadMetrics::kFirstRequestUrlFieldNumber;
const int PageloadMetrics::kLastRequestUrlFieldNumber;
const int PageloadMetrics::kTimeToFirstContentfulPaintFieldNumber;
const int PageloadMetrics::kTimeToFirstImagePaintFieldNumber;
const int PageloadMetrics::kTimeToFirstByteFieldNumber;
const int PageloadMetrics::kPageLoadTimeFieldNumber;
const int PageloadMetrics::kOriginalPageSizeBytesFieldNumber;
const int PageloadMetrics::kCompressedPageSizeBytesFieldNumber;
const int PageloadMetrics::kEffectiveConnectionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PageloadMetrics::PageloadMetrics()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_reduction_proxy.PageloadMetrics)
}

void PageloadMetrics::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  first_request_time_ = const_cast< ::data_reduction_proxy::Timestamp*>(
      ::data_reduction_proxy::Timestamp::internal_default_instance());
#else
  first_request_time_ = const_cast< ::data_reduction_proxy::Timestamp*>(&::data_reduction_proxy::Timestamp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  last_request_time_ = const_cast< ::data_reduction_proxy::Timestamp*>(
      ::data_reduction_proxy::Timestamp::internal_default_instance());
#else
  last_request_time_ = const_cast< ::data_reduction_proxy::Timestamp*>(&::data_reduction_proxy::Timestamp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  time_to_first_contentful_paint_ = const_cast< ::data_reduction_proxy::Duration*>(
      ::data_reduction_proxy::Duration::internal_default_instance());
#else
  time_to_first_contentful_paint_ = const_cast< ::data_reduction_proxy::Duration*>(&::data_reduction_proxy::Duration::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  time_to_first_image_paint_ = const_cast< ::data_reduction_proxy::Duration*>(
      ::data_reduction_proxy::Duration::internal_default_instance());
#else
  time_to_first_image_paint_ = const_cast< ::data_reduction_proxy::Duration*>(&::data_reduction_proxy::Duration::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  time_to_first_byte_ = const_cast< ::data_reduction_proxy::Duration*>(
      ::data_reduction_proxy::Duration::internal_default_instance());
#else
  time_to_first_byte_ = const_cast< ::data_reduction_proxy::Duration*>(&::data_reduction_proxy::Duration::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  page_load_time_ = const_cast< ::data_reduction_proxy::Duration*>(
      ::data_reduction_proxy::Duration::internal_default_instance());
#else
  page_load_time_ = const_cast< ::data_reduction_proxy::Duration*>(&::data_reduction_proxy::Duration::default_instance());
#endif
}

PageloadMetrics::PageloadMetrics(const PageloadMetrics& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data_reduction_proxy.PageloadMetrics)
}

void PageloadMetrics::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_request_time_ = NULL;
  last_request_time_ = NULL;
  first_request_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_request_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_to_first_contentful_paint_ = NULL;
  time_to_first_image_paint_ = NULL;
  time_to_first_byte_ = NULL;
  page_load_time_ = NULL;
  original_page_size_bytes_ = 0;
  compressed_page_size_bytes_ = 0;
  effective_connection_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PageloadMetrics::~PageloadMetrics() {
  // @@protoc_insertion_point(destructor:data_reduction_proxy.PageloadMetrics)
  SharedDtor();
}

void PageloadMetrics::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_request_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_request_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete first_request_time_;
    delete last_request_time_;
    delete time_to_first_contentful_paint_;
    delete time_to_first_image_paint_;
    delete time_to_first_byte_;
    delete page_load_time_;
  }
}

void PageloadMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PageloadMetrics& PageloadMetrics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pageload_5fmetrics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pageload_5fmetrics_2eproto();
#endif
  return *default_instance_;
}

PageloadMetrics* PageloadMetrics::default_instance_ = NULL;

PageloadMetrics* PageloadMetrics::New(::google::protobuf::Arena* arena) const {
  PageloadMetrics* n = new PageloadMetrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PageloadMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:data_reduction_proxy.PageloadMetrics)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PageloadMetrics, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PageloadMetrics*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    if (has_session_key()) {
      session_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_first_request_time()) {
      if (first_request_time_ != NULL) first_request_time_->::data_reduction_proxy::Timestamp::Clear();
    }
    if (has_last_request_time()) {
      if (last_request_time_ != NULL) last_request_time_->::data_reduction_proxy::Timestamp::Clear();
    }
    if (has_first_request_url()) {
      first_request_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_last_request_url()) {
      last_request_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_time_to_first_contentful_paint()) {
      if (time_to_first_contentful_paint_ != NULL) time_to_first_contentful_paint_->::data_reduction_proxy::Duration::Clear();
    }
    if (has_time_to_first_image_paint()) {
      if (time_to_first_image_paint_ != NULL) time_to_first_image_paint_->::data_reduction_proxy::Duration::Clear();
    }
    if (has_time_to_first_byte()) {
      if (time_to_first_byte_ != NULL) time_to_first_byte_->::data_reduction_proxy::Duration::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(original_page_size_bytes_, effective_connection_type_);
    if (has_page_load_time()) {
      if (page_load_time_ != NULL) page_load_time_->::data_reduction_proxy::Duration::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PageloadMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPageloadMetrics, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:data_reduction_proxy.PageloadMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_first_request_time;
        break;
      }

      // optional .data_reduction_proxy.Timestamp first_request_time = 2;
      case 2: {
        if (tag == 18) {
         parse_first_request_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_request_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_last_request_time;
        break;
      }

      // optional .data_reduction_proxy.Timestamp last_request_time = 3;
      case 3: {
        if (tag == 26) {
         parse_last_request_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_request_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_first_request_url;
        break;
      }

      // optional string first_request_url = 4;
      case 4: {
        if (tag == 34) {
         parse_first_request_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_request_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_last_request_url;
        break;
      }

      // optional string last_request_url = 5;
      case 5: {
        if (tag == 42) {
         parse_last_request_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_request_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_time_to_first_contentful_paint;
        break;
      }

      // optional .data_reduction_proxy.Duration time_to_first_contentful_paint = 6;
      case 6: {
        if (tag == 50) {
         parse_time_to_first_contentful_paint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_to_first_contentful_paint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_time_to_first_image_paint;
        break;
      }

      // optional .data_reduction_proxy.Duration time_to_first_image_paint = 7;
      case 7: {
        if (tag == 58) {
         parse_time_to_first_image_paint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_to_first_image_paint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_time_to_first_byte;
        break;
      }

      // optional .data_reduction_proxy.Duration time_to_first_byte = 8;
      case 8: {
        if (tag == 66) {
         parse_time_to_first_byte:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_to_first_byte()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_page_load_time;
        break;
      }

      // optional .data_reduction_proxy.Duration page_load_time = 9;
      case 9: {
        if (tag == 74) {
         parse_page_load_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_page_load_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_original_page_size_bytes;
        break;
      }

      // optional int32 original_page_size_bytes = 10;
      case 10: {
        if (tag == 80) {
         parse_original_page_size_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_page_size_bytes_)));
          set_has_original_page_size_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_compressed_page_size_bytes;
        break;
      }

      // optional int32 compressed_page_size_bytes = 11;
      case 11: {
        if (tag == 88) {
         parse_compressed_page_size_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compressed_page_size_bytes_)));
          set_has_compressed_page_size_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_effective_connection_type;
        break;
      }

      // optional .data_reduction_proxy.PageloadMetrics.EffectiveConnectionType effective_connection_type = 12;
      case 12: {
        if (tag == 96) {
         parse_effective_connection_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType_IsValid(value)) {
            set_effective_connection_type(static_cast< ::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data_reduction_proxy.PageloadMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data_reduction_proxy.PageloadMetrics)
  return false;
#undef DO_
}

void PageloadMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data_reduction_proxy.PageloadMetrics)
  // optional string session_key = 1;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_key(), output);
  }

  // optional .data_reduction_proxy.Timestamp first_request_time = 2;
  if (has_first_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->first_request_time_, output);
  }

  // optional .data_reduction_proxy.Timestamp last_request_time = 3;
  if (has_last_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->last_request_time_, output);
  }

  // optional string first_request_url = 4;
  if (has_first_request_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->first_request_url(), output);
  }

  // optional string last_request_url = 5;
  if (has_last_request_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->last_request_url(), output);
  }

  // optional .data_reduction_proxy.Duration time_to_first_contentful_paint = 6;
  if (has_time_to_first_contentful_paint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->time_to_first_contentful_paint_, output);
  }

  // optional .data_reduction_proxy.Duration time_to_first_image_paint = 7;
  if (has_time_to_first_image_paint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->time_to_first_image_paint_, output);
  }

  // optional .data_reduction_proxy.Duration time_to_first_byte = 8;
  if (has_time_to_first_byte()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->time_to_first_byte_, output);
  }

  // optional .data_reduction_proxy.Duration page_load_time = 9;
  if (has_page_load_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->page_load_time_, output);
  }

  // optional int32 original_page_size_bytes = 10;
  if (has_original_page_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->original_page_size_bytes(), output);
  }

  // optional int32 compressed_page_size_bytes = 11;
  if (has_compressed_page_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->compressed_page_size_bytes(), output);
  }

  // optional .data_reduction_proxy.PageloadMetrics.EffectiveConnectionType effective_connection_type = 12;
  if (has_effective_connection_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->effective_connection_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:data_reduction_proxy.PageloadMetrics)
}

int PageloadMetrics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data_reduction_proxy.PageloadMetrics)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string session_key = 1;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_key());
    }

    // optional .data_reduction_proxy.Timestamp first_request_time = 2;
    if (has_first_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->first_request_time_);
    }

    // optional .data_reduction_proxy.Timestamp last_request_time = 3;
    if (has_last_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->last_request_time_);
    }

    // optional string first_request_url = 4;
    if (has_first_request_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_request_url());
    }

    // optional string last_request_url = 5;
    if (has_last_request_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_request_url());
    }

    // optional .data_reduction_proxy.Duration time_to_first_contentful_paint = 6;
    if (has_time_to_first_contentful_paint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_to_first_contentful_paint_);
    }

    // optional .data_reduction_proxy.Duration time_to_first_image_paint = 7;
    if (has_time_to_first_image_paint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_to_first_image_paint_);
    }

    // optional .data_reduction_proxy.Duration time_to_first_byte = 8;
    if (has_time_to_first_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_to_first_byte_);
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .data_reduction_proxy.Duration page_load_time = 9;
    if (has_page_load_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->page_load_time_);
    }

    // optional int32 original_page_size_bytes = 10;
    if (has_original_page_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->original_page_size_bytes());
    }

    // optional int32 compressed_page_size_bytes = 11;
    if (has_compressed_page_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compressed_page_size_bytes());
    }

    // optional .data_reduction_proxy.PageloadMetrics.EffectiveConnectionType effective_connection_type = 12;
    if (has_effective_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effective_connection_type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PageloadMetrics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PageloadMetrics*>(&from));
}

void PageloadMetrics::MergeFrom(const PageloadMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_reduction_proxy.PageloadMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_key()) {
      set_has_session_key();
      session_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_key_);
    }
    if (from.has_first_request_time()) {
      mutable_first_request_time()->::data_reduction_proxy::Timestamp::MergeFrom(from.first_request_time());
    }
    if (from.has_last_request_time()) {
      mutable_last_request_time()->::data_reduction_proxy::Timestamp::MergeFrom(from.last_request_time());
    }
    if (from.has_first_request_url()) {
      set_has_first_request_url();
      first_request_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_request_url_);
    }
    if (from.has_last_request_url()) {
      set_has_last_request_url();
      last_request_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_request_url_);
    }
    if (from.has_time_to_first_contentful_paint()) {
      mutable_time_to_first_contentful_paint()->::data_reduction_proxy::Duration::MergeFrom(from.time_to_first_contentful_paint());
    }
    if (from.has_time_to_first_image_paint()) {
      mutable_time_to_first_image_paint()->::data_reduction_proxy::Duration::MergeFrom(from.time_to_first_image_paint());
    }
    if (from.has_time_to_first_byte()) {
      mutable_time_to_first_byte()->::data_reduction_proxy::Duration::MergeFrom(from.time_to_first_byte());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_page_load_time()) {
      mutable_page_load_time()->::data_reduction_proxy::Duration::MergeFrom(from.page_load_time());
    }
    if (from.has_original_page_size_bytes()) {
      set_original_page_size_bytes(from.original_page_size_bytes());
    }
    if (from.has_compressed_page_size_bytes()) {
      set_compressed_page_size_bytes(from.compressed_page_size_bytes());
    }
    if (from.has_effective_connection_type()) {
      set_effective_connection_type(from.effective_connection_type());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PageloadMetrics::CopyFrom(const PageloadMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_reduction_proxy.PageloadMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageloadMetrics::IsInitialized() const {

  return true;
}

void PageloadMetrics::Swap(PageloadMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PageloadMetrics::InternalSwap(PageloadMetrics* other) {
  session_key_.Swap(&other->session_key_);
  std::swap(first_request_time_, other->first_request_time_);
  std::swap(last_request_time_, other->last_request_time_);
  first_request_url_.Swap(&other->first_request_url_);
  last_request_url_.Swap(&other->last_request_url_);
  std::swap(time_to_first_contentful_paint_, other->time_to_first_contentful_paint_);
  std::swap(time_to_first_image_paint_, other->time_to_first_image_paint_);
  std::swap(time_to_first_byte_, other->time_to_first_byte_);
  std::swap(page_load_time_, other->page_load_time_);
  std::swap(original_page_size_bytes_, other->original_page_size_bytes_);
  std::swap(compressed_page_size_bytes_, other->compressed_page_size_bytes_);
  std::swap(effective_connection_type_, other->effective_connection_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PageloadMetrics::GetTypeName() const {
  return "data_reduction_proxy.PageloadMetrics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PageloadMetrics

// optional string session_key = 1;
bool PageloadMetrics::has_session_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PageloadMetrics::set_has_session_key() {
  _has_bits_[0] |= 0x00000001u;
}
void PageloadMetrics::clear_has_session_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void PageloadMetrics::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_key();
}
 const ::std::string& PageloadMetrics::session_key() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.session_key)
  return session_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PageloadMetrics::set_session_key(const ::std::string& value) {
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.session_key)
}
 void PageloadMetrics::set_session_key(const char* value) {
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PageloadMetrics.session_key)
}
 void PageloadMetrics::set_session_key(const char* value, size_t size) {
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PageloadMetrics.session_key)
}
 ::std::string* PageloadMetrics::mutable_session_key() {
  set_has_session_key();
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.session_key)
  return session_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PageloadMetrics::release_session_key() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.session_key)
  clear_has_session_key();
  return session_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PageloadMetrics::set_allocated_session_key(::std::string* session_key) {
  if (session_key != NULL) {
    set_has_session_key();
  } else {
    clear_has_session_key();
  }
  session_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.session_key)
}

// optional .data_reduction_proxy.Timestamp first_request_time = 2;
bool PageloadMetrics::has_first_request_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PageloadMetrics::set_has_first_request_time() {
  _has_bits_[0] |= 0x00000002u;
}
void PageloadMetrics::clear_has_first_request_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void PageloadMetrics::clear_first_request_time() {
  if (first_request_time_ != NULL) first_request_time_->::data_reduction_proxy::Timestamp::Clear();
  clear_has_first_request_time();
}
const ::data_reduction_proxy::Timestamp& PageloadMetrics::first_request_time() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.first_request_time)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return first_request_time_ != NULL ? *first_request_time_ : *default_instance().first_request_time_;
#else
  return first_request_time_ != NULL ? *first_request_time_ : *default_instance_->first_request_time_;
#endif
}
::data_reduction_proxy::Timestamp* PageloadMetrics::mutable_first_request_time() {
  set_has_first_request_time();
  if (first_request_time_ == NULL) {
    first_request_time_ = new ::data_reduction_proxy::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.first_request_time)
  return first_request_time_;
}
::data_reduction_proxy::Timestamp* PageloadMetrics::release_first_request_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.first_request_time)
  clear_has_first_request_time();
  ::data_reduction_proxy::Timestamp* temp = first_request_time_;
  first_request_time_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_first_request_time(::data_reduction_proxy::Timestamp* first_request_time) {
  delete first_request_time_;
  first_request_time_ = first_request_time;
  if (first_request_time) {
    set_has_first_request_time();
  } else {
    clear_has_first_request_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.first_request_time)
}

// optional .data_reduction_proxy.Timestamp last_request_time = 3;
bool PageloadMetrics::has_last_request_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PageloadMetrics::set_has_last_request_time() {
  _has_bits_[0] |= 0x00000004u;
}
void PageloadMetrics::clear_has_last_request_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void PageloadMetrics::clear_last_request_time() {
  if (last_request_time_ != NULL) last_request_time_->::data_reduction_proxy::Timestamp::Clear();
  clear_has_last_request_time();
}
const ::data_reduction_proxy::Timestamp& PageloadMetrics::last_request_time() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.last_request_time)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return last_request_time_ != NULL ? *last_request_time_ : *default_instance().last_request_time_;
#else
  return last_request_time_ != NULL ? *last_request_time_ : *default_instance_->last_request_time_;
#endif
}
::data_reduction_proxy::Timestamp* PageloadMetrics::mutable_last_request_time() {
  set_has_last_request_time();
  if (last_request_time_ == NULL) {
    last_request_time_ = new ::data_reduction_proxy::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.last_request_time)
  return last_request_time_;
}
::data_reduction_proxy::Timestamp* PageloadMetrics::release_last_request_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.last_request_time)
  clear_has_last_request_time();
  ::data_reduction_proxy::Timestamp* temp = last_request_time_;
  last_request_time_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_last_request_time(::data_reduction_proxy::Timestamp* last_request_time) {
  delete last_request_time_;
  last_request_time_ = last_request_time;
  if (last_request_time) {
    set_has_last_request_time();
  } else {
    clear_has_last_request_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.last_request_time)
}

// optional string first_request_url = 4;
bool PageloadMetrics::has_first_request_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PageloadMetrics::set_has_first_request_url() {
  _has_bits_[0] |= 0x00000008u;
}
void PageloadMetrics::clear_has_first_request_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void PageloadMetrics::clear_first_request_url() {
  first_request_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_request_url();
}
 const ::std::string& PageloadMetrics::first_request_url() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.first_request_url)
  return first_request_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PageloadMetrics::set_first_request_url(const ::std::string& value) {
  set_has_first_request_url();
  first_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.first_request_url)
}
 void PageloadMetrics::set_first_request_url(const char* value) {
  set_has_first_request_url();
  first_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PageloadMetrics.first_request_url)
}
 void PageloadMetrics::set_first_request_url(const char* value, size_t size) {
  set_has_first_request_url();
  first_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PageloadMetrics.first_request_url)
}
 ::std::string* PageloadMetrics::mutable_first_request_url() {
  set_has_first_request_url();
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.first_request_url)
  return first_request_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PageloadMetrics::release_first_request_url() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.first_request_url)
  clear_has_first_request_url();
  return first_request_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PageloadMetrics::set_allocated_first_request_url(::std::string* first_request_url) {
  if (first_request_url != NULL) {
    set_has_first_request_url();
  } else {
    clear_has_first_request_url();
  }
  first_request_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_request_url);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.first_request_url)
}

// optional string last_request_url = 5;
bool PageloadMetrics::has_last_request_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PageloadMetrics::set_has_last_request_url() {
  _has_bits_[0] |= 0x00000010u;
}
void PageloadMetrics::clear_has_last_request_url() {
  _has_bits_[0] &= ~0x00000010u;
}
void PageloadMetrics::clear_last_request_url() {
  last_request_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_request_url();
}
 const ::std::string& PageloadMetrics::last_request_url() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.last_request_url)
  return last_request_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PageloadMetrics::set_last_request_url(const ::std::string& value) {
  set_has_last_request_url();
  last_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.last_request_url)
}
 void PageloadMetrics::set_last_request_url(const char* value) {
  set_has_last_request_url();
  last_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PageloadMetrics.last_request_url)
}
 void PageloadMetrics::set_last_request_url(const char* value, size_t size) {
  set_has_last_request_url();
  last_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PageloadMetrics.last_request_url)
}
 ::std::string* PageloadMetrics::mutable_last_request_url() {
  set_has_last_request_url();
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.last_request_url)
  return last_request_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PageloadMetrics::release_last_request_url() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.last_request_url)
  clear_has_last_request_url();
  return last_request_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PageloadMetrics::set_allocated_last_request_url(::std::string* last_request_url) {
  if (last_request_url != NULL) {
    set_has_last_request_url();
  } else {
    clear_has_last_request_url();
  }
  last_request_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_request_url);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.last_request_url)
}

// optional .data_reduction_proxy.Duration time_to_first_contentful_paint = 6;
bool PageloadMetrics::has_time_to_first_contentful_paint() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PageloadMetrics::set_has_time_to_first_contentful_paint() {
  _has_bits_[0] |= 0x00000020u;
}
void PageloadMetrics::clear_has_time_to_first_contentful_paint() {
  _has_bits_[0] &= ~0x00000020u;
}
void PageloadMetrics::clear_time_to_first_contentful_paint() {
  if (time_to_first_contentful_paint_ != NULL) time_to_first_contentful_paint_->::data_reduction_proxy::Duration::Clear();
  clear_has_time_to_first_contentful_paint();
}
const ::data_reduction_proxy::Duration& PageloadMetrics::time_to_first_contentful_paint() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return time_to_first_contentful_paint_ != NULL ? *time_to_first_contentful_paint_ : *default_instance().time_to_first_contentful_paint_;
#else
  return time_to_first_contentful_paint_ != NULL ? *time_to_first_contentful_paint_ : *default_instance_->time_to_first_contentful_paint_;
#endif
}
::data_reduction_proxy::Duration* PageloadMetrics::mutable_time_to_first_contentful_paint() {
  set_has_time_to_first_contentful_paint();
  if (time_to_first_contentful_paint_ == NULL) {
    time_to_first_contentful_paint_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
  return time_to_first_contentful_paint_;
}
::data_reduction_proxy::Duration* PageloadMetrics::release_time_to_first_contentful_paint() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
  clear_has_time_to_first_contentful_paint();
  ::data_reduction_proxy::Duration* temp = time_to_first_contentful_paint_;
  time_to_first_contentful_paint_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_time_to_first_contentful_paint(::data_reduction_proxy::Duration* time_to_first_contentful_paint) {
  delete time_to_first_contentful_paint_;
  time_to_first_contentful_paint_ = time_to_first_contentful_paint;
  if (time_to_first_contentful_paint) {
    set_has_time_to_first_contentful_paint();
  } else {
    clear_has_time_to_first_contentful_paint();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
}

// optional .data_reduction_proxy.Duration time_to_first_image_paint = 7;
bool PageloadMetrics::has_time_to_first_image_paint() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PageloadMetrics::set_has_time_to_first_image_paint() {
  _has_bits_[0] |= 0x00000040u;
}
void PageloadMetrics::clear_has_time_to_first_image_paint() {
  _has_bits_[0] &= ~0x00000040u;
}
void PageloadMetrics::clear_time_to_first_image_paint() {
  if (time_to_first_image_paint_ != NULL) time_to_first_image_paint_->::data_reduction_proxy::Duration::Clear();
  clear_has_time_to_first_image_paint();
}
const ::data_reduction_proxy::Duration& PageloadMetrics::time_to_first_image_paint() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return time_to_first_image_paint_ != NULL ? *time_to_first_image_paint_ : *default_instance().time_to_first_image_paint_;
#else
  return time_to_first_image_paint_ != NULL ? *time_to_first_image_paint_ : *default_instance_->time_to_first_image_paint_;
#endif
}
::data_reduction_proxy::Duration* PageloadMetrics::mutable_time_to_first_image_paint() {
  set_has_time_to_first_image_paint();
  if (time_to_first_image_paint_ == NULL) {
    time_to_first_image_paint_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
  return time_to_first_image_paint_;
}
::data_reduction_proxy::Duration* PageloadMetrics::release_time_to_first_image_paint() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
  clear_has_time_to_first_image_paint();
  ::data_reduction_proxy::Duration* temp = time_to_first_image_paint_;
  time_to_first_image_paint_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_time_to_first_image_paint(::data_reduction_proxy::Duration* time_to_first_image_paint) {
  delete time_to_first_image_paint_;
  time_to_first_image_paint_ = time_to_first_image_paint;
  if (time_to_first_image_paint) {
    set_has_time_to_first_image_paint();
  } else {
    clear_has_time_to_first_image_paint();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
}

// optional .data_reduction_proxy.Duration time_to_first_byte = 8;
bool PageloadMetrics::has_time_to_first_byte() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PageloadMetrics::set_has_time_to_first_byte() {
  _has_bits_[0] |= 0x00000080u;
}
void PageloadMetrics::clear_has_time_to_first_byte() {
  _has_bits_[0] &= ~0x00000080u;
}
void PageloadMetrics::clear_time_to_first_byte() {
  if (time_to_first_byte_ != NULL) time_to_first_byte_->::data_reduction_proxy::Duration::Clear();
  clear_has_time_to_first_byte();
}
const ::data_reduction_proxy::Duration& PageloadMetrics::time_to_first_byte() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return time_to_first_byte_ != NULL ? *time_to_first_byte_ : *default_instance().time_to_first_byte_;
#else
  return time_to_first_byte_ != NULL ? *time_to_first_byte_ : *default_instance_->time_to_first_byte_;
#endif
}
::data_reduction_proxy::Duration* PageloadMetrics::mutable_time_to_first_byte() {
  set_has_time_to_first_byte();
  if (time_to_first_byte_ == NULL) {
    time_to_first_byte_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
  return time_to_first_byte_;
}
::data_reduction_proxy::Duration* PageloadMetrics::release_time_to_first_byte() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
  clear_has_time_to_first_byte();
  ::data_reduction_proxy::Duration* temp = time_to_first_byte_;
  time_to_first_byte_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_time_to_first_byte(::data_reduction_proxy::Duration* time_to_first_byte) {
  delete time_to_first_byte_;
  time_to_first_byte_ = time_to_first_byte;
  if (time_to_first_byte) {
    set_has_time_to_first_byte();
  } else {
    clear_has_time_to_first_byte();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
}

// optional .data_reduction_proxy.Duration page_load_time = 9;
bool PageloadMetrics::has_page_load_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PageloadMetrics::set_has_page_load_time() {
  _has_bits_[0] |= 0x00000100u;
}
void PageloadMetrics::clear_has_page_load_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void PageloadMetrics::clear_page_load_time() {
  if (page_load_time_ != NULL) page_load_time_->::data_reduction_proxy::Duration::Clear();
  clear_has_page_load_time();
}
const ::data_reduction_proxy::Duration& PageloadMetrics::page_load_time() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.page_load_time)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return page_load_time_ != NULL ? *page_load_time_ : *default_instance().page_load_time_;
#else
  return page_load_time_ != NULL ? *page_load_time_ : *default_instance_->page_load_time_;
#endif
}
::data_reduction_proxy::Duration* PageloadMetrics::mutable_page_load_time() {
  set_has_page_load_time();
  if (page_load_time_ == NULL) {
    page_load_time_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.page_load_time)
  return page_load_time_;
}
::data_reduction_proxy::Duration* PageloadMetrics::release_page_load_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.page_load_time)
  clear_has_page_load_time();
  ::data_reduction_proxy::Duration* temp = page_load_time_;
  page_load_time_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_page_load_time(::data_reduction_proxy::Duration* page_load_time) {
  delete page_load_time_;
  page_load_time_ = page_load_time;
  if (page_load_time) {
    set_has_page_load_time();
  } else {
    clear_has_page_load_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.page_load_time)
}

// optional int32 original_page_size_bytes = 10;
bool PageloadMetrics::has_original_page_size_bytes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PageloadMetrics::set_has_original_page_size_bytes() {
  _has_bits_[0] |= 0x00000200u;
}
void PageloadMetrics::clear_has_original_page_size_bytes() {
  _has_bits_[0] &= ~0x00000200u;
}
void PageloadMetrics::clear_original_page_size_bytes() {
  original_page_size_bytes_ = 0;
  clear_has_original_page_size_bytes();
}
 ::google::protobuf::int32 PageloadMetrics::original_page_size_bytes() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.original_page_size_bytes)
  return original_page_size_bytes_;
}
 void PageloadMetrics::set_original_page_size_bytes(::google::protobuf::int32 value) {
  set_has_original_page_size_bytes();
  original_page_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.original_page_size_bytes)
}

// optional int32 compressed_page_size_bytes = 11;
bool PageloadMetrics::has_compressed_page_size_bytes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PageloadMetrics::set_has_compressed_page_size_bytes() {
  _has_bits_[0] |= 0x00000400u;
}
void PageloadMetrics::clear_has_compressed_page_size_bytes() {
  _has_bits_[0] &= ~0x00000400u;
}
void PageloadMetrics::clear_compressed_page_size_bytes() {
  compressed_page_size_bytes_ = 0;
  clear_has_compressed_page_size_bytes();
}
 ::google::protobuf::int32 PageloadMetrics::compressed_page_size_bytes() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.compressed_page_size_bytes)
  return compressed_page_size_bytes_;
}
 void PageloadMetrics::set_compressed_page_size_bytes(::google::protobuf::int32 value) {
  set_has_compressed_page_size_bytes();
  compressed_page_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.compressed_page_size_bytes)
}

// optional .data_reduction_proxy.PageloadMetrics.EffectiveConnectionType effective_connection_type = 12;
bool PageloadMetrics::has_effective_connection_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PageloadMetrics::set_has_effective_connection_type() {
  _has_bits_[0] |= 0x00000800u;
}
void PageloadMetrics::clear_has_effective_connection_type() {
  _has_bits_[0] &= ~0x00000800u;
}
void PageloadMetrics::clear_effective_connection_type() {
  effective_connection_type_ = 0;
  clear_has_effective_connection_type();
}
 ::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType PageloadMetrics::effective_connection_type() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.effective_connection_type)
  return static_cast< ::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType >(effective_connection_type_);
}
 void PageloadMetrics::set_effective_connection_type(::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType value) {
  assert(::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType_IsValid(value));
  set_has_effective_connection_type();
  effective_connection_type_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.effective_connection_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace data_reduction_proxy

// @@protoc_insertion_point(global_scope)
