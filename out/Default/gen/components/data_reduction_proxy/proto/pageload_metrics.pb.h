// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pageload_metrics.proto

#ifndef PROTOBUF_pageload_5fmetrics_2eproto__INCLUDED
#define PROTOBUF_pageload_5fmetrics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
#include "client_config.pb.h"
// @@protoc_insertion_point(includes)

namespace data_reduction_proxy {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_pageload_5fmetrics_2eproto();
void protobuf_AssignDesc_pageload_5fmetrics_2eproto();
void protobuf_ShutdownFile_pageload_5fmetrics_2eproto();

class PageloadMetrics;
class RecordPageloadMetricsRequest;

enum PageloadMetrics_EffectiveConnectionType {
  PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_UNKNOWN = 0,
  PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_OFFLINE = 1,
  PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_SLOW_2G = 2,
  PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_2G = 3,
  PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_3G = 4,
  PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_4G = 5
};
bool PageloadMetrics_EffectiveConnectionType_IsValid(int value);
const PageloadMetrics_EffectiveConnectionType PageloadMetrics_EffectiveConnectionType_EffectiveConnectionType_MIN = PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_UNKNOWN;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics_EffectiveConnectionType_EffectiveConnectionType_MAX = PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_4G;
const int PageloadMetrics_EffectiveConnectionType_EffectiveConnectionType_ARRAYSIZE = PageloadMetrics_EffectiveConnectionType_EffectiveConnectionType_MAX + 1;

// ===================================================================

class RecordPageloadMetricsRequest : public ::google::protobuf::MessageLite {
 public:
  RecordPageloadMetricsRequest();
  virtual ~RecordPageloadMetricsRequest();

  RecordPageloadMetricsRequest(const RecordPageloadMetricsRequest& from);

  inline RecordPageloadMetricsRequest& operator=(const RecordPageloadMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const RecordPageloadMetricsRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RecordPageloadMetricsRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(RecordPageloadMetricsRequest* other);

  // implements Message ----------------------------------------------

  inline RecordPageloadMetricsRequest* New() const { return New(NULL); }

  RecordPageloadMetricsRequest* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RecordPageloadMetricsRequest& from);
  void MergeFrom(const RecordPageloadMetricsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecordPageloadMetricsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .data_reduction_proxy.PageloadMetrics pageloads = 1;
  int pageloads_size() const;
  void clear_pageloads();
  static const int kPageloadsFieldNumber = 1;
  const ::data_reduction_proxy::PageloadMetrics& pageloads(int index) const;
  ::data_reduction_proxy::PageloadMetrics* mutable_pageloads(int index);
  ::data_reduction_proxy::PageloadMetrics* add_pageloads();
  ::google::protobuf::RepeatedPtrField< ::data_reduction_proxy::PageloadMetrics >*
      mutable_pageloads();
  const ::google::protobuf::RepeatedPtrField< ::data_reduction_proxy::PageloadMetrics >&
      pageloads() const;

  // optional .data_reduction_proxy.Timestamp metrics_sent_time = 2;
  bool has_metrics_sent_time() const;
  void clear_metrics_sent_time();
  static const int kMetricsSentTimeFieldNumber = 2;
  const ::data_reduction_proxy::Timestamp& metrics_sent_time() const;
  ::data_reduction_proxy::Timestamp* mutable_metrics_sent_time();
  ::data_reduction_proxy::Timestamp* release_metrics_sent_time();
  void set_allocated_metrics_sent_time(::data_reduction_proxy::Timestamp* metrics_sent_time);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.RecordPageloadMetricsRequest)
 private:
  inline void set_has_metrics_sent_time();
  inline void clear_has_metrics_sent_time();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::data_reduction_proxy::PageloadMetrics > pageloads_;
  ::data_reduction_proxy::Timestamp* metrics_sent_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_pageload_5fmetrics_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_pageload_5fmetrics_2eproto();
  #endif
  friend void protobuf_AssignDesc_pageload_5fmetrics_2eproto();
  friend void protobuf_ShutdownFile_pageload_5fmetrics_2eproto();

  void InitAsDefaultInstance();
  static RecordPageloadMetricsRequest* default_instance_;
};
// -------------------------------------------------------------------

class PageloadMetrics : public ::google::protobuf::MessageLite {
 public:
  PageloadMetrics();
  virtual ~PageloadMetrics();

  PageloadMetrics(const PageloadMetrics& from);

  inline PageloadMetrics& operator=(const PageloadMetrics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const PageloadMetrics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PageloadMetrics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PageloadMetrics* other);

  // implements Message ----------------------------------------------

  inline PageloadMetrics* New() const { return New(NULL); }

  PageloadMetrics* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PageloadMetrics& from);
  void MergeFrom(const PageloadMetrics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PageloadMetrics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef PageloadMetrics_EffectiveConnectionType EffectiveConnectionType;
  static const EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_UNKNOWN =
    PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_UNKNOWN;
  static const EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_OFFLINE =
    PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_OFFLINE;
  static const EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_SLOW_2G =
    PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_SLOW_2G;
  static const EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_2G =
    PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_2G;
  static const EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_3G =
    PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_3G;
  static const EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_4G =
    PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_4G;
  static inline bool EffectiveConnectionType_IsValid(int value) {
    return PageloadMetrics_EffectiveConnectionType_IsValid(value);
  }
  static const EffectiveConnectionType EffectiveConnectionType_MIN =
    PageloadMetrics_EffectiveConnectionType_EffectiveConnectionType_MIN;
  static const EffectiveConnectionType EffectiveConnectionType_MAX =
    PageloadMetrics_EffectiveConnectionType_EffectiveConnectionType_MAX;
  static const int EffectiveConnectionType_ARRAYSIZE =
    PageloadMetrics_EffectiveConnectionType_EffectiveConnectionType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string session_key = 1;
  bool has_session_key() const;
  void clear_session_key();
  static const int kSessionKeyFieldNumber = 1;
  const ::std::string& session_key() const;
  void set_session_key(const ::std::string& value);
  void set_session_key(const char* value);
  void set_session_key(const char* value, size_t size);
  ::std::string* mutable_session_key();
  ::std::string* release_session_key();
  void set_allocated_session_key(::std::string* session_key);

  // optional .data_reduction_proxy.Timestamp first_request_time = 2;
  bool has_first_request_time() const;
  void clear_first_request_time();
  static const int kFirstRequestTimeFieldNumber = 2;
  const ::data_reduction_proxy::Timestamp& first_request_time() const;
  ::data_reduction_proxy::Timestamp* mutable_first_request_time();
  ::data_reduction_proxy::Timestamp* release_first_request_time();
  void set_allocated_first_request_time(::data_reduction_proxy::Timestamp* first_request_time);

  // optional .data_reduction_proxy.Timestamp last_request_time = 3;
  bool has_last_request_time() const;
  void clear_last_request_time();
  static const int kLastRequestTimeFieldNumber = 3;
  const ::data_reduction_proxy::Timestamp& last_request_time() const;
  ::data_reduction_proxy::Timestamp* mutable_last_request_time();
  ::data_reduction_proxy::Timestamp* release_last_request_time();
  void set_allocated_last_request_time(::data_reduction_proxy::Timestamp* last_request_time);

  // optional string first_request_url = 4;
  bool has_first_request_url() const;
  void clear_first_request_url();
  static const int kFirstRequestUrlFieldNumber = 4;
  const ::std::string& first_request_url() const;
  void set_first_request_url(const ::std::string& value);
  void set_first_request_url(const char* value);
  void set_first_request_url(const char* value, size_t size);
  ::std::string* mutable_first_request_url();
  ::std::string* release_first_request_url();
  void set_allocated_first_request_url(::std::string* first_request_url);

  // optional string last_request_url = 5;
  bool has_last_request_url() const;
  void clear_last_request_url();
  static const int kLastRequestUrlFieldNumber = 5;
  const ::std::string& last_request_url() const;
  void set_last_request_url(const ::std::string& value);
  void set_last_request_url(const char* value);
  void set_last_request_url(const char* value, size_t size);
  ::std::string* mutable_last_request_url();
  ::std::string* release_last_request_url();
  void set_allocated_last_request_url(::std::string* last_request_url);

  // optional .data_reduction_proxy.Duration time_to_first_contentful_paint = 6;
  bool has_time_to_first_contentful_paint() const;
  void clear_time_to_first_contentful_paint();
  static const int kTimeToFirstContentfulPaintFieldNumber = 6;
  const ::data_reduction_proxy::Duration& time_to_first_contentful_paint() const;
  ::data_reduction_proxy::Duration* mutable_time_to_first_contentful_paint();
  ::data_reduction_proxy::Duration* release_time_to_first_contentful_paint();
  void set_allocated_time_to_first_contentful_paint(::data_reduction_proxy::Duration* time_to_first_contentful_paint);

  // optional .data_reduction_proxy.Duration time_to_first_image_paint = 7;
  bool has_time_to_first_image_paint() const;
  void clear_time_to_first_image_paint();
  static const int kTimeToFirstImagePaintFieldNumber = 7;
  const ::data_reduction_proxy::Duration& time_to_first_image_paint() const;
  ::data_reduction_proxy::Duration* mutable_time_to_first_image_paint();
  ::data_reduction_proxy::Duration* release_time_to_first_image_paint();
  void set_allocated_time_to_first_image_paint(::data_reduction_proxy::Duration* time_to_first_image_paint);

  // optional .data_reduction_proxy.Duration time_to_first_byte = 8;
  bool has_time_to_first_byte() const;
  void clear_time_to_first_byte();
  static const int kTimeToFirstByteFieldNumber = 8;
  const ::data_reduction_proxy::Duration& time_to_first_byte() const;
  ::data_reduction_proxy::Duration* mutable_time_to_first_byte();
  ::data_reduction_proxy::Duration* release_time_to_first_byte();
  void set_allocated_time_to_first_byte(::data_reduction_proxy::Duration* time_to_first_byte);

  // optional .data_reduction_proxy.Duration page_load_time = 9;
  bool has_page_load_time() const;
  void clear_page_load_time();
  static const int kPageLoadTimeFieldNumber = 9;
  const ::data_reduction_proxy::Duration& page_load_time() const;
  ::data_reduction_proxy::Duration* mutable_page_load_time();
  ::data_reduction_proxy::Duration* release_page_load_time();
  void set_allocated_page_load_time(::data_reduction_proxy::Duration* page_load_time);

  // optional int32 original_page_size_bytes = 10;
  bool has_original_page_size_bytes() const;
  void clear_original_page_size_bytes();
  static const int kOriginalPageSizeBytesFieldNumber = 10;
  ::google::protobuf::int32 original_page_size_bytes() const;
  void set_original_page_size_bytes(::google::protobuf::int32 value);

  // optional int32 compressed_page_size_bytes = 11;
  bool has_compressed_page_size_bytes() const;
  void clear_compressed_page_size_bytes();
  static const int kCompressedPageSizeBytesFieldNumber = 11;
  ::google::protobuf::int32 compressed_page_size_bytes() const;
  void set_compressed_page_size_bytes(::google::protobuf::int32 value);

  // optional .data_reduction_proxy.PageloadMetrics.EffectiveConnectionType effective_connection_type = 12;
  bool has_effective_connection_type() const;
  void clear_effective_connection_type();
  static const int kEffectiveConnectionTypeFieldNumber = 12;
  ::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType effective_connection_type() const;
  void set_effective_connection_type(::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.PageloadMetrics)
 private:
  inline void set_has_session_key();
  inline void clear_has_session_key();
  inline void set_has_first_request_time();
  inline void clear_has_first_request_time();
  inline void set_has_last_request_time();
  inline void clear_has_last_request_time();
  inline void set_has_first_request_url();
  inline void clear_has_first_request_url();
  inline void set_has_last_request_url();
  inline void clear_has_last_request_url();
  inline void set_has_time_to_first_contentful_paint();
  inline void clear_has_time_to_first_contentful_paint();
  inline void set_has_time_to_first_image_paint();
  inline void clear_has_time_to_first_image_paint();
  inline void set_has_time_to_first_byte();
  inline void clear_has_time_to_first_byte();
  inline void set_has_page_load_time();
  inline void clear_has_page_load_time();
  inline void set_has_original_page_size_bytes();
  inline void clear_has_original_page_size_bytes();
  inline void set_has_compressed_page_size_bytes();
  inline void clear_has_compressed_page_size_bytes();
  inline void set_has_effective_connection_type();
  inline void clear_has_effective_connection_type();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr session_key_;
  ::data_reduction_proxy::Timestamp* first_request_time_;
  ::data_reduction_proxy::Timestamp* last_request_time_;
  ::google::protobuf::internal::ArenaStringPtr first_request_url_;
  ::google::protobuf::internal::ArenaStringPtr last_request_url_;
  ::data_reduction_proxy::Duration* time_to_first_contentful_paint_;
  ::data_reduction_proxy::Duration* time_to_first_image_paint_;
  ::data_reduction_proxy::Duration* time_to_first_byte_;
  ::data_reduction_proxy::Duration* page_load_time_;
  ::google::protobuf::int32 original_page_size_bytes_;
  ::google::protobuf::int32 compressed_page_size_bytes_;
  int effective_connection_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_pageload_5fmetrics_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_pageload_5fmetrics_2eproto();
  #endif
  friend void protobuf_AssignDesc_pageload_5fmetrics_2eproto();
  friend void protobuf_ShutdownFile_pageload_5fmetrics_2eproto();

  void InitAsDefaultInstance();
  static PageloadMetrics* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordPageloadMetricsRequest

// repeated .data_reduction_proxy.PageloadMetrics pageloads = 1;
inline int RecordPageloadMetricsRequest::pageloads_size() const {
  return pageloads_.size();
}
inline void RecordPageloadMetricsRequest::clear_pageloads() {
  pageloads_.Clear();
}
inline const ::data_reduction_proxy::PageloadMetrics& RecordPageloadMetricsRequest::pageloads(int index) const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_.Get(index);
}
inline ::data_reduction_proxy::PageloadMetrics* RecordPageloadMetricsRequest::mutable_pageloads(int index) {
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_.Mutable(index);
}
inline ::data_reduction_proxy::PageloadMetrics* RecordPageloadMetricsRequest::add_pageloads() {
  // @@protoc_insertion_point(field_add:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::data_reduction_proxy::PageloadMetrics >*
RecordPageloadMetricsRequest::mutable_pageloads() {
  // @@protoc_insertion_point(field_mutable_list:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return &pageloads_;
}
inline const ::google::protobuf::RepeatedPtrField< ::data_reduction_proxy::PageloadMetrics >&
RecordPageloadMetricsRequest::pageloads() const {
  // @@protoc_insertion_point(field_list:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_;
}

// optional .data_reduction_proxy.Timestamp metrics_sent_time = 2;
inline bool RecordPageloadMetricsRequest::has_metrics_sent_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordPageloadMetricsRequest::set_has_metrics_sent_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordPageloadMetricsRequest::clear_has_metrics_sent_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordPageloadMetricsRequest::clear_metrics_sent_time() {
  if (metrics_sent_time_ != NULL) metrics_sent_time_->::data_reduction_proxy::Timestamp::Clear();
  clear_has_metrics_sent_time();
}
inline const ::data_reduction_proxy::Timestamp& RecordPageloadMetricsRequest::metrics_sent_time() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return metrics_sent_time_ != NULL ? *metrics_sent_time_ : *default_instance().metrics_sent_time_;
#else
  return metrics_sent_time_ != NULL ? *metrics_sent_time_ : *default_instance_->metrics_sent_time_;
#endif
}
inline ::data_reduction_proxy::Timestamp* RecordPageloadMetricsRequest::mutable_metrics_sent_time() {
  set_has_metrics_sent_time();
  if (metrics_sent_time_ == NULL) {
    metrics_sent_time_ = new ::data_reduction_proxy::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
  return metrics_sent_time_;
}
inline ::data_reduction_proxy::Timestamp* RecordPageloadMetricsRequest::release_metrics_sent_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
  clear_has_metrics_sent_time();
  ::data_reduction_proxy::Timestamp* temp = metrics_sent_time_;
  metrics_sent_time_ = NULL;
  return temp;
}
inline void RecordPageloadMetricsRequest::set_allocated_metrics_sent_time(::data_reduction_proxy::Timestamp* metrics_sent_time) {
  delete metrics_sent_time_;
  metrics_sent_time_ = metrics_sent_time;
  if (metrics_sent_time) {
    set_has_metrics_sent_time();
  } else {
    clear_has_metrics_sent_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
}

// -------------------------------------------------------------------

// PageloadMetrics

// optional string session_key = 1;
inline bool PageloadMetrics::has_session_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageloadMetrics::set_has_session_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PageloadMetrics::clear_has_session_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PageloadMetrics::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_key();
}
inline const ::std::string& PageloadMetrics::session_key() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.session_key)
  return session_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageloadMetrics::set_session_key(const ::std::string& value) {
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.session_key)
}
inline void PageloadMetrics::set_session_key(const char* value) {
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PageloadMetrics.session_key)
}
inline void PageloadMetrics::set_session_key(const char* value, size_t size) {
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PageloadMetrics.session_key)
}
inline ::std::string* PageloadMetrics::mutable_session_key() {
  set_has_session_key();
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.session_key)
  return session_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PageloadMetrics::release_session_key() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.session_key)
  clear_has_session_key();
  return session_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageloadMetrics::set_allocated_session_key(::std::string* session_key) {
  if (session_key != NULL) {
    set_has_session_key();
  } else {
    clear_has_session_key();
  }
  session_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.session_key)
}

// optional .data_reduction_proxy.Timestamp first_request_time = 2;
inline bool PageloadMetrics::has_first_request_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PageloadMetrics::set_has_first_request_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PageloadMetrics::clear_has_first_request_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PageloadMetrics::clear_first_request_time() {
  if (first_request_time_ != NULL) first_request_time_->::data_reduction_proxy::Timestamp::Clear();
  clear_has_first_request_time();
}
inline const ::data_reduction_proxy::Timestamp& PageloadMetrics::first_request_time() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.first_request_time)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return first_request_time_ != NULL ? *first_request_time_ : *default_instance().first_request_time_;
#else
  return first_request_time_ != NULL ? *first_request_time_ : *default_instance_->first_request_time_;
#endif
}
inline ::data_reduction_proxy::Timestamp* PageloadMetrics::mutable_first_request_time() {
  set_has_first_request_time();
  if (first_request_time_ == NULL) {
    first_request_time_ = new ::data_reduction_proxy::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.first_request_time)
  return first_request_time_;
}
inline ::data_reduction_proxy::Timestamp* PageloadMetrics::release_first_request_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.first_request_time)
  clear_has_first_request_time();
  ::data_reduction_proxy::Timestamp* temp = first_request_time_;
  first_request_time_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_first_request_time(::data_reduction_proxy::Timestamp* first_request_time) {
  delete first_request_time_;
  first_request_time_ = first_request_time;
  if (first_request_time) {
    set_has_first_request_time();
  } else {
    clear_has_first_request_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.first_request_time)
}

// optional .data_reduction_proxy.Timestamp last_request_time = 3;
inline bool PageloadMetrics::has_last_request_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PageloadMetrics::set_has_last_request_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PageloadMetrics::clear_has_last_request_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PageloadMetrics::clear_last_request_time() {
  if (last_request_time_ != NULL) last_request_time_->::data_reduction_proxy::Timestamp::Clear();
  clear_has_last_request_time();
}
inline const ::data_reduction_proxy::Timestamp& PageloadMetrics::last_request_time() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.last_request_time)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return last_request_time_ != NULL ? *last_request_time_ : *default_instance().last_request_time_;
#else
  return last_request_time_ != NULL ? *last_request_time_ : *default_instance_->last_request_time_;
#endif
}
inline ::data_reduction_proxy::Timestamp* PageloadMetrics::mutable_last_request_time() {
  set_has_last_request_time();
  if (last_request_time_ == NULL) {
    last_request_time_ = new ::data_reduction_proxy::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.last_request_time)
  return last_request_time_;
}
inline ::data_reduction_proxy::Timestamp* PageloadMetrics::release_last_request_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.last_request_time)
  clear_has_last_request_time();
  ::data_reduction_proxy::Timestamp* temp = last_request_time_;
  last_request_time_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_last_request_time(::data_reduction_proxy::Timestamp* last_request_time) {
  delete last_request_time_;
  last_request_time_ = last_request_time;
  if (last_request_time) {
    set_has_last_request_time();
  } else {
    clear_has_last_request_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.last_request_time)
}

// optional string first_request_url = 4;
inline bool PageloadMetrics::has_first_request_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PageloadMetrics::set_has_first_request_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PageloadMetrics::clear_has_first_request_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PageloadMetrics::clear_first_request_url() {
  first_request_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_request_url();
}
inline const ::std::string& PageloadMetrics::first_request_url() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.first_request_url)
  return first_request_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageloadMetrics::set_first_request_url(const ::std::string& value) {
  set_has_first_request_url();
  first_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.first_request_url)
}
inline void PageloadMetrics::set_first_request_url(const char* value) {
  set_has_first_request_url();
  first_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PageloadMetrics.first_request_url)
}
inline void PageloadMetrics::set_first_request_url(const char* value, size_t size) {
  set_has_first_request_url();
  first_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PageloadMetrics.first_request_url)
}
inline ::std::string* PageloadMetrics::mutable_first_request_url() {
  set_has_first_request_url();
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.first_request_url)
  return first_request_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PageloadMetrics::release_first_request_url() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.first_request_url)
  clear_has_first_request_url();
  return first_request_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageloadMetrics::set_allocated_first_request_url(::std::string* first_request_url) {
  if (first_request_url != NULL) {
    set_has_first_request_url();
  } else {
    clear_has_first_request_url();
  }
  first_request_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_request_url);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.first_request_url)
}

// optional string last_request_url = 5;
inline bool PageloadMetrics::has_last_request_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PageloadMetrics::set_has_last_request_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PageloadMetrics::clear_has_last_request_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PageloadMetrics::clear_last_request_url() {
  last_request_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_request_url();
}
inline const ::std::string& PageloadMetrics::last_request_url() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.last_request_url)
  return last_request_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageloadMetrics::set_last_request_url(const ::std::string& value) {
  set_has_last_request_url();
  last_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.last_request_url)
}
inline void PageloadMetrics::set_last_request_url(const char* value) {
  set_has_last_request_url();
  last_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PageloadMetrics.last_request_url)
}
inline void PageloadMetrics::set_last_request_url(const char* value, size_t size) {
  set_has_last_request_url();
  last_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PageloadMetrics.last_request_url)
}
inline ::std::string* PageloadMetrics::mutable_last_request_url() {
  set_has_last_request_url();
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.last_request_url)
  return last_request_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PageloadMetrics::release_last_request_url() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.last_request_url)
  clear_has_last_request_url();
  return last_request_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageloadMetrics::set_allocated_last_request_url(::std::string* last_request_url) {
  if (last_request_url != NULL) {
    set_has_last_request_url();
  } else {
    clear_has_last_request_url();
  }
  last_request_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_request_url);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.last_request_url)
}

// optional .data_reduction_proxy.Duration time_to_first_contentful_paint = 6;
inline bool PageloadMetrics::has_time_to_first_contentful_paint() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PageloadMetrics::set_has_time_to_first_contentful_paint() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PageloadMetrics::clear_has_time_to_first_contentful_paint() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PageloadMetrics::clear_time_to_first_contentful_paint() {
  if (time_to_first_contentful_paint_ != NULL) time_to_first_contentful_paint_->::data_reduction_proxy::Duration::Clear();
  clear_has_time_to_first_contentful_paint();
}
inline const ::data_reduction_proxy::Duration& PageloadMetrics::time_to_first_contentful_paint() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return time_to_first_contentful_paint_ != NULL ? *time_to_first_contentful_paint_ : *default_instance().time_to_first_contentful_paint_;
#else
  return time_to_first_contentful_paint_ != NULL ? *time_to_first_contentful_paint_ : *default_instance_->time_to_first_contentful_paint_;
#endif
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::mutable_time_to_first_contentful_paint() {
  set_has_time_to_first_contentful_paint();
  if (time_to_first_contentful_paint_ == NULL) {
    time_to_first_contentful_paint_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
  return time_to_first_contentful_paint_;
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::release_time_to_first_contentful_paint() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
  clear_has_time_to_first_contentful_paint();
  ::data_reduction_proxy::Duration* temp = time_to_first_contentful_paint_;
  time_to_first_contentful_paint_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_time_to_first_contentful_paint(::data_reduction_proxy::Duration* time_to_first_contentful_paint) {
  delete time_to_first_contentful_paint_;
  time_to_first_contentful_paint_ = time_to_first_contentful_paint;
  if (time_to_first_contentful_paint) {
    set_has_time_to_first_contentful_paint();
  } else {
    clear_has_time_to_first_contentful_paint();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
}

// optional .data_reduction_proxy.Duration time_to_first_image_paint = 7;
inline bool PageloadMetrics::has_time_to_first_image_paint() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PageloadMetrics::set_has_time_to_first_image_paint() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PageloadMetrics::clear_has_time_to_first_image_paint() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PageloadMetrics::clear_time_to_first_image_paint() {
  if (time_to_first_image_paint_ != NULL) time_to_first_image_paint_->::data_reduction_proxy::Duration::Clear();
  clear_has_time_to_first_image_paint();
}
inline const ::data_reduction_proxy::Duration& PageloadMetrics::time_to_first_image_paint() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return time_to_first_image_paint_ != NULL ? *time_to_first_image_paint_ : *default_instance().time_to_first_image_paint_;
#else
  return time_to_first_image_paint_ != NULL ? *time_to_first_image_paint_ : *default_instance_->time_to_first_image_paint_;
#endif
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::mutable_time_to_first_image_paint() {
  set_has_time_to_first_image_paint();
  if (time_to_first_image_paint_ == NULL) {
    time_to_first_image_paint_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
  return time_to_first_image_paint_;
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::release_time_to_first_image_paint() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
  clear_has_time_to_first_image_paint();
  ::data_reduction_proxy::Duration* temp = time_to_first_image_paint_;
  time_to_first_image_paint_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_time_to_first_image_paint(::data_reduction_proxy::Duration* time_to_first_image_paint) {
  delete time_to_first_image_paint_;
  time_to_first_image_paint_ = time_to_first_image_paint;
  if (time_to_first_image_paint) {
    set_has_time_to_first_image_paint();
  } else {
    clear_has_time_to_first_image_paint();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
}

// optional .data_reduction_proxy.Duration time_to_first_byte = 8;
inline bool PageloadMetrics::has_time_to_first_byte() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PageloadMetrics::set_has_time_to_first_byte() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PageloadMetrics::clear_has_time_to_first_byte() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PageloadMetrics::clear_time_to_first_byte() {
  if (time_to_first_byte_ != NULL) time_to_first_byte_->::data_reduction_proxy::Duration::Clear();
  clear_has_time_to_first_byte();
}
inline const ::data_reduction_proxy::Duration& PageloadMetrics::time_to_first_byte() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return time_to_first_byte_ != NULL ? *time_to_first_byte_ : *default_instance().time_to_first_byte_;
#else
  return time_to_first_byte_ != NULL ? *time_to_first_byte_ : *default_instance_->time_to_first_byte_;
#endif
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::mutable_time_to_first_byte() {
  set_has_time_to_first_byte();
  if (time_to_first_byte_ == NULL) {
    time_to_first_byte_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
  return time_to_first_byte_;
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::release_time_to_first_byte() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
  clear_has_time_to_first_byte();
  ::data_reduction_proxy::Duration* temp = time_to_first_byte_;
  time_to_first_byte_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_time_to_first_byte(::data_reduction_proxy::Duration* time_to_first_byte) {
  delete time_to_first_byte_;
  time_to_first_byte_ = time_to_first_byte;
  if (time_to_first_byte) {
    set_has_time_to_first_byte();
  } else {
    clear_has_time_to_first_byte();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
}

// optional .data_reduction_proxy.Duration page_load_time = 9;
inline bool PageloadMetrics::has_page_load_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PageloadMetrics::set_has_page_load_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PageloadMetrics::clear_has_page_load_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PageloadMetrics::clear_page_load_time() {
  if (page_load_time_ != NULL) page_load_time_->::data_reduction_proxy::Duration::Clear();
  clear_has_page_load_time();
}
inline const ::data_reduction_proxy::Duration& PageloadMetrics::page_load_time() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.page_load_time)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return page_load_time_ != NULL ? *page_load_time_ : *default_instance().page_load_time_;
#else
  return page_load_time_ != NULL ? *page_load_time_ : *default_instance_->page_load_time_;
#endif
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::mutable_page_load_time() {
  set_has_page_load_time();
  if (page_load_time_ == NULL) {
    page_load_time_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.page_load_time)
  return page_load_time_;
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::release_page_load_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.page_load_time)
  clear_has_page_load_time();
  ::data_reduction_proxy::Duration* temp = page_load_time_;
  page_load_time_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_page_load_time(::data_reduction_proxy::Duration* page_load_time) {
  delete page_load_time_;
  page_load_time_ = page_load_time;
  if (page_load_time) {
    set_has_page_load_time();
  } else {
    clear_has_page_load_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.page_load_time)
}

// optional int32 original_page_size_bytes = 10;
inline bool PageloadMetrics::has_original_page_size_bytes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PageloadMetrics::set_has_original_page_size_bytes() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PageloadMetrics::clear_has_original_page_size_bytes() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PageloadMetrics::clear_original_page_size_bytes() {
  original_page_size_bytes_ = 0;
  clear_has_original_page_size_bytes();
}
inline ::google::protobuf::int32 PageloadMetrics::original_page_size_bytes() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.original_page_size_bytes)
  return original_page_size_bytes_;
}
inline void PageloadMetrics::set_original_page_size_bytes(::google::protobuf::int32 value) {
  set_has_original_page_size_bytes();
  original_page_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.original_page_size_bytes)
}

// optional int32 compressed_page_size_bytes = 11;
inline bool PageloadMetrics::has_compressed_page_size_bytes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PageloadMetrics::set_has_compressed_page_size_bytes() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PageloadMetrics::clear_has_compressed_page_size_bytes() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PageloadMetrics::clear_compressed_page_size_bytes() {
  compressed_page_size_bytes_ = 0;
  clear_has_compressed_page_size_bytes();
}
inline ::google::protobuf::int32 PageloadMetrics::compressed_page_size_bytes() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.compressed_page_size_bytes)
  return compressed_page_size_bytes_;
}
inline void PageloadMetrics::set_compressed_page_size_bytes(::google::protobuf::int32 value) {
  set_has_compressed_page_size_bytes();
  compressed_page_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.compressed_page_size_bytes)
}

// optional .data_reduction_proxy.PageloadMetrics.EffectiveConnectionType effective_connection_type = 12;
inline bool PageloadMetrics::has_effective_connection_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PageloadMetrics::set_has_effective_connection_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PageloadMetrics::clear_has_effective_connection_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PageloadMetrics::clear_effective_connection_type() {
  effective_connection_type_ = 0;
  clear_has_effective_connection_type();
}
inline ::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType PageloadMetrics::effective_connection_type() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.effective_connection_type)
  return static_cast< ::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType >(effective_connection_type_);
}
inline void PageloadMetrics::set_effective_connection_type(::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType value) {
  assert(::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType_IsValid(value));
  set_has_effective_connection_type();
  effective_connection_type_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.effective_connection_type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data_reduction_proxy

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pageload_5fmetrics_2eproto__INCLUDED
