// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cert_logger.proto

#ifndef PROTOBUF_cert_5flogger_2eproto__INCLUDED
#define PROTOBUF_cert_5flogger_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace certificate_reporting {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cert_5flogger_2eproto();
void protobuf_AssignDesc_cert_5flogger_2eproto();
void protobuf_ShutdownFile_cert_5flogger_2eproto();

class CertLoggerInterstitialInfo;
class CertLoggerRequest;

enum CertLoggerInterstitialInfo_InterstitialReason {
  CertLoggerInterstitialInfo_InterstitialReason_UNKNOWN_INTERSTITIAL_REASON = 0,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_SSL = 1,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_CAPTIVE_PORTAL = 2,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_CLOCK = 3
};
bool CertLoggerInterstitialInfo_InterstitialReason_IsValid(int value);
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MIN = CertLoggerInterstitialInfo_InterstitialReason_UNKNOWN_INTERSTITIAL_REASON;
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MAX = CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_CLOCK;
const int CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_ARRAYSIZE = CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MAX + 1;

enum CertLoggerRequest_CertError {
  CertLoggerRequest_CertError_UNKNOWN_CERT_ERROR = 0,
  CertLoggerRequest_CertError_ERR_CERT_REVOKED = 1,
  CertLoggerRequest_CertError_ERR_CERT_INVALID = 2,
  CertLoggerRequest_CertError_ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN = 3,
  CertLoggerRequest_CertError_ERR_CERT_AUTHORITY_INVALID = 4,
  CertLoggerRequest_CertError_ERR_CERT_COMMON_NAME_INVALID = 5,
  CertLoggerRequest_CertError_ERR_CERT_NAME_CONSTRAINT_VIOLATION = 6,
  CertLoggerRequest_CertError_ERR_CERT_WEAK_SIGNATURE_ALGORITHM = 7,
  CertLoggerRequest_CertError_ERR_CERT_WEAK_KEY = 8,
  CertLoggerRequest_CertError_ERR_CERT_DATE_INVALID = 9,
  CertLoggerRequest_CertError_ERR_CERT_VALIDITY_TOO_LONG = 10,
  CertLoggerRequest_CertError_ERR_CERT_UNABLE_TO_CHECK_REVOCATION = 11,
  CertLoggerRequest_CertError_ERR_CERT_NO_REVOCATION_MECHANISM = 12,
  CertLoggerRequest_CertError_ERR_CERT_NON_UNIQUE_NAME = 13,
  CertLoggerRequest_CertError_ERR_CERTIFICATE_TRANSPARENCY_REQUIRED = 14
};
bool CertLoggerRequest_CertError_IsValid(int value);
const CertLoggerRequest_CertError CertLoggerRequest_CertError_CertError_MIN = CertLoggerRequest_CertError_UNKNOWN_CERT_ERROR;
const CertLoggerRequest_CertError CertLoggerRequest_CertError_CertError_MAX = CertLoggerRequest_CertError_ERR_CERTIFICATE_TRANSPARENCY_REQUIRED;
const int CertLoggerRequest_CertError_CertError_ARRAYSIZE = CertLoggerRequest_CertError_CertError_MAX + 1;

// ===================================================================

class CertLoggerInterstitialInfo : public ::google::protobuf::MessageLite {
 public:
  CertLoggerInterstitialInfo();
  virtual ~CertLoggerInterstitialInfo();

  CertLoggerInterstitialInfo(const CertLoggerInterstitialInfo& from);

  inline CertLoggerInterstitialInfo& operator=(const CertLoggerInterstitialInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const CertLoggerInterstitialInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CertLoggerInterstitialInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CertLoggerInterstitialInfo* other);

  // implements Message ----------------------------------------------

  inline CertLoggerInterstitialInfo* New() const { return New(NULL); }

  CertLoggerInterstitialInfo* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CertLoggerInterstitialInfo& from);
  void MergeFrom(const CertLoggerInterstitialInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CertLoggerInterstitialInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef CertLoggerInterstitialInfo_InterstitialReason InterstitialReason;
  static const InterstitialReason UNKNOWN_INTERSTITIAL_REASON =
    CertLoggerInterstitialInfo_InterstitialReason_UNKNOWN_INTERSTITIAL_REASON;
  static const InterstitialReason INTERSTITIAL_SSL =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_SSL;
  static const InterstitialReason INTERSTITIAL_CAPTIVE_PORTAL =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_CAPTIVE_PORTAL;
  static const InterstitialReason INTERSTITIAL_CLOCK =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_CLOCK;
  static inline bool InterstitialReason_IsValid(int value) {
    return CertLoggerInterstitialInfo_InterstitialReason_IsValid(value);
  }
  static const InterstitialReason InterstitialReason_MIN =
    CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MIN;
  static const InterstitialReason InterstitialReason_MAX =
    CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MAX;
  static const int InterstitialReason_ARRAYSIZE =
    CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .certificate_reporting.CertLoggerInterstitialInfo.InterstitialReason interstitial_reason = 1;
  bool has_interstitial_reason() const;
  void clear_interstitial_reason();
  static const int kInterstitialReasonFieldNumber = 1;
  ::certificate_reporting::CertLoggerInterstitialInfo_InterstitialReason interstitial_reason() const;
  void set_interstitial_reason(::certificate_reporting::CertLoggerInterstitialInfo_InterstitialReason value);

  // optional bool user_proceeded = 2;
  bool has_user_proceeded() const;
  void clear_user_proceeded();
  static const int kUserProceededFieldNumber = 2;
  bool user_proceeded() const;
  void set_user_proceeded(bool value);

  // optional bool overridable = 3;
  bool has_overridable() const;
  void clear_overridable();
  static const int kOverridableFieldNumber = 3;
  bool overridable() const;
  void set_overridable(bool value);

  // @@protoc_insertion_point(class_scope:certificate_reporting.CertLoggerInterstitialInfo)
 private:
  inline void set_has_interstitial_reason();
  inline void clear_has_interstitial_reason();
  inline void set_has_user_proceeded();
  inline void clear_has_user_proceeded();
  inline void set_has_overridable();
  inline void clear_has_overridable();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int interstitial_reason_;
  bool user_proceeded_;
  bool overridable_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cert_5flogger_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cert_5flogger_2eproto();
  #endif
  friend void protobuf_AssignDesc_cert_5flogger_2eproto();
  friend void protobuf_ShutdownFile_cert_5flogger_2eproto();

  void InitAsDefaultInstance();
  static CertLoggerInterstitialInfo* default_instance_;
};
// -------------------------------------------------------------------

class CertLoggerRequest : public ::google::protobuf::MessageLite {
 public:
  CertLoggerRequest();
  virtual ~CertLoggerRequest();

  CertLoggerRequest(const CertLoggerRequest& from);

  inline CertLoggerRequest& operator=(const CertLoggerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const CertLoggerRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CertLoggerRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CertLoggerRequest* other);

  // implements Message ----------------------------------------------

  inline CertLoggerRequest* New() const { return New(NULL); }

  CertLoggerRequest* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CertLoggerRequest& from);
  void MergeFrom(const CertLoggerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CertLoggerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef CertLoggerRequest_CertError CertError;
  static const CertError UNKNOWN_CERT_ERROR =
    CertLoggerRequest_CertError_UNKNOWN_CERT_ERROR;
  static const CertError ERR_CERT_REVOKED =
    CertLoggerRequest_CertError_ERR_CERT_REVOKED;
  static const CertError ERR_CERT_INVALID =
    CertLoggerRequest_CertError_ERR_CERT_INVALID;
  static const CertError ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN =
    CertLoggerRequest_CertError_ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN;
  static const CertError ERR_CERT_AUTHORITY_INVALID =
    CertLoggerRequest_CertError_ERR_CERT_AUTHORITY_INVALID;
  static const CertError ERR_CERT_COMMON_NAME_INVALID =
    CertLoggerRequest_CertError_ERR_CERT_COMMON_NAME_INVALID;
  static const CertError ERR_CERT_NAME_CONSTRAINT_VIOLATION =
    CertLoggerRequest_CertError_ERR_CERT_NAME_CONSTRAINT_VIOLATION;
  static const CertError ERR_CERT_WEAK_SIGNATURE_ALGORITHM =
    CertLoggerRequest_CertError_ERR_CERT_WEAK_SIGNATURE_ALGORITHM;
  static const CertError ERR_CERT_WEAK_KEY =
    CertLoggerRequest_CertError_ERR_CERT_WEAK_KEY;
  static const CertError ERR_CERT_DATE_INVALID =
    CertLoggerRequest_CertError_ERR_CERT_DATE_INVALID;
  static const CertError ERR_CERT_VALIDITY_TOO_LONG =
    CertLoggerRequest_CertError_ERR_CERT_VALIDITY_TOO_LONG;
  static const CertError ERR_CERT_UNABLE_TO_CHECK_REVOCATION =
    CertLoggerRequest_CertError_ERR_CERT_UNABLE_TO_CHECK_REVOCATION;
  static const CertError ERR_CERT_NO_REVOCATION_MECHANISM =
    CertLoggerRequest_CertError_ERR_CERT_NO_REVOCATION_MECHANISM;
  static const CertError ERR_CERT_NON_UNIQUE_NAME =
    CertLoggerRequest_CertError_ERR_CERT_NON_UNIQUE_NAME;
  static const CertError ERR_CERTIFICATE_TRANSPARENCY_REQUIRED =
    CertLoggerRequest_CertError_ERR_CERTIFICATE_TRANSPARENCY_REQUIRED;
  static inline bool CertError_IsValid(int value) {
    return CertLoggerRequest_CertError_IsValid(value);
  }
  static const CertError CertError_MIN =
    CertLoggerRequest_CertError_CertError_MIN;
  static const CertError CertError_MAX =
    CertLoggerRequest_CertError_CertError_MAX;
  static const int CertError_ARRAYSIZE =
    CertLoggerRequest_CertError_CertError_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required string hostname = 1;
  bool has_hostname() const;
  void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // required string cert_chain = 2;
  bool has_cert_chain() const;
  void clear_cert_chain();
  static const int kCertChainFieldNumber = 2;
  const ::std::string& cert_chain() const;
  void set_cert_chain(const ::std::string& value);
  void set_cert_chain(const char* value);
  void set_cert_chain(const char* value, size_t size);
  ::std::string* mutable_cert_chain();
  ::std::string* release_cert_chain();
  void set_allocated_cert_chain(::std::string* cert_chain);

  // required int64 time_usec = 3;
  bool has_time_usec() const;
  void clear_time_usec();
  static const int kTimeUsecFieldNumber = 3;
  ::google::protobuf::int64 time_usec() const;
  void set_time_usec(::google::protobuf::int64 value);

  // repeated string public_key_hash = 4;
  int public_key_hash_size() const;
  void clear_public_key_hash();
  static const int kPublicKeyHashFieldNumber = 4;
  const ::std::string& public_key_hash(int index) const;
  ::std::string* mutable_public_key_hash(int index);
  void set_public_key_hash(int index, const ::std::string& value);
  void set_public_key_hash(int index, const char* value);
  void set_public_key_hash(int index, const char* value, size_t size);
  ::std::string* add_public_key_hash();
  void add_public_key_hash(const ::std::string& value);
  void add_public_key_hash(const char* value);
  void add_public_key_hash(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& public_key_hash() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_public_key_hash();

  // repeated string pin = 5;
  int pin_size() const;
  void clear_pin();
  static const int kPinFieldNumber = 5;
  const ::std::string& pin(int index) const;
  ::std::string* mutable_pin(int index);
  void set_pin(int index, const ::std::string& value);
  void set_pin(int index, const char* value);
  void set_pin(int index, const char* value, size_t size);
  ::std::string* add_pin();
  void add_pin(const ::std::string& value);
  void add_pin(const char* value);
  void add_pin(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pin() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pin();

  // repeated .certificate_reporting.CertLoggerRequest.CertError cert_error = 6;
  int cert_error_size() const;
  void clear_cert_error();
  static const int kCertErrorFieldNumber = 6;
  ::certificate_reporting::CertLoggerRequest_CertError cert_error(int index) const;
  void set_cert_error(int index, ::certificate_reporting::CertLoggerRequest_CertError value);
  void add_cert_error(::certificate_reporting::CertLoggerRequest_CertError value);
  const ::google::protobuf::RepeatedField<int>& cert_error() const;
  ::google::protobuf::RepeatedField<int>* mutable_cert_error();

  // optional .certificate_reporting.CertLoggerInterstitialInfo interstitial_info = 7;
  bool has_interstitial_info() const;
  void clear_interstitial_info();
  static const int kInterstitialInfoFieldNumber = 7;
  const ::certificate_reporting::CertLoggerInterstitialInfo& interstitial_info() const;
  ::certificate_reporting::CertLoggerInterstitialInfo* mutable_interstitial_info();
  ::certificate_reporting::CertLoggerInterstitialInfo* release_interstitial_info();
  void set_allocated_interstitial_info(::certificate_reporting::CertLoggerInterstitialInfo* interstitial_info);

  // optional string unverified_cert_chain = 8;
  bool has_unverified_cert_chain() const;
  void clear_unverified_cert_chain();
  static const int kUnverifiedCertChainFieldNumber = 8;
  const ::std::string& unverified_cert_chain() const;
  void set_unverified_cert_chain(const ::std::string& value);
  void set_unverified_cert_chain(const char* value);
  void set_unverified_cert_chain(const char* value, size_t size);
  ::std::string* mutable_unverified_cert_chain();
  ::std::string* release_unverified_cert_chain();
  void set_allocated_unverified_cert_chain(::std::string* unverified_cert_chain);

  // optional bool is_issued_by_known_root = 9;
  bool has_is_issued_by_known_root() const;
  void clear_is_issued_by_known_root();
  static const int kIsIssuedByKnownRootFieldNumber = 9;
  bool is_issued_by_known_root() const;
  void set_is_issued_by_known_root(bool value);

  // @@protoc_insertion_point(class_scope:certificate_reporting.CertLoggerRequest)
 private:
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_cert_chain();
  inline void clear_has_cert_chain();
  inline void set_has_time_usec();
  inline void clear_has_time_usec();
  inline void set_has_interstitial_info();
  inline void clear_has_interstitial_info();
  inline void set_has_unverified_cert_chain();
  inline void clear_has_unverified_cert_chain();
  inline void set_has_is_issued_by_known_root();
  inline void clear_has_is_issued_by_known_root();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::internal::ArenaStringPtr cert_chain_;
  ::google::protobuf::int64 time_usec_;
  ::google::protobuf::RepeatedPtrField< ::std::string> public_key_hash_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pin_;
  ::google::protobuf::RepeatedField<int> cert_error_;
  ::certificate_reporting::CertLoggerInterstitialInfo* interstitial_info_;
  ::google::protobuf::internal::ArenaStringPtr unverified_cert_chain_;
  bool is_issued_by_known_root_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cert_5flogger_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cert_5flogger_2eproto();
  #endif
  friend void protobuf_AssignDesc_cert_5flogger_2eproto();
  friend void protobuf_ShutdownFile_cert_5flogger_2eproto();

  void InitAsDefaultInstance();
  static CertLoggerRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CertLoggerInterstitialInfo

// optional .certificate_reporting.CertLoggerInterstitialInfo.InterstitialReason interstitial_reason = 1;
inline bool CertLoggerInterstitialInfo::has_interstitial_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertLoggerInterstitialInfo::set_has_interstitial_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CertLoggerInterstitialInfo::clear_has_interstitial_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CertLoggerInterstitialInfo::clear_interstitial_reason() {
  interstitial_reason_ = 0;
  clear_has_interstitial_reason();
}
inline ::certificate_reporting::CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::interstitial_reason() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerInterstitialInfo.interstitial_reason)
  return static_cast< ::certificate_reporting::CertLoggerInterstitialInfo_InterstitialReason >(interstitial_reason_);
}
inline void CertLoggerInterstitialInfo::set_interstitial_reason(::certificate_reporting::CertLoggerInterstitialInfo_InterstitialReason value) {
  assert(::certificate_reporting::CertLoggerInterstitialInfo_InterstitialReason_IsValid(value));
  set_has_interstitial_reason();
  interstitial_reason_ = value;
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerInterstitialInfo.interstitial_reason)
}

// optional bool user_proceeded = 2;
inline bool CertLoggerInterstitialInfo::has_user_proceeded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertLoggerInterstitialInfo::set_has_user_proceeded() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CertLoggerInterstitialInfo::clear_has_user_proceeded() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CertLoggerInterstitialInfo::clear_user_proceeded() {
  user_proceeded_ = false;
  clear_has_user_proceeded();
}
inline bool CertLoggerInterstitialInfo::user_proceeded() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerInterstitialInfo.user_proceeded)
  return user_proceeded_;
}
inline void CertLoggerInterstitialInfo::set_user_proceeded(bool value) {
  set_has_user_proceeded();
  user_proceeded_ = value;
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerInterstitialInfo.user_proceeded)
}

// optional bool overridable = 3;
inline bool CertLoggerInterstitialInfo::has_overridable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CertLoggerInterstitialInfo::set_has_overridable() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CertLoggerInterstitialInfo::clear_has_overridable() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CertLoggerInterstitialInfo::clear_overridable() {
  overridable_ = false;
  clear_has_overridable();
}
inline bool CertLoggerInterstitialInfo::overridable() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerInterstitialInfo.overridable)
  return overridable_;
}
inline void CertLoggerInterstitialInfo::set_overridable(bool value) {
  set_has_overridable();
  overridable_ = value;
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerInterstitialInfo.overridable)
}

// -------------------------------------------------------------------

// CertLoggerRequest

// required string hostname = 1;
inline bool CertLoggerRequest::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertLoggerRequest::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CertLoggerRequest::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CertLoggerRequest::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
inline const ::std::string& CertLoggerRequest::hostname() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CertLoggerRequest::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.hostname)
}
inline void CertLoggerRequest::set_hostname(const char* value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:certificate_reporting.CertLoggerRequest.hostname)
}
inline void CertLoggerRequest::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:certificate_reporting.CertLoggerRequest.hostname)
}
inline ::std::string* CertLoggerRequest::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:certificate_reporting.CertLoggerRequest.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CertLoggerRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:certificate_reporting.CertLoggerRequest.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CertLoggerRequest::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:certificate_reporting.CertLoggerRequest.hostname)
}

// required string cert_chain = 2;
inline bool CertLoggerRequest::has_cert_chain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertLoggerRequest::set_has_cert_chain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CertLoggerRequest::clear_has_cert_chain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CertLoggerRequest::clear_cert_chain() {
  cert_chain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cert_chain();
}
inline const ::std::string& CertLoggerRequest::cert_chain() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.cert_chain)
  return cert_chain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CertLoggerRequest::set_cert_chain(const ::std::string& value) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.cert_chain)
}
inline void CertLoggerRequest::set_cert_chain(const char* value) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:certificate_reporting.CertLoggerRequest.cert_chain)
}
inline void CertLoggerRequest::set_cert_chain(const char* value, size_t size) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:certificate_reporting.CertLoggerRequest.cert_chain)
}
inline ::std::string* CertLoggerRequest::mutable_cert_chain() {
  set_has_cert_chain();
  // @@protoc_insertion_point(field_mutable:certificate_reporting.CertLoggerRequest.cert_chain)
  return cert_chain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CertLoggerRequest::release_cert_chain() {
  // @@protoc_insertion_point(field_release:certificate_reporting.CertLoggerRequest.cert_chain)
  clear_has_cert_chain();
  return cert_chain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CertLoggerRequest::set_allocated_cert_chain(::std::string* cert_chain) {
  if (cert_chain != NULL) {
    set_has_cert_chain();
  } else {
    clear_has_cert_chain();
  }
  cert_chain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cert_chain);
  // @@protoc_insertion_point(field_set_allocated:certificate_reporting.CertLoggerRequest.cert_chain)
}

// required int64 time_usec = 3;
inline bool CertLoggerRequest::has_time_usec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CertLoggerRequest::set_has_time_usec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CertLoggerRequest::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CertLoggerRequest::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
inline ::google::protobuf::int64 CertLoggerRequest::time_usec() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.time_usec)
  return time_usec_;
}
inline void CertLoggerRequest::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.time_usec)
}

// repeated string public_key_hash = 4;
inline int CertLoggerRequest::public_key_hash_size() const {
  return public_key_hash_.size();
}
inline void CertLoggerRequest::clear_public_key_hash() {
  public_key_hash_.Clear();
}
inline const ::std::string& CertLoggerRequest::public_key_hash(int index) const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Get(index);
}
inline ::std::string* CertLoggerRequest::mutable_public_key_hash(int index) {
  // @@protoc_insertion_point(field_mutable:certificate_reporting.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Mutable(index);
}
inline void CertLoggerRequest::set_public_key_hash(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.public_key_hash)
  public_key_hash_.Mutable(index)->assign(value);
}
inline void CertLoggerRequest::set_public_key_hash(int index, const char* value) {
  public_key_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:certificate_reporting.CertLoggerRequest.public_key_hash)
}
inline void CertLoggerRequest::set_public_key_hash(int index, const char* value, size_t size) {
  public_key_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:certificate_reporting.CertLoggerRequest.public_key_hash)
}
inline ::std::string* CertLoggerRequest::add_public_key_hash() {
  // @@protoc_insertion_point(field_add_mutable:certificate_reporting.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Add();
}
inline void CertLoggerRequest::add_public_key_hash(const ::std::string& value) {
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:certificate_reporting.CertLoggerRequest.public_key_hash)
}
inline void CertLoggerRequest::add_public_key_hash(const char* value) {
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:certificate_reporting.CertLoggerRequest.public_key_hash)
}
inline void CertLoggerRequest::add_public_key_hash(const char* value, size_t size) {
  public_key_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:certificate_reporting.CertLoggerRequest.public_key_hash)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CertLoggerRequest::public_key_hash() const {
  // @@protoc_insertion_point(field_list:certificate_reporting.CertLoggerRequest.public_key_hash)
  return public_key_hash_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CertLoggerRequest::mutable_public_key_hash() {
  // @@protoc_insertion_point(field_mutable_list:certificate_reporting.CertLoggerRequest.public_key_hash)
  return &public_key_hash_;
}

// repeated string pin = 5;
inline int CertLoggerRequest::pin_size() const {
  return pin_.size();
}
inline void CertLoggerRequest::clear_pin() {
  pin_.Clear();
}
inline const ::std::string& CertLoggerRequest::pin(int index) const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.pin)
  return pin_.Get(index);
}
inline ::std::string* CertLoggerRequest::mutable_pin(int index) {
  // @@protoc_insertion_point(field_mutable:certificate_reporting.CertLoggerRequest.pin)
  return pin_.Mutable(index);
}
inline void CertLoggerRequest::set_pin(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.pin)
  pin_.Mutable(index)->assign(value);
}
inline void CertLoggerRequest::set_pin(int index, const char* value) {
  pin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:certificate_reporting.CertLoggerRequest.pin)
}
inline void CertLoggerRequest::set_pin(int index, const char* value, size_t size) {
  pin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:certificate_reporting.CertLoggerRequest.pin)
}
inline ::std::string* CertLoggerRequest::add_pin() {
  // @@protoc_insertion_point(field_add_mutable:certificate_reporting.CertLoggerRequest.pin)
  return pin_.Add();
}
inline void CertLoggerRequest::add_pin(const ::std::string& value) {
  pin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:certificate_reporting.CertLoggerRequest.pin)
}
inline void CertLoggerRequest::add_pin(const char* value) {
  pin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:certificate_reporting.CertLoggerRequest.pin)
}
inline void CertLoggerRequest::add_pin(const char* value, size_t size) {
  pin_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:certificate_reporting.CertLoggerRequest.pin)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CertLoggerRequest::pin() const {
  // @@protoc_insertion_point(field_list:certificate_reporting.CertLoggerRequest.pin)
  return pin_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CertLoggerRequest::mutable_pin() {
  // @@protoc_insertion_point(field_mutable_list:certificate_reporting.CertLoggerRequest.pin)
  return &pin_;
}

// repeated .certificate_reporting.CertLoggerRequest.CertError cert_error = 6;
inline int CertLoggerRequest::cert_error_size() const {
  return cert_error_.size();
}
inline void CertLoggerRequest::clear_cert_error() {
  cert_error_.Clear();
}
inline ::certificate_reporting::CertLoggerRequest_CertError CertLoggerRequest::cert_error(int index) const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.cert_error)
  return static_cast< ::certificate_reporting::CertLoggerRequest_CertError >(cert_error_.Get(index));
}
inline void CertLoggerRequest::set_cert_error(int index, ::certificate_reporting::CertLoggerRequest_CertError value) {
  assert(::certificate_reporting::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Set(index, value);
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.cert_error)
}
inline void CertLoggerRequest::add_cert_error(::certificate_reporting::CertLoggerRequest_CertError value) {
  assert(::certificate_reporting::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Add(value);
  // @@protoc_insertion_point(field_add:certificate_reporting.CertLoggerRequest.cert_error)
}
inline const ::google::protobuf::RepeatedField<int>&
CertLoggerRequest::cert_error() const {
  // @@protoc_insertion_point(field_list:certificate_reporting.CertLoggerRequest.cert_error)
  return cert_error_;
}
inline ::google::protobuf::RepeatedField<int>*
CertLoggerRequest::mutable_cert_error() {
  // @@protoc_insertion_point(field_mutable_list:certificate_reporting.CertLoggerRequest.cert_error)
  return &cert_error_;
}

// optional .certificate_reporting.CertLoggerInterstitialInfo interstitial_info = 7;
inline bool CertLoggerRequest::has_interstitial_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CertLoggerRequest::set_has_interstitial_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CertLoggerRequest::clear_has_interstitial_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CertLoggerRequest::clear_interstitial_info() {
  if (interstitial_info_ != NULL) interstitial_info_->::certificate_reporting::CertLoggerInterstitialInfo::Clear();
  clear_has_interstitial_info();
}
inline const ::certificate_reporting::CertLoggerInterstitialInfo& CertLoggerRequest::interstitial_info() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.interstitial_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return interstitial_info_ != NULL ? *interstitial_info_ : *default_instance().interstitial_info_;
#else
  return interstitial_info_ != NULL ? *interstitial_info_ : *default_instance_->interstitial_info_;
#endif
}
inline ::certificate_reporting::CertLoggerInterstitialInfo* CertLoggerRequest::mutable_interstitial_info() {
  set_has_interstitial_info();
  if (interstitial_info_ == NULL) {
    interstitial_info_ = new ::certificate_reporting::CertLoggerInterstitialInfo;
  }
  // @@protoc_insertion_point(field_mutable:certificate_reporting.CertLoggerRequest.interstitial_info)
  return interstitial_info_;
}
inline ::certificate_reporting::CertLoggerInterstitialInfo* CertLoggerRequest::release_interstitial_info() {
  // @@protoc_insertion_point(field_release:certificate_reporting.CertLoggerRequest.interstitial_info)
  clear_has_interstitial_info();
  ::certificate_reporting::CertLoggerInterstitialInfo* temp = interstitial_info_;
  interstitial_info_ = NULL;
  return temp;
}
inline void CertLoggerRequest::set_allocated_interstitial_info(::certificate_reporting::CertLoggerInterstitialInfo* interstitial_info) {
  delete interstitial_info_;
  interstitial_info_ = interstitial_info;
  if (interstitial_info) {
    set_has_interstitial_info();
  } else {
    clear_has_interstitial_info();
  }
  // @@protoc_insertion_point(field_set_allocated:certificate_reporting.CertLoggerRequest.interstitial_info)
}

// optional string unverified_cert_chain = 8;
inline bool CertLoggerRequest::has_unverified_cert_chain() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CertLoggerRequest::set_has_unverified_cert_chain() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CertLoggerRequest::clear_has_unverified_cert_chain() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CertLoggerRequest::clear_unverified_cert_chain() {
  unverified_cert_chain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unverified_cert_chain();
}
inline const ::std::string& CertLoggerRequest::unverified_cert_chain() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.unverified_cert_chain)
  return unverified_cert_chain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CertLoggerRequest::set_unverified_cert_chain(const ::std::string& value) {
  set_has_unverified_cert_chain();
  unverified_cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.unverified_cert_chain)
}
inline void CertLoggerRequest::set_unverified_cert_chain(const char* value) {
  set_has_unverified_cert_chain();
  unverified_cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:certificate_reporting.CertLoggerRequest.unverified_cert_chain)
}
inline void CertLoggerRequest::set_unverified_cert_chain(const char* value, size_t size) {
  set_has_unverified_cert_chain();
  unverified_cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:certificate_reporting.CertLoggerRequest.unverified_cert_chain)
}
inline ::std::string* CertLoggerRequest::mutable_unverified_cert_chain() {
  set_has_unverified_cert_chain();
  // @@protoc_insertion_point(field_mutable:certificate_reporting.CertLoggerRequest.unverified_cert_chain)
  return unverified_cert_chain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CertLoggerRequest::release_unverified_cert_chain() {
  // @@protoc_insertion_point(field_release:certificate_reporting.CertLoggerRequest.unverified_cert_chain)
  clear_has_unverified_cert_chain();
  return unverified_cert_chain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CertLoggerRequest::set_allocated_unverified_cert_chain(::std::string* unverified_cert_chain) {
  if (unverified_cert_chain != NULL) {
    set_has_unverified_cert_chain();
  } else {
    clear_has_unverified_cert_chain();
  }
  unverified_cert_chain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unverified_cert_chain);
  // @@protoc_insertion_point(field_set_allocated:certificate_reporting.CertLoggerRequest.unverified_cert_chain)
}

// optional bool is_issued_by_known_root = 9;
inline bool CertLoggerRequest::has_is_issued_by_known_root() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CertLoggerRequest::set_has_is_issued_by_known_root() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CertLoggerRequest::clear_has_is_issued_by_known_root() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CertLoggerRequest::clear_is_issued_by_known_root() {
  is_issued_by_known_root_ = false;
  clear_has_is_issued_by_known_root();
}
inline bool CertLoggerRequest::is_issued_by_known_root() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.is_issued_by_known_root)
  return is_issued_by_known_root_;
}
inline void CertLoggerRequest::set_is_issued_by_known_root(bool value) {
  set_has_is_issued_by_known_root();
  is_issued_by_known_root_ = value;
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.is_issued_by_known_root)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace certificate_reporting

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::certificate_reporting::CertLoggerInterstitialInfo_InterstitialReason> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::certificate_reporting::CertLoggerRequest_CertError> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cert_5flogger_2eproto__INCLUDED
