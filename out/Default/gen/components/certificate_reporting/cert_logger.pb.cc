// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cert_logger.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cert_logger.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace certificate_reporting {

void protobuf_ShutdownFile_cert_5flogger_2eproto() {
  delete CertLoggerInterstitialInfo::default_instance_;
  delete CertLoggerRequest::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_cert_5flogger_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_cert_5flogger_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CertLoggerInterstitialInfo::default_instance_ = new CertLoggerInterstitialInfo();
  CertLoggerRequest::default_instance_ = new CertLoggerRequest();
  CertLoggerInterstitialInfo::default_instance_->InitAsDefaultInstance();
  CertLoggerRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cert_5flogger_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_cert_5flogger_2eproto_once_);
void protobuf_AddDesc_cert_5flogger_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_cert_5flogger_2eproto_once_,
                 &protobuf_AddDesc_cert_5flogger_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cert_5flogger_2eproto {
  StaticDescriptorInitializer_cert_5flogger_2eproto() {
    protobuf_AddDesc_cert_5flogger_2eproto();
  }
} static_descriptor_initializer_cert_5flogger_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForCertLoggerInterstitialInfo(
    CertLoggerInterstitialInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

bool CertLoggerInterstitialInfo_InterstitialReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::UNKNOWN_INTERSTITIAL_REASON;
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::INTERSTITIAL_SSL;
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::INTERSTITIAL_CAPTIVE_PORTAL;
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::INTERSTITIAL_CLOCK;
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::InterstitialReason_MIN;
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::InterstitialReason_MAX;
const int CertLoggerInterstitialInfo::InterstitialReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertLoggerInterstitialInfo::kInterstitialReasonFieldNumber;
const int CertLoggerInterstitialInfo::kUserProceededFieldNumber;
const int CertLoggerInterstitialInfo::kOverridableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CertLoggerInterstitialInfo::CertLoggerInterstitialInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:certificate_reporting.CertLoggerInterstitialInfo)
}

void CertLoggerInterstitialInfo::InitAsDefaultInstance() {
}

CertLoggerInterstitialInfo::CertLoggerInterstitialInfo(const CertLoggerInterstitialInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:certificate_reporting.CertLoggerInterstitialInfo)
}

void CertLoggerInterstitialInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interstitial_reason_ = 0;
  user_proceeded_ = false;
  overridable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CertLoggerInterstitialInfo::~CertLoggerInterstitialInfo() {
  // @@protoc_insertion_point(destructor:certificate_reporting.CertLoggerInterstitialInfo)
  SharedDtor();
}

void CertLoggerInterstitialInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CertLoggerInterstitialInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CertLoggerInterstitialInfo& CertLoggerInterstitialInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cert_5flogger_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cert_5flogger_2eproto();
#endif
  return *default_instance_;
}

CertLoggerInterstitialInfo* CertLoggerInterstitialInfo::default_instance_ = NULL;

CertLoggerInterstitialInfo* CertLoggerInterstitialInfo::New(::google::protobuf::Arena* arena) const {
  CertLoggerInterstitialInfo* n = new CertLoggerInterstitialInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CertLoggerInterstitialInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:certificate_reporting.CertLoggerInterstitialInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CertLoggerInterstitialInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CertLoggerInterstitialInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(interstitial_reason_, overridable_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CertLoggerInterstitialInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCertLoggerInterstitialInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:certificate_reporting.CertLoggerInterstitialInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .certificate_reporting.CertLoggerInterstitialInfo.InterstitialReason interstitial_reason = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::certificate_reporting::CertLoggerInterstitialInfo_InterstitialReason_IsValid(value)) {
            set_interstitial_reason(static_cast< ::certificate_reporting::CertLoggerInterstitialInfo_InterstitialReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_proceeded;
        break;
      }

      // optional bool user_proceeded = 2;
      case 2: {
        if (tag == 16) {
         parse_user_proceeded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_proceeded_)));
          set_has_user_proceeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_overridable;
        break;
      }

      // optional bool overridable = 3;
      case 3: {
        if (tag == 24) {
         parse_overridable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overridable_)));
          set_has_overridable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:certificate_reporting.CertLoggerInterstitialInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:certificate_reporting.CertLoggerInterstitialInfo)
  return false;
#undef DO_
}

void CertLoggerInterstitialInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:certificate_reporting.CertLoggerInterstitialInfo)
  // optional .certificate_reporting.CertLoggerInterstitialInfo.InterstitialReason interstitial_reason = 1;
  if (has_interstitial_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->interstitial_reason(), output);
  }

  // optional bool user_proceeded = 2;
  if (has_user_proceeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->user_proceeded(), output);
  }

  // optional bool overridable = 3;
  if (has_overridable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->overridable(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:certificate_reporting.CertLoggerInterstitialInfo)
}

int CertLoggerInterstitialInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:certificate_reporting.CertLoggerInterstitialInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .certificate_reporting.CertLoggerInterstitialInfo.InterstitialReason interstitial_reason = 1;
    if (has_interstitial_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->interstitial_reason());
    }

    // optional bool user_proceeded = 2;
    if (has_user_proceeded()) {
      total_size += 1 + 1;
    }

    // optional bool overridable = 3;
    if (has_overridable()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertLoggerInterstitialInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CertLoggerInterstitialInfo*>(&from));
}

void CertLoggerInterstitialInfo::MergeFrom(const CertLoggerInterstitialInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:certificate_reporting.CertLoggerInterstitialInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interstitial_reason()) {
      set_interstitial_reason(from.interstitial_reason());
    }
    if (from.has_user_proceeded()) {
      set_user_proceeded(from.user_proceeded());
    }
    if (from.has_overridable()) {
      set_overridable(from.overridable());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CertLoggerInterstitialInfo::CopyFrom(const CertLoggerInterstitialInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:certificate_reporting.CertLoggerInterstitialInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertLoggerInterstitialInfo::IsInitialized() const {

  return true;
}

void CertLoggerInterstitialInfo::Swap(CertLoggerInterstitialInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CertLoggerInterstitialInfo::InternalSwap(CertLoggerInterstitialInfo* other) {
  std::swap(interstitial_reason_, other->interstitial_reason_);
  std::swap(user_proceeded_, other->user_proceeded_);
  std::swap(overridable_, other->overridable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CertLoggerInterstitialInfo::GetTypeName() const {
  return "certificate_reporting.CertLoggerInterstitialInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CertLoggerInterstitialInfo

// optional .certificate_reporting.CertLoggerInterstitialInfo.InterstitialReason interstitial_reason = 1;
bool CertLoggerInterstitialInfo::has_interstitial_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CertLoggerInterstitialInfo::set_has_interstitial_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void CertLoggerInterstitialInfo::clear_has_interstitial_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void CertLoggerInterstitialInfo::clear_interstitial_reason() {
  interstitial_reason_ = 0;
  clear_has_interstitial_reason();
}
 ::certificate_reporting::CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::interstitial_reason() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerInterstitialInfo.interstitial_reason)
  return static_cast< ::certificate_reporting::CertLoggerInterstitialInfo_InterstitialReason >(interstitial_reason_);
}
 void CertLoggerInterstitialInfo::set_interstitial_reason(::certificate_reporting::CertLoggerInterstitialInfo_InterstitialReason value) {
  assert(::certificate_reporting::CertLoggerInterstitialInfo_InterstitialReason_IsValid(value));
  set_has_interstitial_reason();
  interstitial_reason_ = value;
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerInterstitialInfo.interstitial_reason)
}

// optional bool user_proceeded = 2;
bool CertLoggerInterstitialInfo::has_user_proceeded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CertLoggerInterstitialInfo::set_has_user_proceeded() {
  _has_bits_[0] |= 0x00000002u;
}
void CertLoggerInterstitialInfo::clear_has_user_proceeded() {
  _has_bits_[0] &= ~0x00000002u;
}
void CertLoggerInterstitialInfo::clear_user_proceeded() {
  user_proceeded_ = false;
  clear_has_user_proceeded();
}
 bool CertLoggerInterstitialInfo::user_proceeded() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerInterstitialInfo.user_proceeded)
  return user_proceeded_;
}
 void CertLoggerInterstitialInfo::set_user_proceeded(bool value) {
  set_has_user_proceeded();
  user_proceeded_ = value;
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerInterstitialInfo.user_proceeded)
}

// optional bool overridable = 3;
bool CertLoggerInterstitialInfo::has_overridable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CertLoggerInterstitialInfo::set_has_overridable() {
  _has_bits_[0] |= 0x00000004u;
}
void CertLoggerInterstitialInfo::clear_has_overridable() {
  _has_bits_[0] &= ~0x00000004u;
}
void CertLoggerInterstitialInfo::clear_overridable() {
  overridable_ = false;
  clear_has_overridable();
}
 bool CertLoggerInterstitialInfo::overridable() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerInterstitialInfo.overridable)
  return overridable_;
}
 void CertLoggerInterstitialInfo::set_overridable(bool value) {
  set_has_overridable();
  overridable_ = value;
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerInterstitialInfo.overridable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCertLoggerRequest(
    CertLoggerRequest* ptr) {
  return ptr->mutable_unknown_fields();
}

bool CertLoggerRequest_CertError_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CertLoggerRequest_CertError CertLoggerRequest::UNKNOWN_CERT_ERROR;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_REVOKED;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_INVALID;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_AUTHORITY_INVALID;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_COMMON_NAME_INVALID;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_NAME_CONSTRAINT_VIOLATION;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_WEAK_SIGNATURE_ALGORITHM;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_WEAK_KEY;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_DATE_INVALID;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_VALIDITY_TOO_LONG;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_UNABLE_TO_CHECK_REVOCATION;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_NO_REVOCATION_MECHANISM;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_NON_UNIQUE_NAME;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERTIFICATE_TRANSPARENCY_REQUIRED;
const CertLoggerRequest_CertError CertLoggerRequest::CertError_MIN;
const CertLoggerRequest_CertError CertLoggerRequest::CertError_MAX;
const int CertLoggerRequest::CertError_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertLoggerRequest::kHostnameFieldNumber;
const int CertLoggerRequest::kCertChainFieldNumber;
const int CertLoggerRequest::kTimeUsecFieldNumber;
const int CertLoggerRequest::kPublicKeyHashFieldNumber;
const int CertLoggerRequest::kPinFieldNumber;
const int CertLoggerRequest::kCertErrorFieldNumber;
const int CertLoggerRequest::kInterstitialInfoFieldNumber;
const int CertLoggerRequest::kUnverifiedCertChainFieldNumber;
const int CertLoggerRequest::kIsIssuedByKnownRootFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CertLoggerRequest::CertLoggerRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:certificate_reporting.CertLoggerRequest)
}

void CertLoggerRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  interstitial_info_ = const_cast< ::certificate_reporting::CertLoggerInterstitialInfo*>(
      ::certificate_reporting::CertLoggerInterstitialInfo::internal_default_instance());
#else
  interstitial_info_ = const_cast< ::certificate_reporting::CertLoggerInterstitialInfo*>(&::certificate_reporting::CertLoggerInterstitialInfo::default_instance());
#endif
}

CertLoggerRequest::CertLoggerRequest(const CertLoggerRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:certificate_reporting.CertLoggerRequest)
}

void CertLoggerRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_chain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_usec_ = GOOGLE_LONGLONG(0);
  interstitial_info_ = NULL;
  unverified_cert_chain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_issued_by_known_root_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CertLoggerRequest::~CertLoggerRequest() {
  // @@protoc_insertion_point(destructor:certificate_reporting.CertLoggerRequest)
  SharedDtor();
}

void CertLoggerRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_chain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unverified_cert_chain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete interstitial_info_;
  }
}

void CertLoggerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CertLoggerRequest& CertLoggerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cert_5flogger_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cert_5flogger_2eproto();
#endif
  return *default_instance_;
}

CertLoggerRequest* CertLoggerRequest::default_instance_ = NULL;

CertLoggerRequest* CertLoggerRequest::New(::google::protobuf::Arena* arena) const {
  CertLoggerRequest* n = new CertLoggerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CertLoggerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:certificate_reporting.CertLoggerRequest)
  if (_has_bits_[0 / 32] & 199u) {
    if (has_hostname()) {
      hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cert_chain()) {
      cert_chain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    time_usec_ = GOOGLE_LONGLONG(0);
    if (has_interstitial_info()) {
      if (interstitial_info_ != NULL) interstitial_info_->::certificate_reporting::CertLoggerInterstitialInfo::Clear();
    }
    if (has_unverified_cert_chain()) {
      unverified_cert_chain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  is_issued_by_known_root_ = false;
  public_key_hash_.Clear();
  pin_.Clear();
  cert_error_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CertLoggerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCertLoggerRequest, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:certificate_reporting.CertLoggerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cert_chain;
        break;
      }

      // required string cert_chain = 2;
      case 2: {
        if (tag == 18) {
         parse_cert_chain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cert_chain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_usec;
        break;
      }

      // required int64 time_usec = 3;
      case 3: {
        if (tag == 24) {
         parse_time_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_public_key_hash;
        break;
      }

      // repeated string public_key_hash = 4;
      case 4: {
        if (tag == 34) {
         parse_public_key_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_public_key_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_public_key_hash;
        if (input->ExpectTag(42)) goto parse_pin;
        break;
      }

      // repeated string pin = 5;
      case 5: {
        if (tag == 42) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pin;
        if (input->ExpectTag(48)) goto parse_cert_error;
        break;
      }

      // repeated .certificate_reporting.CertLoggerRequest.CertError cert_error = 6;
      case 6: {
        if (tag == 48) {
         parse_cert_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::certificate_reporting::CertLoggerRequest_CertError_IsValid(value)) {
            add_cert_error(static_cast< ::certificate_reporting::CertLoggerRequest_CertError >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 6,
                 ::certificate_reporting::CertLoggerRequest_CertError_IsValid,
                 &unknown_fields_stream,
                 this->mutable_cert_error())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cert_error;
        if (input->ExpectTag(58)) goto parse_interstitial_info;
        break;
      }

      // optional .certificate_reporting.CertLoggerInterstitialInfo interstitial_info = 7;
      case 7: {
        if (tag == 58) {
         parse_interstitial_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interstitial_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_unverified_cert_chain;
        break;
      }

      // optional string unverified_cert_chain = 8;
      case 8: {
        if (tag == 66) {
         parse_unverified_cert_chain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unverified_cert_chain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_issued_by_known_root;
        break;
      }

      // optional bool is_issued_by_known_root = 9;
      case 9: {
        if (tag == 72) {
         parse_is_issued_by_known_root:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_issued_by_known_root_)));
          set_has_is_issued_by_known_root();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:certificate_reporting.CertLoggerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:certificate_reporting.CertLoggerRequest)
  return false;
#undef DO_
}

void CertLoggerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:certificate_reporting.CertLoggerRequest)
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // required string cert_chain = 2;
  if (has_cert_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cert_chain(), output);
  }

  // required int64 time_usec = 3;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_usec(), output);
  }

  // repeated string public_key_hash = 4;
  for (int i = 0; i < this->public_key_hash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->public_key_hash(i), output);
  }

  // repeated string pin = 5;
  for (int i = 0; i < this->pin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pin(i), output);
  }

  // repeated .certificate_reporting.CertLoggerRequest.CertError cert_error = 6;
  for (int i = 0; i < this->cert_error_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cert_error(i), output);
  }

  // optional .certificate_reporting.CertLoggerInterstitialInfo interstitial_info = 7;
  if (has_interstitial_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->interstitial_info_, output);
  }

  // optional string unverified_cert_chain = 8;
  if (has_unverified_cert_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->unverified_cert_chain(), output);
  }

  // optional bool is_issued_by_known_root = 9;
  if (has_is_issued_by_known_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_issued_by_known_root(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:certificate_reporting.CertLoggerRequest)
}

int CertLoggerRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:certificate_reporting.CertLoggerRequest)
  int total_size = 0;

  if (has_hostname()) {
    // required string hostname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  if (has_cert_chain()) {
    // required string cert_chain = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cert_chain());
  }

  if (has_time_usec()) {
    // required int64 time_usec = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());
  }

  return total_size;
}
int CertLoggerRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:certificate_reporting.CertLoggerRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string hostname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());

    // required string cert_chain = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cert_chain());

    // required int64 time_usec = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[6 / 32] & 192u) {
    // optional .certificate_reporting.CertLoggerInterstitialInfo interstitial_info = 7;
    if (has_interstitial_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->interstitial_info_);
    }

    // optional string unverified_cert_chain = 8;
    if (has_unverified_cert_chain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unverified_cert_chain());
    }

  }
  // optional bool is_issued_by_known_root = 9;
  if (has_is_issued_by_known_root()) {
    total_size += 1 + 1;
  }

  // repeated string public_key_hash = 4;
  total_size += 1 * this->public_key_hash_size();
  for (int i = 0; i < this->public_key_hash_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->public_key_hash(i));
  }

  // repeated string pin = 5;
  total_size += 1 * this->pin_size();
  for (int i = 0; i < this->pin_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pin(i));
  }

  // repeated .certificate_reporting.CertLoggerRequest.CertError cert_error = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->cert_error_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->cert_error(i));
    }
    total_size += 1 * this->cert_error_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertLoggerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CertLoggerRequest*>(&from));
}

void CertLoggerRequest::MergeFrom(const CertLoggerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:certificate_reporting.CertLoggerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  public_key_hash_.MergeFrom(from.public_key_hash_);
  pin_.MergeFrom(from.pin_);
  cert_error_.MergeFrom(from.cert_error_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_has_hostname();
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (from.has_cert_chain()) {
      set_has_cert_chain();
      cert_chain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_chain_);
    }
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_interstitial_info()) {
      mutable_interstitial_info()->::certificate_reporting::CertLoggerInterstitialInfo::MergeFrom(from.interstitial_info());
    }
    if (from.has_unverified_cert_chain()) {
      set_has_unverified_cert_chain();
      unverified_cert_chain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unverified_cert_chain_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_issued_by_known_root()) {
      set_is_issued_by_known_root(from.is_issued_by_known_root());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CertLoggerRequest::CopyFrom(const CertLoggerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:certificate_reporting.CertLoggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertLoggerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CertLoggerRequest::Swap(CertLoggerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CertLoggerRequest::InternalSwap(CertLoggerRequest* other) {
  hostname_.Swap(&other->hostname_);
  cert_chain_.Swap(&other->cert_chain_);
  std::swap(time_usec_, other->time_usec_);
  public_key_hash_.UnsafeArenaSwap(&other->public_key_hash_);
  pin_.UnsafeArenaSwap(&other->pin_);
  cert_error_.UnsafeArenaSwap(&other->cert_error_);
  std::swap(interstitial_info_, other->interstitial_info_);
  unverified_cert_chain_.Swap(&other->unverified_cert_chain_);
  std::swap(is_issued_by_known_root_, other->is_issued_by_known_root_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CertLoggerRequest::GetTypeName() const {
  return "certificate_reporting.CertLoggerRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CertLoggerRequest

// required string hostname = 1;
bool CertLoggerRequest::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CertLoggerRequest::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
void CertLoggerRequest::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CertLoggerRequest::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
 const ::std::string& CertLoggerRequest::hostname() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CertLoggerRequest::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.hostname)
}
 void CertLoggerRequest::set_hostname(const char* value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:certificate_reporting.CertLoggerRequest.hostname)
}
 void CertLoggerRequest::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:certificate_reporting.CertLoggerRequest.hostname)
}
 ::std::string* CertLoggerRequest::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:certificate_reporting.CertLoggerRequest.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CertLoggerRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:certificate_reporting.CertLoggerRequest.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CertLoggerRequest::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:certificate_reporting.CertLoggerRequest.hostname)
}

// required string cert_chain = 2;
bool CertLoggerRequest::has_cert_chain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CertLoggerRequest::set_has_cert_chain() {
  _has_bits_[0] |= 0x00000002u;
}
void CertLoggerRequest::clear_has_cert_chain() {
  _has_bits_[0] &= ~0x00000002u;
}
void CertLoggerRequest::clear_cert_chain() {
  cert_chain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cert_chain();
}
 const ::std::string& CertLoggerRequest::cert_chain() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.cert_chain)
  return cert_chain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CertLoggerRequest::set_cert_chain(const ::std::string& value) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.cert_chain)
}
 void CertLoggerRequest::set_cert_chain(const char* value) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:certificate_reporting.CertLoggerRequest.cert_chain)
}
 void CertLoggerRequest::set_cert_chain(const char* value, size_t size) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:certificate_reporting.CertLoggerRequest.cert_chain)
}
 ::std::string* CertLoggerRequest::mutable_cert_chain() {
  set_has_cert_chain();
  // @@protoc_insertion_point(field_mutable:certificate_reporting.CertLoggerRequest.cert_chain)
  return cert_chain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CertLoggerRequest::release_cert_chain() {
  // @@protoc_insertion_point(field_release:certificate_reporting.CertLoggerRequest.cert_chain)
  clear_has_cert_chain();
  return cert_chain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CertLoggerRequest::set_allocated_cert_chain(::std::string* cert_chain) {
  if (cert_chain != NULL) {
    set_has_cert_chain();
  } else {
    clear_has_cert_chain();
  }
  cert_chain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cert_chain);
  // @@protoc_insertion_point(field_set_allocated:certificate_reporting.CertLoggerRequest.cert_chain)
}

// required int64 time_usec = 3;
bool CertLoggerRequest::has_time_usec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CertLoggerRequest::set_has_time_usec() {
  _has_bits_[0] |= 0x00000004u;
}
void CertLoggerRequest::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000004u;
}
void CertLoggerRequest::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
 ::google::protobuf::int64 CertLoggerRequest::time_usec() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.time_usec)
  return time_usec_;
}
 void CertLoggerRequest::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.time_usec)
}

// repeated string public_key_hash = 4;
int CertLoggerRequest::public_key_hash_size() const {
  return public_key_hash_.size();
}
void CertLoggerRequest::clear_public_key_hash() {
  public_key_hash_.Clear();
}
 const ::std::string& CertLoggerRequest::public_key_hash(int index) const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Get(index);
}
 ::std::string* CertLoggerRequest::mutable_public_key_hash(int index) {
  // @@protoc_insertion_point(field_mutable:certificate_reporting.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Mutable(index);
}
 void CertLoggerRequest::set_public_key_hash(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.public_key_hash)
  public_key_hash_.Mutable(index)->assign(value);
}
 void CertLoggerRequest::set_public_key_hash(int index, const char* value) {
  public_key_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:certificate_reporting.CertLoggerRequest.public_key_hash)
}
 void CertLoggerRequest::set_public_key_hash(int index, const char* value, size_t size) {
  public_key_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:certificate_reporting.CertLoggerRequest.public_key_hash)
}
 ::std::string* CertLoggerRequest::add_public_key_hash() {
  // @@protoc_insertion_point(field_add_mutable:certificate_reporting.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Add();
}
 void CertLoggerRequest::add_public_key_hash(const ::std::string& value) {
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:certificate_reporting.CertLoggerRequest.public_key_hash)
}
 void CertLoggerRequest::add_public_key_hash(const char* value) {
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:certificate_reporting.CertLoggerRequest.public_key_hash)
}
 void CertLoggerRequest::add_public_key_hash(const char* value, size_t size) {
  public_key_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:certificate_reporting.CertLoggerRequest.public_key_hash)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CertLoggerRequest::public_key_hash() const {
  // @@protoc_insertion_point(field_list:certificate_reporting.CertLoggerRequest.public_key_hash)
  return public_key_hash_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CertLoggerRequest::mutable_public_key_hash() {
  // @@protoc_insertion_point(field_mutable_list:certificate_reporting.CertLoggerRequest.public_key_hash)
  return &public_key_hash_;
}

// repeated string pin = 5;
int CertLoggerRequest::pin_size() const {
  return pin_.size();
}
void CertLoggerRequest::clear_pin() {
  pin_.Clear();
}
 const ::std::string& CertLoggerRequest::pin(int index) const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.pin)
  return pin_.Get(index);
}
 ::std::string* CertLoggerRequest::mutable_pin(int index) {
  // @@protoc_insertion_point(field_mutable:certificate_reporting.CertLoggerRequest.pin)
  return pin_.Mutable(index);
}
 void CertLoggerRequest::set_pin(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.pin)
  pin_.Mutable(index)->assign(value);
}
 void CertLoggerRequest::set_pin(int index, const char* value) {
  pin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:certificate_reporting.CertLoggerRequest.pin)
}
 void CertLoggerRequest::set_pin(int index, const char* value, size_t size) {
  pin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:certificate_reporting.CertLoggerRequest.pin)
}
 ::std::string* CertLoggerRequest::add_pin() {
  // @@protoc_insertion_point(field_add_mutable:certificate_reporting.CertLoggerRequest.pin)
  return pin_.Add();
}
 void CertLoggerRequest::add_pin(const ::std::string& value) {
  pin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:certificate_reporting.CertLoggerRequest.pin)
}
 void CertLoggerRequest::add_pin(const char* value) {
  pin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:certificate_reporting.CertLoggerRequest.pin)
}
 void CertLoggerRequest::add_pin(const char* value, size_t size) {
  pin_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:certificate_reporting.CertLoggerRequest.pin)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CertLoggerRequest::pin() const {
  // @@protoc_insertion_point(field_list:certificate_reporting.CertLoggerRequest.pin)
  return pin_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CertLoggerRequest::mutable_pin() {
  // @@protoc_insertion_point(field_mutable_list:certificate_reporting.CertLoggerRequest.pin)
  return &pin_;
}

// repeated .certificate_reporting.CertLoggerRequest.CertError cert_error = 6;
int CertLoggerRequest::cert_error_size() const {
  return cert_error_.size();
}
void CertLoggerRequest::clear_cert_error() {
  cert_error_.Clear();
}
 ::certificate_reporting::CertLoggerRequest_CertError CertLoggerRequest::cert_error(int index) const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.cert_error)
  return static_cast< ::certificate_reporting::CertLoggerRequest_CertError >(cert_error_.Get(index));
}
 void CertLoggerRequest::set_cert_error(int index, ::certificate_reporting::CertLoggerRequest_CertError value) {
  assert(::certificate_reporting::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Set(index, value);
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.cert_error)
}
 void CertLoggerRequest::add_cert_error(::certificate_reporting::CertLoggerRequest_CertError value) {
  assert(::certificate_reporting::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Add(value);
  // @@protoc_insertion_point(field_add:certificate_reporting.CertLoggerRequest.cert_error)
}
 const ::google::protobuf::RepeatedField<int>&
CertLoggerRequest::cert_error() const {
  // @@protoc_insertion_point(field_list:certificate_reporting.CertLoggerRequest.cert_error)
  return cert_error_;
}
 ::google::protobuf::RepeatedField<int>*
CertLoggerRequest::mutable_cert_error() {
  // @@protoc_insertion_point(field_mutable_list:certificate_reporting.CertLoggerRequest.cert_error)
  return &cert_error_;
}

// optional .certificate_reporting.CertLoggerInterstitialInfo interstitial_info = 7;
bool CertLoggerRequest::has_interstitial_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CertLoggerRequest::set_has_interstitial_info() {
  _has_bits_[0] |= 0x00000040u;
}
void CertLoggerRequest::clear_has_interstitial_info() {
  _has_bits_[0] &= ~0x00000040u;
}
void CertLoggerRequest::clear_interstitial_info() {
  if (interstitial_info_ != NULL) interstitial_info_->::certificate_reporting::CertLoggerInterstitialInfo::Clear();
  clear_has_interstitial_info();
}
const ::certificate_reporting::CertLoggerInterstitialInfo& CertLoggerRequest::interstitial_info() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.interstitial_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return interstitial_info_ != NULL ? *interstitial_info_ : *default_instance().interstitial_info_;
#else
  return interstitial_info_ != NULL ? *interstitial_info_ : *default_instance_->interstitial_info_;
#endif
}
::certificate_reporting::CertLoggerInterstitialInfo* CertLoggerRequest::mutable_interstitial_info() {
  set_has_interstitial_info();
  if (interstitial_info_ == NULL) {
    interstitial_info_ = new ::certificate_reporting::CertLoggerInterstitialInfo;
  }
  // @@protoc_insertion_point(field_mutable:certificate_reporting.CertLoggerRequest.interstitial_info)
  return interstitial_info_;
}
::certificate_reporting::CertLoggerInterstitialInfo* CertLoggerRequest::release_interstitial_info() {
  // @@protoc_insertion_point(field_release:certificate_reporting.CertLoggerRequest.interstitial_info)
  clear_has_interstitial_info();
  ::certificate_reporting::CertLoggerInterstitialInfo* temp = interstitial_info_;
  interstitial_info_ = NULL;
  return temp;
}
void CertLoggerRequest::set_allocated_interstitial_info(::certificate_reporting::CertLoggerInterstitialInfo* interstitial_info) {
  delete interstitial_info_;
  interstitial_info_ = interstitial_info;
  if (interstitial_info) {
    set_has_interstitial_info();
  } else {
    clear_has_interstitial_info();
  }
  // @@protoc_insertion_point(field_set_allocated:certificate_reporting.CertLoggerRequest.interstitial_info)
}

// optional string unverified_cert_chain = 8;
bool CertLoggerRequest::has_unverified_cert_chain() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CertLoggerRequest::set_has_unverified_cert_chain() {
  _has_bits_[0] |= 0x00000080u;
}
void CertLoggerRequest::clear_has_unverified_cert_chain() {
  _has_bits_[0] &= ~0x00000080u;
}
void CertLoggerRequest::clear_unverified_cert_chain() {
  unverified_cert_chain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unverified_cert_chain();
}
 const ::std::string& CertLoggerRequest::unverified_cert_chain() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.unverified_cert_chain)
  return unverified_cert_chain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CertLoggerRequest::set_unverified_cert_chain(const ::std::string& value) {
  set_has_unverified_cert_chain();
  unverified_cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.unverified_cert_chain)
}
 void CertLoggerRequest::set_unverified_cert_chain(const char* value) {
  set_has_unverified_cert_chain();
  unverified_cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:certificate_reporting.CertLoggerRequest.unverified_cert_chain)
}
 void CertLoggerRequest::set_unverified_cert_chain(const char* value, size_t size) {
  set_has_unverified_cert_chain();
  unverified_cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:certificate_reporting.CertLoggerRequest.unverified_cert_chain)
}
 ::std::string* CertLoggerRequest::mutable_unverified_cert_chain() {
  set_has_unverified_cert_chain();
  // @@protoc_insertion_point(field_mutable:certificate_reporting.CertLoggerRequest.unverified_cert_chain)
  return unverified_cert_chain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CertLoggerRequest::release_unverified_cert_chain() {
  // @@protoc_insertion_point(field_release:certificate_reporting.CertLoggerRequest.unverified_cert_chain)
  clear_has_unverified_cert_chain();
  return unverified_cert_chain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CertLoggerRequest::set_allocated_unverified_cert_chain(::std::string* unverified_cert_chain) {
  if (unverified_cert_chain != NULL) {
    set_has_unverified_cert_chain();
  } else {
    clear_has_unverified_cert_chain();
  }
  unverified_cert_chain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unverified_cert_chain);
  // @@protoc_insertion_point(field_set_allocated:certificate_reporting.CertLoggerRequest.unverified_cert_chain)
}

// optional bool is_issued_by_known_root = 9;
bool CertLoggerRequest::has_is_issued_by_known_root() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CertLoggerRequest::set_has_is_issued_by_known_root() {
  _has_bits_[0] |= 0x00000100u;
}
void CertLoggerRequest::clear_has_is_issued_by_known_root() {
  _has_bits_[0] &= ~0x00000100u;
}
void CertLoggerRequest::clear_is_issued_by_known_root() {
  is_issued_by_known_root_ = false;
  clear_has_is_issued_by_known_root();
}
 bool CertLoggerRequest::is_issued_by_known_root() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.CertLoggerRequest.is_issued_by_known_root)
  return is_issued_by_known_root_;
}
 void CertLoggerRequest::set_is_issued_by_known_root(bool value) {
  set_has_is_issued_by_known_root();
  is_issued_by_known_root_ = value;
  // @@protoc_insertion_point(field_set:certificate_reporting.CertLoggerRequest.is_issued_by_known_root)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace certificate_reporting

// @@protoc_insertion_point(global_scope)
