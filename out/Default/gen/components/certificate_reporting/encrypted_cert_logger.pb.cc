// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encrypted_cert_logger.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "encrypted_cert_logger.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace certificate_reporting {

void protobuf_ShutdownFile_encrypted_5fcert_5flogger_2eproto() {
  delete EncryptedCertLoggerRequest::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_encrypted_5fcert_5flogger_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_encrypted_5fcert_5flogger_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  EncryptedCertLoggerRequest::default_instance_ = new EncryptedCertLoggerRequest();
  EncryptedCertLoggerRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_encrypted_5fcert_5flogger_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_encrypted_5fcert_5flogger_2eproto_once_);
void protobuf_AddDesc_encrypted_5fcert_5flogger_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_encrypted_5fcert_5flogger_2eproto_once_,
                 &protobuf_AddDesc_encrypted_5fcert_5flogger_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_encrypted_5fcert_5flogger_2eproto {
  StaticDescriptorInitializer_encrypted_5fcert_5flogger_2eproto() {
    protobuf_AddDesc_encrypted_5fcert_5flogger_2eproto();
  }
} static_descriptor_initializer_encrypted_5fcert_5flogger_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForEncryptedCertLoggerRequest(
    EncryptedCertLoggerRequest* ptr) {
  return ptr->mutable_unknown_fields();
}

bool EncryptedCertLoggerRequest_Algorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EncryptedCertLoggerRequest_Algorithm EncryptedCertLoggerRequest::UNKNOWN_ALGORITHM;
const EncryptedCertLoggerRequest_Algorithm EncryptedCertLoggerRequest::AEAD_ECDH_AES_128_CTR_HMAC_SHA256;
const EncryptedCertLoggerRequest_Algorithm EncryptedCertLoggerRequest::Algorithm_MIN;
const EncryptedCertLoggerRequest_Algorithm EncryptedCertLoggerRequest::Algorithm_MAX;
const int EncryptedCertLoggerRequest::Algorithm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncryptedCertLoggerRequest::kEncryptedReportFieldNumber;
const int EncryptedCertLoggerRequest::kServerPublicKeyVersionFieldNumber;
const int EncryptedCertLoggerRequest::kClientPublicKeyFieldNumber;
const int EncryptedCertLoggerRequest::kAlgorithmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncryptedCertLoggerRequest::EncryptedCertLoggerRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:certificate_reporting.EncryptedCertLoggerRequest)
}

void EncryptedCertLoggerRequest::InitAsDefaultInstance() {
}

EncryptedCertLoggerRequest::EncryptedCertLoggerRequest(const EncryptedCertLoggerRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:certificate_reporting.EncryptedCertLoggerRequest)
}

void EncryptedCertLoggerRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypted_report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_public_key_version_ = 0u;
  client_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptedCertLoggerRequest::~EncryptedCertLoggerRequest() {
  // @@protoc_insertion_point(destructor:certificate_reporting.EncryptedCertLoggerRequest)
  SharedDtor();
}

void EncryptedCertLoggerRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypted_report_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EncryptedCertLoggerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EncryptedCertLoggerRequest& EncryptedCertLoggerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_encrypted_5fcert_5flogger_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_encrypted_5fcert_5flogger_2eproto();
#endif
  return *default_instance_;
}

EncryptedCertLoggerRequest* EncryptedCertLoggerRequest::default_instance_ = NULL;

EncryptedCertLoggerRequest* EncryptedCertLoggerRequest::New(::google::protobuf::Arena* arena) const {
  EncryptedCertLoggerRequest* n = new EncryptedCertLoggerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EncryptedCertLoggerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:certificate_reporting.EncryptedCertLoggerRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_encrypted_report()) {
      encrypted_report_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    server_public_key_version_ = 0u;
    if (has_client_public_key()) {
      client_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    algorithm_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EncryptedCertLoggerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForEncryptedCertLoggerRequest, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:certificate_reporting.EncryptedCertLoggerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes encrypted_report = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_report()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_server_public_key_version;
        break;
      }

      // required uint32 server_public_key_version = 2;
      case 2: {
        if (tag == 16) {
         parse_server_public_key_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_public_key_version_)));
          set_has_server_public_key_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_client_public_key;
        break;
      }

      // required bytes client_public_key = 3;
      case 3: {
        if (tag == 26) {
         parse_client_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_public_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_algorithm;
        break;
      }

      // optional .certificate_reporting.EncryptedCertLoggerRequest.Algorithm algorithm = 4 [default = AEAD_ECDH_AES_128_CTR_HMAC_SHA256];
      case 4: {
        if (tag == 32) {
         parse_algorithm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::certificate_reporting::EncryptedCertLoggerRequest_Algorithm_IsValid(value)) {
            set_algorithm(static_cast< ::certificate_reporting::EncryptedCertLoggerRequest_Algorithm >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:certificate_reporting.EncryptedCertLoggerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:certificate_reporting.EncryptedCertLoggerRequest)
  return false;
#undef DO_
}

void EncryptedCertLoggerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:certificate_reporting.EncryptedCertLoggerRequest)
  // required bytes encrypted_report = 1;
  if (has_encrypted_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->encrypted_report(), output);
  }

  // required uint32 server_public_key_version = 2;
  if (has_server_public_key_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_public_key_version(), output);
  }

  // required bytes client_public_key = 3;
  if (has_client_public_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->client_public_key(), output);
  }

  // optional .certificate_reporting.EncryptedCertLoggerRequest.Algorithm algorithm = 4 [default = AEAD_ECDH_AES_128_CTR_HMAC_SHA256];
  if (has_algorithm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->algorithm(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:certificate_reporting.EncryptedCertLoggerRequest)
}

int EncryptedCertLoggerRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:certificate_reporting.EncryptedCertLoggerRequest)
  int total_size = 0;

  if (has_encrypted_report()) {
    // required bytes encrypted_report = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encrypted_report());
  }

  if (has_server_public_key_version()) {
    // required uint32 server_public_key_version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_public_key_version());
  }

  if (has_client_public_key()) {
    // required bytes client_public_key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->client_public_key());
  }

  return total_size;
}
int EncryptedCertLoggerRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:certificate_reporting.EncryptedCertLoggerRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes encrypted_report = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encrypted_report());

    // required uint32 server_public_key_version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_public_key_version());

    // required bytes client_public_key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->client_public_key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .certificate_reporting.EncryptedCertLoggerRequest.Algorithm algorithm = 4 [default = AEAD_ECDH_AES_128_CTR_HMAC_SHA256];
  if (has_algorithm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptedCertLoggerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EncryptedCertLoggerRequest*>(&from));
}

void EncryptedCertLoggerRequest::MergeFrom(const EncryptedCertLoggerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:certificate_reporting.EncryptedCertLoggerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encrypted_report()) {
      set_has_encrypted_report();
      encrypted_report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_report_);
    }
    if (from.has_server_public_key_version()) {
      set_server_public_key_version(from.server_public_key_version());
    }
    if (from.has_client_public_key()) {
      set_has_client_public_key();
      client_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_public_key_);
    }
    if (from.has_algorithm()) {
      set_algorithm(from.algorithm());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void EncryptedCertLoggerRequest::CopyFrom(const EncryptedCertLoggerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:certificate_reporting.EncryptedCertLoggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedCertLoggerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EncryptedCertLoggerRequest::Swap(EncryptedCertLoggerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncryptedCertLoggerRequest::InternalSwap(EncryptedCertLoggerRequest* other) {
  encrypted_report_.Swap(&other->encrypted_report_);
  std::swap(server_public_key_version_, other->server_public_key_version_);
  client_public_key_.Swap(&other->client_public_key_);
  std::swap(algorithm_, other->algorithm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EncryptedCertLoggerRequest::GetTypeName() const {
  return "certificate_reporting.EncryptedCertLoggerRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EncryptedCertLoggerRequest

// required bytes encrypted_report = 1;
bool EncryptedCertLoggerRequest::has_encrypted_report() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EncryptedCertLoggerRequest::set_has_encrypted_report() {
  _has_bits_[0] |= 0x00000001u;
}
void EncryptedCertLoggerRequest::clear_has_encrypted_report() {
  _has_bits_[0] &= ~0x00000001u;
}
void EncryptedCertLoggerRequest::clear_encrypted_report() {
  encrypted_report_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encrypted_report();
}
 const ::std::string& EncryptedCertLoggerRequest::encrypted_report() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.EncryptedCertLoggerRequest.encrypted_report)
  return encrypted_report_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EncryptedCertLoggerRequest::set_encrypted_report(const ::std::string& value) {
  set_has_encrypted_report();
  encrypted_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:certificate_reporting.EncryptedCertLoggerRequest.encrypted_report)
}
 void EncryptedCertLoggerRequest::set_encrypted_report(const char* value) {
  set_has_encrypted_report();
  encrypted_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:certificate_reporting.EncryptedCertLoggerRequest.encrypted_report)
}
 void EncryptedCertLoggerRequest::set_encrypted_report(const void* value, size_t size) {
  set_has_encrypted_report();
  encrypted_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:certificate_reporting.EncryptedCertLoggerRequest.encrypted_report)
}
 ::std::string* EncryptedCertLoggerRequest::mutable_encrypted_report() {
  set_has_encrypted_report();
  // @@protoc_insertion_point(field_mutable:certificate_reporting.EncryptedCertLoggerRequest.encrypted_report)
  return encrypted_report_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EncryptedCertLoggerRequest::release_encrypted_report() {
  // @@protoc_insertion_point(field_release:certificate_reporting.EncryptedCertLoggerRequest.encrypted_report)
  clear_has_encrypted_report();
  return encrypted_report_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EncryptedCertLoggerRequest::set_allocated_encrypted_report(::std::string* encrypted_report) {
  if (encrypted_report != NULL) {
    set_has_encrypted_report();
  } else {
    clear_has_encrypted_report();
  }
  encrypted_report_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypted_report);
  // @@protoc_insertion_point(field_set_allocated:certificate_reporting.EncryptedCertLoggerRequest.encrypted_report)
}

// required uint32 server_public_key_version = 2;
bool EncryptedCertLoggerRequest::has_server_public_key_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EncryptedCertLoggerRequest::set_has_server_public_key_version() {
  _has_bits_[0] |= 0x00000002u;
}
void EncryptedCertLoggerRequest::clear_has_server_public_key_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void EncryptedCertLoggerRequest::clear_server_public_key_version() {
  server_public_key_version_ = 0u;
  clear_has_server_public_key_version();
}
 ::google::protobuf::uint32 EncryptedCertLoggerRequest::server_public_key_version() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.EncryptedCertLoggerRequest.server_public_key_version)
  return server_public_key_version_;
}
 void EncryptedCertLoggerRequest::set_server_public_key_version(::google::protobuf::uint32 value) {
  set_has_server_public_key_version();
  server_public_key_version_ = value;
  // @@protoc_insertion_point(field_set:certificate_reporting.EncryptedCertLoggerRequest.server_public_key_version)
}

// required bytes client_public_key = 3;
bool EncryptedCertLoggerRequest::has_client_public_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EncryptedCertLoggerRequest::set_has_client_public_key() {
  _has_bits_[0] |= 0x00000004u;
}
void EncryptedCertLoggerRequest::clear_has_client_public_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void EncryptedCertLoggerRequest::clear_client_public_key() {
  client_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_public_key();
}
 const ::std::string& EncryptedCertLoggerRequest::client_public_key() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.EncryptedCertLoggerRequest.client_public_key)
  return client_public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EncryptedCertLoggerRequest::set_client_public_key(const ::std::string& value) {
  set_has_client_public_key();
  client_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:certificate_reporting.EncryptedCertLoggerRequest.client_public_key)
}
 void EncryptedCertLoggerRequest::set_client_public_key(const char* value) {
  set_has_client_public_key();
  client_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:certificate_reporting.EncryptedCertLoggerRequest.client_public_key)
}
 void EncryptedCertLoggerRequest::set_client_public_key(const void* value, size_t size) {
  set_has_client_public_key();
  client_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:certificate_reporting.EncryptedCertLoggerRequest.client_public_key)
}
 ::std::string* EncryptedCertLoggerRequest::mutable_client_public_key() {
  set_has_client_public_key();
  // @@protoc_insertion_point(field_mutable:certificate_reporting.EncryptedCertLoggerRequest.client_public_key)
  return client_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EncryptedCertLoggerRequest::release_client_public_key() {
  // @@protoc_insertion_point(field_release:certificate_reporting.EncryptedCertLoggerRequest.client_public_key)
  clear_has_client_public_key();
  return client_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EncryptedCertLoggerRequest::set_allocated_client_public_key(::std::string* client_public_key) {
  if (client_public_key != NULL) {
    set_has_client_public_key();
  } else {
    clear_has_client_public_key();
  }
  client_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_public_key);
  // @@protoc_insertion_point(field_set_allocated:certificate_reporting.EncryptedCertLoggerRequest.client_public_key)
}

// optional .certificate_reporting.EncryptedCertLoggerRequest.Algorithm algorithm = 4 [default = AEAD_ECDH_AES_128_CTR_HMAC_SHA256];
bool EncryptedCertLoggerRequest::has_algorithm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EncryptedCertLoggerRequest::set_has_algorithm() {
  _has_bits_[0] |= 0x00000008u;
}
void EncryptedCertLoggerRequest::clear_has_algorithm() {
  _has_bits_[0] &= ~0x00000008u;
}
void EncryptedCertLoggerRequest::clear_algorithm() {
  algorithm_ = 1;
  clear_has_algorithm();
}
 ::certificate_reporting::EncryptedCertLoggerRequest_Algorithm EncryptedCertLoggerRequest::algorithm() const {
  // @@protoc_insertion_point(field_get:certificate_reporting.EncryptedCertLoggerRequest.algorithm)
  return static_cast< ::certificate_reporting::EncryptedCertLoggerRequest_Algorithm >(algorithm_);
}
 void EncryptedCertLoggerRequest::set_algorithm(::certificate_reporting::EncryptedCertLoggerRequest_Algorithm value) {
  assert(::certificate_reporting::EncryptedCertLoggerRequest_Algorithm_IsValid(value));
  set_has_algorithm();
  algorithm_ = value;
  // @@protoc_insertion_point(field_set:certificate_reporting.EncryptedCertLoggerRequest.algorithm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace certificate_reporting

// @@protoc_insertion_point(global_scope)
