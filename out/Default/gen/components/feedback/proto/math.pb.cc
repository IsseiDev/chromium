// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: math.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "math.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace userfeedback {

void protobuf_ShutdownFile_math_2eproto() {
  delete Dimensions::default_instance_;
  delete Rectangle::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_math_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_math_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Dimensions::default_instance_ = new Dimensions();
  Rectangle::default_instance_ = new Rectangle();
  Dimensions::default_instance_->InitAsDefaultInstance();
  Rectangle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_math_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_math_2eproto_once_);
void protobuf_AddDesc_math_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_math_2eproto_once_,
                 &protobuf_AddDesc_math_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_math_2eproto {
  StaticDescriptorInitializer_math_2eproto() {
    protobuf_AddDesc_math_2eproto();
  }
} static_descriptor_initializer_math_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForDimensions(
    Dimensions* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dimensions::kWidthFieldNumber;
const int Dimensions::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dimensions::Dimensions()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.Dimensions)
}

void Dimensions::InitAsDefaultInstance() {
}

Dimensions::Dimensions(const Dimensions& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userfeedback.Dimensions)
}

void Dimensions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dimensions::~Dimensions() {
  // @@protoc_insertion_point(destructor:userfeedback.Dimensions)
  SharedDtor();
}

void Dimensions::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Dimensions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dimensions& Dimensions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_math_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_math_2eproto();
#endif
  return *default_instance_;
}

Dimensions* Dimensions::default_instance_ = NULL;

Dimensions* Dimensions::New(::google::protobuf::Arena* arena) const {
  Dimensions* n = new Dimensions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dimensions::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.Dimensions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Dimensions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Dimensions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Dimensions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForDimensions, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.Dimensions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float width = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // required float height = 2;
      case 2: {
        if (tag == 21) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.Dimensions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.Dimensions)
  return false;
#undef DO_
}

void Dimensions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.Dimensions)
  // required float width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // required float height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.Dimensions)
}

int Dimensions::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.Dimensions)
  int total_size = 0;

  if (has_width()) {
    // required float width = 1;
    total_size += 1 + 4;
  }

  if (has_height()) {
    // required float height = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
int Dimensions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.Dimensions)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float width = 1;
    total_size += 1 + 4;

    // required float height = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dimensions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dimensions*>(&from));
}

void Dimensions::MergeFrom(const Dimensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.Dimensions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Dimensions::CopyFrom(const Dimensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.Dimensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimensions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Dimensions::Swap(Dimensions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dimensions::InternalSwap(Dimensions* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dimensions::GetTypeName() const {
  return "userfeedback.Dimensions";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dimensions

// required float width = 1;
bool Dimensions::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dimensions::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void Dimensions::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dimensions::clear_width() {
  width_ = 0;
  clear_has_width();
}
 float Dimensions::width() const {
  // @@protoc_insertion_point(field_get:userfeedback.Dimensions.width)
  return width_;
}
 void Dimensions::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.Dimensions.width)
}

// required float height = 2;
bool Dimensions::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dimensions::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void Dimensions::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dimensions::clear_height() {
  height_ = 0;
  clear_has_height();
}
 float Dimensions::height() const {
  // @@protoc_insertion_point(field_get:userfeedback.Dimensions.height)
  return height_;
}
 void Dimensions::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.Dimensions.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRectangle(
    Rectangle* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rectangle::kLeftFieldNumber;
const int Rectangle::kTopFieldNumber;
const int Rectangle::kWidthFieldNumber;
const int Rectangle::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rectangle::Rectangle()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.Rectangle)
}

void Rectangle::InitAsDefaultInstance() {
}

Rectangle::Rectangle(const Rectangle& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userfeedback.Rectangle)
}

void Rectangle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_ = 0;
  top_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:userfeedback.Rectangle)
  SharedDtor();
}

void Rectangle::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Rectangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Rectangle& Rectangle::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_math_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_math_2eproto();
#endif
  return *default_instance_;
}

Rectangle* Rectangle::default_instance_ = NULL;

Rectangle* Rectangle::New(::google::protobuf::Arena* arena) const {
  Rectangle* n = new Rectangle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.Rectangle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Rectangle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Rectangle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(left_, height_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Rectangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRectangle, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.Rectangle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float left = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_top;
        break;
      }

      // required float top = 2;
      case 2: {
        if (tag == 21) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_width;
        break;
      }

      // required float width = 3;
      case 3: {
        if (tag == 29) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_height;
        break;
      }

      // required float height = 4;
      case 4: {
        if (tag == 37) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.Rectangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.Rectangle)
  return false;
#undef DO_
}

void Rectangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.Rectangle)
  // required float left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left(), output);
  }

  // required float top = 2;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->top(), output);
  }

  // required float width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width(), output);
  }

  // required float height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.Rectangle)
}

int Rectangle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.Rectangle)
  int total_size = 0;

  if (has_left()) {
    // required float left = 1;
    total_size += 1 + 4;
  }

  if (has_top()) {
    // required float top = 2;
    total_size += 1 + 4;
  }

  if (has_width()) {
    // required float width = 3;
    total_size += 1 + 4;
  }

  if (has_height()) {
    // required float height = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
int Rectangle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.Rectangle)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float left = 1;
    total_size += 1 + 4;

    // required float top = 2;
    total_size += 1 + 4;

    // required float width = 3;
    total_size += 1 + 4;

    // required float height = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rectangle::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Rectangle*>(&from));
}

void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.Rectangle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Rectangle::Swap(Rectangle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rectangle::InternalSwap(Rectangle* other) {
  std::swap(left_, other->left_);
  std::swap(top_, other->top_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Rectangle::GetTypeName() const {
  return "userfeedback.Rectangle";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rectangle

// required float left = 1;
bool Rectangle::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Rectangle::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
void Rectangle::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void Rectangle::clear_left() {
  left_ = 0;
  clear_has_left();
}
 float Rectangle::left() const {
  // @@protoc_insertion_point(field_get:userfeedback.Rectangle.left)
  return left_;
}
 void Rectangle::set_left(float value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.Rectangle.left)
}

// required float top = 2;
bool Rectangle::has_top() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Rectangle::set_has_top() {
  _has_bits_[0] |= 0x00000002u;
}
void Rectangle::clear_has_top() {
  _has_bits_[0] &= ~0x00000002u;
}
void Rectangle::clear_top() {
  top_ = 0;
  clear_has_top();
}
 float Rectangle::top() const {
  // @@protoc_insertion_point(field_get:userfeedback.Rectangle.top)
  return top_;
}
 void Rectangle::set_top(float value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.Rectangle.top)
}

// required float width = 3;
bool Rectangle::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Rectangle::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void Rectangle::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void Rectangle::clear_width() {
  width_ = 0;
  clear_has_width();
}
 float Rectangle::width() const {
  // @@protoc_insertion_point(field_get:userfeedback.Rectangle.width)
  return width_;
}
 void Rectangle::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.Rectangle.width)
}

// required float height = 4;
bool Rectangle::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Rectangle::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void Rectangle::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void Rectangle::clear_height() {
  height_ = 0;
  clear_has_height();
}
 float Rectangle::height() const {
  // @@protoc_insertion_point(field_get:userfeedback.Rectangle.height)
  return height_;
}
 void Rectangle::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.Rectangle.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)
