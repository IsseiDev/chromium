// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chrome.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace userfeedback {

void protobuf_ShutdownFile_chrome_2eproto() {
  delete ChromeData::default_instance_;
  delete ChromeOsData::default_instance_;
  delete ChromeBrowserData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_chrome_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_chrome_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ChromeData::default_instance_ = new ChromeData();
  ChromeOsData::default_instance_ = new ChromeOsData();
  ChromeBrowserData::default_instance_ = new ChromeBrowserData();
  ChromeData::default_instance_->InitAsDefaultInstance();
  ChromeOsData::default_instance_->InitAsDefaultInstance();
  ChromeBrowserData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chrome_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_chrome_2eproto_once_);
void protobuf_AddDesc_chrome_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_chrome_2eproto_once_,
                 &protobuf_AddDesc_chrome_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chrome_2eproto {
  StaticDescriptorInitializer_chrome_2eproto() {
    protobuf_AddDesc_chrome_2eproto();
  }
} static_descriptor_initializer_chrome_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForChromeData(
    ChromeData* ptr) {
  return ptr->mutable_unknown_fields();
}

bool ChromeData_ChromePlatform_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChromeData_ChromePlatform ChromeData::CHROME_OS;
const ChromeData_ChromePlatform ChromeData::CHROME_BROWSER;
const ChromeData_ChromePlatform ChromeData::ChromePlatform_MIN;
const ChromeData_ChromePlatform ChromeData::ChromePlatform_MAX;
const int ChromeData::ChromePlatform_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeData::kChromePlatformFieldNumber;
const int ChromeData::kChromeOsDataFieldNumber;
const int ChromeData::kChromeBrowserDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeData::ChromeData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ChromeData)
}

void ChromeData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  chrome_os_data_ = const_cast< ::userfeedback::ChromeOsData*>(
      ::userfeedback::ChromeOsData::internal_default_instance());
#else
  chrome_os_data_ = const_cast< ::userfeedback::ChromeOsData*>(&::userfeedback::ChromeOsData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  chrome_browser_data_ = const_cast< ::userfeedback::ChromeBrowserData*>(
      ::userfeedback::ChromeBrowserData::internal_default_instance());
#else
  chrome_browser_data_ = const_cast< ::userfeedback::ChromeBrowserData*>(&::userfeedback::ChromeBrowserData::default_instance());
#endif
}

ChromeData::ChromeData(const ChromeData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userfeedback.ChromeData)
}

void ChromeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chrome_platform_ = 1;
  chrome_os_data_ = NULL;
  chrome_browser_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChromeData::~ChromeData() {
  // @@protoc_insertion_point(destructor:userfeedback.ChromeData)
  SharedDtor();
}

void ChromeData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete chrome_os_data_;
    delete chrome_browser_data_;
  }
}

void ChromeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeData& ChromeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chrome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chrome_2eproto();
#endif
  return *default_instance_;
}

ChromeData* ChromeData::default_instance_ = NULL;

ChromeData* ChromeData::New(::google::protobuf::Arena* arena) const {
  ChromeData* n = new ChromeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ChromeData)
  if (_has_bits_[0 / 32] & 7u) {
    chrome_platform_ = 1;
    if (has_chrome_os_data()) {
      if (chrome_os_data_ != NULL) chrome_os_data_->::userfeedback::ChromeOsData::Clear();
    }
    if (has_chrome_browser_data()) {
      if (chrome_browser_data_ != NULL) chrome_browser_data_->::userfeedback::ChromeBrowserData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChromeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForChromeData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ChromeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .userfeedback.ChromeData.ChromePlatform chrome_platform = 1 [default = CHROME_OS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userfeedback::ChromeData_ChromePlatform_IsValid(value)) {
            set_chrome_platform(static_cast< ::userfeedback::ChromeData_ChromePlatform >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chrome_os_data;
        break;
      }

      // optional .userfeedback.ChromeOsData chrome_os_data = 2;
      case 2: {
        if (tag == 18) {
         parse_chrome_os_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chrome_os_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chrome_browser_data;
        break;
      }

      // optional .userfeedback.ChromeBrowserData chrome_browser_data = 3;
      case 3: {
        if (tag == 26) {
         parse_chrome_browser_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chrome_browser_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ChromeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ChromeData)
  return false;
#undef DO_
}

void ChromeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ChromeData)
  // optional .userfeedback.ChromeData.ChromePlatform chrome_platform = 1 [default = CHROME_OS];
  if (has_chrome_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chrome_platform(), output);
  }

  // optional .userfeedback.ChromeOsData chrome_os_data = 2;
  if (has_chrome_os_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->chrome_os_data_, output);
  }

  // optional .userfeedback.ChromeBrowserData chrome_browser_data = 3;
  if (has_chrome_browser_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->chrome_browser_data_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ChromeData)
}

int ChromeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ChromeData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .userfeedback.ChromeData.ChromePlatform chrome_platform = 1 [default = CHROME_OS];
    if (has_chrome_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chrome_platform());
    }

    // optional .userfeedback.ChromeOsData chrome_os_data = 2;
    if (has_chrome_os_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chrome_os_data_);
    }

    // optional .userfeedback.ChromeBrowserData chrome_browser_data = 3;
    if (has_chrome_browser_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chrome_browser_data_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeData*>(&from));
}

void ChromeData::MergeFrom(const ChromeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ChromeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chrome_platform()) {
      set_chrome_platform(from.chrome_platform());
    }
    if (from.has_chrome_os_data()) {
      mutable_chrome_os_data()->::userfeedback::ChromeOsData::MergeFrom(from.chrome_os_data());
    }
    if (from.has_chrome_browser_data()) {
      mutable_chrome_browser_data()->::userfeedback::ChromeBrowserData::MergeFrom(from.chrome_browser_data());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ChromeData::CopyFrom(const ChromeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ChromeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeData::IsInitialized() const {

  return true;
}

void ChromeData::Swap(ChromeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeData::InternalSwap(ChromeData* other) {
  std::swap(chrome_platform_, other->chrome_platform_);
  std::swap(chrome_os_data_, other->chrome_os_data_);
  std::swap(chrome_browser_data_, other->chrome_browser_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeData::GetTypeName() const {
  return "userfeedback.ChromeData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeData

// optional .userfeedback.ChromeData.ChromePlatform chrome_platform = 1 [default = CHROME_OS];
bool ChromeData::has_chrome_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeData::set_has_chrome_platform() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeData::clear_has_chrome_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeData::clear_chrome_platform() {
  chrome_platform_ = 1;
  clear_has_chrome_platform();
}
 ::userfeedback::ChromeData_ChromePlatform ChromeData::chrome_platform() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeData.chrome_platform)
  return static_cast< ::userfeedback::ChromeData_ChromePlatform >(chrome_platform_);
}
 void ChromeData::set_chrome_platform(::userfeedback::ChromeData_ChromePlatform value) {
  assert(::userfeedback::ChromeData_ChromePlatform_IsValid(value));
  set_has_chrome_platform();
  chrome_platform_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.ChromeData.chrome_platform)
}

// optional .userfeedback.ChromeOsData chrome_os_data = 2;
bool ChromeData::has_chrome_os_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChromeData::set_has_chrome_os_data() {
  _has_bits_[0] |= 0x00000002u;
}
void ChromeData::clear_has_chrome_os_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChromeData::clear_chrome_os_data() {
  if (chrome_os_data_ != NULL) chrome_os_data_->::userfeedback::ChromeOsData::Clear();
  clear_has_chrome_os_data();
}
const ::userfeedback::ChromeOsData& ChromeData::chrome_os_data() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeData.chrome_os_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return chrome_os_data_ != NULL ? *chrome_os_data_ : *default_instance().chrome_os_data_;
#else
  return chrome_os_data_ != NULL ? *chrome_os_data_ : *default_instance_->chrome_os_data_;
#endif
}
::userfeedback::ChromeOsData* ChromeData::mutable_chrome_os_data() {
  set_has_chrome_os_data();
  if (chrome_os_data_ == NULL) {
    chrome_os_data_ = new ::userfeedback::ChromeOsData;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.ChromeData.chrome_os_data)
  return chrome_os_data_;
}
::userfeedback::ChromeOsData* ChromeData::release_chrome_os_data() {
  // @@protoc_insertion_point(field_release:userfeedback.ChromeData.chrome_os_data)
  clear_has_chrome_os_data();
  ::userfeedback::ChromeOsData* temp = chrome_os_data_;
  chrome_os_data_ = NULL;
  return temp;
}
void ChromeData::set_allocated_chrome_os_data(::userfeedback::ChromeOsData* chrome_os_data) {
  delete chrome_os_data_;
  chrome_os_data_ = chrome_os_data;
  if (chrome_os_data) {
    set_has_chrome_os_data();
  } else {
    clear_has_chrome_os_data();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ChromeData.chrome_os_data)
}

// optional .userfeedback.ChromeBrowserData chrome_browser_data = 3;
bool ChromeData::has_chrome_browser_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChromeData::set_has_chrome_browser_data() {
  _has_bits_[0] |= 0x00000004u;
}
void ChromeData::clear_has_chrome_browser_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChromeData::clear_chrome_browser_data() {
  if (chrome_browser_data_ != NULL) chrome_browser_data_->::userfeedback::ChromeBrowserData::Clear();
  clear_has_chrome_browser_data();
}
const ::userfeedback::ChromeBrowserData& ChromeData::chrome_browser_data() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeData.chrome_browser_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return chrome_browser_data_ != NULL ? *chrome_browser_data_ : *default_instance().chrome_browser_data_;
#else
  return chrome_browser_data_ != NULL ? *chrome_browser_data_ : *default_instance_->chrome_browser_data_;
#endif
}
::userfeedback::ChromeBrowserData* ChromeData::mutable_chrome_browser_data() {
  set_has_chrome_browser_data();
  if (chrome_browser_data_ == NULL) {
    chrome_browser_data_ = new ::userfeedback::ChromeBrowserData;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.ChromeData.chrome_browser_data)
  return chrome_browser_data_;
}
::userfeedback::ChromeBrowserData* ChromeData::release_chrome_browser_data() {
  // @@protoc_insertion_point(field_release:userfeedback.ChromeData.chrome_browser_data)
  clear_has_chrome_browser_data();
  ::userfeedback::ChromeBrowserData* temp = chrome_browser_data_;
  chrome_browser_data_ = NULL;
  return temp;
}
void ChromeData::set_allocated_chrome_browser_data(::userfeedback::ChromeBrowserData* chrome_browser_data) {
  delete chrome_browser_data_;
  chrome_browser_data_ = chrome_browser_data;
  if (chrome_browser_data) {
    set_has_chrome_browser_data();
  } else {
    clear_has_chrome_browser_data();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ChromeData.chrome_browser_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForChromeOsData(
    ChromeOsData* ptr) {
  return ptr->mutable_unknown_fields();
}

bool ChromeOsData_ChromeOsCategory_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChromeOsData_ChromeOsCategory ChromeOsData::CONNECTIVITY;
const ChromeOsData_ChromeOsCategory ChromeOsData::SYNC;
const ChromeOsData_ChromeOsCategory ChromeOsData::CRASH;
const ChromeOsData_ChromeOsCategory ChromeOsData::PAGE_FORMATTING_OR_LAYOUT;
const ChromeOsData_ChromeOsCategory ChromeOsData::EXTENSIONS_OR_APPS;
const ChromeOsData_ChromeOsCategory ChromeOsData::STANDBY_OR_RESUME;
const ChromeOsData_ChromeOsCategory ChromeOsData::PHISHING_PAGE;
const ChromeOsData_ChromeOsCategory ChromeOsData::OTHER;
const ChromeOsData_ChromeOsCategory ChromeOsData::AUTOFILL;
const ChromeOsData_ChromeOsCategory ChromeOsData::ChromeOsCategory_MIN;
const ChromeOsData_ChromeOsCategory ChromeOsData::ChromeOsCategory_MAX;
const int ChromeOsData::ChromeOsCategory_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeOsData::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeOsData::ChromeOsData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ChromeOsData)
}

void ChromeOsData::InitAsDefaultInstance() {
}

ChromeOsData::ChromeOsData(const ChromeOsData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userfeedback.ChromeOsData)
}

void ChromeOsData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_ = 8;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChromeOsData::~ChromeOsData() {
  // @@protoc_insertion_point(destructor:userfeedback.ChromeOsData)
  SharedDtor();
}

void ChromeOsData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChromeOsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeOsData& ChromeOsData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chrome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chrome_2eproto();
#endif
  return *default_instance_;
}

ChromeOsData* ChromeOsData::default_instance_ = NULL;

ChromeOsData* ChromeOsData::New(::google::protobuf::Arena* arena) const {
  ChromeOsData* n = new ChromeOsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeOsData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ChromeOsData)
  category_ = 8;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChromeOsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForChromeOsData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ChromeOsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .userfeedback.ChromeOsData.ChromeOsCategory category = 1 [default = OTHER];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userfeedback::ChromeOsData_ChromeOsCategory_IsValid(value)) {
            set_category(static_cast< ::userfeedback::ChromeOsData_ChromeOsCategory >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ChromeOsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ChromeOsData)
  return false;
#undef DO_
}

void ChromeOsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ChromeOsData)
  // optional .userfeedback.ChromeOsData.ChromeOsCategory category = 1 [default = OTHER];
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->category(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ChromeOsData)
}

int ChromeOsData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ChromeOsData)
  int total_size = 0;

  // optional .userfeedback.ChromeOsData.ChromeOsCategory category = 1 [default = OTHER];
  if (has_category()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeOsData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeOsData*>(&from));
}

void ChromeOsData::MergeFrom(const ChromeOsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ChromeOsData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category()) {
      set_category(from.category());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ChromeOsData::CopyFrom(const ChromeOsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ChromeOsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeOsData::IsInitialized() const {

  return true;
}

void ChromeOsData::Swap(ChromeOsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeOsData::InternalSwap(ChromeOsData* other) {
  std::swap(category_, other->category_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeOsData::GetTypeName() const {
  return "userfeedback.ChromeOsData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeOsData

// optional .userfeedback.ChromeOsData.ChromeOsCategory category = 1 [default = OTHER];
bool ChromeOsData::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeOsData::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeOsData::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeOsData::clear_category() {
  category_ = 8;
  clear_has_category();
}
 ::userfeedback::ChromeOsData_ChromeOsCategory ChromeOsData::category() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeOsData.category)
  return static_cast< ::userfeedback::ChromeOsData_ChromeOsCategory >(category_);
}
 void ChromeOsData::set_category(::userfeedback::ChromeOsData_ChromeOsCategory value) {
  assert(::userfeedback::ChromeOsData_ChromeOsCategory_IsValid(value));
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.ChromeOsData.category)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForChromeBrowserData(
    ChromeBrowserData* ptr) {
  return ptr->mutable_unknown_fields();
}

bool ChromeBrowserData_ChromeBrowserCategory_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::PAGE_FORMATTING_OR_LAYOUT;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::PAGES_NOT_LOADING;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::PLUGINS;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::TABS_OR_WINDOWS;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::SYNCED_PREFERENCES;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::CRASH;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::EXTENSIONS_OR_APPS;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::PHISHING_PAGE;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::OTHER;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::AUTOFILL;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::ChromeBrowserCategory_MIN;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::ChromeBrowserCategory_MAX;
const int ChromeBrowserData::ChromeBrowserCategory_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeBrowserData::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeBrowserData::ChromeBrowserData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ChromeBrowserData)
}

void ChromeBrowserData::InitAsDefaultInstance() {
}

ChromeBrowserData::ChromeBrowserData(const ChromeBrowserData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userfeedback.ChromeBrowserData)
}

void ChromeBrowserData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_ = 9;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChromeBrowserData::~ChromeBrowserData() {
  // @@protoc_insertion_point(destructor:userfeedback.ChromeBrowserData)
  SharedDtor();
}

void ChromeBrowserData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChromeBrowserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeBrowserData& ChromeBrowserData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chrome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chrome_2eproto();
#endif
  return *default_instance_;
}

ChromeBrowserData* ChromeBrowserData::default_instance_ = NULL;

ChromeBrowserData* ChromeBrowserData::New(::google::protobuf::Arena* arena) const {
  ChromeBrowserData* n = new ChromeBrowserData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeBrowserData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ChromeBrowserData)
  category_ = 9;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChromeBrowserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForChromeBrowserData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ChromeBrowserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .userfeedback.ChromeBrowserData.ChromeBrowserCategory category = 1 [default = OTHER];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userfeedback::ChromeBrowserData_ChromeBrowserCategory_IsValid(value)) {
            set_category(static_cast< ::userfeedback::ChromeBrowserData_ChromeBrowserCategory >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ChromeBrowserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ChromeBrowserData)
  return false;
#undef DO_
}

void ChromeBrowserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ChromeBrowserData)
  // optional .userfeedback.ChromeBrowserData.ChromeBrowserCategory category = 1 [default = OTHER];
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->category(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ChromeBrowserData)
}

int ChromeBrowserData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ChromeBrowserData)
  int total_size = 0;

  // optional .userfeedback.ChromeBrowserData.ChromeBrowserCategory category = 1 [default = OTHER];
  if (has_category()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeBrowserData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeBrowserData*>(&from));
}

void ChromeBrowserData::MergeFrom(const ChromeBrowserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ChromeBrowserData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category()) {
      set_category(from.category());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ChromeBrowserData::CopyFrom(const ChromeBrowserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ChromeBrowserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeBrowserData::IsInitialized() const {

  return true;
}

void ChromeBrowserData::Swap(ChromeBrowserData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeBrowserData::InternalSwap(ChromeBrowserData* other) {
  std::swap(category_, other->category_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeBrowserData::GetTypeName() const {
  return "userfeedback.ChromeBrowserData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeBrowserData

// optional .userfeedback.ChromeBrowserData.ChromeBrowserCategory category = 1 [default = OTHER];
bool ChromeBrowserData::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeBrowserData::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeBrowserData::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeBrowserData::clear_category() {
  category_ = 9;
  clear_has_category();
}
 ::userfeedback::ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::category() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeBrowserData.category)
  return static_cast< ::userfeedback::ChromeBrowserData_ChromeBrowserCategory >(category_);
}
 void ChromeBrowserData::set_category(::userfeedback::ChromeBrowserData_ChromeBrowserCategory value) {
  assert(::userfeedback::ChromeBrowserData_ChromeBrowserCategory_IsValid(value));
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.ChromeBrowserData.category)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)
