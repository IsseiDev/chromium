// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace userfeedback {

void protobuf_ShutdownFile_dom_2eproto() {
  delete HtmlDocument::default_instance_;
  delete HtmlElement::default_instance_;
  delete Navigator::default_instance_;
  delete HtmlPath::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_dom_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_dom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  HtmlDocument::default_instance_ = new HtmlDocument();
  HtmlElement::default_instance_ = new HtmlElement();
  Navigator::default_instance_ = new Navigator();
  HtmlPath::default_instance_ = new HtmlPath();
  HtmlDocument::default_instance_->InitAsDefaultInstance();
  HtmlElement::default_instance_->InitAsDefaultInstance();
  Navigator::default_instance_->InitAsDefaultInstance();
  HtmlPath::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dom_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_dom_2eproto_once_);
void protobuf_AddDesc_dom_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_dom_2eproto_once_,
                 &protobuf_AddDesc_dom_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dom_2eproto {
  StaticDescriptorInitializer_dom_2eproto() {
    protobuf_AddDesc_dom_2eproto();
  }
} static_descriptor_initializer_dom_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForHtmlDocument(
    HtmlDocument* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HtmlDocument::kUrlFieldNumber;
const int HtmlDocument::kTitleFieldNumber;
const int HtmlDocument::kDocumentElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HtmlDocument::HtmlDocument()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.HtmlDocument)
}

void HtmlDocument::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  document_element_ = const_cast< ::userfeedback::HtmlElement*>(
      ::userfeedback::HtmlElement::internal_default_instance());
#else
  document_element_ = const_cast< ::userfeedback::HtmlElement*>(&::userfeedback::HtmlElement::default_instance());
#endif
}

HtmlDocument::HtmlDocument(const HtmlDocument& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userfeedback.HtmlDocument)
}

void HtmlDocument::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_element_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HtmlDocument::~HtmlDocument() {
  // @@protoc_insertion_point(destructor:userfeedback.HtmlDocument)
  SharedDtor();
}

void HtmlDocument::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete document_element_;
  }
}

void HtmlDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HtmlDocument& HtmlDocument::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_dom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_dom_2eproto();
#endif
  return *default_instance_;
}

HtmlDocument* HtmlDocument::default_instance_ = NULL;

HtmlDocument* HtmlDocument::New(::google::protobuf::Arena* arena) const {
  HtmlDocument* n = new HtmlDocument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HtmlDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.HtmlDocument)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_document_element()) {
      if (document_element_ != NULL) document_element_->::userfeedback::HtmlElement::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HtmlDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForHtmlDocument, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.HtmlDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_document_element;
        break;
      }

      // optional .userfeedback.HtmlElement document_element = 3;
      case 3: {
        if (tag == 26) {
         parse_document_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.HtmlDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.HtmlDocument)
  return false;
#undef DO_
}

void HtmlDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.HtmlDocument)
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional .userfeedback.HtmlElement document_element = 3;
  if (has_document_element()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->document_element_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.HtmlDocument)
}

int HtmlDocument::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.HtmlDocument)
  int total_size = 0;

  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional .userfeedback.HtmlElement document_element = 3;
    if (has_document_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_element_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HtmlDocument::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HtmlDocument*>(&from));
}

void HtmlDocument::MergeFrom(const HtmlDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.HtmlDocument)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_document_element()) {
      mutable_document_element()->::userfeedback::HtmlElement::MergeFrom(from.document_element());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void HtmlDocument::CopyFrom(const HtmlDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.HtmlDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtmlDocument::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_document_element()) {
    if (!this->document_element_->IsInitialized()) return false;
  }
  return true;
}

void HtmlDocument::Swap(HtmlDocument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HtmlDocument::InternalSwap(HtmlDocument* other) {
  url_.Swap(&other->url_);
  title_.Swap(&other->title_);
  std::swap(document_element_, other->document_element_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HtmlDocument::GetTypeName() const {
  return "userfeedback.HtmlDocument";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HtmlDocument

// required string url = 1;
bool HtmlDocument::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HtmlDocument::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void HtmlDocument::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void HtmlDocument::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& HtmlDocument::url() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlDocument.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HtmlDocument::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.HtmlDocument.url)
}
 void HtmlDocument::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.HtmlDocument.url)
}
 void HtmlDocument::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.HtmlDocument.url)
}
 ::std::string* HtmlDocument::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlDocument.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HtmlDocument::release_url() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlDocument.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HtmlDocument::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlDocument.url)
}

// optional string title = 2;
bool HtmlDocument::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HtmlDocument::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void HtmlDocument::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void HtmlDocument::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& HtmlDocument::title() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlDocument.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HtmlDocument::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.HtmlDocument.title)
}
 void HtmlDocument::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.HtmlDocument.title)
}
 void HtmlDocument::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.HtmlDocument.title)
}
 ::std::string* HtmlDocument::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlDocument.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HtmlDocument::release_title() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlDocument.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HtmlDocument::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlDocument.title)
}

// optional .userfeedback.HtmlElement document_element = 3;
bool HtmlDocument::has_document_element() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HtmlDocument::set_has_document_element() {
  _has_bits_[0] |= 0x00000004u;
}
void HtmlDocument::clear_has_document_element() {
  _has_bits_[0] &= ~0x00000004u;
}
void HtmlDocument::clear_document_element() {
  if (document_element_ != NULL) document_element_->::userfeedback::HtmlElement::Clear();
  clear_has_document_element();
}
const ::userfeedback::HtmlElement& HtmlDocument::document_element() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlDocument.document_element)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return document_element_ != NULL ? *document_element_ : *default_instance().document_element_;
#else
  return document_element_ != NULL ? *document_element_ : *default_instance_->document_element_;
#endif
}
::userfeedback::HtmlElement* HtmlDocument::mutable_document_element() {
  set_has_document_element();
  if (document_element_ == NULL) {
    document_element_ = new ::userfeedback::HtmlElement;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlDocument.document_element)
  return document_element_;
}
::userfeedback::HtmlElement* HtmlDocument::release_document_element() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlDocument.document_element)
  clear_has_document_element();
  ::userfeedback::HtmlElement* temp = document_element_;
  document_element_ = NULL;
  return temp;
}
void HtmlDocument::set_allocated_document_element(::userfeedback::HtmlElement* document_element) {
  delete document_element_;
  document_element_ = document_element;
  if (document_element) {
    set_has_document_element();
  } else {
    clear_has_document_element();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlDocument.document_element)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForHtmlElement(
    HtmlElement* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HtmlElement::kTagNameFieldNumber;
const int HtmlElement::kIdFieldNumber;
const int HtmlElement::kClassNameFieldNumber;
const int HtmlElement::kChildElementFieldNumber;
const int HtmlElement::kFrameContentDocumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HtmlElement::HtmlElement()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.HtmlElement)
}

void HtmlElement::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  frame_content_document_ = const_cast< ::userfeedback::HtmlDocument*>(
      ::userfeedback::HtmlDocument::internal_default_instance());
#else
  frame_content_document_ = const_cast< ::userfeedback::HtmlDocument*>(&::userfeedback::HtmlDocument::default_instance());
#endif
}

HtmlElement::HtmlElement(const HtmlElement& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userfeedback.HtmlElement)
}

void HtmlElement::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_content_document_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HtmlElement::~HtmlElement() {
  // @@protoc_insertion_point(destructor:userfeedback.HtmlElement)
  SharedDtor();
}

void HtmlElement::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete frame_content_document_;
  }
}

void HtmlElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HtmlElement& HtmlElement::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_dom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_dom_2eproto();
#endif
  return *default_instance_;
}

HtmlElement* HtmlElement::default_instance_ = NULL;

HtmlElement* HtmlElement::New(::google::protobuf::Arena* arena) const {
  HtmlElement* n = new HtmlElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HtmlElement::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.HtmlElement)
  if (_has_bits_[0 / 32] & 23u) {
    if (has_tag_name()) {
      tag_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_class_name()) {
      class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_frame_content_document()) {
      if (frame_content_document_ != NULL) frame_content_document_->::userfeedback::HtmlDocument::Clear();
    }
  }
  child_element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HtmlElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForHtmlElement, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.HtmlElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tag_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_class_name;
        break;
      }

      // optional string class_name = 3;
      case 3: {
        if (tag == 26) {
         parse_class_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_child_element;
        break;
      }

      // repeated .userfeedback.HtmlElement child_element = 4;
      case 4: {
        if (tag == 34) {
         parse_child_element:
          DO_(input->IncrementRecursionDepth());
         parse_loop_child_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_child_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_child_element;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_frame_content_document;
        break;
      }

      // optional .userfeedback.HtmlDocument frame_content_document = 5;
      case 5: {
        if (tag == 42) {
         parse_frame_content_document:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame_content_document()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.HtmlElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.HtmlElement)
  return false;
#undef DO_
}

void HtmlElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.HtmlElement)
  // required string tag_name = 1;
  if (has_tag_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag_name(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional string class_name = 3;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->class_name(), output);
  }

  // repeated .userfeedback.HtmlElement child_element = 4;
  for (unsigned int i = 0, n = this->child_element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->child_element(i), output);
  }

  // optional .userfeedback.HtmlDocument frame_content_document = 5;
  if (has_frame_content_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->frame_content_document_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.HtmlElement)
}

int HtmlElement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.HtmlElement)
  int total_size = 0;

  // required string tag_name = 1;
  if (has_tag_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag_name());
  }
  if (_has_bits_[1 / 32] & 22u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string class_name = 3;
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

    // optional .userfeedback.HtmlDocument frame_content_document = 5;
    if (has_frame_content_document()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->frame_content_document_);
    }

  }
  // repeated .userfeedback.HtmlElement child_element = 4;
  total_size += 1 * this->child_element_size();
  for (int i = 0; i < this->child_element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->child_element(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HtmlElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HtmlElement*>(&from));
}

void HtmlElement::MergeFrom(const HtmlElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.HtmlElement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  child_element_.MergeFrom(from.child_element_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag_name()) {
      set_has_tag_name();
      tag_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_name_);
    }
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_class_name()) {
      set_has_class_name();
      class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
    }
    if (from.has_frame_content_document()) {
      mutable_frame_content_document()->::userfeedback::HtmlDocument::MergeFrom(from.frame_content_document());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void HtmlElement::CopyFrom(const HtmlElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.HtmlElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtmlElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->child_element())) return false;
  if (has_frame_content_document()) {
    if (!this->frame_content_document_->IsInitialized()) return false;
  }
  return true;
}

void HtmlElement::Swap(HtmlElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HtmlElement::InternalSwap(HtmlElement* other) {
  tag_name_.Swap(&other->tag_name_);
  id_.Swap(&other->id_);
  class_name_.Swap(&other->class_name_);
  child_element_.UnsafeArenaSwap(&other->child_element_);
  std::swap(frame_content_document_, other->frame_content_document_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HtmlElement::GetTypeName() const {
  return "userfeedback.HtmlElement";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HtmlElement

// required string tag_name = 1;
bool HtmlElement::has_tag_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HtmlElement::set_has_tag_name() {
  _has_bits_[0] |= 0x00000001u;
}
void HtmlElement::clear_has_tag_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void HtmlElement::clear_tag_name() {
  tag_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag_name();
}
 const ::std::string& HtmlElement::tag_name() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.tag_name)
  return tag_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HtmlElement::set_tag_name(const ::std::string& value) {
  set_has_tag_name();
  tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.HtmlElement.tag_name)
}
 void HtmlElement::set_tag_name(const char* value) {
  set_has_tag_name();
  tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.HtmlElement.tag_name)
}
 void HtmlElement::set_tag_name(const char* value, size_t size) {
  set_has_tag_name();
  tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.HtmlElement.tag_name)
}
 ::std::string* HtmlElement::mutable_tag_name() {
  set_has_tag_name();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.tag_name)
  return tag_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HtmlElement::release_tag_name() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlElement.tag_name)
  clear_has_tag_name();
  return tag_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HtmlElement::set_allocated_tag_name(::std::string* tag_name) {
  if (tag_name != NULL) {
    set_has_tag_name();
  } else {
    clear_has_tag_name();
  }
  tag_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag_name);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlElement.tag_name)
}

// optional string id = 2;
bool HtmlElement::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HtmlElement::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void HtmlElement::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void HtmlElement::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& HtmlElement::id() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HtmlElement::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.HtmlElement.id)
}
 void HtmlElement::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.HtmlElement.id)
}
 void HtmlElement::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.HtmlElement.id)
}
 ::std::string* HtmlElement::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HtmlElement::release_id() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlElement.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HtmlElement::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlElement.id)
}

// optional string class_name = 3;
bool HtmlElement::has_class_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HtmlElement::set_has_class_name() {
  _has_bits_[0] |= 0x00000004u;
}
void HtmlElement::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void HtmlElement::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_name();
}
 const ::std::string& HtmlElement::class_name() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.class_name)
  return class_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HtmlElement::set_class_name(const ::std::string& value) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.HtmlElement.class_name)
}
 void HtmlElement::set_class_name(const char* value) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.HtmlElement.class_name)
}
 void HtmlElement::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.HtmlElement.class_name)
}
 ::std::string* HtmlElement::mutable_class_name() {
  set_has_class_name();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HtmlElement::release_class_name() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlElement.class_name)
  clear_has_class_name();
  return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HtmlElement::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    set_has_class_name();
  } else {
    clear_has_class_name();
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlElement.class_name)
}

// repeated .userfeedback.HtmlElement child_element = 4;
int HtmlElement::child_element_size() const {
  return child_element_.size();
}
void HtmlElement::clear_child_element() {
  child_element_.Clear();
}
const ::userfeedback::HtmlElement& HtmlElement::child_element(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.child_element)
  return child_element_.Get(index);
}
::userfeedback::HtmlElement* HtmlElement::mutable_child_element(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.child_element)
  return child_element_.Mutable(index);
}
::userfeedback::HtmlElement* HtmlElement::add_child_element() {
  // @@protoc_insertion_point(field_add:userfeedback.HtmlElement.child_element)
  return child_element_.Add();
}
::google::protobuf::RepeatedPtrField< ::userfeedback::HtmlElement >*
HtmlElement::mutable_child_element() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.HtmlElement.child_element)
  return &child_element_;
}
const ::google::protobuf::RepeatedPtrField< ::userfeedback::HtmlElement >&
HtmlElement::child_element() const {
  // @@protoc_insertion_point(field_list:userfeedback.HtmlElement.child_element)
  return child_element_;
}

// optional .userfeedback.HtmlDocument frame_content_document = 5;
bool HtmlElement::has_frame_content_document() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HtmlElement::set_has_frame_content_document() {
  _has_bits_[0] |= 0x00000010u;
}
void HtmlElement::clear_has_frame_content_document() {
  _has_bits_[0] &= ~0x00000010u;
}
void HtmlElement::clear_frame_content_document() {
  if (frame_content_document_ != NULL) frame_content_document_->::userfeedback::HtmlDocument::Clear();
  clear_has_frame_content_document();
}
const ::userfeedback::HtmlDocument& HtmlElement::frame_content_document() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.frame_content_document)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return frame_content_document_ != NULL ? *frame_content_document_ : *default_instance().frame_content_document_;
#else
  return frame_content_document_ != NULL ? *frame_content_document_ : *default_instance_->frame_content_document_;
#endif
}
::userfeedback::HtmlDocument* HtmlElement::mutable_frame_content_document() {
  set_has_frame_content_document();
  if (frame_content_document_ == NULL) {
    frame_content_document_ = new ::userfeedback::HtmlDocument;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.frame_content_document)
  return frame_content_document_;
}
::userfeedback::HtmlDocument* HtmlElement::release_frame_content_document() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlElement.frame_content_document)
  clear_has_frame_content_document();
  ::userfeedback::HtmlDocument* temp = frame_content_document_;
  frame_content_document_ = NULL;
  return temp;
}
void HtmlElement::set_allocated_frame_content_document(::userfeedback::HtmlDocument* frame_content_document) {
  delete frame_content_document_;
  frame_content_document_ = frame_content_document;
  if (frame_content_document) {
    set_has_frame_content_document();
  } else {
    clear_has_frame_content_document();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlElement.frame_content_document)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForNavigator(
    Navigator* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Navigator::kAppCodeNameFieldNumber;
const int Navigator::kAppNameFieldNumber;
const int Navigator::kAppVersionFieldNumber;
const int Navigator::kAppMinorVersionFieldNumber;
const int Navigator::kCookieEnabledFieldNumber;
const int Navigator::kCpuClassFieldNumber;
const int Navigator::kOnLineFieldNumber;
const int Navigator::kPlatformFieldNumber;
const int Navigator::kBrowserLanguageFieldNumber;
const int Navigator::kSystemLanguageFieldNumber;
const int Navigator::kUserAgentFieldNumber;
const int Navigator::kJavaEnabledFieldNumber;
const int Navigator::kTaintEnabledFieldNumber;
const int Navigator::kPluginNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Navigator::Navigator()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.Navigator)
}

void Navigator::InitAsDefaultInstance() {
}

Navigator::Navigator(const Navigator& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userfeedback.Navigator)
}

void Navigator::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_code_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_minor_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cookie_enabled_ = false;
  cpu_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  on_line_ = false;
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  java_enabled_ = false;
  taint_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Navigator::~Navigator() {
  // @@protoc_insertion_point(destructor:userfeedback.Navigator)
  SharedDtor();
}

void Navigator::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_code_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_minor_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpu_class_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Navigator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Navigator& Navigator::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_dom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_dom_2eproto();
#endif
  return *default_instance_;
}

Navigator* Navigator::default_instance_ = NULL;

Navigator* Navigator::New(::google::protobuf::Arena* arena) const {
  Navigator* n = new Navigator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Navigator::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.Navigator)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Navigator, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Navigator*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(cookie_enabled_, on_line_);
    if (has_app_code_name()) {
      app_code_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_app_name()) {
      app_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_app_version()) {
      app_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_app_minor_version()) {
      app_minor_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cpu_class()) {
      cpu_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_platform()) {
      platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ZR_(java_enabled_, taint_enabled_);
    if (has_browser_language()) {
      browser_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_system_language()) {
      system_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_agent()) {
      user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  plugin_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Navigator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForNavigator, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.Navigator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_code_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_code_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_app_name;
        break;
      }

      // optional string app_name = 2;
      case 2: {
        if (tag == 18) {
         parse_app_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_app_version;
        break;
      }

      // optional string app_version = 3;
      case 3: {
        if (tag == 26) {
         parse_app_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_app_minor_version;
        break;
      }

      // optional string app_minor_version = 4;
      case 4: {
        if (tag == 34) {
         parse_app_minor_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_minor_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cookie_enabled;
        break;
      }

      // optional bool cookie_enabled = 5;
      case 5: {
        if (tag == 40) {
         parse_cookie_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cookie_enabled_)));
          set_has_cookie_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cpu_class;
        break;
      }

      // optional string cpu_class = 6;
      case 6: {
        if (tag == 50) {
         parse_cpu_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_class()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_on_line;
        break;
      }

      // optional bool on_line = 7;
      case 7: {
        if (tag == 56) {
         parse_on_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_line_)));
          set_has_on_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_platform;
        break;
      }

      // optional string platform = 8;
      case 8: {
        if (tag == 66) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_browser_language;
        break;
      }

      // optional string browser_language = 9;
      case 9: {
        if (tag == 74) {
         parse_browser_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_browser_language()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_system_language;
        break;
      }

      // optional string system_language = 10;
      case 10: {
        if (tag == 82) {
         parse_system_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_language()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 11;
      case 11: {
        if (tag == 90) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_java_enabled;
        break;
      }

      // optional bool java_enabled = 12;
      case 12: {
        if (tag == 96) {
         parse_java_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &java_enabled_)));
          set_has_java_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_taint_enabled;
        break;
      }

      // optional bool taint_enabled = 13;
      case 13: {
        if (tag == 104) {
         parse_taint_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &taint_enabled_)));
          set_has_taint_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_plugin_name;
        break;
      }

      // repeated string plugin_name = 14;
      case 14: {
        if (tag == 114) {
         parse_plugin_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_plugin_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_plugin_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.Navigator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.Navigator)
  return false;
#undef DO_
}

void Navigator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.Navigator)
  // optional string app_code_name = 1;
  if (has_app_code_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_code_name(), output);
  }

  // optional string app_name = 2;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_name(), output);
  }

  // optional string app_version = 3;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->app_version(), output);
  }

  // optional string app_minor_version = 4;
  if (has_app_minor_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->app_minor_version(), output);
  }

  // optional bool cookie_enabled = 5;
  if (has_cookie_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cookie_enabled(), output);
  }

  // optional string cpu_class = 6;
  if (has_cpu_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cpu_class(), output);
  }

  // optional bool on_line = 7;
  if (has_on_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->on_line(), output);
  }

  // optional string platform = 8;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->platform(), output);
  }

  // optional string browser_language = 9;
  if (has_browser_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->browser_language(), output);
  }

  // optional string system_language = 10;
  if (has_system_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->system_language(), output);
  }

  // optional string user_agent = 11;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->user_agent(), output);
  }

  // optional bool java_enabled = 12;
  if (has_java_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->java_enabled(), output);
  }

  // optional bool taint_enabled = 13;
  if (has_taint_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->taint_enabled(), output);
  }

  // repeated string plugin_name = 14;
  for (int i = 0; i < this->plugin_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->plugin_name(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.Navigator)
}

int Navigator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.Navigator)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string app_code_name = 1;
    if (has_app_code_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_code_name());
    }

    // optional string app_name = 2;
    if (has_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // optional string app_version = 3;
    if (has_app_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_version());
    }

    // optional string app_minor_version = 4;
    if (has_app_minor_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_minor_version());
    }

    // optional bool cookie_enabled = 5;
    if (has_cookie_enabled()) {
      total_size += 1 + 1;
    }

    // optional string cpu_class = 6;
    if (has_cpu_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpu_class());
    }

    // optional bool on_line = 7;
    if (has_on_line()) {
      total_size += 1 + 1;
    }

    // optional string platform = 8;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional string browser_language = 9;
    if (has_browser_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->browser_language());
    }

    // optional string system_language = 10;
    if (has_system_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_language());
    }

    // optional string user_agent = 11;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional bool java_enabled = 12;
    if (has_java_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool taint_enabled = 13;
    if (has_taint_enabled()) {
      total_size += 1 + 1;
    }

  }
  // repeated string plugin_name = 14;
  total_size += 1 * this->plugin_name_size();
  for (int i = 0; i < this->plugin_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->plugin_name(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Navigator::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Navigator*>(&from));
}

void Navigator::MergeFrom(const Navigator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.Navigator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  plugin_name_.MergeFrom(from.plugin_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_code_name()) {
      set_has_app_code_name();
      app_code_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_code_name_);
    }
    if (from.has_app_name()) {
      set_has_app_name();
      app_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_name_);
    }
    if (from.has_app_version()) {
      set_has_app_version();
      app_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_version_);
    }
    if (from.has_app_minor_version()) {
      set_has_app_minor_version();
      app_minor_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_minor_version_);
    }
    if (from.has_cookie_enabled()) {
      set_cookie_enabled(from.cookie_enabled());
    }
    if (from.has_cpu_class()) {
      set_has_cpu_class();
      cpu_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpu_class_);
    }
    if (from.has_on_line()) {
      set_on_line(from.on_line());
    }
    if (from.has_platform()) {
      set_has_platform();
      platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_browser_language()) {
      set_has_browser_language();
      browser_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_language_);
    }
    if (from.has_system_language()) {
      set_has_system_language();
      system_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_language_);
    }
    if (from.has_user_agent()) {
      set_has_user_agent();
      user_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
    }
    if (from.has_java_enabled()) {
      set_java_enabled(from.java_enabled());
    }
    if (from.has_taint_enabled()) {
      set_taint_enabled(from.taint_enabled());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Navigator::CopyFrom(const Navigator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.Navigator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Navigator::IsInitialized() const {

  return true;
}

void Navigator::Swap(Navigator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Navigator::InternalSwap(Navigator* other) {
  app_code_name_.Swap(&other->app_code_name_);
  app_name_.Swap(&other->app_name_);
  app_version_.Swap(&other->app_version_);
  app_minor_version_.Swap(&other->app_minor_version_);
  std::swap(cookie_enabled_, other->cookie_enabled_);
  cpu_class_.Swap(&other->cpu_class_);
  std::swap(on_line_, other->on_line_);
  platform_.Swap(&other->platform_);
  browser_language_.Swap(&other->browser_language_);
  system_language_.Swap(&other->system_language_);
  user_agent_.Swap(&other->user_agent_);
  std::swap(java_enabled_, other->java_enabled_);
  std::swap(taint_enabled_, other->taint_enabled_);
  plugin_name_.UnsafeArenaSwap(&other->plugin_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Navigator::GetTypeName() const {
  return "userfeedback.Navigator";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Navigator

// optional string app_code_name = 1;
bool Navigator::has_app_code_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Navigator::set_has_app_code_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Navigator::clear_has_app_code_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Navigator::clear_app_code_name() {
  app_code_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_code_name();
}
 const ::std::string& Navigator::app_code_name() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.app_code_name)
  return app_code_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_app_code_name(const ::std::string& value) {
  set_has_app_code_name();
  app_code_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.app_code_name)
}
 void Navigator::set_app_code_name(const char* value) {
  set_has_app_code_name();
  app_code_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.app_code_name)
}
 void Navigator::set_app_code_name(const char* value, size_t size) {
  set_has_app_code_name();
  app_code_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.app_code_name)
}
 ::std::string* Navigator::mutable_app_code_name() {
  set_has_app_code_name();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.app_code_name)
  return app_code_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Navigator::release_app_code_name() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.app_code_name)
  clear_has_app_code_name();
  return app_code_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_allocated_app_code_name(::std::string* app_code_name) {
  if (app_code_name != NULL) {
    set_has_app_code_name();
  } else {
    clear_has_app_code_name();
  }
  app_code_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_code_name);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.app_code_name)
}

// optional string app_name = 2;
bool Navigator::has_app_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Navigator::set_has_app_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Navigator::clear_has_app_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Navigator::clear_app_name() {
  app_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_name();
}
 const ::std::string& Navigator::app_name() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.app_name)
  return app_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_app_name(const ::std::string& value) {
  set_has_app_name();
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.app_name)
}
 void Navigator::set_app_name(const char* value) {
  set_has_app_name();
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.app_name)
}
 void Navigator::set_app_name(const char* value, size_t size) {
  set_has_app_name();
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.app_name)
}
 ::std::string* Navigator::mutable_app_name() {
  set_has_app_name();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.app_name)
  return app_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Navigator::release_app_name() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.app_name)
  clear_has_app_name();
  return app_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_allocated_app_name(::std::string* app_name) {
  if (app_name != NULL) {
    set_has_app_name();
  } else {
    clear_has_app_name();
  }
  app_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_name);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.app_name)
}

// optional string app_version = 3;
bool Navigator::has_app_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Navigator::set_has_app_version() {
  _has_bits_[0] |= 0x00000004u;
}
void Navigator::clear_has_app_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void Navigator::clear_app_version() {
  app_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_version();
}
 const ::std::string& Navigator::app_version() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.app_version)
  return app_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_app_version(const ::std::string& value) {
  set_has_app_version();
  app_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.app_version)
}
 void Navigator::set_app_version(const char* value) {
  set_has_app_version();
  app_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.app_version)
}
 void Navigator::set_app_version(const char* value, size_t size) {
  set_has_app_version();
  app_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.app_version)
}
 ::std::string* Navigator::mutable_app_version() {
  set_has_app_version();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.app_version)
  return app_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Navigator::release_app_version() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.app_version)
  clear_has_app_version();
  return app_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_allocated_app_version(::std::string* app_version) {
  if (app_version != NULL) {
    set_has_app_version();
  } else {
    clear_has_app_version();
  }
  app_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_version);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.app_version)
}

// optional string app_minor_version = 4;
bool Navigator::has_app_minor_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Navigator::set_has_app_minor_version() {
  _has_bits_[0] |= 0x00000008u;
}
void Navigator::clear_has_app_minor_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void Navigator::clear_app_minor_version() {
  app_minor_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_minor_version();
}
 const ::std::string& Navigator::app_minor_version() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.app_minor_version)
  return app_minor_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_app_minor_version(const ::std::string& value) {
  set_has_app_minor_version();
  app_minor_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.app_minor_version)
}
 void Navigator::set_app_minor_version(const char* value) {
  set_has_app_minor_version();
  app_minor_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.app_minor_version)
}
 void Navigator::set_app_minor_version(const char* value, size_t size) {
  set_has_app_minor_version();
  app_minor_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.app_minor_version)
}
 ::std::string* Navigator::mutable_app_minor_version() {
  set_has_app_minor_version();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.app_minor_version)
  return app_minor_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Navigator::release_app_minor_version() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.app_minor_version)
  clear_has_app_minor_version();
  return app_minor_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_allocated_app_minor_version(::std::string* app_minor_version) {
  if (app_minor_version != NULL) {
    set_has_app_minor_version();
  } else {
    clear_has_app_minor_version();
  }
  app_minor_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_minor_version);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.app_minor_version)
}

// optional bool cookie_enabled = 5;
bool Navigator::has_cookie_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Navigator::set_has_cookie_enabled() {
  _has_bits_[0] |= 0x00000010u;
}
void Navigator::clear_has_cookie_enabled() {
  _has_bits_[0] &= ~0x00000010u;
}
void Navigator::clear_cookie_enabled() {
  cookie_enabled_ = false;
  clear_has_cookie_enabled();
}
 bool Navigator::cookie_enabled() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.cookie_enabled)
  return cookie_enabled_;
}
 void Navigator::set_cookie_enabled(bool value) {
  set_has_cookie_enabled();
  cookie_enabled_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.cookie_enabled)
}

// optional string cpu_class = 6;
bool Navigator::has_cpu_class() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Navigator::set_has_cpu_class() {
  _has_bits_[0] |= 0x00000020u;
}
void Navigator::clear_has_cpu_class() {
  _has_bits_[0] &= ~0x00000020u;
}
void Navigator::clear_cpu_class() {
  cpu_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpu_class();
}
 const ::std::string& Navigator::cpu_class() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.cpu_class)
  return cpu_class_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_cpu_class(const ::std::string& value) {
  set_has_cpu_class();
  cpu_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.cpu_class)
}
 void Navigator::set_cpu_class(const char* value) {
  set_has_cpu_class();
  cpu_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.cpu_class)
}
 void Navigator::set_cpu_class(const char* value, size_t size) {
  set_has_cpu_class();
  cpu_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.cpu_class)
}
 ::std::string* Navigator::mutable_cpu_class() {
  set_has_cpu_class();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.cpu_class)
  return cpu_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Navigator::release_cpu_class() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.cpu_class)
  clear_has_cpu_class();
  return cpu_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_allocated_cpu_class(::std::string* cpu_class) {
  if (cpu_class != NULL) {
    set_has_cpu_class();
  } else {
    clear_has_cpu_class();
  }
  cpu_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_class);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.cpu_class)
}

// optional bool on_line = 7;
bool Navigator::has_on_line() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Navigator::set_has_on_line() {
  _has_bits_[0] |= 0x00000040u;
}
void Navigator::clear_has_on_line() {
  _has_bits_[0] &= ~0x00000040u;
}
void Navigator::clear_on_line() {
  on_line_ = false;
  clear_has_on_line();
}
 bool Navigator::on_line() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.on_line)
  return on_line_;
}
 void Navigator::set_on_line(bool value) {
  set_has_on_line();
  on_line_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.on_line)
}

// optional string platform = 8;
bool Navigator::has_platform() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Navigator::set_has_platform() {
  _has_bits_[0] |= 0x00000080u;
}
void Navigator::clear_has_platform() {
  _has_bits_[0] &= ~0x00000080u;
}
void Navigator::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
 const ::std::string& Navigator::platform() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.platform)
  return platform_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.platform)
}
 void Navigator::set_platform(const char* value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.platform)
}
 void Navigator::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.platform)
}
 ::std::string* Navigator::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Navigator::release_platform() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.platform)
}

// optional string browser_language = 9;
bool Navigator::has_browser_language() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Navigator::set_has_browser_language() {
  _has_bits_[0] |= 0x00000100u;
}
void Navigator::clear_has_browser_language() {
  _has_bits_[0] &= ~0x00000100u;
}
void Navigator::clear_browser_language() {
  browser_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_browser_language();
}
 const ::std::string& Navigator::browser_language() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.browser_language)
  return browser_language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_browser_language(const ::std::string& value) {
  set_has_browser_language();
  browser_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.browser_language)
}
 void Navigator::set_browser_language(const char* value) {
  set_has_browser_language();
  browser_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.browser_language)
}
 void Navigator::set_browser_language(const char* value, size_t size) {
  set_has_browser_language();
  browser_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.browser_language)
}
 ::std::string* Navigator::mutable_browser_language() {
  set_has_browser_language();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.browser_language)
  return browser_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Navigator::release_browser_language() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.browser_language)
  clear_has_browser_language();
  return browser_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_allocated_browser_language(::std::string* browser_language) {
  if (browser_language != NULL) {
    set_has_browser_language();
  } else {
    clear_has_browser_language();
  }
  browser_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), browser_language);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.browser_language)
}

// optional string system_language = 10;
bool Navigator::has_system_language() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Navigator::set_has_system_language() {
  _has_bits_[0] |= 0x00000200u;
}
void Navigator::clear_has_system_language() {
  _has_bits_[0] &= ~0x00000200u;
}
void Navigator::clear_system_language() {
  system_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_system_language();
}
 const ::std::string& Navigator::system_language() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.system_language)
  return system_language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_system_language(const ::std::string& value) {
  set_has_system_language();
  system_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.system_language)
}
 void Navigator::set_system_language(const char* value) {
  set_has_system_language();
  system_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.system_language)
}
 void Navigator::set_system_language(const char* value, size_t size) {
  set_has_system_language();
  system_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.system_language)
}
 ::std::string* Navigator::mutable_system_language() {
  set_has_system_language();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.system_language)
  return system_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Navigator::release_system_language() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.system_language)
  clear_has_system_language();
  return system_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_allocated_system_language(::std::string* system_language) {
  if (system_language != NULL) {
    set_has_system_language();
  } else {
    clear_has_system_language();
  }
  system_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_language);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.system_language)
}

// optional string user_agent = 11;
bool Navigator::has_user_agent() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Navigator::set_has_user_agent() {
  _has_bits_[0] |= 0x00000400u;
}
void Navigator::clear_has_user_agent() {
  _has_bits_[0] &= ~0x00000400u;
}
void Navigator::clear_user_agent() {
  user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_agent();
}
 const ::std::string& Navigator::user_agent() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.user_agent)
  return user_agent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_user_agent(const ::std::string& value) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.user_agent)
}
 void Navigator::set_user_agent(const char* value) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.user_agent)
}
 void Navigator::set_user_agent(const char* value, size_t size) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.user_agent)
}
 ::std::string* Navigator::mutable_user_agent() {
  set_has_user_agent();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.user_agent)
  return user_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Navigator::release_user_agent() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.user_agent)
  clear_has_user_agent();
  return user_agent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Navigator::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent != NULL) {
    set_has_user_agent();
  } else {
    clear_has_user_agent();
  }
  user_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_agent);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.user_agent)
}

// optional bool java_enabled = 12;
bool Navigator::has_java_enabled() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Navigator::set_has_java_enabled() {
  _has_bits_[0] |= 0x00000800u;
}
void Navigator::clear_has_java_enabled() {
  _has_bits_[0] &= ~0x00000800u;
}
void Navigator::clear_java_enabled() {
  java_enabled_ = false;
  clear_has_java_enabled();
}
 bool Navigator::java_enabled() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.java_enabled)
  return java_enabled_;
}
 void Navigator::set_java_enabled(bool value) {
  set_has_java_enabled();
  java_enabled_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.java_enabled)
}

// optional bool taint_enabled = 13;
bool Navigator::has_taint_enabled() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Navigator::set_has_taint_enabled() {
  _has_bits_[0] |= 0x00001000u;
}
void Navigator::clear_has_taint_enabled() {
  _has_bits_[0] &= ~0x00001000u;
}
void Navigator::clear_taint_enabled() {
  taint_enabled_ = false;
  clear_has_taint_enabled();
}
 bool Navigator::taint_enabled() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.taint_enabled)
  return taint_enabled_;
}
 void Navigator::set_taint_enabled(bool value) {
  set_has_taint_enabled();
  taint_enabled_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.taint_enabled)
}

// repeated string plugin_name = 14;
int Navigator::plugin_name_size() const {
  return plugin_name_.size();
}
void Navigator::clear_plugin_name() {
  plugin_name_.Clear();
}
 const ::std::string& Navigator::plugin_name(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.plugin_name)
  return plugin_name_.Get(index);
}
 ::std::string* Navigator::mutable_plugin_name(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.plugin_name)
  return plugin_name_.Mutable(index);
}
 void Navigator::set_plugin_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.plugin_name)
  plugin_name_.Mutable(index)->assign(value);
}
 void Navigator::set_plugin_name(int index, const char* value) {
  plugin_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.plugin_name)
}
 void Navigator::set_plugin_name(int index, const char* value, size_t size) {
  plugin_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.plugin_name)
}
 ::std::string* Navigator::add_plugin_name() {
  // @@protoc_insertion_point(field_add_mutable:userfeedback.Navigator.plugin_name)
  return plugin_name_.Add();
}
 void Navigator::add_plugin_name(const ::std::string& value) {
  plugin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:userfeedback.Navigator.plugin_name)
}
 void Navigator::add_plugin_name(const char* value) {
  plugin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:userfeedback.Navigator.plugin_name)
}
 void Navigator::add_plugin_name(const char* value, size_t size) {
  plugin_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:userfeedback.Navigator.plugin_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Navigator::plugin_name() const {
  // @@protoc_insertion_point(field_list:userfeedback.Navigator.plugin_name)
  return plugin_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Navigator::mutable_plugin_name() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.Navigator.plugin_name)
  return &plugin_name_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForHtmlPath(
    HtmlPath* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HtmlPath::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HtmlPath::HtmlPath()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.HtmlPath)
}

void HtmlPath::InitAsDefaultInstance() {
}

HtmlPath::HtmlPath(const HtmlPath& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userfeedback.HtmlPath)
}

void HtmlPath::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HtmlPath::~HtmlPath() {
  // @@protoc_insertion_point(destructor:userfeedback.HtmlPath)
  SharedDtor();
}

void HtmlPath::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HtmlPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HtmlPath& HtmlPath::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_dom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_dom_2eproto();
#endif
  return *default_instance_;
}

HtmlPath* HtmlPath::default_instance_ = NULL;

HtmlPath* HtmlPath::New(::google::protobuf::Arena* arena) const {
  HtmlPath* n = new HtmlPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HtmlPath::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.HtmlPath)
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HtmlPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForHtmlPath, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.HtmlPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 index = 1;
      case 1: {
        if (tag == 8) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_index())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_index;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.HtmlPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.HtmlPath)
  return false;
#undef DO_
}

void HtmlPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.HtmlPath)
  // repeated int32 index = 1;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->index(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.HtmlPath)
}

int HtmlPath::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.HtmlPath)
  int total_size = 0;

  // repeated int32 index = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->index(i));
    }
    total_size += 1 * this->index_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HtmlPath::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HtmlPath*>(&from));
}

void HtmlPath::MergeFrom(const HtmlPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.HtmlPath)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  index_.MergeFrom(from.index_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void HtmlPath::CopyFrom(const HtmlPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.HtmlPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtmlPath::IsInitialized() const {

  return true;
}

void HtmlPath::Swap(HtmlPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HtmlPath::InternalSwap(HtmlPath* other) {
  index_.UnsafeArenaSwap(&other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HtmlPath::GetTypeName() const {
  return "userfeedback.HtmlPath";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HtmlPath

// repeated int32 index = 1;
int HtmlPath::index_size() const {
  return index_.size();
}
void HtmlPath::clear_index() {
  index_.Clear();
}
 ::google::protobuf::int32 HtmlPath::index(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlPath.index)
  return index_.Get(index);
}
 void HtmlPath::set_index(int index, ::google::protobuf::int32 value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:userfeedback.HtmlPath.index)
}
 void HtmlPath::add_index(::google::protobuf::int32 value) {
  index_.Add(value);
  // @@protoc_insertion_point(field_add:userfeedback.HtmlPath.index)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HtmlPath::index() const {
  // @@protoc_insertion_point(field_list:userfeedback.HtmlPath.index)
  return index_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HtmlPath::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.HtmlPath.index)
  return &index_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)
