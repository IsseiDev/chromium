// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: web.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "web.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace userfeedback {

void protobuf_ShutdownFile_web_2eproto() {
  delete WebData::default_instance_;
  delete ExtensionDetails::default_instance_;
  delete InternalWebData::default_instance_;
  delete ProductSpecificData::default_instance_;
  delete ProductSpecificBinaryData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_web_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_web_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::userfeedback::protobuf_AddDesc_annotations_2eproto();
  ::userfeedback::protobuf_AddDesc_dom_2eproto();
  WebData::default_instance_ = new WebData();
  ExtensionDetails::default_instance_ = new ExtensionDetails();
  InternalWebData::default_instance_ = new InternalWebData();
  ProductSpecificData::default_instance_ = new ProductSpecificData();
  ProductSpecificBinaryData::default_instance_ = new ProductSpecificBinaryData();
  WebData::default_instance_->InitAsDefaultInstance();
  ExtensionDetails::default_instance_->InitAsDefaultInstance();
  InternalWebData::default_instance_->InitAsDefaultInstance();
  ProductSpecificData::default_instance_->InitAsDefaultInstance();
  ProductSpecificBinaryData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_web_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_web_2eproto_once_);
void protobuf_AddDesc_web_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_web_2eproto_once_,
                 &protobuf_AddDesc_web_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_web_2eproto {
  StaticDescriptorInitializer_web_2eproto() {
    protobuf_AddDesc_web_2eproto();
  }
} static_descriptor_initializer_web_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForWebData(
    WebData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WebData::kNavigatorFieldNumber;
const int WebData::kExtensionDetailsFieldNumber;
const int WebData::kUrlFieldNumber;
const int WebData::kAnnotationFieldNumber;
const int WebData::kSuggestionIdFieldNumber;
const int WebData::kProductSpecificDataFieldNumber;
const int WebData::kProductSpecificBinaryDataNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WebData::WebData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.WebData)
}

void WebData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  navigator_ = const_cast< ::userfeedback::Navigator*>(
      ::userfeedback::Navigator::internal_default_instance());
#else
  navigator_ = const_cast< ::userfeedback::Navigator*>(&::userfeedback::Navigator::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  extension_details_ = const_cast< ::userfeedback::ExtensionDetails*>(
      ::userfeedback::ExtensionDetails::internal_default_instance());
#else
  extension_details_ = const_cast< ::userfeedback::ExtensionDetails*>(&::userfeedback::ExtensionDetails::default_instance());
#endif
}

WebData::WebData(const WebData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userfeedback.WebData)
}

void WebData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  navigator_ = NULL;
  extension_details_ = NULL;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggestion_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebData::~WebData() {
  // @@protoc_insertion_point(destructor:userfeedback.WebData)
  SharedDtor();
}

void WebData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggestion_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete navigator_;
    delete extension_details_;
  }
}

void WebData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WebData& WebData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_web_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_web_2eproto();
#endif
  return *default_instance_;
}

WebData* WebData::default_instance_ = NULL;

WebData* WebData::New(::google::protobuf::Arena* arena) const {
  WebData* n = new WebData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.WebData)
  if (_has_bits_[0 / 32] & 23u) {
    if (has_navigator()) {
      if (navigator_ != NULL) navigator_->::userfeedback::Navigator::Clear();
    }
    if (has_extension_details()) {
      if (extension_details_ != NULL) extension_details_->::userfeedback::ExtensionDetails::Clear();
    }
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_suggestion_id()) {
      suggestion_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  annotation_.Clear();
  product_specific_data_.Clear();
  product_specific_binary_data_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool WebData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForWebData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.WebData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .userfeedback.Navigator navigator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_navigator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_extension_details;
        break;
      }

      // optional .userfeedback.ExtensionDetails extension_details = 2;
      case 2: {
        if (tag == 18) {
         parse_extension_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extension_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (tag == 26) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_annotation;
        break;
      }

      // repeated .userfeedback.Annotation annotation = 4;
      case 4: {
        if (tag == 34) {
         parse_annotation:
          DO_(input->IncrementRecursionDepth());
         parse_loop_annotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_annotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_annotation;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_suggestion_id;
        break;
      }

      // optional string suggestion_id = 5;
      case 5: {
        if (tag == 42) {
         parse_suggestion_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suggestion_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_product_specific_data;
        break;
      }

      // repeated .userfeedback.ProductSpecificData product_specific_data = 6;
      case 6: {
        if (tag == 50) {
         parse_product_specific_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_product_specific_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_product_specific_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_product_specific_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_product_specific_binary_data_name;
        break;
      }

      // repeated string product_specific_binary_data_name = 7;
      case 7: {
        if (tag == 58) {
         parse_product_specific_binary_data_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_product_specific_binary_data_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_product_specific_binary_data_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.WebData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.WebData)
  return false;
#undef DO_
}

void WebData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.WebData)
  // optional .userfeedback.Navigator navigator = 1;
  if (has_navigator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->navigator_, output);
  }

  // optional .userfeedback.ExtensionDetails extension_details = 2;
  if (has_extension_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->extension_details_, output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // repeated .userfeedback.Annotation annotation = 4;
  for (unsigned int i = 0, n = this->annotation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->annotation(i), output);
  }

  // optional string suggestion_id = 5;
  if (has_suggestion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->suggestion_id(), output);
  }

  // repeated .userfeedback.ProductSpecificData product_specific_data = 6;
  for (unsigned int i = 0, n = this->product_specific_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->product_specific_data(i), output);
  }

  // repeated string product_specific_binary_data_name = 7;
  for (int i = 0; i < this->product_specific_binary_data_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->product_specific_binary_data_name(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.WebData)
}

int WebData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.WebData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 23u) {
    // optional .userfeedback.Navigator navigator = 1;
    if (has_navigator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->navigator_);
    }

    // optional .userfeedback.ExtensionDetails extension_details = 2;
    if (has_extension_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->extension_details_);
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string suggestion_id = 5;
    if (has_suggestion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suggestion_id());
    }

  }
  // repeated .userfeedback.Annotation annotation = 4;
  total_size += 1 * this->annotation_size();
  for (int i = 0; i < this->annotation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->annotation(i));
  }

  // repeated .userfeedback.ProductSpecificData product_specific_data = 6;
  total_size += 1 * this->product_specific_data_size();
  for (int i = 0; i < this->product_specific_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->product_specific_data(i));
  }

  // repeated string product_specific_binary_data_name = 7;
  total_size += 1 * this->product_specific_binary_data_name_size();
  for (int i = 0; i < this->product_specific_binary_data_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->product_specific_binary_data_name(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WebData*>(&from));
}

void WebData::MergeFrom(const WebData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.WebData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  annotation_.MergeFrom(from.annotation_);
  product_specific_data_.MergeFrom(from.product_specific_data_);
  product_specific_binary_data_name_.MergeFrom(from.product_specific_binary_data_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_navigator()) {
      mutable_navigator()->::userfeedback::Navigator::MergeFrom(from.navigator());
    }
    if (from.has_extension_details()) {
      mutable_extension_details()->::userfeedback::ExtensionDetails::MergeFrom(from.extension_details());
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_suggestion_id()) {
      set_has_suggestion_id();
      suggestion_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suggestion_id_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void WebData::CopyFrom(const WebData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.WebData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebData::IsInitialized() const {

  if (has_extension_details()) {
    if (!this->extension_details_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->annotation())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->product_specific_data())) return false;
  return true;
}

void WebData::Swap(WebData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebData::InternalSwap(WebData* other) {
  std::swap(navigator_, other->navigator_);
  std::swap(extension_details_, other->extension_details_);
  url_.Swap(&other->url_);
  annotation_.UnsafeArenaSwap(&other->annotation_);
  suggestion_id_.Swap(&other->suggestion_id_);
  product_specific_data_.UnsafeArenaSwap(&other->product_specific_data_);
  product_specific_binary_data_name_.UnsafeArenaSwap(&other->product_specific_binary_data_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string WebData::GetTypeName() const {
  return "userfeedback.WebData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebData

// optional .userfeedback.Navigator navigator = 1;
bool WebData::has_navigator() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WebData::set_has_navigator() {
  _has_bits_[0] |= 0x00000001u;
}
void WebData::clear_has_navigator() {
  _has_bits_[0] &= ~0x00000001u;
}
void WebData::clear_navigator() {
  if (navigator_ != NULL) navigator_->::userfeedback::Navigator::Clear();
  clear_has_navigator();
}
const ::userfeedback::Navigator& WebData::navigator() const {
  // @@protoc_insertion_point(field_get:userfeedback.WebData.navigator)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return navigator_ != NULL ? *navigator_ : *default_instance().navigator_;
#else
  return navigator_ != NULL ? *navigator_ : *default_instance_->navigator_;
#endif
}
::userfeedback::Navigator* WebData::mutable_navigator() {
  set_has_navigator();
  if (navigator_ == NULL) {
    navigator_ = new ::userfeedback::Navigator;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.WebData.navigator)
  return navigator_;
}
::userfeedback::Navigator* WebData::release_navigator() {
  // @@protoc_insertion_point(field_release:userfeedback.WebData.navigator)
  clear_has_navigator();
  ::userfeedback::Navigator* temp = navigator_;
  navigator_ = NULL;
  return temp;
}
void WebData::set_allocated_navigator(::userfeedback::Navigator* navigator) {
  delete navigator_;
  navigator_ = navigator;
  if (navigator) {
    set_has_navigator();
  } else {
    clear_has_navigator();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.WebData.navigator)
}

// optional .userfeedback.ExtensionDetails extension_details = 2;
bool WebData::has_extension_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WebData::set_has_extension_details() {
  _has_bits_[0] |= 0x00000002u;
}
void WebData::clear_has_extension_details() {
  _has_bits_[0] &= ~0x00000002u;
}
void WebData::clear_extension_details() {
  if (extension_details_ != NULL) extension_details_->::userfeedback::ExtensionDetails::Clear();
  clear_has_extension_details();
}
const ::userfeedback::ExtensionDetails& WebData::extension_details() const {
  // @@protoc_insertion_point(field_get:userfeedback.WebData.extension_details)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return extension_details_ != NULL ? *extension_details_ : *default_instance().extension_details_;
#else
  return extension_details_ != NULL ? *extension_details_ : *default_instance_->extension_details_;
#endif
}
::userfeedback::ExtensionDetails* WebData::mutable_extension_details() {
  set_has_extension_details();
  if (extension_details_ == NULL) {
    extension_details_ = new ::userfeedback::ExtensionDetails;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.WebData.extension_details)
  return extension_details_;
}
::userfeedback::ExtensionDetails* WebData::release_extension_details() {
  // @@protoc_insertion_point(field_release:userfeedback.WebData.extension_details)
  clear_has_extension_details();
  ::userfeedback::ExtensionDetails* temp = extension_details_;
  extension_details_ = NULL;
  return temp;
}
void WebData::set_allocated_extension_details(::userfeedback::ExtensionDetails* extension_details) {
  delete extension_details_;
  extension_details_ = extension_details;
  if (extension_details) {
    set_has_extension_details();
  } else {
    clear_has_extension_details();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.WebData.extension_details)
}

// optional string url = 3;
bool WebData::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WebData::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
void WebData::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void WebData::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& WebData::url() const {
  // @@protoc_insertion_point(field_get:userfeedback.WebData.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebData::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.WebData.url)
}
 void WebData::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.WebData.url)
}
 void WebData::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.WebData.url)
}
 ::std::string* WebData::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:userfeedback.WebData.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebData::release_url() {
  // @@protoc_insertion_point(field_release:userfeedback.WebData.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebData::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.WebData.url)
}

// repeated .userfeedback.Annotation annotation = 4;
int WebData::annotation_size() const {
  return annotation_.size();
}
void WebData::clear_annotation() {
  annotation_.Clear();
}
const ::userfeedback::Annotation& WebData::annotation(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.WebData.annotation)
  return annotation_.Get(index);
}
::userfeedback::Annotation* WebData::mutable_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.WebData.annotation)
  return annotation_.Mutable(index);
}
::userfeedback::Annotation* WebData::add_annotation() {
  // @@protoc_insertion_point(field_add:userfeedback.WebData.annotation)
  return annotation_.Add();
}
::google::protobuf::RepeatedPtrField< ::userfeedback::Annotation >*
WebData::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.WebData.annotation)
  return &annotation_;
}
const ::google::protobuf::RepeatedPtrField< ::userfeedback::Annotation >&
WebData::annotation() const {
  // @@protoc_insertion_point(field_list:userfeedback.WebData.annotation)
  return annotation_;
}

// optional string suggestion_id = 5;
bool WebData::has_suggestion_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WebData::set_has_suggestion_id() {
  _has_bits_[0] |= 0x00000010u;
}
void WebData::clear_has_suggestion_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void WebData::clear_suggestion_id() {
  suggestion_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_suggestion_id();
}
 const ::std::string& WebData::suggestion_id() const {
  // @@protoc_insertion_point(field_get:userfeedback.WebData.suggestion_id)
  return suggestion_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebData::set_suggestion_id(const ::std::string& value) {
  set_has_suggestion_id();
  suggestion_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.WebData.suggestion_id)
}
 void WebData::set_suggestion_id(const char* value) {
  set_has_suggestion_id();
  suggestion_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.WebData.suggestion_id)
}
 void WebData::set_suggestion_id(const char* value, size_t size) {
  set_has_suggestion_id();
  suggestion_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.WebData.suggestion_id)
}
 ::std::string* WebData::mutable_suggestion_id() {
  set_has_suggestion_id();
  // @@protoc_insertion_point(field_mutable:userfeedback.WebData.suggestion_id)
  return suggestion_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebData::release_suggestion_id() {
  // @@protoc_insertion_point(field_release:userfeedback.WebData.suggestion_id)
  clear_has_suggestion_id();
  return suggestion_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebData::set_allocated_suggestion_id(::std::string* suggestion_id) {
  if (suggestion_id != NULL) {
    set_has_suggestion_id();
  } else {
    clear_has_suggestion_id();
  }
  suggestion_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suggestion_id);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.WebData.suggestion_id)
}

// repeated .userfeedback.ProductSpecificData product_specific_data = 6;
int WebData::product_specific_data_size() const {
  return product_specific_data_.size();
}
void WebData::clear_product_specific_data() {
  product_specific_data_.Clear();
}
const ::userfeedback::ProductSpecificData& WebData::product_specific_data(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.WebData.product_specific_data)
  return product_specific_data_.Get(index);
}
::userfeedback::ProductSpecificData* WebData::mutable_product_specific_data(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.WebData.product_specific_data)
  return product_specific_data_.Mutable(index);
}
::userfeedback::ProductSpecificData* WebData::add_product_specific_data() {
  // @@protoc_insertion_point(field_add:userfeedback.WebData.product_specific_data)
  return product_specific_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::userfeedback::ProductSpecificData >*
WebData::mutable_product_specific_data() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.WebData.product_specific_data)
  return &product_specific_data_;
}
const ::google::protobuf::RepeatedPtrField< ::userfeedback::ProductSpecificData >&
WebData::product_specific_data() const {
  // @@protoc_insertion_point(field_list:userfeedback.WebData.product_specific_data)
  return product_specific_data_;
}

// repeated string product_specific_binary_data_name = 7;
int WebData::product_specific_binary_data_name_size() const {
  return product_specific_binary_data_name_.size();
}
void WebData::clear_product_specific_binary_data_name() {
  product_specific_binary_data_name_.Clear();
}
 const ::std::string& WebData::product_specific_binary_data_name(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.WebData.product_specific_binary_data_name)
  return product_specific_binary_data_name_.Get(index);
}
 ::std::string* WebData::mutable_product_specific_binary_data_name(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.WebData.product_specific_binary_data_name)
  return product_specific_binary_data_name_.Mutable(index);
}
 void WebData::set_product_specific_binary_data_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:userfeedback.WebData.product_specific_binary_data_name)
  product_specific_binary_data_name_.Mutable(index)->assign(value);
}
 void WebData::set_product_specific_binary_data_name(int index, const char* value) {
  product_specific_binary_data_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:userfeedback.WebData.product_specific_binary_data_name)
}
 void WebData::set_product_specific_binary_data_name(int index, const char* value, size_t size) {
  product_specific_binary_data_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:userfeedback.WebData.product_specific_binary_data_name)
}
 ::std::string* WebData::add_product_specific_binary_data_name() {
  // @@protoc_insertion_point(field_add_mutable:userfeedback.WebData.product_specific_binary_data_name)
  return product_specific_binary_data_name_.Add();
}
 void WebData::add_product_specific_binary_data_name(const ::std::string& value) {
  product_specific_binary_data_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:userfeedback.WebData.product_specific_binary_data_name)
}
 void WebData::add_product_specific_binary_data_name(const char* value) {
  product_specific_binary_data_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:userfeedback.WebData.product_specific_binary_data_name)
}
 void WebData::add_product_specific_binary_data_name(const char* value, size_t size) {
  product_specific_binary_data_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:userfeedback.WebData.product_specific_binary_data_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
WebData::product_specific_binary_data_name() const {
  // @@protoc_insertion_point(field_list:userfeedback.WebData.product_specific_binary_data_name)
  return product_specific_binary_data_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
WebData::mutable_product_specific_binary_data_name() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.WebData.product_specific_binary_data_name)
  return &product_specific_binary_data_name_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForExtensionDetails(
    ExtensionDetails* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtensionDetails::kExtensionVersionFieldNumber;
const int ExtensionDetails::kProtocolVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtensionDetails::ExtensionDetails()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ExtensionDetails)
}

void ExtensionDetails::InitAsDefaultInstance() {
}

ExtensionDetails::ExtensionDetails(const ExtensionDetails& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userfeedback.ExtensionDetails)
}

void ExtensionDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtensionDetails::~ExtensionDetails() {
  // @@protoc_insertion_point(destructor:userfeedback.ExtensionDetails)
  SharedDtor();
}

void ExtensionDetails::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ExtensionDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExtensionDetails& ExtensionDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_web_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_web_2eproto();
#endif
  return *default_instance_;
}

ExtensionDetails* ExtensionDetails::default_instance_ = NULL;

ExtensionDetails* ExtensionDetails::New(::google::protobuf::Arena* arena) const {
  ExtensionDetails* n = new ExtensionDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExtensionDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ExtensionDetails)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_extension_version()) {
      extension_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_protocol_version()) {
      protocol_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ExtensionDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForExtensionDetails, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ExtensionDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string extension_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_protocol_version;
        break;
      }

      // required string protocol_version = 2;
      case 2: {
        if (tag == 18) {
         parse_protocol_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ExtensionDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ExtensionDetails)
  return false;
#undef DO_
}

void ExtensionDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ExtensionDetails)
  // required string extension_version = 1;
  if (has_extension_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->extension_version(), output);
  }

  // required string protocol_version = 2;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->protocol_version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ExtensionDetails)
}

int ExtensionDetails::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.ExtensionDetails)
  int total_size = 0;

  if (has_extension_version()) {
    // required string extension_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extension_version());
  }

  if (has_protocol_version()) {
    // required string protocol_version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol_version());
  }

  return total_size;
}
int ExtensionDetails::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ExtensionDetails)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string extension_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extension_version());

    // required string protocol_version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtensionDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExtensionDetails*>(&from));
}

void ExtensionDetails::MergeFrom(const ExtensionDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ExtensionDetails)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_extension_version()) {
      set_has_extension_version();
      extension_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_version_);
    }
    if (from.has_protocol_version()) {
      set_has_protocol_version();
      protocol_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_version_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ExtensionDetails::CopyFrom(const ExtensionDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ExtensionDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ExtensionDetails::Swap(ExtensionDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtensionDetails::InternalSwap(ExtensionDetails* other) {
  extension_version_.Swap(&other->extension_version_);
  protocol_version_.Swap(&other->protocol_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ExtensionDetails::GetTypeName() const {
  return "userfeedback.ExtensionDetails";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtensionDetails

// required string extension_version = 1;
bool ExtensionDetails::has_extension_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExtensionDetails::set_has_extension_version() {
  _has_bits_[0] |= 0x00000001u;
}
void ExtensionDetails::clear_has_extension_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExtensionDetails::clear_extension_version() {
  extension_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extension_version();
}
 const ::std::string& ExtensionDetails::extension_version() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionDetails.extension_version)
  return extension_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExtensionDetails::set_extension_version(const ::std::string& value) {
  set_has_extension_version();
  extension_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionDetails.extension_version)
}
 void ExtensionDetails::set_extension_version(const char* value) {
  set_has_extension_version();
  extension_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ExtensionDetails.extension_version)
}
 void ExtensionDetails::set_extension_version(const char* value, size_t size) {
  set_has_extension_version();
  extension_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ExtensionDetails.extension_version)
}
 ::std::string* ExtensionDetails::mutable_extension_version() {
  set_has_extension_version();
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionDetails.extension_version)
  return extension_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExtensionDetails::release_extension_version() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionDetails.extension_version)
  clear_has_extension_version();
  return extension_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExtensionDetails::set_allocated_extension_version(::std::string* extension_version) {
  if (extension_version != NULL) {
    set_has_extension_version();
  } else {
    clear_has_extension_version();
  }
  extension_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension_version);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionDetails.extension_version)
}

// required string protocol_version = 2;
bool ExtensionDetails::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExtensionDetails::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ExtensionDetails::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExtensionDetails::clear_protocol_version() {
  protocol_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protocol_version();
}
 const ::std::string& ExtensionDetails::protocol_version() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionDetails.protocol_version)
  return protocol_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExtensionDetails::set_protocol_version(const ::std::string& value) {
  set_has_protocol_version();
  protocol_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionDetails.protocol_version)
}
 void ExtensionDetails::set_protocol_version(const char* value) {
  set_has_protocol_version();
  protocol_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ExtensionDetails.protocol_version)
}
 void ExtensionDetails::set_protocol_version(const char* value, size_t size) {
  set_has_protocol_version();
  protocol_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ExtensionDetails.protocol_version)
}
 ::std::string* ExtensionDetails::mutable_protocol_version() {
  set_has_protocol_version();
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionDetails.protocol_version)
  return protocol_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExtensionDetails::release_protocol_version() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionDetails.protocol_version)
  clear_has_protocol_version();
  return protocol_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExtensionDetails::set_allocated_protocol_version(::std::string* protocol_version) {
  if (protocol_version != NULL) {
    set_has_protocol_version();
  } else {
    clear_has_protocol_version();
  }
  protocol_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol_version);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionDetails.protocol_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForInternalWebData(
    InternalWebData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalWebData::kEmailReceiverFieldNumber;
const int InternalWebData::kSubjectFieldNumber;
const int InternalWebData::kDEPRECATEDUrgentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalWebData::InternalWebData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.InternalWebData)
}

void InternalWebData::InitAsDefaultInstance() {
}

InternalWebData::InternalWebData(const InternalWebData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userfeedback.InternalWebData)
}

void InternalWebData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_urgent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalWebData::~InternalWebData() {
  // @@protoc_insertion_point(destructor:userfeedback.InternalWebData)
  SharedDtor();
}

void InternalWebData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InternalWebData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InternalWebData& InternalWebData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_web_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_web_2eproto();
#endif
  return *default_instance_;
}

InternalWebData* InternalWebData::default_instance_ = NULL;

InternalWebData* InternalWebData::New(::google::protobuf::Arena* arena) const {
  InternalWebData* n = new InternalWebData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalWebData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.InternalWebData)
  if (_has_bits_[0 / 32] & 6u) {
    if (has_subject()) {
      subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    deprecated_urgent_ = false;
  }
  email_receiver_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InternalWebData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInternalWebData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.InternalWebData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string email_receiver = 1;
      case 1: {
        if (tag == 10) {
         parse_email_receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_email_receiver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_email_receiver;
        if (input->ExpectTag(18)) goto parse_subject;
        break;
      }

      // optional string subject = 2;
      case 2: {
        if (tag == 18) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DEPRECATED_urgent;
        break;
      }

      // optional bool DEPRECATED_urgent = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_DEPRECATED_urgent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_urgent_)));
          set_has_deprecated_urgent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.InternalWebData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.InternalWebData)
  return false;
#undef DO_
}

void InternalWebData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.InternalWebData)
  // repeated string email_receiver = 1;
  for (int i = 0; i < this->email_receiver_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->email_receiver(i), output);
  }

  // optional string subject = 2;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subject(), output);
  }

  // optional bool DEPRECATED_urgent = 3 [default = false];
  if (has_deprecated_urgent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->deprecated_urgent(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.InternalWebData)
}

int InternalWebData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.InternalWebData)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 6u) {
    // optional string subject = 2;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // optional bool DEPRECATED_urgent = 3 [default = false];
    if (has_deprecated_urgent()) {
      total_size += 1 + 1;
    }

  }
  // repeated string email_receiver = 1;
  total_size += 1 * this->email_receiver_size();
  for (int i = 0; i < this->email_receiver_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->email_receiver(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalWebData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InternalWebData*>(&from));
}

void InternalWebData::MergeFrom(const InternalWebData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.InternalWebData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  email_receiver_.MergeFrom(from.email_receiver_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_subject()) {
      set_has_subject();
      subject_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subject_);
    }
    if (from.has_deprecated_urgent()) {
      set_deprecated_urgent(from.deprecated_urgent());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InternalWebData::CopyFrom(const InternalWebData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.InternalWebData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalWebData::IsInitialized() const {

  return true;
}

void InternalWebData::Swap(InternalWebData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalWebData::InternalSwap(InternalWebData* other) {
  email_receiver_.UnsafeArenaSwap(&other->email_receiver_);
  subject_.Swap(&other->subject_);
  std::swap(deprecated_urgent_, other->deprecated_urgent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InternalWebData::GetTypeName() const {
  return "userfeedback.InternalWebData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalWebData

// repeated string email_receiver = 1;
int InternalWebData::email_receiver_size() const {
  return email_receiver_.size();
}
void InternalWebData::clear_email_receiver() {
  email_receiver_.Clear();
}
 const ::std::string& InternalWebData::email_receiver(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.InternalWebData.email_receiver)
  return email_receiver_.Get(index);
}
 ::std::string* InternalWebData::mutable_email_receiver(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.InternalWebData.email_receiver)
  return email_receiver_.Mutable(index);
}
 void InternalWebData::set_email_receiver(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:userfeedback.InternalWebData.email_receiver)
  email_receiver_.Mutable(index)->assign(value);
}
 void InternalWebData::set_email_receiver(int index, const char* value) {
  email_receiver_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:userfeedback.InternalWebData.email_receiver)
}
 void InternalWebData::set_email_receiver(int index, const char* value, size_t size) {
  email_receiver_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:userfeedback.InternalWebData.email_receiver)
}
 ::std::string* InternalWebData::add_email_receiver() {
  // @@protoc_insertion_point(field_add_mutable:userfeedback.InternalWebData.email_receiver)
  return email_receiver_.Add();
}
 void InternalWebData::add_email_receiver(const ::std::string& value) {
  email_receiver_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:userfeedback.InternalWebData.email_receiver)
}
 void InternalWebData::add_email_receiver(const char* value) {
  email_receiver_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:userfeedback.InternalWebData.email_receiver)
}
 void InternalWebData::add_email_receiver(const char* value, size_t size) {
  email_receiver_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:userfeedback.InternalWebData.email_receiver)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
InternalWebData::email_receiver() const {
  // @@protoc_insertion_point(field_list:userfeedback.InternalWebData.email_receiver)
  return email_receiver_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
InternalWebData::mutable_email_receiver() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.InternalWebData.email_receiver)
  return &email_receiver_;
}

// optional string subject = 2;
bool InternalWebData::has_subject() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalWebData::set_has_subject() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalWebData::clear_has_subject() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalWebData::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subject();
}
 const ::std::string& InternalWebData::subject() const {
  // @@protoc_insertion_point(field_get:userfeedback.InternalWebData.subject)
  return subject_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InternalWebData::set_subject(const ::std::string& value) {
  set_has_subject();
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.InternalWebData.subject)
}
 void InternalWebData::set_subject(const char* value) {
  set_has_subject();
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.InternalWebData.subject)
}
 void InternalWebData::set_subject(const char* value, size_t size) {
  set_has_subject();
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.InternalWebData.subject)
}
 ::std::string* InternalWebData::mutable_subject() {
  set_has_subject();
  // @@protoc_insertion_point(field_mutable:userfeedback.InternalWebData.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InternalWebData::release_subject() {
  // @@protoc_insertion_point(field_release:userfeedback.InternalWebData.subject)
  clear_has_subject();
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InternalWebData::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    set_has_subject();
  } else {
    clear_has_subject();
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.InternalWebData.subject)
}

// optional bool DEPRECATED_urgent = 3 [default = false];
bool InternalWebData::has_deprecated_urgent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InternalWebData::set_has_deprecated_urgent() {
  _has_bits_[0] |= 0x00000004u;
}
void InternalWebData::clear_has_deprecated_urgent() {
  _has_bits_[0] &= ~0x00000004u;
}
void InternalWebData::clear_deprecated_urgent() {
  deprecated_urgent_ = false;
  clear_has_deprecated_urgent();
}
 bool InternalWebData::deprecated_urgent() const {
  // @@protoc_insertion_point(field_get:userfeedback.InternalWebData.DEPRECATED_urgent)
  return deprecated_urgent_;
}
 void InternalWebData::set_deprecated_urgent(bool value) {
  set_has_deprecated_urgent();
  deprecated_urgent_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.InternalWebData.DEPRECATED_urgent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForProductSpecificData(
    ProductSpecificData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductSpecificData::kKeyFieldNumber;
const int ProductSpecificData::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductSpecificData::ProductSpecificData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ProductSpecificData)
}

void ProductSpecificData::InitAsDefaultInstance() {
}

ProductSpecificData::ProductSpecificData(const ProductSpecificData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userfeedback.ProductSpecificData)
}

void ProductSpecificData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductSpecificData::~ProductSpecificData() {
  // @@protoc_insertion_point(destructor:userfeedback.ProductSpecificData)
  SharedDtor();
}

void ProductSpecificData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ProductSpecificData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProductSpecificData& ProductSpecificData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_web_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_web_2eproto();
#endif
  return *default_instance_;
}

ProductSpecificData* ProductSpecificData::default_instance_ = NULL;

ProductSpecificData* ProductSpecificData::New(::google::protobuf::Arena* arena) const {
  ProductSpecificData* n = new ProductSpecificData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProductSpecificData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ProductSpecificData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProductSpecificData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForProductSpecificData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ProductSpecificData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ProductSpecificData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ProductSpecificData)
  return false;
#undef DO_
}

void ProductSpecificData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ProductSpecificData)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ProductSpecificData)
}

int ProductSpecificData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ProductSpecificData)
  int total_size = 0;

  // required string key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }
  // optional string value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductSpecificData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProductSpecificData*>(&from));
}

void ProductSpecificData::MergeFrom(const ProductSpecificData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ProductSpecificData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ProductSpecificData::CopyFrom(const ProductSpecificData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ProductSpecificData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductSpecificData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProductSpecificData::Swap(ProductSpecificData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductSpecificData::InternalSwap(ProductSpecificData* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProductSpecificData::GetTypeName() const {
  return "userfeedback.ProductSpecificData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProductSpecificData

// required string key = 1;
bool ProductSpecificData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProductSpecificData::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void ProductSpecificData::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProductSpecificData::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& ProductSpecificData::key() const {
  // @@protoc_insertion_point(field_get:userfeedback.ProductSpecificData.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductSpecificData::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ProductSpecificData.key)
}
 void ProductSpecificData::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ProductSpecificData.key)
}
 void ProductSpecificData::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ProductSpecificData.key)
}
 ::std::string* ProductSpecificData::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:userfeedback.ProductSpecificData.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductSpecificData::release_key() {
  // @@protoc_insertion_point(field_release:userfeedback.ProductSpecificData.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductSpecificData::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ProductSpecificData.key)
}

// optional string value = 2;
bool ProductSpecificData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProductSpecificData::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void ProductSpecificData::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProductSpecificData::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& ProductSpecificData::value() const {
  // @@protoc_insertion_point(field_get:userfeedback.ProductSpecificData.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductSpecificData::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ProductSpecificData.value)
}
 void ProductSpecificData::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ProductSpecificData.value)
}
 void ProductSpecificData::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ProductSpecificData.value)
}
 ::std::string* ProductSpecificData::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:userfeedback.ProductSpecificData.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductSpecificData::release_value() {
  // @@protoc_insertion_point(field_release:userfeedback.ProductSpecificData.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductSpecificData::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ProductSpecificData.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForProductSpecificBinaryData(
    ProductSpecificBinaryData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductSpecificBinaryData::kNameFieldNumber;
const int ProductSpecificBinaryData::kMimeTypeFieldNumber;
const int ProductSpecificBinaryData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductSpecificBinaryData::ProductSpecificBinaryData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ProductSpecificBinaryData)
}

void ProductSpecificBinaryData::InitAsDefaultInstance() {
}

ProductSpecificBinaryData::ProductSpecificBinaryData(const ProductSpecificBinaryData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:userfeedback.ProductSpecificBinaryData)
}

void ProductSpecificBinaryData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductSpecificBinaryData::~ProductSpecificBinaryData() {
  // @@protoc_insertion_point(destructor:userfeedback.ProductSpecificBinaryData)
  SharedDtor();
}

void ProductSpecificBinaryData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mime_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ProductSpecificBinaryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProductSpecificBinaryData& ProductSpecificBinaryData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_web_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_web_2eproto();
#endif
  return *default_instance_;
}

ProductSpecificBinaryData* ProductSpecificBinaryData::default_instance_ = NULL;

ProductSpecificBinaryData* ProductSpecificBinaryData::New(::google::protobuf::Arena* arena) const {
  ProductSpecificBinaryData* n = new ProductSpecificBinaryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProductSpecificBinaryData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ProductSpecificBinaryData)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mime_type()) {
      mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProductSpecificBinaryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForProductSpecificBinaryData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ProductSpecificBinaryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mime_type;
        break;
      }

      // optional string mime_type = 2;
      case 2: {
        if (tag == 18) {
         parse_mime_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ProductSpecificBinaryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ProductSpecificBinaryData)
  return false;
#undef DO_
}

void ProductSpecificBinaryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ProductSpecificBinaryData)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string mime_type = 2;
  if (has_mime_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mime_type(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ProductSpecificBinaryData)
}

int ProductSpecificBinaryData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ProductSpecificBinaryData)
  int total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string mime_type = 2;
    if (has_mime_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mime_type());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductSpecificBinaryData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProductSpecificBinaryData*>(&from));
}

void ProductSpecificBinaryData::MergeFrom(const ProductSpecificBinaryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ProductSpecificBinaryData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_mime_type()) {
      set_has_mime_type();
      mime_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ProductSpecificBinaryData::CopyFrom(const ProductSpecificBinaryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ProductSpecificBinaryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductSpecificBinaryData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProductSpecificBinaryData::Swap(ProductSpecificBinaryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductSpecificBinaryData::InternalSwap(ProductSpecificBinaryData* other) {
  name_.Swap(&other->name_);
  mime_type_.Swap(&other->mime_type_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProductSpecificBinaryData::GetTypeName() const {
  return "userfeedback.ProductSpecificBinaryData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProductSpecificBinaryData

// required string name = 1;
bool ProductSpecificBinaryData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProductSpecificBinaryData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ProductSpecificBinaryData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProductSpecificBinaryData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ProductSpecificBinaryData::name() const {
  // @@protoc_insertion_point(field_get:userfeedback.ProductSpecificBinaryData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductSpecificBinaryData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ProductSpecificBinaryData.name)
}
 void ProductSpecificBinaryData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ProductSpecificBinaryData.name)
}
 void ProductSpecificBinaryData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ProductSpecificBinaryData.name)
}
 ::std::string* ProductSpecificBinaryData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:userfeedback.ProductSpecificBinaryData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductSpecificBinaryData::release_name() {
  // @@protoc_insertion_point(field_release:userfeedback.ProductSpecificBinaryData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductSpecificBinaryData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ProductSpecificBinaryData.name)
}

// optional string mime_type = 2;
bool ProductSpecificBinaryData::has_mime_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProductSpecificBinaryData::set_has_mime_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ProductSpecificBinaryData::clear_has_mime_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProductSpecificBinaryData::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mime_type();
}
 const ::std::string& ProductSpecificBinaryData::mime_type() const {
  // @@protoc_insertion_point(field_get:userfeedback.ProductSpecificBinaryData.mime_type)
  return mime_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductSpecificBinaryData::set_mime_type(const ::std::string& value) {
  set_has_mime_type();
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ProductSpecificBinaryData.mime_type)
}
 void ProductSpecificBinaryData::set_mime_type(const char* value) {
  set_has_mime_type();
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ProductSpecificBinaryData.mime_type)
}
 void ProductSpecificBinaryData::set_mime_type(const char* value, size_t size) {
  set_has_mime_type();
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ProductSpecificBinaryData.mime_type)
}
 ::std::string* ProductSpecificBinaryData::mutable_mime_type() {
  set_has_mime_type();
  // @@protoc_insertion_point(field_mutable:userfeedback.ProductSpecificBinaryData.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductSpecificBinaryData::release_mime_type() {
  // @@protoc_insertion_point(field_release:userfeedback.ProductSpecificBinaryData.mime_type)
  clear_has_mime_type();
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductSpecificBinaryData::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    set_has_mime_type();
  } else {
    clear_has_mime_type();
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ProductSpecificBinaryData.mime_type)
}

// optional bytes data = 3;
bool ProductSpecificBinaryData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProductSpecificBinaryData::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void ProductSpecificBinaryData::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProductSpecificBinaryData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& ProductSpecificBinaryData::data() const {
  // @@protoc_insertion_point(field_get:userfeedback.ProductSpecificBinaryData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductSpecificBinaryData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ProductSpecificBinaryData.data)
}
 void ProductSpecificBinaryData::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ProductSpecificBinaryData.data)
}
 void ProductSpecificBinaryData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ProductSpecificBinaryData.data)
}
 ::std::string* ProductSpecificBinaryData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:userfeedback.ProductSpecificBinaryData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductSpecificBinaryData::release_data() {
  // @@protoc_insertion_point(field_release:userfeedback.ProductSpecificBinaryData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductSpecificBinaryData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ProductSpecificBinaryData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)
