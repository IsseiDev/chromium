// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: affiliation_api.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "affiliation_api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace affiliation_pb {

void protobuf_ShutdownFile_affiliation_5fapi_2eproto() {
  delete Affiliation::default_instance_;
  delete Facet::default_instance_;
  delete BrandingInfo::default_instance_;
  delete LookupAffiliationMask::default_instance_;
  delete LookupAffiliationRequest::default_instance_;
  delete LookupAffiliationResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_affiliation_5fapi_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_affiliation_5fapi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Affiliation::default_instance_ = new Affiliation();
  Facet::default_instance_ = new Facet();
  BrandingInfo::default_instance_ = new BrandingInfo();
  LookupAffiliationMask::default_instance_ = new LookupAffiliationMask();
  LookupAffiliationRequest::default_instance_ = new LookupAffiliationRequest();
  LookupAffiliationResponse::default_instance_ = new LookupAffiliationResponse();
  Affiliation::default_instance_->InitAsDefaultInstance();
  Facet::default_instance_->InitAsDefaultInstance();
  BrandingInfo::default_instance_->InitAsDefaultInstance();
  LookupAffiliationMask::default_instance_->InitAsDefaultInstance();
  LookupAffiliationRequest::default_instance_->InitAsDefaultInstance();
  LookupAffiliationResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_affiliation_5fapi_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_affiliation_5fapi_2eproto_once_);
void protobuf_AddDesc_affiliation_5fapi_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_affiliation_5fapi_2eproto_once_,
                 &protobuf_AddDesc_affiliation_5fapi_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_affiliation_5fapi_2eproto {
  StaticDescriptorInitializer_affiliation_5fapi_2eproto() {
    protobuf_AddDesc_affiliation_5fapi_2eproto();
  }
} static_descriptor_initializer_affiliation_5fapi_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForAffiliation(
    Affiliation* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Affiliation::kFacetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Affiliation::Affiliation()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:affiliation_pb.Affiliation)
}

void Affiliation::InitAsDefaultInstance() {
}

Affiliation::Affiliation(const Affiliation& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.Affiliation)
}

void Affiliation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Affiliation::~Affiliation() {
  // @@protoc_insertion_point(destructor:affiliation_pb.Affiliation)
  SharedDtor();
}

void Affiliation::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Affiliation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Affiliation& Affiliation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_affiliation_5fapi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_affiliation_5fapi_2eproto();
#endif
  return *default_instance_;
}

Affiliation* Affiliation::default_instance_ = NULL;

Affiliation* Affiliation::New(::google::protobuf::Arena* arena) const {
  Affiliation* n = new Affiliation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Affiliation::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.Affiliation)
  facet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Affiliation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAffiliation, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:affiliation_pb.Affiliation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .affiliation_pb.Facet facet = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_facet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_facet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_facet;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:affiliation_pb.Affiliation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:affiliation_pb.Affiliation)
  return false;
#undef DO_
}

void Affiliation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:affiliation_pb.Affiliation)
  // repeated .affiliation_pb.Facet facet = 1;
  for (unsigned int i = 0, n = this->facet_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->facet(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:affiliation_pb.Affiliation)
}

int Affiliation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.Affiliation)
  int total_size = 0;

  // repeated .affiliation_pb.Facet facet = 1;
  total_size += 1 * this->facet_size();
  for (int i = 0; i < this->facet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facet(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Affiliation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Affiliation*>(&from));
}

void Affiliation::MergeFrom(const Affiliation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.Affiliation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  facet_.MergeFrom(from.facet_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Affiliation::CopyFrom(const Affiliation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.Affiliation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Affiliation::IsInitialized() const {

  return true;
}

void Affiliation::Swap(Affiliation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Affiliation::InternalSwap(Affiliation* other) {
  facet_.UnsafeArenaSwap(&other->facet_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Affiliation::GetTypeName() const {
  return "affiliation_pb.Affiliation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Affiliation

// repeated .affiliation_pb.Facet facet = 1;
int Affiliation::facet_size() const {
  return facet_.size();
}
void Affiliation::clear_facet() {
  facet_.Clear();
}
const ::affiliation_pb::Facet& Affiliation::facet(int index) const {
  // @@protoc_insertion_point(field_get:affiliation_pb.Affiliation.facet)
  return facet_.Get(index);
}
::affiliation_pb::Facet* Affiliation::mutable_facet(int index) {
  // @@protoc_insertion_point(field_mutable:affiliation_pb.Affiliation.facet)
  return facet_.Mutable(index);
}
::affiliation_pb::Facet* Affiliation::add_facet() {
  // @@protoc_insertion_point(field_add:affiliation_pb.Affiliation.facet)
  return facet_.Add();
}
::google::protobuf::RepeatedPtrField< ::affiliation_pb::Facet >*
Affiliation::mutable_facet() {
  // @@protoc_insertion_point(field_mutable_list:affiliation_pb.Affiliation.facet)
  return &facet_;
}
const ::google::protobuf::RepeatedPtrField< ::affiliation_pb::Facet >&
Affiliation::facet() const {
  // @@protoc_insertion_point(field_list:affiliation_pb.Affiliation.facet)
  return facet_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForFacet(
    Facet* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Facet::kIdFieldNumber;
const int Facet::kBrandingInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Facet::Facet()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:affiliation_pb.Facet)
}

void Facet::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  branding_info_ = const_cast< ::affiliation_pb::BrandingInfo*>(
      ::affiliation_pb::BrandingInfo::internal_default_instance());
#else
  branding_info_ = const_cast< ::affiliation_pb::BrandingInfo*>(&::affiliation_pb::BrandingInfo::default_instance());
#endif
}

Facet::Facet(const Facet& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.Facet)
}

void Facet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branding_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Facet::~Facet() {
  // @@protoc_insertion_point(destructor:affiliation_pb.Facet)
  SharedDtor();
}

void Facet::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete branding_info_;
  }
}

void Facet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Facet& Facet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_affiliation_5fapi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_affiliation_5fapi_2eproto();
#endif
  return *default_instance_;
}

Facet* Facet::default_instance_ = NULL;

Facet* Facet::New(::google::protobuf::Arena* arena) const {
  Facet* n = new Facet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Facet::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.Facet)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_branding_info()) {
      if (branding_info_ != NULL) branding_info_->::affiliation_pb::BrandingInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Facet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForFacet, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:affiliation_pb.Facet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_branding_info;
        break;
      }

      // optional .affiliation_pb.BrandingInfo branding_info = 2;
      case 2: {
        if (tag == 18) {
         parse_branding_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_branding_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:affiliation_pb.Facet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:affiliation_pb.Facet)
  return false;
#undef DO_
}

void Facet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:affiliation_pb.Facet)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .affiliation_pb.BrandingInfo branding_info = 2;
  if (has_branding_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->branding_info_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:affiliation_pb.Facet)
}

int Facet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.Facet)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .affiliation_pb.BrandingInfo branding_info = 2;
    if (has_branding_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->branding_info_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Facet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Facet*>(&from));
}

void Facet::MergeFrom(const Facet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.Facet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_branding_info()) {
      mutable_branding_info()->::affiliation_pb::BrandingInfo::MergeFrom(from.branding_info());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Facet::CopyFrom(const Facet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.Facet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Facet::IsInitialized() const {

  return true;
}

void Facet::Swap(Facet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Facet::InternalSwap(Facet* other) {
  id_.Swap(&other->id_);
  std::swap(branding_info_, other->branding_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Facet::GetTypeName() const {
  return "affiliation_pb.Facet";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Facet

// optional string id = 1;
bool Facet::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Facet::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Facet::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Facet::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Facet::id() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.Facet.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Facet::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:affiliation_pb.Facet.id)
}
 void Facet::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:affiliation_pb.Facet.id)
}
 void Facet::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:affiliation_pb.Facet.id)
}
 ::std::string* Facet::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.Facet.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Facet::release_id() {
  // @@protoc_insertion_point(field_release:affiliation_pb.Facet.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Facet::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.Facet.id)
}

// optional .affiliation_pb.BrandingInfo branding_info = 2;
bool Facet::has_branding_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Facet::set_has_branding_info() {
  _has_bits_[0] |= 0x00000002u;
}
void Facet::clear_has_branding_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void Facet::clear_branding_info() {
  if (branding_info_ != NULL) branding_info_->::affiliation_pb::BrandingInfo::Clear();
  clear_has_branding_info();
}
const ::affiliation_pb::BrandingInfo& Facet::branding_info() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.Facet.branding_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return branding_info_ != NULL ? *branding_info_ : *default_instance().branding_info_;
#else
  return branding_info_ != NULL ? *branding_info_ : *default_instance_->branding_info_;
#endif
}
::affiliation_pb::BrandingInfo* Facet::mutable_branding_info() {
  set_has_branding_info();
  if (branding_info_ == NULL) {
    branding_info_ = new ::affiliation_pb::BrandingInfo;
  }
  // @@protoc_insertion_point(field_mutable:affiliation_pb.Facet.branding_info)
  return branding_info_;
}
::affiliation_pb::BrandingInfo* Facet::release_branding_info() {
  // @@protoc_insertion_point(field_release:affiliation_pb.Facet.branding_info)
  clear_has_branding_info();
  ::affiliation_pb::BrandingInfo* temp = branding_info_;
  branding_info_ = NULL;
  return temp;
}
void Facet::set_allocated_branding_info(::affiliation_pb::BrandingInfo* branding_info) {
  delete branding_info_;
  branding_info_ = branding_info;
  if (branding_info) {
    set_has_branding_info();
  } else {
    clear_has_branding_info();
  }
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.Facet.branding_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForBrandingInfo(
    BrandingInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrandingInfo::kNameFieldNumber;
const int BrandingInfo::kIconUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrandingInfo::BrandingInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:affiliation_pb.BrandingInfo)
}

void BrandingInfo::InitAsDefaultInstance() {
}

BrandingInfo::BrandingInfo(const BrandingInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.BrandingInfo)
}

void BrandingInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrandingInfo::~BrandingInfo() {
  // @@protoc_insertion_point(destructor:affiliation_pb.BrandingInfo)
  SharedDtor();
}

void BrandingInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BrandingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BrandingInfo& BrandingInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_affiliation_5fapi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_affiliation_5fapi_2eproto();
#endif
  return *default_instance_;
}

BrandingInfo* BrandingInfo::default_instance_ = NULL;

BrandingInfo* BrandingInfo::New(::google::protobuf::Arena* arena) const {
  BrandingInfo* n = new BrandingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrandingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.BrandingInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_icon_url()) {
      icon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BrandingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForBrandingInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:affiliation_pb.BrandingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_icon_url;
        break;
      }

      // optional string icon_url = 2;
      case 2: {
        if (tag == 18) {
         parse_icon_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:affiliation_pb.BrandingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:affiliation_pb.BrandingInfo)
  return false;
#undef DO_
}

void BrandingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:affiliation_pb.BrandingInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string icon_url = 2;
  if (has_icon_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->icon_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:affiliation_pb.BrandingInfo)
}

int BrandingInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.BrandingInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon_url = 2;
    if (has_icon_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_url());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrandingInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BrandingInfo*>(&from));
}

void BrandingInfo::MergeFrom(const BrandingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.BrandingInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_icon_url()) {
      set_has_icon_url();
      icon_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_url_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void BrandingInfo::CopyFrom(const BrandingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.BrandingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrandingInfo::IsInitialized() const {

  return true;
}

void BrandingInfo::Swap(BrandingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrandingInfo::InternalSwap(BrandingInfo* other) {
  name_.Swap(&other->name_);
  icon_url_.Swap(&other->icon_url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BrandingInfo::GetTypeName() const {
  return "affiliation_pb.BrandingInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrandingInfo

// optional string name = 1;
bool BrandingInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BrandingInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void BrandingInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void BrandingInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& BrandingInfo::name() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.BrandingInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrandingInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:affiliation_pb.BrandingInfo.name)
}
 void BrandingInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:affiliation_pb.BrandingInfo.name)
}
 void BrandingInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:affiliation_pb.BrandingInfo.name)
}
 ::std::string* BrandingInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.BrandingInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BrandingInfo::release_name() {
  // @@protoc_insertion_point(field_release:affiliation_pb.BrandingInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrandingInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.BrandingInfo.name)
}

// optional string icon_url = 2;
bool BrandingInfo::has_icon_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BrandingInfo::set_has_icon_url() {
  _has_bits_[0] |= 0x00000002u;
}
void BrandingInfo::clear_has_icon_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void BrandingInfo::clear_icon_url() {
  icon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon_url();
}
 const ::std::string& BrandingInfo::icon_url() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.BrandingInfo.icon_url)
  return icon_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrandingInfo::set_icon_url(const ::std::string& value) {
  set_has_icon_url();
  icon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:affiliation_pb.BrandingInfo.icon_url)
}
 void BrandingInfo::set_icon_url(const char* value) {
  set_has_icon_url();
  icon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:affiliation_pb.BrandingInfo.icon_url)
}
 void BrandingInfo::set_icon_url(const char* value, size_t size) {
  set_has_icon_url();
  icon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:affiliation_pb.BrandingInfo.icon_url)
}
 ::std::string* BrandingInfo::mutable_icon_url() {
  set_has_icon_url();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.BrandingInfo.icon_url)
  return icon_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BrandingInfo::release_icon_url() {
  // @@protoc_insertion_point(field_release:affiliation_pb.BrandingInfo.icon_url)
  clear_has_icon_url();
  return icon_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BrandingInfo::set_allocated_icon_url(::std::string* icon_url) {
  if (icon_url != NULL) {
    set_has_icon_url();
  } else {
    clear_has_icon_url();
  }
  icon_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon_url);
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.BrandingInfo.icon_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForLookupAffiliationMask(
    LookupAffiliationMask* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LookupAffiliationMask::kBrandingInfoFieldNumber;
const int LookupAffiliationMask::kLocaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LookupAffiliationMask::LookupAffiliationMask()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:affiliation_pb.LookupAffiliationMask)
}

void LookupAffiliationMask::InitAsDefaultInstance() {
}

LookupAffiliationMask::LookupAffiliationMask(const LookupAffiliationMask& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.LookupAffiliationMask)
}

void LookupAffiliationMask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branding_info_ = false;
  locale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LookupAffiliationMask::~LookupAffiliationMask() {
  // @@protoc_insertion_point(destructor:affiliation_pb.LookupAffiliationMask)
  SharedDtor();
}

void LookupAffiliationMask::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LookupAffiliationMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LookupAffiliationMask& LookupAffiliationMask::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_affiliation_5fapi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_affiliation_5fapi_2eproto();
#endif
  return *default_instance_;
}

LookupAffiliationMask* LookupAffiliationMask::default_instance_ = NULL;

LookupAffiliationMask* LookupAffiliationMask::New(::google::protobuf::Arena* arena) const {
  LookupAffiliationMask* n = new LookupAffiliationMask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LookupAffiliationMask::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.LookupAffiliationMask)
  if (_has_bits_[0 / 32] & 3u) {
    branding_info_ = false;
    if (has_locale()) {
      locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LookupAffiliationMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForLookupAffiliationMask, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:affiliation_pb.LookupAffiliationMask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool branding_info = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &branding_info_)));
          set_has_branding_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_locale;
        break;
      }

      // optional string locale = 2;
      case 2: {
        if (tag == 18) {
         parse_locale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:affiliation_pb.LookupAffiliationMask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:affiliation_pb.LookupAffiliationMask)
  return false;
#undef DO_
}

void LookupAffiliationMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:affiliation_pb.LookupAffiliationMask)
  // optional bool branding_info = 1;
  if (has_branding_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->branding_info(), output);
  }

  // optional string locale = 2;
  if (has_locale()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->locale(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:affiliation_pb.LookupAffiliationMask)
}

int LookupAffiliationMask::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.LookupAffiliationMask)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool branding_info = 1;
    if (has_branding_info()) {
      total_size += 1 + 1;
    }

    // optional string locale = 2;
    if (has_locale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locale());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LookupAffiliationMask::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LookupAffiliationMask*>(&from));
}

void LookupAffiliationMask::MergeFrom(const LookupAffiliationMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.LookupAffiliationMask)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branding_info()) {
      set_branding_info(from.branding_info());
    }
    if (from.has_locale()) {
      set_has_locale();
      locale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locale_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void LookupAffiliationMask::CopyFrom(const LookupAffiliationMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.LookupAffiliationMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupAffiliationMask::IsInitialized() const {

  return true;
}

void LookupAffiliationMask::Swap(LookupAffiliationMask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LookupAffiliationMask::InternalSwap(LookupAffiliationMask* other) {
  std::swap(branding_info_, other->branding_info_);
  locale_.Swap(&other->locale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LookupAffiliationMask::GetTypeName() const {
  return "affiliation_pb.LookupAffiliationMask";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LookupAffiliationMask

// optional bool branding_info = 1;
bool LookupAffiliationMask::has_branding_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LookupAffiliationMask::set_has_branding_info() {
  _has_bits_[0] |= 0x00000001u;
}
void LookupAffiliationMask::clear_has_branding_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void LookupAffiliationMask::clear_branding_info() {
  branding_info_ = false;
  clear_has_branding_info();
}
 bool LookupAffiliationMask::branding_info() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationMask.branding_info)
  return branding_info_;
}
 void LookupAffiliationMask::set_branding_info(bool value) {
  set_has_branding_info();
  branding_info_ = value;
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationMask.branding_info)
}

// optional string locale = 2;
bool LookupAffiliationMask::has_locale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LookupAffiliationMask::set_has_locale() {
  _has_bits_[0] |= 0x00000002u;
}
void LookupAffiliationMask::clear_has_locale() {
  _has_bits_[0] &= ~0x00000002u;
}
void LookupAffiliationMask::clear_locale() {
  locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locale();
}
 const ::std::string& LookupAffiliationMask::locale() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationMask.locale)
  return locale_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LookupAffiliationMask::set_locale(const ::std::string& value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationMask.locale)
}
 void LookupAffiliationMask::set_locale(const char* value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:affiliation_pb.LookupAffiliationMask.locale)
}
 void LookupAffiliationMask::set_locale(const char* value, size_t size) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:affiliation_pb.LookupAffiliationMask.locale)
}
 ::std::string* LookupAffiliationMask::mutable_locale() {
  set_has_locale();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationMask.locale)
  return locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LookupAffiliationMask::release_locale() {
  // @@protoc_insertion_point(field_release:affiliation_pb.LookupAffiliationMask.locale)
  clear_has_locale();
  return locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LookupAffiliationMask::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    set_has_locale();
  } else {
    clear_has_locale();
  }
  locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.LookupAffiliationMask.locale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForLookupAffiliationRequest(
    LookupAffiliationRequest* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LookupAffiliationRequest::kFacetFieldNumber;
const int LookupAffiliationRequest::kMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LookupAffiliationRequest::LookupAffiliationRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:affiliation_pb.LookupAffiliationRequest)
}

void LookupAffiliationRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  mask_ = const_cast< ::affiliation_pb::LookupAffiliationMask*>(
      ::affiliation_pb::LookupAffiliationMask::internal_default_instance());
#else
  mask_ = const_cast< ::affiliation_pb::LookupAffiliationMask*>(&::affiliation_pb::LookupAffiliationMask::default_instance());
#endif
}

LookupAffiliationRequest::LookupAffiliationRequest(const LookupAffiliationRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.LookupAffiliationRequest)
}

void LookupAffiliationRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LookupAffiliationRequest::~LookupAffiliationRequest() {
  // @@protoc_insertion_point(destructor:affiliation_pb.LookupAffiliationRequest)
  SharedDtor();
}

void LookupAffiliationRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete mask_;
  }
}

void LookupAffiliationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LookupAffiliationRequest& LookupAffiliationRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_affiliation_5fapi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_affiliation_5fapi_2eproto();
#endif
  return *default_instance_;
}

LookupAffiliationRequest* LookupAffiliationRequest::default_instance_ = NULL;

LookupAffiliationRequest* LookupAffiliationRequest::New(::google::protobuf::Arena* arena) const {
  LookupAffiliationRequest* n = new LookupAffiliationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LookupAffiliationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.LookupAffiliationRequest)
  if (has_mask()) {
    if (mask_ != NULL) mask_->::affiliation_pb::LookupAffiliationMask::Clear();
  }
  facet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LookupAffiliationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForLookupAffiliationRequest, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:affiliation_pb.LookupAffiliationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string facet = 1;
      case 1: {
        if (tag == 10) {
         parse_facet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_facet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_facet;
        if (input->ExpectTag(18)) goto parse_mask;
        break;
      }

      // optional .affiliation_pb.LookupAffiliationMask mask = 2;
      case 2: {
        if (tag == 18) {
         parse_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:affiliation_pb.LookupAffiliationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:affiliation_pb.LookupAffiliationRequest)
  return false;
#undef DO_
}

void LookupAffiliationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:affiliation_pb.LookupAffiliationRequest)
  // repeated string facet = 1;
  for (int i = 0; i < this->facet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->facet(i), output);
  }

  // optional .affiliation_pb.LookupAffiliationMask mask = 2;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->mask_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:affiliation_pb.LookupAffiliationRequest)
}

int LookupAffiliationRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.LookupAffiliationRequest)
  int total_size = 0;

  // optional .affiliation_pb.LookupAffiliationMask mask = 2;
  if (has_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mask_);
  }

  // repeated string facet = 1;
  total_size += 1 * this->facet_size();
  for (int i = 0; i < this->facet_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->facet(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LookupAffiliationRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LookupAffiliationRequest*>(&from));
}

void LookupAffiliationRequest::MergeFrom(const LookupAffiliationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.LookupAffiliationRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  facet_.MergeFrom(from.facet_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mask()) {
      mutable_mask()->::affiliation_pb::LookupAffiliationMask::MergeFrom(from.mask());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void LookupAffiliationRequest::CopyFrom(const LookupAffiliationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.LookupAffiliationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupAffiliationRequest::IsInitialized() const {

  return true;
}

void LookupAffiliationRequest::Swap(LookupAffiliationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LookupAffiliationRequest::InternalSwap(LookupAffiliationRequest* other) {
  facet_.UnsafeArenaSwap(&other->facet_);
  std::swap(mask_, other->mask_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LookupAffiliationRequest::GetTypeName() const {
  return "affiliation_pb.LookupAffiliationRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LookupAffiliationRequest

// repeated string facet = 1;
int LookupAffiliationRequest::facet_size() const {
  return facet_.size();
}
void LookupAffiliationRequest::clear_facet() {
  facet_.Clear();
}
 const ::std::string& LookupAffiliationRequest::facet(int index) const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationRequest.facet)
  return facet_.Get(index);
}
 ::std::string* LookupAffiliationRequest::mutable_facet(int index) {
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationRequest.facet)
  return facet_.Mutable(index);
}
 void LookupAffiliationRequest::set_facet(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationRequest.facet)
  facet_.Mutable(index)->assign(value);
}
 void LookupAffiliationRequest::set_facet(int index, const char* value) {
  facet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:affiliation_pb.LookupAffiliationRequest.facet)
}
 void LookupAffiliationRequest::set_facet(int index, const char* value, size_t size) {
  facet_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:affiliation_pb.LookupAffiliationRequest.facet)
}
 ::std::string* LookupAffiliationRequest::add_facet() {
  // @@protoc_insertion_point(field_add_mutable:affiliation_pb.LookupAffiliationRequest.facet)
  return facet_.Add();
}
 void LookupAffiliationRequest::add_facet(const ::std::string& value) {
  facet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:affiliation_pb.LookupAffiliationRequest.facet)
}
 void LookupAffiliationRequest::add_facet(const char* value) {
  facet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:affiliation_pb.LookupAffiliationRequest.facet)
}
 void LookupAffiliationRequest::add_facet(const char* value, size_t size) {
  facet_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:affiliation_pb.LookupAffiliationRequest.facet)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
LookupAffiliationRequest::facet() const {
  // @@protoc_insertion_point(field_list:affiliation_pb.LookupAffiliationRequest.facet)
  return facet_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
LookupAffiliationRequest::mutable_facet() {
  // @@protoc_insertion_point(field_mutable_list:affiliation_pb.LookupAffiliationRequest.facet)
  return &facet_;
}

// optional .affiliation_pb.LookupAffiliationMask mask = 2;
bool LookupAffiliationRequest::has_mask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LookupAffiliationRequest::set_has_mask() {
  _has_bits_[0] |= 0x00000002u;
}
void LookupAffiliationRequest::clear_has_mask() {
  _has_bits_[0] &= ~0x00000002u;
}
void LookupAffiliationRequest::clear_mask() {
  if (mask_ != NULL) mask_->::affiliation_pb::LookupAffiliationMask::Clear();
  clear_has_mask();
}
const ::affiliation_pb::LookupAffiliationMask& LookupAffiliationRequest::mask() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationRequest.mask)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return mask_ != NULL ? *mask_ : *default_instance().mask_;
#else
  return mask_ != NULL ? *mask_ : *default_instance_->mask_;
#endif
}
::affiliation_pb::LookupAffiliationMask* LookupAffiliationRequest::mutable_mask() {
  set_has_mask();
  if (mask_ == NULL) {
    mask_ = new ::affiliation_pb::LookupAffiliationMask;
  }
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationRequest.mask)
  return mask_;
}
::affiliation_pb::LookupAffiliationMask* LookupAffiliationRequest::release_mask() {
  // @@protoc_insertion_point(field_release:affiliation_pb.LookupAffiliationRequest.mask)
  clear_has_mask();
  ::affiliation_pb::LookupAffiliationMask* temp = mask_;
  mask_ = NULL;
  return temp;
}
void LookupAffiliationRequest::set_allocated_mask(::affiliation_pb::LookupAffiliationMask* mask) {
  delete mask_;
  mask_ = mask;
  if (mask) {
    set_has_mask();
  } else {
    clear_has_mask();
  }
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.LookupAffiliationRequest.mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForLookupAffiliationResponse(
    LookupAffiliationResponse* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LookupAffiliationResponse::kAffiliationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LookupAffiliationResponse::LookupAffiliationResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:affiliation_pb.LookupAffiliationResponse)
}

void LookupAffiliationResponse::InitAsDefaultInstance() {
}

LookupAffiliationResponse::LookupAffiliationResponse(const LookupAffiliationResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.LookupAffiliationResponse)
}

void LookupAffiliationResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LookupAffiliationResponse::~LookupAffiliationResponse() {
  // @@protoc_insertion_point(destructor:affiliation_pb.LookupAffiliationResponse)
  SharedDtor();
}

void LookupAffiliationResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LookupAffiliationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LookupAffiliationResponse& LookupAffiliationResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_affiliation_5fapi_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_affiliation_5fapi_2eproto();
#endif
  return *default_instance_;
}

LookupAffiliationResponse* LookupAffiliationResponse::default_instance_ = NULL;

LookupAffiliationResponse* LookupAffiliationResponse::New(::google::protobuf::Arena* arena) const {
  LookupAffiliationResponse* n = new LookupAffiliationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LookupAffiliationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.LookupAffiliationResponse)
  affiliation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LookupAffiliationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForLookupAffiliationResponse, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:affiliation_pb.LookupAffiliationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .affiliation_pb.Affiliation affiliation = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_affiliation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_affiliation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_affiliation;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:affiliation_pb.LookupAffiliationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:affiliation_pb.LookupAffiliationResponse)
  return false;
#undef DO_
}

void LookupAffiliationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:affiliation_pb.LookupAffiliationResponse)
  // repeated .affiliation_pb.Affiliation affiliation = 1;
  for (unsigned int i = 0, n = this->affiliation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->affiliation(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:affiliation_pb.LookupAffiliationResponse)
}

int LookupAffiliationResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.LookupAffiliationResponse)
  int total_size = 0;

  // repeated .affiliation_pb.Affiliation affiliation = 1;
  total_size += 1 * this->affiliation_size();
  for (int i = 0; i < this->affiliation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->affiliation(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LookupAffiliationResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LookupAffiliationResponse*>(&from));
}

void LookupAffiliationResponse::MergeFrom(const LookupAffiliationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.LookupAffiliationResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  affiliation_.MergeFrom(from.affiliation_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void LookupAffiliationResponse::CopyFrom(const LookupAffiliationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.LookupAffiliationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupAffiliationResponse::IsInitialized() const {

  return true;
}

void LookupAffiliationResponse::Swap(LookupAffiliationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LookupAffiliationResponse::InternalSwap(LookupAffiliationResponse* other) {
  affiliation_.UnsafeArenaSwap(&other->affiliation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LookupAffiliationResponse::GetTypeName() const {
  return "affiliation_pb.LookupAffiliationResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LookupAffiliationResponse

// repeated .affiliation_pb.Affiliation affiliation = 1;
int LookupAffiliationResponse::affiliation_size() const {
  return affiliation_.size();
}
void LookupAffiliationResponse::clear_affiliation() {
  affiliation_.Clear();
}
const ::affiliation_pb::Affiliation& LookupAffiliationResponse::affiliation(int index) const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationResponse.affiliation)
  return affiliation_.Get(index);
}
::affiliation_pb::Affiliation* LookupAffiliationResponse::mutable_affiliation(int index) {
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationResponse.affiliation)
  return affiliation_.Mutable(index);
}
::affiliation_pb::Affiliation* LookupAffiliationResponse::add_affiliation() {
  // @@protoc_insertion_point(field_add:affiliation_pb.LookupAffiliationResponse.affiliation)
  return affiliation_.Add();
}
::google::protobuf::RepeatedPtrField< ::affiliation_pb::Affiliation >*
LookupAffiliationResponse::mutable_affiliation() {
  // @@protoc_insertion_point(field_mutable_list:affiliation_pb.LookupAffiliationResponse.affiliation)
  return &affiliation_;
}
const ::google::protobuf::RepeatedPtrField< ::affiliation_pb::Affiliation >&
LookupAffiliationResponse::affiliation() const {
  // @@protoc_insertion_point(field_list:affiliation_pb.LookupAffiliationResponse.affiliation)
  return affiliation_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace affiliation_pb

// @@protoc_insertion_point(global_scope)
