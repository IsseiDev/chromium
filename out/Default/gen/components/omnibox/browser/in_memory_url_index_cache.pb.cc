// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: in_memory_url_index_cache.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "in_memory_url_index_cache.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace in_memory_url_index {

void protobuf_ShutdownFile_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  delete InMemoryURLIndexCacheItem::default_instance_;
  delete InMemoryURLIndexCacheItem_WordListItem::default_instance_;
  delete InMemoryURLIndexCacheItem_WordMapItem::default_instance_;
  delete InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::default_instance_;
  delete InMemoryURLIndexCacheItem_CharWordMapItem::default_instance_;
  delete InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::default_instance_;
  delete InMemoryURLIndexCacheItem_WordIDHistoryMapItem::default_instance_;
  delete InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::default_instance_;
  delete InMemoryURLIndexCacheItem_HistoryInfoMapItem::default_instance_;
  delete InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::default_instance_;
  delete InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::default_instance_;
  delete InMemoryURLIndexCacheItem_WordStartsMapItem::default_instance_;
  delete InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  InMemoryURLIndexCacheItem::default_instance_ = new InMemoryURLIndexCacheItem();
  InMemoryURLIndexCacheItem_WordListItem::default_instance_ = new InMemoryURLIndexCacheItem_WordListItem();
  InMemoryURLIndexCacheItem_WordMapItem::default_instance_ = new InMemoryURLIndexCacheItem_WordMapItem();
  InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::default_instance_ = new InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry();
  InMemoryURLIndexCacheItem_CharWordMapItem::default_instance_ = new InMemoryURLIndexCacheItem_CharWordMapItem();
  InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::default_instance_ = new InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry();
  InMemoryURLIndexCacheItem_WordIDHistoryMapItem::default_instance_ = new InMemoryURLIndexCacheItem_WordIDHistoryMapItem();
  InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::default_instance_ = new InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry();
  InMemoryURLIndexCacheItem_HistoryInfoMapItem::default_instance_ = new InMemoryURLIndexCacheItem_HistoryInfoMapItem();
  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::default_instance_ = new InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry();
  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::default_instance_ = new InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo();
  InMemoryURLIndexCacheItem_WordStartsMapItem::default_instance_ = new InMemoryURLIndexCacheItem_WordStartsMapItem();
  InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::default_instance_ = new InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry();
  InMemoryURLIndexCacheItem::default_instance_->InitAsDefaultInstance();
  InMemoryURLIndexCacheItem_WordListItem::default_instance_->InitAsDefaultInstance();
  InMemoryURLIndexCacheItem_WordMapItem::default_instance_->InitAsDefaultInstance();
  InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::default_instance_->InitAsDefaultInstance();
  InMemoryURLIndexCacheItem_CharWordMapItem::default_instance_->InitAsDefaultInstance();
  InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::default_instance_->InitAsDefaultInstance();
  InMemoryURLIndexCacheItem_WordIDHistoryMapItem::default_instance_->InitAsDefaultInstance();
  InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::default_instance_->InitAsDefaultInstance();
  InMemoryURLIndexCacheItem_HistoryInfoMapItem::default_instance_->InitAsDefaultInstance();
  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::default_instance_->InitAsDefaultInstance();
  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::default_instance_->InitAsDefaultInstance();
  InMemoryURLIndexCacheItem_WordStartsMapItem::default_instance_->InitAsDefaultInstance();
  InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_in_5fmemory_5furl_5findex_5fcache_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto_once_);
void protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto_once_,
                 &protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_in_5fmemory_5furl_5findex_5fcache_2eproto {
  StaticDescriptorInitializer_in_5fmemory_5furl_5findex_5fcache_2eproto() {
    protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
  }
} static_descriptor_initializer_in_5fmemory_5furl_5findex_5fcache_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForInMemoryURLIndexCacheItem(
    InMemoryURLIndexCacheItem* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForInMemoryURLIndexCacheItem_WordListItem(
    InMemoryURLIndexCacheItem_WordListItem* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_WordListItem::kWordCountFieldNumber;
const int InMemoryURLIndexCacheItem_WordListItem::kWordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_WordListItem::InMemoryURLIndexCacheItem_WordListItem()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
}

void InMemoryURLIndexCacheItem_WordListItem::InitAsDefaultInstance() {
}

InMemoryURLIndexCacheItem_WordListItem::InMemoryURLIndexCacheItem_WordListItem(const InMemoryURLIndexCacheItem_WordListItem& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
}

void InMemoryURLIndexCacheItem_WordListItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  word_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InMemoryURLIndexCacheItem_WordListItem::~InMemoryURLIndexCacheItem_WordListItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordListItem::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InMemoryURLIndexCacheItem_WordListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_WordListItem& InMemoryURLIndexCacheItem_WordListItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#endif
  return *default_instance_;
}

InMemoryURLIndexCacheItem_WordListItem* InMemoryURLIndexCacheItem_WordListItem::default_instance_ = NULL;

InMemoryURLIndexCacheItem_WordListItem* InMemoryURLIndexCacheItem_WordListItem::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_WordListItem* n = new InMemoryURLIndexCacheItem_WordListItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_WordListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  word_count_ = 0u;
  word_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InMemoryURLIndexCacheItem_WordListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInMemoryURLIndexCacheItem_WordListItem, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 word_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &word_count_)));
          set_has_word_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_word;
        break;
      }

      // repeated string word = 2;
      case 2: {
        if (tag == 18) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_word()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_word;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_WordListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  // required uint32 word_count = 1;
  if (has_word_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->word_count(), output);
  }

  // repeated string word = 2;
  for (int i = 0; i < this->word_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->word(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
}

int InMemoryURLIndexCacheItem_WordListItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  int total_size = 0;

  // required uint32 word_count = 1;
  if (has_word_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->word_count());
  }
  // repeated string word = 2;
  total_size += 1 * this->word_size();
  for (int i = 0; i < this->word_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->word(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_WordListItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_WordListItem*>(&from));
}

void InMemoryURLIndexCacheItem_WordListItem::MergeFrom(const InMemoryURLIndexCacheItem_WordListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  word_.MergeFrom(from.word_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_word_count()) {
      set_word_count(from.word_count());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InMemoryURLIndexCacheItem_WordListItem::CopyFrom(const InMemoryURLIndexCacheItem_WordListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordListItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InMemoryURLIndexCacheItem_WordListItem::Swap(InMemoryURLIndexCacheItem_WordListItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_WordListItem::InternalSwap(InMemoryURLIndexCacheItem_WordListItem* other) {
  std::swap(word_count_, other->word_count_);
  word_.UnsafeArenaSwap(&other->word_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_WordListItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem";
}


// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForInMemoryURLIndexCacheItem_WordMapItem(
    InMemoryURLIndexCacheItem_WordMapItem* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForInMemoryURLIndexCacheItem_WordMapItem_WordMapEntry(
    InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::kWordFieldNumber;
const int InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::kWordIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InitAsDefaultInstance() {
}

InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  word_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::~InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  word_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#endif
  return *default_instance_;
}

InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::default_instance_ = NULL;

InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* n = new InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_word()) {
      word_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    word_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInMemoryURLIndexCacheItem_WordMapItem_WordMapEntry, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string word = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_word_id;
        break;
      }

      // required int32 word_id = 2;
      case 2: {
        if (tag == 16) {
         parse_word_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_id_)));
          set_has_word_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  // required string word = 1;
  if (has_word()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->word(), output);
  }

  // required int32 word_id = 2;
  if (has_word_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->word_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
}

int InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  int total_size = 0;

  if (has_word()) {
    // required string word = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->word());
  }

  if (has_word_id()) {
    // required int32 word_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->word_id());
  }

  return total_size;
}
int InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string word = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->word());

    // required int32 word_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->word_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry*>(&from));
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_word()) {
      set_has_word();
      word_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word_);
    }
    if (from.has_word_id()) {
      set_word_id(from.word_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::Swap(InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InternalSwap(InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* other) {
  word_.Swap(&other->word_);
  std::swap(word_id_, other->word_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_WordMapItem::kItemCountFieldNumber;
const int InMemoryURLIndexCacheItem_WordMapItem::kWordMapEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_WordMapItem::InMemoryURLIndexCacheItem_WordMapItem()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
}

void InMemoryURLIndexCacheItem_WordMapItem::InitAsDefaultInstance() {
}

InMemoryURLIndexCacheItem_WordMapItem::InMemoryURLIndexCacheItem_WordMapItem(const InMemoryURLIndexCacheItem_WordMapItem& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
}

void InMemoryURLIndexCacheItem_WordMapItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InMemoryURLIndexCacheItem_WordMapItem::~InMemoryURLIndexCacheItem_WordMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordMapItem::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InMemoryURLIndexCacheItem_WordMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_WordMapItem& InMemoryURLIndexCacheItem_WordMapItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#endif
  return *default_instance_;
}

InMemoryURLIndexCacheItem_WordMapItem* InMemoryURLIndexCacheItem_WordMapItem::default_instance_ = NULL;

InMemoryURLIndexCacheItem_WordMapItem* InMemoryURLIndexCacheItem_WordMapItem::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_WordMapItem* n = new InMemoryURLIndexCacheItem_WordMapItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_WordMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  item_count_ = 0u;
  word_map_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InMemoryURLIndexCacheItem_WordMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInMemoryURLIndexCacheItem_WordMapItem, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_word_map_entry;
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
      case 2: {
        if (tag == 18) {
         parse_word_map_entry:
          DO_(input->IncrementRecursionDepth());
         parse_loop_word_map_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_word_map_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_word_map_entry;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_WordMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  // required uint32 item_count = 1;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
  for (unsigned int i = 0, n = this->word_map_entry_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->word_map_entry(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
}

int InMemoryURLIndexCacheItem_WordMapItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  int total_size = 0;

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
  total_size += 1 * this->word_map_entry_size();
  for (int i = 0; i < this->word_map_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->word_map_entry(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_WordMapItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_WordMapItem*>(&from));
}

void InMemoryURLIndexCacheItem_WordMapItem::MergeFrom(const InMemoryURLIndexCacheItem_WordMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  word_map_entry_.MergeFrom(from.word_map_entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InMemoryURLIndexCacheItem_WordMapItem::CopyFrom(const InMemoryURLIndexCacheItem_WordMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->word_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordMapItem::Swap(InMemoryURLIndexCacheItem_WordMapItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_WordMapItem::InternalSwap(InMemoryURLIndexCacheItem_WordMapItem* other) {
  std::swap(item_count_, other->item_count_);
  word_map_entry_.UnsafeArenaSwap(&other->word_map_entry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_WordMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem";
}


// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForInMemoryURLIndexCacheItem_CharWordMapItem(
    InMemoryURLIndexCacheItem_CharWordMapItem* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForInMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry(
    InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::kItemCountFieldNumber;
const int InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::kChar16FieldNumber;
const int InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::kWordIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InitAsDefaultInstance() {
}

InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0u;
  char_16_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::~InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#endif
  return *default_instance_;
}

InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::default_instance_ = NULL;

InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* n = new InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(item_count_, char_16_);

#undef ZR_HELPER_
#undef ZR_

  word_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_char_16;
        break;
      }

      // required int32 char_16 = 2;
      case 2: {
        if (tag == 16) {
         parse_char_16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &char_16_)));
          set_has_char_16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_word_id;
        break;
      }

      // repeated int32 word_id = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_word_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_word_id())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_word_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  // required uint32 item_count = 1;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // required int32 char_16 = 2;
  if (has_char_16()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->char_16(), output);
  }

  // repeated int32 word_id = 3 [packed = true];
  if (this->word_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_word_id_cached_byte_size_);
  }
  for (int i = 0; i < this->word_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->word_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
}

int InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  int total_size = 0;

  if (has_item_count()) {
    // required uint32 item_count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }

  if (has_char_16()) {
    // required int32 char_16 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->char_16());
  }

  return total_size;
}
int InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 item_count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());

    // required int32 char_16 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->char_16());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 word_id = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->word_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->word_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _word_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry*>(&from));
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  word_id_.MergeFrom(from.word_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_char_16()) {
      set_char_16(from.char_16());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::Swap(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InternalSwap(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* other) {
  std::swap(item_count_, other->item_count_);
  std::swap(char_16_, other->char_16_);
  word_id_.UnsafeArenaSwap(&other->word_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_CharWordMapItem::kItemCountFieldNumber;
const int InMemoryURLIndexCacheItem_CharWordMapItem::kCharWordMapEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_CharWordMapItem::InMemoryURLIndexCacheItem_CharWordMapItem()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
}

void InMemoryURLIndexCacheItem_CharWordMapItem::InitAsDefaultInstance() {
}

InMemoryURLIndexCacheItem_CharWordMapItem::InMemoryURLIndexCacheItem_CharWordMapItem(const InMemoryURLIndexCacheItem_CharWordMapItem& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
}

void InMemoryURLIndexCacheItem_CharWordMapItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InMemoryURLIndexCacheItem_CharWordMapItem::~InMemoryURLIndexCacheItem_CharWordMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_CharWordMapItem::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InMemoryURLIndexCacheItem_CharWordMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_CharWordMapItem& InMemoryURLIndexCacheItem_CharWordMapItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#endif
  return *default_instance_;
}

InMemoryURLIndexCacheItem_CharWordMapItem* InMemoryURLIndexCacheItem_CharWordMapItem::default_instance_ = NULL;

InMemoryURLIndexCacheItem_CharWordMapItem* InMemoryURLIndexCacheItem_CharWordMapItem::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_CharWordMapItem* n = new InMemoryURLIndexCacheItem_CharWordMapItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_CharWordMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  item_count_ = 0u;
  char_word_map_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InMemoryURLIndexCacheItem_CharWordMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInMemoryURLIndexCacheItem_CharWordMapItem, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_char_word_map_entry;
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
      case 2: {
        if (tag == 18) {
         parse_char_word_map_entry:
          DO_(input->IncrementRecursionDepth());
         parse_loop_char_word_map_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_char_word_map_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_char_word_map_entry;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_CharWordMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  // required uint32 item_count = 1;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
  for (unsigned int i = 0, n = this->char_word_map_entry_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->char_word_map_entry(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
}

int InMemoryURLIndexCacheItem_CharWordMapItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  int total_size = 0;

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
  total_size += 1 * this->char_word_map_entry_size();
  for (int i = 0; i < this->char_word_map_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->char_word_map_entry(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_CharWordMapItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_CharWordMapItem*>(&from));
}

void InMemoryURLIndexCacheItem_CharWordMapItem::MergeFrom(const InMemoryURLIndexCacheItem_CharWordMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  char_word_map_entry_.MergeFrom(from.char_word_map_entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InMemoryURLIndexCacheItem_CharWordMapItem::CopyFrom(const InMemoryURLIndexCacheItem_CharWordMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_CharWordMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->char_word_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_CharWordMapItem::Swap(InMemoryURLIndexCacheItem_CharWordMapItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_CharWordMapItem::InternalSwap(InMemoryURLIndexCacheItem_CharWordMapItem* other) {
  std::swap(item_count_, other->item_count_);
  char_word_map_entry_.UnsafeArenaSwap(&other->char_word_map_entry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_CharWordMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem";
}


// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForInMemoryURLIndexCacheItem_WordIDHistoryMapItem(
    InMemoryURLIndexCacheItem_WordIDHistoryMapItem* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForInMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry(
    InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::kItemCountFieldNumber;
const int InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::kWordIdFieldNumber;
const int InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::kHistoryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InitAsDefaultInstance() {
}

InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0u;
  word_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::~InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#endif
  return *default_instance_;
}

InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::default_instance_ = NULL;

InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* n = new InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(item_count_, word_id_);

#undef ZR_HELPER_
#undef ZR_

  history_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_word_id;
        break;
      }

      // required int32 word_id = 2;
      case 2: {
        if (tag == 16) {
         parse_word_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_id_)));
          set_has_word_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_history_id;
        break;
      }

      // repeated int64 history_id = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_history_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_history_id())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_history_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  // required uint32 item_count = 1;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // required int32 word_id = 2;
  if (has_word_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->word_id(), output);
  }

  // repeated int64 history_id = 3 [packed = true];
  if (this->history_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_history_id_cached_byte_size_);
  }
  for (int i = 0; i < this->history_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->history_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
}

int InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  int total_size = 0;

  if (has_item_count()) {
    // required uint32 item_count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }

  if (has_word_id()) {
    // required int32 word_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->word_id());
  }

  return total_size;
}
int InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 item_count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());

    // required int32 word_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->word_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int64 history_id = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->history_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->history_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _history_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry*>(&from));
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  history_id_.MergeFrom(from.history_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_word_id()) {
      set_word_id(from.word_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::Swap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InternalSwap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* other) {
  std::swap(item_count_, other->item_count_);
  std::swap(word_id_, other->word_id_);
  history_id_.UnsafeArenaSwap(&other->history_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_WordIDHistoryMapItem::kItemCountFieldNumber;
const int InMemoryURLIndexCacheItem_WordIDHistoryMapItem::kWordIdHistoryMapEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InMemoryURLIndexCacheItem_WordIDHistoryMapItem()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InitAsDefaultInstance() {
}

InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InMemoryURLIndexCacheItem_WordIDHistoryMapItem(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InMemoryURLIndexCacheItem_WordIDHistoryMapItem::~InMemoryURLIndexCacheItem_WordIDHistoryMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& InMemoryURLIndexCacheItem_WordIDHistoryMapItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#endif
  return *default_instance_;
}

InMemoryURLIndexCacheItem_WordIDHistoryMapItem* InMemoryURLIndexCacheItem_WordIDHistoryMapItem::default_instance_ = NULL;

InMemoryURLIndexCacheItem_WordIDHistoryMapItem* InMemoryURLIndexCacheItem_WordIDHistoryMapItem::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_WordIDHistoryMapItem* n = new InMemoryURLIndexCacheItem_WordIDHistoryMapItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  item_count_ = 0u;
  word_id_history_map_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInMemoryURLIndexCacheItem_WordIDHistoryMapItem, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_word_id_history_map_entry;
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
      case 2: {
        if (tag == 18) {
         parse_word_id_history_map_entry:
          DO_(input->IncrementRecursionDepth());
         parse_loop_word_id_history_map_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_word_id_history_map_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_word_id_history_map_entry;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  // required uint32 item_count = 1;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
  for (unsigned int i = 0, n = this->word_id_history_map_entry_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->word_id_history_map_entry(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
}

int InMemoryURLIndexCacheItem_WordIDHistoryMapItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  int total_size = 0;

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
  total_size += 1 * this->word_id_history_map_entry_size();
  for (int i = 0; i < this->word_id_history_map_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->word_id_history_map_entry(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_WordIDHistoryMapItem*>(&from));
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::MergeFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  word_id_history_map_entry_.MergeFrom(from.word_id_history_map_entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::CopyFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->word_id_history_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::Swap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InternalSwap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem* other) {
  std::swap(item_count_, other->item_count_);
  word_id_history_map_entry_.UnsafeArenaSwap(&other->word_id_history_map_entry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_WordIDHistoryMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem";
}


// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForInMemoryURLIndexCacheItem_HistoryInfoMapItem(
    InMemoryURLIndexCacheItem_HistoryInfoMapItem* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForInMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry(
    InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForInMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo(
    InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::kVisitTimeFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::kTransitionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InitAsDefaultInstance() {
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visit_time_ = GOOGLE_LONGLONG(0);
  transition_type_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::~InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#endif
  return *default_instance_;
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::default_instance_ = NULL;

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* n = new InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(visit_time_, transition_type_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 visit_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &visit_time_)));
          set_has_visit_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_transition_type;
        break;
      }

      // required uint64 transition_type = 2;
      case 2: {
        if (tag == 16) {
         parse_transition_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transition_type_)));
          set_has_transition_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  // required int64 visit_time = 1;
  if (has_visit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->visit_time(), output);
  }

  // required uint64 transition_type = 2;
  if (has_transition_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->transition_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
}

int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  int total_size = 0;

  if (has_visit_time()) {
    // required int64 visit_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->visit_time());
  }

  if (has_transition_type()) {
    // required uint64 transition_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->transition_type());
  }

  return total_size;
}
int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 visit_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->visit_time());

    // required uint64 transition_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->transition_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo*>(&from));
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_visit_time()) {
      set_visit_time(from.visit_time());
    }
    if (from.has_transition_type()) {
      set_transition_type(from.transition_type());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::Swap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* other) {
  std::swap(visit_time_, other->visit_time_);
  std::swap(transition_type_, other->transition_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::kHistoryIdFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::kVisitCountFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::kTypedCountFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::kLastVisitFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::kUrlFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::kTitleFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::kVisitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InitAsDefaultInstance() {
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  history_id_ = GOOGLE_LONGLONG(0);
  visit_count_ = 0;
  typed_count_ = 0;
  last_visit_ = GOOGLE_LONGLONG(0);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::~InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#endif
  return *default_instance_;
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::default_instance_ = NULL;

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* n = new InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(history_id_, last_visit_);
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  visits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 history_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &history_id_)));
          set_has_history_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_visit_count;
        break;
      }

      // required int32 visit_count = 2;
      case 2: {
        if (tag == 16) {
         parse_visit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visit_count_)));
          set_has_visit_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_typed_count;
        break;
      }

      // required int32 typed_count = 3;
      case 3: {
        if (tag == 24) {
         parse_typed_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typed_count_)));
          set_has_typed_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_visit;
        break;
      }

      // required int64 last_visit = 4;
      case 4: {
        if (tag == 32) {
         parse_last_visit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_visit_)));
          set_has_last_visit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_url;
        break;
      }

      // required string url = 5;
      case 5: {
        if (tag == 42) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_title;
        break;
      }

      // optional string title = 6;
      case 6: {
        if (tag == 50) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_visits;
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
      case 7: {
        if (tag == 58) {
         parse_visits:
          DO_(input->IncrementRecursionDepth());
         parse_loop_visits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_visits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_visits;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  // required int64 history_id = 1;
  if (has_history_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->history_id(), output);
  }

  // required int32 visit_count = 2;
  if (has_visit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->visit_count(), output);
  }

  // required int32 typed_count = 3;
  if (has_typed_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typed_count(), output);
  }

  // required int64 last_visit = 4;
  if (has_last_visit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_visit(), output);
  }

  // required string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->url(), output);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->title(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
  for (unsigned int i = 0, n = this->visits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->visits(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
}

int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  int total_size = 0;

  if (has_history_id()) {
    // required int64 history_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->history_id());
  }

  if (has_visit_count()) {
    // required int32 visit_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->visit_count());
  }

  if (has_typed_count()) {
    // required int32 typed_count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typed_count());
  }

  if (has_last_visit()) {
    // required int64 last_visit = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_visit());
  }

  if (has_url()) {
    // required string url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  return total_size;
}
int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int64 history_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->history_id());

    // required int32 visit_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->visit_count());

    // required int32 typed_count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typed_count());

    // required int64 last_visit = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_visit());

    // required string url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string title = 6;
  if (has_title()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
  total_size += 1 * this->visits_size();
  for (int i = 0; i < this->visits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->visits(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry*>(&from));
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  visits_.MergeFrom(from.visits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_id()) {
      set_history_id(from.history_id());
    }
    if (from.has_visit_count()) {
      set_visit_count(from.visit_count());
    }
    if (from.has_typed_count()) {
      set_typed_count(from.typed_count());
    }
    if (from.has_last_visit()) {
      set_last_visit(from.last_visit());
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->visits())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::Swap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* other) {
  std::swap(history_id_, other->history_id_);
  std::swap(visit_count_, other->visit_count_);
  std::swap(typed_count_, other->typed_count_);
  std::swap(last_visit_, other->last_visit_);
  url_.Swap(&other->url_);
  title_.Swap(&other->title_);
  visits_.UnsafeArenaSwap(&other->visits_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem::kItemCountFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem::kHistoryInfoMapEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_HistoryInfoMapItem::InMemoryURLIndexCacheItem_HistoryInfoMapItem()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::InitAsDefaultInstance() {
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem::InMemoryURLIndexCacheItem_HistoryInfoMapItem(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem::~InMemoryURLIndexCacheItem_HistoryInfoMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_HistoryInfoMapItem& InMemoryURLIndexCacheItem_HistoryInfoMapItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#endif
  return *default_instance_;
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem* InMemoryURLIndexCacheItem_HistoryInfoMapItem::default_instance_ = NULL;

InMemoryURLIndexCacheItem_HistoryInfoMapItem* InMemoryURLIndexCacheItem_HistoryInfoMapItem::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_HistoryInfoMapItem* n = new InMemoryURLIndexCacheItem_HistoryInfoMapItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  item_count_ = 0u;
  history_info_map_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInMemoryURLIndexCacheItem_HistoryInfoMapItem, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_history_info_map_entry;
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
      case 2: {
        if (tag == 18) {
         parse_history_info_map_entry:
          DO_(input->IncrementRecursionDepth());
         parse_loop_history_info_map_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_history_info_map_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_history_info_map_entry;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  // required uint32 item_count = 1;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
  for (unsigned int i = 0, n = this->history_info_map_entry_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->history_info_map_entry(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
}

int InMemoryURLIndexCacheItem_HistoryInfoMapItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  int total_size = 0;

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
  total_size += 1 * this->history_info_map_entry_size();
  for (int i = 0; i < this->history_info_map_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_info_map_entry(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem*>(&from));
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  history_info_map_entry_.MergeFrom(from.history_info_map_entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->history_info_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::Swap(InMemoryURLIndexCacheItem_HistoryInfoMapItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem::InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem* other) {
  std::swap(item_count_, other->item_count_);
  history_info_map_entry_.UnsafeArenaSwap(&other->history_info_map_entry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_HistoryInfoMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem";
}


// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForInMemoryURLIndexCacheItem_WordStartsMapItem(
    InMemoryURLIndexCacheItem_WordStartsMapItem* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForInMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry(
    InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::kHistoryIdFieldNumber;
const int InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::kUrlWordStartsFieldNumber;
const int InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::kTitleWordStartsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InitAsDefaultInstance() {
}

InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  history_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::~InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#endif
  return *default_instance_;
}

InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::default_instance_ = NULL;

InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* n = new InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  history_id_ = GOOGLE_LONGLONG(0);
  url_word_starts_.Clear();
  title_word_starts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 history_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &history_id_)));
          set_has_history_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url_word_starts;
        break;
      }

      // repeated int32 url_word_starts = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_url_word_starts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_url_word_starts())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_url_word_starts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title_word_starts;
        break;
      }

      // repeated int32 title_word_starts = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_title_word_starts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_title_word_starts())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_title_word_starts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  // required int64 history_id = 1;
  if (has_history_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->history_id(), output);
  }

  // repeated int32 url_word_starts = 2 [packed = true];
  if (this->url_word_starts_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_url_word_starts_cached_byte_size_);
  }
  for (int i = 0; i < this->url_word_starts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->url_word_starts(i), output);
  }

  // repeated int32 title_word_starts = 3 [packed = true];
  if (this->title_word_starts_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_title_word_starts_cached_byte_size_);
  }
  for (int i = 0; i < this->title_word_starts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->title_word_starts(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
}

int InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  int total_size = 0;

  // required int64 history_id = 1;
  if (has_history_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->history_id());
  }
  // repeated int32 url_word_starts = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->url_word_starts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->url_word_starts(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _url_word_starts_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 title_word_starts = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->title_word_starts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->title_word_starts(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _title_word_starts_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry*>(&from));
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  url_word_starts_.MergeFrom(from.url_word_starts_);
  title_word_starts_.MergeFrom(from.title_word_starts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_id()) {
      set_history_id(from.history_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::Swap(InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InternalSwap(InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* other) {
  std::swap(history_id_, other->history_id_);
  url_word_starts_.UnsafeArenaSwap(&other->url_word_starts_);
  title_word_starts_.UnsafeArenaSwap(&other->title_word_starts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_WordStartsMapItem::kItemCountFieldNumber;
const int InMemoryURLIndexCacheItem_WordStartsMapItem::kWordStartsMapEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_WordStartsMapItem::InMemoryURLIndexCacheItem_WordStartsMapItem()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::InitAsDefaultInstance() {
}

InMemoryURLIndexCacheItem_WordStartsMapItem::InMemoryURLIndexCacheItem_WordStartsMapItem(const InMemoryURLIndexCacheItem_WordStartsMapItem& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InMemoryURLIndexCacheItem_WordStartsMapItem::~InMemoryURLIndexCacheItem_WordStartsMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_WordStartsMapItem& InMemoryURLIndexCacheItem_WordStartsMapItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#endif
  return *default_instance_;
}

InMemoryURLIndexCacheItem_WordStartsMapItem* InMemoryURLIndexCacheItem_WordStartsMapItem::default_instance_ = NULL;

InMemoryURLIndexCacheItem_WordStartsMapItem* InMemoryURLIndexCacheItem_WordStartsMapItem::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_WordStartsMapItem* n = new InMemoryURLIndexCacheItem_WordStartsMapItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  item_count_ = 0u;
  word_starts_map_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InMemoryURLIndexCacheItem_WordStartsMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInMemoryURLIndexCacheItem_WordStartsMapItem, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_word_starts_map_entry;
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
      case 2: {
        if (tag == 18) {
         parse_word_starts_map_entry:
          DO_(input->IncrementRecursionDepth());
         parse_loop_word_starts_map_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_word_starts_map_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_word_starts_map_entry;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  // required uint32 item_count = 1;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
  for (unsigned int i = 0, n = this->word_starts_map_entry_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->word_starts_map_entry(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
}

int InMemoryURLIndexCacheItem_WordStartsMapItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  int total_size = 0;

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
  total_size += 1 * this->word_starts_map_entry_size();
  for (int i = 0; i < this->word_starts_map_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->word_starts_map_entry(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_WordStartsMapItem*>(&from));
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::MergeFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  word_starts_map_entry_.MergeFrom(from.word_starts_map_entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::CopyFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordStartsMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->word_starts_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::Swap(InMemoryURLIndexCacheItem_WordStartsMapItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_WordStartsMapItem::InternalSwap(InMemoryURLIndexCacheItem_WordStartsMapItem* other) {
  std::swap(item_count_, other->item_count_);
  word_starts_map_entry_.UnsafeArenaSwap(&other->word_starts_map_entry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_WordStartsMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem::kLastRebuildTimestampFieldNumber;
const int InMemoryURLIndexCacheItem::kVersionFieldNumber;
const int InMemoryURLIndexCacheItem::kHistoryItemCountFieldNumber;
const int InMemoryURLIndexCacheItem::kWordListFieldNumber;
const int InMemoryURLIndexCacheItem::kWordMapFieldNumber;
const int InMemoryURLIndexCacheItem::kCharWordMapFieldNumber;
const int InMemoryURLIndexCacheItem::kWordIdHistoryMapFieldNumber;
const int InMemoryURLIndexCacheItem::kHistoryInfoMapFieldNumber;
const int InMemoryURLIndexCacheItem::kWordStartsMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem::InMemoryURLIndexCacheItem()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem)
}

void InMemoryURLIndexCacheItem::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  word_list_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem::internal_default_instance());
#else
  word_list_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem*>(&::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  word_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem::internal_default_instance());
#else
  word_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem*>(&::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  char_word_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem::internal_default_instance());
#else
  char_word_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem*>(&::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  word_id_history_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem::internal_default_instance());
#else
  word_id_history_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem*>(&::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  history_info_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem::internal_default_instance());
#else
  history_info_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem*>(&::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  word_starts_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem::internal_default_instance());
#else
  word_starts_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem*>(&::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem::default_instance());
#endif
}

InMemoryURLIndexCacheItem::InMemoryURLIndexCacheItem(const InMemoryURLIndexCacheItem& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem)
}

void InMemoryURLIndexCacheItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_rebuild_timestamp_ = GOOGLE_LONGLONG(0);
  version_ = 0;
  history_item_count_ = 0;
  word_list_ = NULL;
  word_map_ = NULL;
  char_word_map_ = NULL;
  word_id_history_map_ = NULL;
  history_info_map_ = NULL;
  word_starts_map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InMemoryURLIndexCacheItem::~InMemoryURLIndexCacheItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete word_list_;
    delete word_map_;
    delete char_word_map_;
    delete word_id_history_map_;
    delete history_info_map_;
    delete word_starts_map_;
  }
}

void InMemoryURLIndexCacheItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem& InMemoryURLIndexCacheItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_in_5fmemory_5furl_5findex_5fcache_2eproto();
#endif
  return *default_instance_;
}

InMemoryURLIndexCacheItem* InMemoryURLIndexCacheItem::default_instance_ = NULL;

InMemoryURLIndexCacheItem* InMemoryURLIndexCacheItem::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem* n = new InMemoryURLIndexCacheItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InMemoryURLIndexCacheItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InMemoryURLIndexCacheItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(last_rebuild_timestamp_, history_item_count_);
    if (has_word_list()) {
      if (word_list_ != NULL) word_list_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem::Clear();
    }
    if (has_word_map()) {
      if (word_map_ != NULL) word_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem::Clear();
    }
    if (has_char_word_map()) {
      if (char_word_map_ != NULL) char_word_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem::Clear();
    }
    if (has_word_id_history_map()) {
      if (word_id_history_map_ != NULL) word_id_history_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem::Clear();
    }
    if (has_history_info_map()) {
      if (history_info_map_ != NULL) history_info_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem::Clear();
    }
  }
  if (has_word_starts_map()) {
    if (word_starts_map_ != NULL) word_starts_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem::Clear();
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InMemoryURLIndexCacheItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInMemoryURLIndexCacheItem, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 last_rebuild_timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_rebuild_timestamp_)));
          set_has_last_rebuild_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_history_item_count;
        break;
      }

      // required int32 history_item_count = 3;
      case 3: {
        if (tag == 24) {
         parse_history_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_item_count_)));
          set_has_history_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_word_list;
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
      case 4: {
        if (tag == 34) {
         parse_word_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_word_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_word_map;
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
      case 5: {
        if (tag == 42) {
         parse_word_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_word_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_char_word_map;
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
      case 6: {
        if (tag == 50) {
         parse_char_word_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char_word_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_word_id_history_map;
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
      case 7: {
        if (tag == 58) {
         parse_word_id_history_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_word_id_history_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_history_info_map;
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
      case 8: {
        if (tag == 66) {
         parse_history_info_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_info_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_word_starts_map;
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
      case 9: {
        if (tag == 74) {
         parse_word_starts_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_word_starts_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  // required int64 last_rebuild_timestamp = 1;
  if (has_last_rebuild_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_rebuild_timestamp(), output);
  }

  // optional int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // required int32 history_item_count = 3;
  if (has_history_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->history_item_count(), output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
  if (has_word_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->word_list_, output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
  if (has_word_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->word_map_, output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
  if (has_char_word_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->char_word_map_, output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
  if (has_word_id_history_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->word_id_history_map_, output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
  if (has_history_info_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->history_info_map_, output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
  if (has_word_starts_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->word_starts_map_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem)
}

int InMemoryURLIndexCacheItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  int total_size = 0;

  if (has_last_rebuild_timestamp()) {
    // required int64 last_rebuild_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_rebuild_timestamp());
  }

  if (has_history_item_count()) {
    // required int32 history_item_count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->history_item_count());
  }

  return total_size;
}
int InMemoryURLIndexCacheItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int64 last_rebuild_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_rebuild_timestamp());

    // required int32 history_item_count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->history_item_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 250u) {
    // optional int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
    if (has_word_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->word_list_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
    if (has_word_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->word_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
    if (has_char_word_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->char_word_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
    if (has_word_id_history_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->word_id_history_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
    if (has_history_info_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->history_info_map_);
    }

  }
  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
  if (has_word_starts_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->word_starts_map_);
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem*>(&from));
}

void InMemoryURLIndexCacheItem::MergeFrom(const InMemoryURLIndexCacheItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_rebuild_timestamp()) {
      set_last_rebuild_timestamp(from.last_rebuild_timestamp());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_history_item_count()) {
      set_history_item_count(from.history_item_count());
    }
    if (from.has_word_list()) {
      mutable_word_list()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem::MergeFrom(from.word_list());
    }
    if (from.has_word_map()) {
      mutable_word_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem::MergeFrom(from.word_map());
    }
    if (from.has_char_word_map()) {
      mutable_char_word_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem::MergeFrom(from.char_word_map());
    }
    if (from.has_word_id_history_map()) {
      mutable_word_id_history_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem::MergeFrom(from.word_id_history_map());
    }
    if (from.has_history_info_map()) {
      mutable_history_info_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem::MergeFrom(from.history_info_map());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_word_starts_map()) {
      mutable_word_starts_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem::MergeFrom(from.word_starts_map());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InMemoryURLIndexCacheItem::CopyFrom(const InMemoryURLIndexCacheItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_word_list()) {
    if (!this->word_list_->IsInitialized()) return false;
  }
  if (has_word_map()) {
    if (!this->word_map_->IsInitialized()) return false;
  }
  if (has_char_word_map()) {
    if (!this->char_word_map_->IsInitialized()) return false;
  }
  if (has_word_id_history_map()) {
    if (!this->word_id_history_map_->IsInitialized()) return false;
  }
  if (has_history_info_map()) {
    if (!this->history_info_map_->IsInitialized()) return false;
  }
  if (has_word_starts_map()) {
    if (!this->word_starts_map_->IsInitialized()) return false;
  }
  return true;
}

void InMemoryURLIndexCacheItem::Swap(InMemoryURLIndexCacheItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem::InternalSwap(InMemoryURLIndexCacheItem* other) {
  std::swap(last_rebuild_timestamp_, other->last_rebuild_timestamp_);
  std::swap(version_, other->version_);
  std::swap(history_item_count_, other->history_item_count_);
  std::swap(word_list_, other->word_list_);
  std::swap(word_map_, other->word_map_);
  std::swap(char_word_map_, other->char_word_map_);
  std::swap(word_id_history_map_, other->word_id_history_map_);
  std::swap(history_info_map_, other->history_info_map_);
  std::swap(word_starts_map_, other->word_starts_map_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InMemoryURLIndexCacheItem_WordListItem

// required uint32 word_count = 1;
bool InMemoryURLIndexCacheItem_WordListItem::has_word_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_WordListItem::set_has_word_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_WordListItem::clear_has_word_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_WordListItem::clear_word_count() {
  word_count_ = 0u;
  clear_has_word_count();
}
 ::google::protobuf::uint32 InMemoryURLIndexCacheItem_WordListItem::word_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word_count)
  return word_count_;
}
 void InMemoryURLIndexCacheItem_WordListItem::set_word_count(::google::protobuf::uint32 value) {
  set_has_word_count();
  word_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word_count)
}

// repeated string word = 2;
int InMemoryURLIndexCacheItem_WordListItem::word_size() const {
  return word_.size();
}
void InMemoryURLIndexCacheItem_WordListItem::clear_word() {
  word_.Clear();
}
 const ::std::string& InMemoryURLIndexCacheItem_WordListItem::word(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return word_.Get(index);
}
 ::std::string* InMemoryURLIndexCacheItem_WordListItem::mutable_word(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return word_.Mutable(index);
}
 void InMemoryURLIndexCacheItem_WordListItem::set_word(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  word_.Mutable(index)->assign(value);
}
 void InMemoryURLIndexCacheItem_WordListItem::set_word(int index, const char* value) {
  word_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
 void InMemoryURLIndexCacheItem_WordListItem::set_word(int index, const char* value, size_t size) {
  word_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
 ::std::string* InMemoryURLIndexCacheItem_WordListItem::add_word() {
  // @@protoc_insertion_point(field_add_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return word_.Add();
}
 void InMemoryURLIndexCacheItem_WordListItem::add_word(const ::std::string& value) {
  word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
 void InMemoryURLIndexCacheItem_WordListItem::add_word(const char* value) {
  word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
 void InMemoryURLIndexCacheItem_WordListItem::add_word(const char* value, size_t size) {
  word_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
InMemoryURLIndexCacheItem_WordListItem::word() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return word_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
InMemoryURLIndexCacheItem_WordListItem::mutable_word() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return &word_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry

// required string word = 1;
bool InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::has_word() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_has_word() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::clear_has_word() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::clear_word() {
  word_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_word();
}
 const ::std::string& InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::word() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
  return word_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_word(const ::std::string& value) {
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
}
 void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_word(const char* value) {
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
}
 void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_word(const char* value, size_t size) {
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
}
 ::std::string* InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::mutable_word() {
  set_has_word();
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
  return word_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::release_word() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
  clear_has_word();
  return word_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_allocated_word(::std::string* word) {
  if (word != NULL) {
    set_has_word();
  } else {
    clear_has_word();
  }
  word_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), word);
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
}

// required int32 word_id = 2;
bool InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::has_word_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_has_word_id() {
  _has_bits_[0] |= 0x00000002u;
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::clear_has_word_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::clear_word_id() {
  word_id_ = 0;
  clear_has_word_id();
}
 ::google::protobuf::int32 InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::word_id() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word_id)
  return word_id_;
}
 void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_word_id(::google::protobuf::int32 value) {
  set_has_word_id();
  word_id_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word_id)
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_WordMapItem

// required uint32 item_count = 1;
bool InMemoryURLIndexCacheItem_WordMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_WordMapItem::set_has_item_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_WordMapItem::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_WordMapItem::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
 ::google::protobuf::uint32 InMemoryURLIndexCacheItem_WordMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.item_count)
  return item_count_;
}
 void InMemoryURLIndexCacheItem_WordMapItem::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
int InMemoryURLIndexCacheItem_WordMapItem::word_map_entry_size() const {
  return word_map_entry_.size();
}
void InMemoryURLIndexCacheItem_WordMapItem::clear_word_map_entry() {
  word_map_entry_.Clear();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& InMemoryURLIndexCacheItem_WordMapItem::word_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return word_map_entry_.Get(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* InMemoryURLIndexCacheItem_WordMapItem::mutable_word_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return word_map_entry_.Mutable(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* InMemoryURLIndexCacheItem_WordMapItem::add_word_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return word_map_entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry >*
InMemoryURLIndexCacheItem_WordMapItem::mutable_word_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return &word_map_entry_;
}
const ::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry >&
InMemoryURLIndexCacheItem_WordMapItem::word_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return word_map_entry_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry

// required uint32 item_count = 1;
bool InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::set_has_item_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
 ::google::protobuf::uint32 InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.item_count)
  return item_count_;
}
 void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.item_count)
}

// required int32 char_16 = 2;
bool InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::has_char_16() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::set_has_char_16() {
  _has_bits_[0] |= 0x00000002u;
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::clear_has_char_16() {
  _has_bits_[0] &= ~0x00000002u;
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::clear_char_16() {
  char_16_ = 0;
  clear_has_char_16();
}
 ::google::protobuf::int32 InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::char_16() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.char_16)
  return char_16_;
}
 void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::set_char_16(::google::protobuf::int32 value) {
  set_has_char_16();
  char_16_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.char_16)
}

// repeated int32 word_id = 3 [packed = true];
int InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::word_id_size() const {
  return word_id_.size();
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::clear_word_id() {
  word_id_.Clear();
}
 ::google::protobuf::int32 InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::word_id(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
  return word_id_.Get(index);
}
 void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::set_word_id(int index, ::google::protobuf::int32 value) {
  word_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
}
 void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::add_word_id(::google::protobuf::int32 value) {
  word_id_.Add(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::word_id() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
  return word_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::mutable_word_id() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
  return &word_id_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_CharWordMapItem

// required uint32 item_count = 1;
bool InMemoryURLIndexCacheItem_CharWordMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_CharWordMapItem::set_has_item_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_CharWordMapItem::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_CharWordMapItem::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
 ::google::protobuf::uint32 InMemoryURLIndexCacheItem_CharWordMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.item_count)
  return item_count_;
}
 void InMemoryURLIndexCacheItem_CharWordMapItem::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
int InMemoryURLIndexCacheItem_CharWordMapItem::char_word_map_entry_size() const {
  return char_word_map_entry_.size();
}
void InMemoryURLIndexCacheItem_CharWordMapItem::clear_char_word_map_entry() {
  char_word_map_entry_.Clear();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& InMemoryURLIndexCacheItem_CharWordMapItem::char_word_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return char_word_map_entry_.Get(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* InMemoryURLIndexCacheItem_CharWordMapItem::mutable_char_word_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return char_word_map_entry_.Mutable(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* InMemoryURLIndexCacheItem_CharWordMapItem::add_char_word_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return char_word_map_entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry >*
InMemoryURLIndexCacheItem_CharWordMapItem::mutable_char_word_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return &char_word_map_entry_;
}
const ::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry >&
InMemoryURLIndexCacheItem_CharWordMapItem::char_word_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return char_word_map_entry_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry

// required uint32 item_count = 1;
bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::set_has_item_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
 ::google::protobuf::uint32 InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.item_count)
  return item_count_;
}
 void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.item_count)
}

// required int32 word_id = 2;
bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::has_word_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::set_has_word_id() {
  _has_bits_[0] |= 0x00000002u;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::clear_has_word_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::clear_word_id() {
  word_id_ = 0;
  clear_has_word_id();
}
 ::google::protobuf::int32 InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::word_id() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.word_id)
  return word_id_;
}
 void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::set_word_id(::google::protobuf::int32 value) {
  set_has_word_id();
  word_id_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.word_id)
}

// repeated int64 history_id = 3 [packed = true];
int InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::history_id_size() const {
  return history_id_.size();
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::clear_history_id() {
  history_id_.Clear();
}
 ::google::protobuf::int64 InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::history_id(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
  return history_id_.Get(index);
}
 void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::set_history_id(int index, ::google::protobuf::int64 value) {
  history_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
}
 void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::add_history_id(::google::protobuf::int64 value) {
  history_id_.Add(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::history_id() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
  return history_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::mutable_history_id() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
  return &history_id_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_WordIDHistoryMapItem

// required uint32 item_count = 1;
bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::set_has_item_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
 ::google::protobuf::uint32 InMemoryURLIndexCacheItem_WordIDHistoryMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.item_count)
  return item_count_;
}
 void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
int InMemoryURLIndexCacheItem_WordIDHistoryMapItem::word_id_history_map_entry_size() const {
  return word_id_history_map_entry_.size();
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::clear_word_id_history_map_entry() {
  word_id_history_map_entry_.Clear();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& InMemoryURLIndexCacheItem_WordIDHistoryMapItem::word_id_history_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return word_id_history_map_entry_.Get(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* InMemoryURLIndexCacheItem_WordIDHistoryMapItem::mutable_word_id_history_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return word_id_history_map_entry_.Mutable(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* InMemoryURLIndexCacheItem_WordIDHistoryMapItem::add_word_id_history_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return word_id_history_map_entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry >*
InMemoryURLIndexCacheItem_WordIDHistoryMapItem::mutable_word_id_history_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return &word_id_history_map_entry_;
}
const ::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry >&
InMemoryURLIndexCacheItem_WordIDHistoryMapItem::word_id_history_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return word_id_history_map_entry_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo

// required int64 visit_time = 1;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::has_visit_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::set_has_visit_time() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::clear_has_visit_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::clear_visit_time() {
  visit_time_ = GOOGLE_LONGLONG(0);
  clear_has_visit_time();
}
 ::google::protobuf::int64 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::visit_time() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo.visit_time)
  return visit_time_;
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::set_visit_time(::google::protobuf::int64 value) {
  set_has_visit_time();
  visit_time_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo.visit_time)
}

// required uint64 transition_type = 2;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::has_transition_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::set_has_transition_type() {
  _has_bits_[0] |= 0x00000002u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::clear_has_transition_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::clear_transition_type() {
  transition_type_ = GOOGLE_ULONGLONG(0);
  clear_has_transition_type();
}
 ::google::protobuf::uint64 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::transition_type() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo.transition_type)
  return transition_type_;
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::set_transition_type(::google::protobuf::uint64 value) {
  set_has_transition_type();
  transition_type_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo.transition_type)
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry

// required int64 history_id = 1;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_history_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_has_history_id() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_has_history_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_history_id() {
  history_id_ = GOOGLE_LONGLONG(0);
  clear_has_history_id();
}
 ::google::protobuf::int64 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::history_id() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.history_id)
  return history_id_;
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_history_id(::google::protobuf::int64 value) {
  set_has_history_id();
  history_id_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.history_id)
}

// required int32 visit_count = 2;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_visit_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_has_visit_count() {
  _has_bits_[0] |= 0x00000002u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_has_visit_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_visit_count() {
  visit_count_ = 0;
  clear_has_visit_count();
}
 ::google::protobuf::int32 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::visit_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visit_count)
  return visit_count_;
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_visit_count(::google::protobuf::int32 value) {
  set_has_visit_count();
  visit_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visit_count)
}

// required int32 typed_count = 3;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_typed_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_has_typed_count() {
  _has_bits_[0] |= 0x00000004u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_has_typed_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_typed_count() {
  typed_count_ = 0;
  clear_has_typed_count();
}
 ::google::protobuf::int32 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::typed_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.typed_count)
  return typed_count_;
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_typed_count(::google::protobuf::int32 value) {
  set_has_typed_count();
  typed_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.typed_count)
}

// required int64 last_visit = 4;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_last_visit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_has_last_visit() {
  _has_bits_[0] |= 0x00000008u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_has_last_visit() {
  _has_bits_[0] &= ~0x00000008u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_last_visit() {
  last_visit_ = GOOGLE_LONGLONG(0);
  clear_has_last_visit();
}
 ::google::protobuf::int64 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::last_visit() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.last_visit)
  return last_visit_;
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_last_visit(::google::protobuf::int64 value) {
  set_has_last_visit();
  last_visit_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.last_visit)
}

// required string url = 5;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_has_url() {
  _has_bits_[0] |= 0x00000010u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_has_url() {
  _has_bits_[0] &= ~0x00000010u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::url() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
}
 ::std::string* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::release_url() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
}

// optional string title = 6;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::title() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
}
 ::std::string* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::release_title() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::visits_size() const {
  return visits_.size();
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_visits() {
  visits_.Clear();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::visits(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return visits_.Get(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::mutable_visits(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return visits_.Mutable(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::add_visits() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return visits_.Add();
}
::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo >*
InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::mutable_visits() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return &visits_;
}
const ::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo >&
InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::visits() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return visits_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_HistoryInfoMapItem

// required uint32 item_count = 1;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem::set_has_item_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
 ::google::protobuf::uint32 InMemoryURLIndexCacheItem_HistoryInfoMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.item_count)
  return item_count_;
}
 void InMemoryURLIndexCacheItem_HistoryInfoMapItem::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
int InMemoryURLIndexCacheItem_HistoryInfoMapItem::history_info_map_entry_size() const {
  return history_info_map_entry_.size();
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem::clear_history_info_map_entry() {
  history_info_map_entry_.Clear();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& InMemoryURLIndexCacheItem_HistoryInfoMapItem::history_info_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return history_info_map_entry_.Get(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* InMemoryURLIndexCacheItem_HistoryInfoMapItem::mutable_history_info_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return history_info_map_entry_.Mutable(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* InMemoryURLIndexCacheItem_HistoryInfoMapItem::add_history_info_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return history_info_map_entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry >*
InMemoryURLIndexCacheItem_HistoryInfoMapItem::mutable_history_info_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return &history_info_map_entry_;
}
const ::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry >&
InMemoryURLIndexCacheItem_HistoryInfoMapItem::history_info_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return history_info_map_entry_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry

// required int64 history_id = 1;
bool InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::has_history_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::set_has_history_id() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::clear_has_history_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::clear_history_id() {
  history_id_ = GOOGLE_LONGLONG(0);
  clear_has_history_id();
}
 ::google::protobuf::int64 InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::history_id() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.history_id)
  return history_id_;
}
 void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::set_history_id(::google::protobuf::int64 value) {
  set_has_history_id();
  history_id_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.history_id)
}

// repeated int32 url_word_starts = 2 [packed = true];
int InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::url_word_starts_size() const {
  return url_word_starts_.size();
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::clear_url_word_starts() {
  url_word_starts_.Clear();
}
 ::google::protobuf::int32 InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::url_word_starts(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
  return url_word_starts_.Get(index);
}
 void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::set_url_word_starts(int index, ::google::protobuf::int32 value) {
  url_word_starts_.Set(index, value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
}
 void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::add_url_word_starts(::google::protobuf::int32 value) {
  url_word_starts_.Add(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::url_word_starts() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
  return url_word_starts_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::mutable_url_word_starts() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
  return &url_word_starts_;
}

// repeated int32 title_word_starts = 3 [packed = true];
int InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::title_word_starts_size() const {
  return title_word_starts_.size();
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::clear_title_word_starts() {
  title_word_starts_.Clear();
}
 ::google::protobuf::int32 InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::title_word_starts(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
  return title_word_starts_.Get(index);
}
 void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::set_title_word_starts(int index, ::google::protobuf::int32 value) {
  title_word_starts_.Set(index, value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
}
 void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::add_title_word_starts(::google::protobuf::int32 value) {
  title_word_starts_.Add(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::title_word_starts() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
  return title_word_starts_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::mutable_title_word_starts() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
  return &title_word_starts_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_WordStartsMapItem

// required uint32 item_count = 1;
bool InMemoryURLIndexCacheItem_WordStartsMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_WordStartsMapItem::set_has_item_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_WordStartsMapItem::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_WordStartsMapItem::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
 ::google::protobuf::uint32 InMemoryURLIndexCacheItem_WordStartsMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.item_count)
  return item_count_;
}
 void InMemoryURLIndexCacheItem_WordStartsMapItem::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
int InMemoryURLIndexCacheItem_WordStartsMapItem::word_starts_map_entry_size() const {
  return word_starts_map_entry_.size();
}
void InMemoryURLIndexCacheItem_WordStartsMapItem::clear_word_starts_map_entry() {
  word_starts_map_entry_.Clear();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& InMemoryURLIndexCacheItem_WordStartsMapItem::word_starts_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return word_starts_map_entry_.Get(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* InMemoryURLIndexCacheItem_WordStartsMapItem::mutable_word_starts_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return word_starts_map_entry_.Mutable(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* InMemoryURLIndexCacheItem_WordStartsMapItem::add_word_starts_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return word_starts_map_entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry >*
InMemoryURLIndexCacheItem_WordStartsMapItem::mutable_word_starts_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return &word_starts_map_entry_;
}
const ::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry >&
InMemoryURLIndexCacheItem_WordStartsMapItem::word_starts_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return word_starts_map_entry_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem

// required int64 last_rebuild_timestamp = 1;
bool InMemoryURLIndexCacheItem::has_last_rebuild_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_last_rebuild_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem::clear_has_last_rebuild_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem::clear_last_rebuild_timestamp() {
  last_rebuild_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_rebuild_timestamp();
}
 ::google::protobuf::int64 InMemoryURLIndexCacheItem::last_rebuild_timestamp() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.last_rebuild_timestamp)
  return last_rebuild_timestamp_;
}
 void InMemoryURLIndexCacheItem::set_last_rebuild_timestamp(::google::protobuf::int64 value) {
  set_has_last_rebuild_timestamp();
  last_rebuild_timestamp_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.last_rebuild_timestamp)
}

// optional int32 version = 2;
bool InMemoryURLIndexCacheItem::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void InMemoryURLIndexCacheItem::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void InMemoryURLIndexCacheItem::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::google::protobuf::int32 InMemoryURLIndexCacheItem::version() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.version)
  return version_;
}
 void InMemoryURLIndexCacheItem::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.version)
}

// required int32 history_item_count = 3;
bool InMemoryURLIndexCacheItem::has_history_item_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_history_item_count() {
  _has_bits_[0] |= 0x00000004u;
}
void InMemoryURLIndexCacheItem::clear_has_history_item_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void InMemoryURLIndexCacheItem::clear_history_item_count() {
  history_item_count_ = 0;
  clear_has_history_item_count();
}
 ::google::protobuf::int32 InMemoryURLIndexCacheItem::history_item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.history_item_count)
  return history_item_count_;
}
 void InMemoryURLIndexCacheItem::set_history_item_count(::google::protobuf::int32 value) {
  set_has_history_item_count();
  history_item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.history_item_count)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
bool InMemoryURLIndexCacheItem::has_word_list() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_word_list() {
  _has_bits_[0] |= 0x00000008u;
}
void InMemoryURLIndexCacheItem::clear_has_word_list() {
  _has_bits_[0] &= ~0x00000008u;
}
void InMemoryURLIndexCacheItem::clear_word_list() {
  if (word_list_ != NULL) word_list_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem::Clear();
  clear_has_word_list();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem& InMemoryURLIndexCacheItem::word_list() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.word_list)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return word_list_ != NULL ? *word_list_ : *default_instance().word_list_;
#else
  return word_list_ != NULL ? *word_list_ : *default_instance_->word_list_;
#endif
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* InMemoryURLIndexCacheItem::mutable_word_list() {
  set_has_word_list();
  if (word_list_ == NULL) {
    word_list_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.word_list)
  return word_list_;
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* InMemoryURLIndexCacheItem::release_word_list() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.word_list)
  clear_has_word_list();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* temp = word_list_;
  word_list_ = NULL;
  return temp;
}
void InMemoryURLIndexCacheItem::set_allocated_word_list(::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* word_list) {
  delete word_list_;
  word_list_ = word_list;
  if (word_list) {
    set_has_word_list();
  } else {
    clear_has_word_list();
  }
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.word_list)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
bool InMemoryURLIndexCacheItem::has_word_map() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_word_map() {
  _has_bits_[0] |= 0x00000010u;
}
void InMemoryURLIndexCacheItem::clear_has_word_map() {
  _has_bits_[0] &= ~0x00000010u;
}
void InMemoryURLIndexCacheItem::clear_word_map() {
  if (word_map_ != NULL) word_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem::Clear();
  clear_has_word_map();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem& InMemoryURLIndexCacheItem::word_map() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.word_map)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return word_map_ != NULL ? *word_map_ : *default_instance().word_map_;
#else
  return word_map_ != NULL ? *word_map_ : *default_instance_->word_map_;
#endif
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* InMemoryURLIndexCacheItem::mutable_word_map() {
  set_has_word_map();
  if (word_map_ == NULL) {
    word_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.word_map)
  return word_map_;
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* InMemoryURLIndexCacheItem::release_word_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.word_map)
  clear_has_word_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* temp = word_map_;
  word_map_ = NULL;
  return temp;
}
void InMemoryURLIndexCacheItem::set_allocated_word_map(::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* word_map) {
  delete word_map_;
  word_map_ = word_map;
  if (word_map) {
    set_has_word_map();
  } else {
    clear_has_word_map();
  }
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.word_map)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
bool InMemoryURLIndexCacheItem::has_char_word_map() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_char_word_map() {
  _has_bits_[0] |= 0x00000020u;
}
void InMemoryURLIndexCacheItem::clear_has_char_word_map() {
  _has_bits_[0] &= ~0x00000020u;
}
void InMemoryURLIndexCacheItem::clear_char_word_map() {
  if (char_word_map_ != NULL) char_word_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem::Clear();
  clear_has_char_word_map();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem& InMemoryURLIndexCacheItem::char_word_map() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.char_word_map)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return char_word_map_ != NULL ? *char_word_map_ : *default_instance().char_word_map_;
#else
  return char_word_map_ != NULL ? *char_word_map_ : *default_instance_->char_word_map_;
#endif
}
::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* InMemoryURLIndexCacheItem::mutable_char_word_map() {
  set_has_char_word_map();
  if (char_word_map_ == NULL) {
    char_word_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.char_word_map)
  return char_word_map_;
}
::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* InMemoryURLIndexCacheItem::release_char_word_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.char_word_map)
  clear_has_char_word_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* temp = char_word_map_;
  char_word_map_ = NULL;
  return temp;
}
void InMemoryURLIndexCacheItem::set_allocated_char_word_map(::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* char_word_map) {
  delete char_word_map_;
  char_word_map_ = char_word_map;
  if (char_word_map) {
    set_has_char_word_map();
  } else {
    clear_has_char_word_map();
  }
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.char_word_map)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
bool InMemoryURLIndexCacheItem::has_word_id_history_map() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_word_id_history_map() {
  _has_bits_[0] |= 0x00000040u;
}
void InMemoryURLIndexCacheItem::clear_has_word_id_history_map() {
  _has_bits_[0] &= ~0x00000040u;
}
void InMemoryURLIndexCacheItem::clear_word_id_history_map() {
  if (word_id_history_map_ != NULL) word_id_history_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem::Clear();
  clear_has_word_id_history_map();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem& InMemoryURLIndexCacheItem::word_id_history_map() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.word_id_history_map)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return word_id_history_map_ != NULL ? *word_id_history_map_ : *default_instance().word_id_history_map_;
#else
  return word_id_history_map_ != NULL ? *word_id_history_map_ : *default_instance_->word_id_history_map_;
#endif
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* InMemoryURLIndexCacheItem::mutable_word_id_history_map() {
  set_has_word_id_history_map();
  if (word_id_history_map_ == NULL) {
    word_id_history_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.word_id_history_map)
  return word_id_history_map_;
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* InMemoryURLIndexCacheItem::release_word_id_history_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.word_id_history_map)
  clear_has_word_id_history_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* temp = word_id_history_map_;
  word_id_history_map_ = NULL;
  return temp;
}
void InMemoryURLIndexCacheItem::set_allocated_word_id_history_map(::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* word_id_history_map) {
  delete word_id_history_map_;
  word_id_history_map_ = word_id_history_map;
  if (word_id_history_map) {
    set_has_word_id_history_map();
  } else {
    clear_has_word_id_history_map();
  }
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.word_id_history_map)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
bool InMemoryURLIndexCacheItem::has_history_info_map() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_history_info_map() {
  _has_bits_[0] |= 0x00000080u;
}
void InMemoryURLIndexCacheItem::clear_has_history_info_map() {
  _has_bits_[0] &= ~0x00000080u;
}
void InMemoryURLIndexCacheItem::clear_history_info_map() {
  if (history_info_map_ != NULL) history_info_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem::Clear();
  clear_has_history_info_map();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem& InMemoryURLIndexCacheItem::history_info_map() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.history_info_map)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return history_info_map_ != NULL ? *history_info_map_ : *default_instance().history_info_map_;
#else
  return history_info_map_ != NULL ? *history_info_map_ : *default_instance_->history_info_map_;
#endif
}
::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* InMemoryURLIndexCacheItem::mutable_history_info_map() {
  set_has_history_info_map();
  if (history_info_map_ == NULL) {
    history_info_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.history_info_map)
  return history_info_map_;
}
::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* InMemoryURLIndexCacheItem::release_history_info_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.history_info_map)
  clear_has_history_info_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* temp = history_info_map_;
  history_info_map_ = NULL;
  return temp;
}
void InMemoryURLIndexCacheItem::set_allocated_history_info_map(::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* history_info_map) {
  delete history_info_map_;
  history_info_map_ = history_info_map;
  if (history_info_map) {
    set_has_history_info_map();
  } else {
    clear_has_history_info_map();
  }
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.history_info_map)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
bool InMemoryURLIndexCacheItem::has_word_starts_map() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_word_starts_map() {
  _has_bits_[0] |= 0x00000100u;
}
void InMemoryURLIndexCacheItem::clear_has_word_starts_map() {
  _has_bits_[0] &= ~0x00000100u;
}
void InMemoryURLIndexCacheItem::clear_word_starts_map() {
  if (word_starts_map_ != NULL) word_starts_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem::Clear();
  clear_has_word_starts_map();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem& InMemoryURLIndexCacheItem::word_starts_map() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.word_starts_map)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return word_starts_map_ != NULL ? *word_starts_map_ : *default_instance().word_starts_map_;
#else
  return word_starts_map_ != NULL ? *word_starts_map_ : *default_instance_->word_starts_map_;
#endif
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* InMemoryURLIndexCacheItem::mutable_word_starts_map() {
  set_has_word_starts_map();
  if (word_starts_map_ == NULL) {
    word_starts_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.word_starts_map)
  return word_starts_map_;
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* InMemoryURLIndexCacheItem::release_word_starts_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.word_starts_map)
  clear_has_word_starts_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* temp = word_starts_map_;
  word_starts_map_ = NULL;
  return temp;
}
void InMemoryURLIndexCacheItem::set_allocated_word_starts_map(::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* word_starts_map) {
  delete word_starts_map_;
  word_starts_map_ = word_starts_map;
  if (word_starts_map) {
    set_has_word_starts_map();
  } else {
    clear_has_word_starts_map();
  }
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.word_starts_map)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace in_memory_url_index

// @@protoc_insertion_point(global_scope)
