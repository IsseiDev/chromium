// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: suggestions.proto

#ifndef PROTOBUF_suggestions_2eproto__INCLUDED
#define PROTOBUF_suggestions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace suggestions {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_suggestions_2eproto();
void protobuf_AssignDesc_suggestions_2eproto();
void protobuf_ShutdownFile_suggestions_2eproto();

class ChromeSuggestion;
class ImageData;
class SuggestionsBlacklist;
class SuggestionsProfile;

enum ProviderId {
  SERVER0 = 0,
  SERVER8 = 8,
  SERVER9 = 9,
  SERVER10 = 10,
  SERVER11 = 11
};
bool ProviderId_IsValid(int value);
const ProviderId ProviderId_MIN = SERVER0;
const ProviderId ProviderId_MAX = SERVER11;
const int ProviderId_ARRAYSIZE = ProviderId_MAX + 1;

// ===================================================================

class SuggestionsProfile : public ::google::protobuf::MessageLite {
 public:
  SuggestionsProfile();
  virtual ~SuggestionsProfile();

  SuggestionsProfile(const SuggestionsProfile& from);

  inline SuggestionsProfile& operator=(const SuggestionsProfile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const SuggestionsProfile& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SuggestionsProfile* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(SuggestionsProfile* other);

  // implements Message ----------------------------------------------

  inline SuggestionsProfile* New() const { return New(NULL); }

  SuggestionsProfile* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SuggestionsProfile& from);
  void MergeFrom(const SuggestionsProfile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SuggestionsProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .suggestions.ChromeSuggestion suggestions = 1;
  int suggestions_size() const;
  void clear_suggestions();
  static const int kSuggestionsFieldNumber = 1;
  const ::suggestions::ChromeSuggestion& suggestions(int index) const;
  ::suggestions::ChromeSuggestion* mutable_suggestions(int index);
  ::suggestions::ChromeSuggestion* add_suggestions();
  ::google::protobuf::RepeatedPtrField< ::suggestions::ChromeSuggestion >*
      mutable_suggestions();
  const ::google::protobuf::RepeatedPtrField< ::suggestions::ChromeSuggestion >&
      suggestions() const;

  // optional int64 timestamp = 16;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 16;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:suggestions.SuggestionsProfile)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::suggestions::ChromeSuggestion > suggestions_;
  ::google::protobuf::int64 timestamp_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_suggestions_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_suggestions_2eproto();
  #endif
  friend void protobuf_AssignDesc_suggestions_2eproto();
  friend void protobuf_ShutdownFile_suggestions_2eproto();

  void InitAsDefaultInstance();
  static SuggestionsProfile* default_instance_;
};
// -------------------------------------------------------------------

class ChromeSuggestion : public ::google::protobuf::MessageLite {
 public:
  ChromeSuggestion();
  virtual ~ChromeSuggestion();

  ChromeSuggestion(const ChromeSuggestion& from);

  inline ChromeSuggestion& operator=(const ChromeSuggestion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const ChromeSuggestion& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChromeSuggestion* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeSuggestion* other);

  // implements Message ----------------------------------------------

  inline ChromeSuggestion* New() const { return New(NULL); }

  ChromeSuggestion* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChromeSuggestion& from);
  void MergeFrom(const ChromeSuggestion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeSuggestion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string favicon_url = 3;
  bool has_favicon_url() const;
  void clear_favicon_url();
  static const int kFaviconUrlFieldNumber = 3;
  const ::std::string& favicon_url() const;
  void set_favicon_url(const ::std::string& value);
  void set_favicon_url(const char* value);
  void set_favicon_url(const char* value, size_t size);
  ::std::string* mutable_favicon_url();
  ::std::string* release_favicon_url();
  void set_allocated_favicon_url(::std::string* favicon_url);

  // optional string thumbnail = 4;
  bool has_thumbnail() const;
  void clear_thumbnail();
  static const int kThumbnailFieldNumber = 4;
  const ::std::string& thumbnail() const;
  void set_thumbnail(const ::std::string& value);
  void set_thumbnail(const char* value);
  void set_thumbnail(const char* value, size_t size);
  ::std::string* mutable_thumbnail();
  ::std::string* release_thumbnail();
  void set_allocated_thumbnail(::std::string* thumbnail);

  // repeated .suggestions.ProviderId providers = 5;
  int providers_size() const;
  void clear_providers();
  static const int kProvidersFieldNumber = 5;
  ::suggestions::ProviderId providers(int index) const;
  void set_providers(int index, ::suggestions::ProviderId value);
  void add_providers(::suggestions::ProviderId value);
  const ::google::protobuf::RepeatedField<int>& providers() const;
  ::google::protobuf::RepeatedField<int>* mutable_providers();

  // optional int64 expiry_ts = 7;
  bool has_expiry_ts() const;
  void clear_expiry_ts();
  static const int kExpiryTsFieldNumber = 7;
  ::google::protobuf::int64 expiry_ts() const;
  void set_expiry_ts(::google::protobuf::int64 value);

  // optional string impression_url = 13;
  bool has_impression_url() const;
  void clear_impression_url();
  static const int kImpressionUrlFieldNumber = 13;
  const ::std::string& impression_url() const;
  void set_impression_url(const ::std::string& value);
  void set_impression_url(const char* value);
  void set_impression_url(const char* value, size_t size);
  ::std::string* mutable_impression_url();
  ::std::string* release_impression_url();
  void set_allocated_impression_url(::std::string* impression_url);

  // optional string click_url = 14;
  bool has_click_url() const;
  void clear_click_url();
  static const int kClickUrlFieldNumber = 14;
  const ::std::string& click_url() const;
  void set_click_url(const ::std::string& value);
  void set_click_url(const char* value);
  void set_click_url(const char* value, size_t size);
  ::std::string* mutable_click_url();
  ::std::string* release_click_url();
  void set_allocated_click_url(::std::string* click_url);

  // @@protoc_insertion_point(class_scope:suggestions.ChromeSuggestion)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_favicon_url();
  inline void clear_has_favicon_url();
  inline void set_has_thumbnail();
  inline void clear_has_thumbnail();
  inline void set_has_expiry_ts();
  inline void clear_has_expiry_ts();
  inline void set_has_impression_url();
  inline void clear_has_impression_url();
  inline void set_has_click_url();
  inline void clear_has_click_url();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr favicon_url_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_;
  ::google::protobuf::RepeatedField<int> providers_;
  ::google::protobuf::int64 expiry_ts_;
  ::google::protobuf::internal::ArenaStringPtr impression_url_;
  ::google::protobuf::internal::ArenaStringPtr click_url_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_suggestions_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_suggestions_2eproto();
  #endif
  friend void protobuf_AssignDesc_suggestions_2eproto();
  friend void protobuf_ShutdownFile_suggestions_2eproto();

  void InitAsDefaultInstance();
  static ChromeSuggestion* default_instance_;
};
// -------------------------------------------------------------------

class SuggestionsBlacklist : public ::google::protobuf::MessageLite {
 public:
  SuggestionsBlacklist();
  virtual ~SuggestionsBlacklist();

  SuggestionsBlacklist(const SuggestionsBlacklist& from);

  inline SuggestionsBlacklist& operator=(const SuggestionsBlacklist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const SuggestionsBlacklist& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SuggestionsBlacklist* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(SuggestionsBlacklist* other);

  // implements Message ----------------------------------------------

  inline SuggestionsBlacklist* New() const { return New(NULL); }

  SuggestionsBlacklist* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SuggestionsBlacklist& from);
  void MergeFrom(const SuggestionsBlacklist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SuggestionsBlacklist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string urls = 1;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 1;
  const ::std::string& urls(int index) const;
  ::std::string* mutable_urls(int index);
  void set_urls(int index, const ::std::string& value);
  void set_urls(int index, const char* value);
  void set_urls(int index, const char* value, size_t size);
  ::std::string* add_urls();
  void add_urls(const ::std::string& value);
  void add_urls(const char* value);
  void add_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_urls();

  // @@protoc_insertion_point(class_scope:suggestions.SuggestionsBlacklist)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> urls_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_suggestions_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_suggestions_2eproto();
  #endif
  friend void protobuf_AssignDesc_suggestions_2eproto();
  friend void protobuf_ShutdownFile_suggestions_2eproto();

  void InitAsDefaultInstance();
  static SuggestionsBlacklist* default_instance_;
};
// -------------------------------------------------------------------

class ImageData : public ::google::protobuf::MessageLite {
 public:
  ImageData();
  virtual ~ImageData();

  ImageData(const ImageData& from);

  inline ImageData& operator=(const ImageData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const ImageData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ImageData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ImageData* other);

  // implements Message ----------------------------------------------

  inline ImageData* New() const { return New(NULL); }

  ImageData* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ImageData& from);
  void MergeFrom(const ImageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:suggestions.ImageData)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_suggestions_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_suggestions_2eproto();
  #endif
  friend void protobuf_AssignDesc_suggestions_2eproto();
  friend void protobuf_ShutdownFile_suggestions_2eproto();

  void InitAsDefaultInstance();
  static ImageData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggestionsProfile

// repeated .suggestions.ChromeSuggestion suggestions = 1;
inline int SuggestionsProfile::suggestions_size() const {
  return suggestions_.size();
}
inline void SuggestionsProfile::clear_suggestions() {
  suggestions_.Clear();
}
inline const ::suggestions::ChromeSuggestion& SuggestionsProfile::suggestions(int index) const {
  // @@protoc_insertion_point(field_get:suggestions.SuggestionsProfile.suggestions)
  return suggestions_.Get(index);
}
inline ::suggestions::ChromeSuggestion* SuggestionsProfile::mutable_suggestions(int index) {
  // @@protoc_insertion_point(field_mutable:suggestions.SuggestionsProfile.suggestions)
  return suggestions_.Mutable(index);
}
inline ::suggestions::ChromeSuggestion* SuggestionsProfile::add_suggestions() {
  // @@protoc_insertion_point(field_add:suggestions.SuggestionsProfile.suggestions)
  return suggestions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::suggestions::ChromeSuggestion >*
SuggestionsProfile::mutable_suggestions() {
  // @@protoc_insertion_point(field_mutable_list:suggestions.SuggestionsProfile.suggestions)
  return &suggestions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::suggestions::ChromeSuggestion >&
SuggestionsProfile::suggestions() const {
  // @@protoc_insertion_point(field_list:suggestions.SuggestionsProfile.suggestions)
  return suggestions_;
}

// optional int64 timestamp = 16;
inline bool SuggestionsProfile::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggestionsProfile::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggestionsProfile::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggestionsProfile::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 SuggestionsProfile::timestamp() const {
  // @@protoc_insertion_point(field_get:suggestions.SuggestionsProfile.timestamp)
  return timestamp_;
}
inline void SuggestionsProfile::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:suggestions.SuggestionsProfile.timestamp)
}

// -------------------------------------------------------------------

// ChromeSuggestion

// optional string url = 1;
inline bool ChromeSuggestion::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeSuggestion::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChromeSuggestion::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChromeSuggestion::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ChromeSuggestion::url() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.url)
}
inline void ChromeSuggestion::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ChromeSuggestion.url)
}
inline void ChromeSuggestion::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ChromeSuggestion.url)
}
inline ::std::string* ChromeSuggestion::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:suggestions.ChromeSuggestion.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeSuggestion::release_url() {
  // @@protoc_insertion_point(field_release:suggestions.ChromeSuggestion.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ChromeSuggestion.url)
}

// optional string title = 2;
inline bool ChromeSuggestion::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeSuggestion::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChromeSuggestion::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChromeSuggestion::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& ChromeSuggestion::title() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.title)
}
inline void ChromeSuggestion::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ChromeSuggestion.title)
}
inline void ChromeSuggestion::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ChromeSuggestion.title)
}
inline ::std::string* ChromeSuggestion::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:suggestions.ChromeSuggestion.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeSuggestion::release_title() {
  // @@protoc_insertion_point(field_release:suggestions.ChromeSuggestion.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ChromeSuggestion.title)
}

// optional string favicon_url = 3;
inline bool ChromeSuggestion::has_favicon_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChromeSuggestion::set_has_favicon_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChromeSuggestion::clear_has_favicon_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChromeSuggestion::clear_favicon_url() {
  favicon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_favicon_url();
}
inline const ::std::string& ChromeSuggestion::favicon_url() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.favicon_url)
  return favicon_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_favicon_url(const ::std::string& value) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.favicon_url)
}
inline void ChromeSuggestion::set_favicon_url(const char* value) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ChromeSuggestion.favicon_url)
}
inline void ChromeSuggestion::set_favicon_url(const char* value, size_t size) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ChromeSuggestion.favicon_url)
}
inline ::std::string* ChromeSuggestion::mutable_favicon_url() {
  set_has_favicon_url();
  // @@protoc_insertion_point(field_mutable:suggestions.ChromeSuggestion.favicon_url)
  return favicon_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeSuggestion::release_favicon_url() {
  // @@protoc_insertion_point(field_release:suggestions.ChromeSuggestion.favicon_url)
  clear_has_favicon_url();
  return favicon_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_allocated_favicon_url(::std::string* favicon_url) {
  if (favicon_url != NULL) {
    set_has_favicon_url();
  } else {
    clear_has_favicon_url();
  }
  favicon_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon_url);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ChromeSuggestion.favicon_url)
}

// optional string thumbnail = 4;
inline bool ChromeSuggestion::has_thumbnail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChromeSuggestion::set_has_thumbnail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChromeSuggestion::clear_has_thumbnail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChromeSuggestion::clear_thumbnail() {
  thumbnail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_thumbnail();
}
inline const ::std::string& ChromeSuggestion::thumbnail() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.thumbnail)
  return thumbnail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_thumbnail(const ::std::string& value) {
  set_has_thumbnail();
  thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.thumbnail)
}
inline void ChromeSuggestion::set_thumbnail(const char* value) {
  set_has_thumbnail();
  thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ChromeSuggestion.thumbnail)
}
inline void ChromeSuggestion::set_thumbnail(const char* value, size_t size) {
  set_has_thumbnail();
  thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ChromeSuggestion.thumbnail)
}
inline ::std::string* ChromeSuggestion::mutable_thumbnail() {
  set_has_thumbnail();
  // @@protoc_insertion_point(field_mutable:suggestions.ChromeSuggestion.thumbnail)
  return thumbnail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeSuggestion::release_thumbnail() {
  // @@protoc_insertion_point(field_release:suggestions.ChromeSuggestion.thumbnail)
  clear_has_thumbnail();
  return thumbnail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_allocated_thumbnail(::std::string* thumbnail) {
  if (thumbnail != NULL) {
    set_has_thumbnail();
  } else {
    clear_has_thumbnail();
  }
  thumbnail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ChromeSuggestion.thumbnail)
}

// repeated .suggestions.ProviderId providers = 5;
inline int ChromeSuggestion::providers_size() const {
  return providers_.size();
}
inline void ChromeSuggestion::clear_providers() {
  providers_.Clear();
}
inline ::suggestions::ProviderId ChromeSuggestion::providers(int index) const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.providers)
  return static_cast< ::suggestions::ProviderId >(providers_.Get(index));
}
inline void ChromeSuggestion::set_providers(int index, ::suggestions::ProviderId value) {
  assert(::suggestions::ProviderId_IsValid(value));
  providers_.Set(index, value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.providers)
}
inline void ChromeSuggestion::add_providers(::suggestions::ProviderId value) {
  assert(::suggestions::ProviderId_IsValid(value));
  providers_.Add(value);
  // @@protoc_insertion_point(field_add:suggestions.ChromeSuggestion.providers)
}
inline const ::google::protobuf::RepeatedField<int>&
ChromeSuggestion::providers() const {
  // @@protoc_insertion_point(field_list:suggestions.ChromeSuggestion.providers)
  return providers_;
}
inline ::google::protobuf::RepeatedField<int>*
ChromeSuggestion::mutable_providers() {
  // @@protoc_insertion_point(field_mutable_list:suggestions.ChromeSuggestion.providers)
  return &providers_;
}

// optional int64 expiry_ts = 7;
inline bool ChromeSuggestion::has_expiry_ts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChromeSuggestion::set_has_expiry_ts() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChromeSuggestion::clear_has_expiry_ts() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChromeSuggestion::clear_expiry_ts() {
  expiry_ts_ = GOOGLE_LONGLONG(0);
  clear_has_expiry_ts();
}
inline ::google::protobuf::int64 ChromeSuggestion::expiry_ts() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.expiry_ts)
  return expiry_ts_;
}
inline void ChromeSuggestion::set_expiry_ts(::google::protobuf::int64 value) {
  set_has_expiry_ts();
  expiry_ts_ = value;
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.expiry_ts)
}

// optional string impression_url = 13;
inline bool ChromeSuggestion::has_impression_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChromeSuggestion::set_has_impression_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChromeSuggestion::clear_has_impression_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChromeSuggestion::clear_impression_url() {
  impression_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_impression_url();
}
inline const ::std::string& ChromeSuggestion::impression_url() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.impression_url)
  return impression_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_impression_url(const ::std::string& value) {
  set_has_impression_url();
  impression_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.impression_url)
}
inline void ChromeSuggestion::set_impression_url(const char* value) {
  set_has_impression_url();
  impression_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ChromeSuggestion.impression_url)
}
inline void ChromeSuggestion::set_impression_url(const char* value, size_t size) {
  set_has_impression_url();
  impression_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ChromeSuggestion.impression_url)
}
inline ::std::string* ChromeSuggestion::mutable_impression_url() {
  set_has_impression_url();
  // @@protoc_insertion_point(field_mutable:suggestions.ChromeSuggestion.impression_url)
  return impression_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeSuggestion::release_impression_url() {
  // @@protoc_insertion_point(field_release:suggestions.ChromeSuggestion.impression_url)
  clear_has_impression_url();
  return impression_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_allocated_impression_url(::std::string* impression_url) {
  if (impression_url != NULL) {
    set_has_impression_url();
  } else {
    clear_has_impression_url();
  }
  impression_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impression_url);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ChromeSuggestion.impression_url)
}

// optional string click_url = 14;
inline bool ChromeSuggestion::has_click_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChromeSuggestion::set_has_click_url() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChromeSuggestion::clear_has_click_url() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChromeSuggestion::clear_click_url() {
  click_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_click_url();
}
inline const ::std::string& ChromeSuggestion::click_url() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.click_url)
  return click_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_click_url(const ::std::string& value) {
  set_has_click_url();
  click_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.click_url)
}
inline void ChromeSuggestion::set_click_url(const char* value) {
  set_has_click_url();
  click_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ChromeSuggestion.click_url)
}
inline void ChromeSuggestion::set_click_url(const char* value, size_t size) {
  set_has_click_url();
  click_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ChromeSuggestion.click_url)
}
inline ::std::string* ChromeSuggestion::mutable_click_url() {
  set_has_click_url();
  // @@protoc_insertion_point(field_mutable:suggestions.ChromeSuggestion.click_url)
  return click_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeSuggestion::release_click_url() {
  // @@protoc_insertion_point(field_release:suggestions.ChromeSuggestion.click_url)
  clear_has_click_url();
  return click_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_allocated_click_url(::std::string* click_url) {
  if (click_url != NULL) {
    set_has_click_url();
  } else {
    clear_has_click_url();
  }
  click_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), click_url);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ChromeSuggestion.click_url)
}

// -------------------------------------------------------------------

// SuggestionsBlacklist

// repeated string urls = 1;
inline int SuggestionsBlacklist::urls_size() const {
  return urls_.size();
}
inline void SuggestionsBlacklist::clear_urls() {
  urls_.Clear();
}
inline const ::std::string& SuggestionsBlacklist::urls(int index) const {
  // @@protoc_insertion_point(field_get:suggestions.SuggestionsBlacklist.urls)
  return urls_.Get(index);
}
inline ::std::string* SuggestionsBlacklist::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:suggestions.SuggestionsBlacklist.urls)
  return urls_.Mutable(index);
}
inline void SuggestionsBlacklist::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:suggestions.SuggestionsBlacklist.urls)
  urls_.Mutable(index)->assign(value);
}
inline void SuggestionsBlacklist::set_urls(int index, const char* value) {
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:suggestions.SuggestionsBlacklist.urls)
}
inline void SuggestionsBlacklist::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:suggestions.SuggestionsBlacklist.urls)
}
inline ::std::string* SuggestionsBlacklist::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:suggestions.SuggestionsBlacklist.urls)
  return urls_.Add();
}
inline void SuggestionsBlacklist::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:suggestions.SuggestionsBlacklist.urls)
}
inline void SuggestionsBlacklist::add_urls(const char* value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:suggestions.SuggestionsBlacklist.urls)
}
inline void SuggestionsBlacklist::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:suggestions.SuggestionsBlacklist.urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SuggestionsBlacklist::urls() const {
  // @@protoc_insertion_point(field_list:suggestions.SuggestionsBlacklist.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SuggestionsBlacklist::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:suggestions.SuggestionsBlacklist.urls)
  return &urls_;
}

// -------------------------------------------------------------------

// ImageData

// optional string url = 1;
inline bool ImageData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageData::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageData::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageData::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ImageData::url() const {
  // @@protoc_insertion_point(field_get:suggestions.ImageData.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageData::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ImageData.url)
}
inline void ImageData::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ImageData.url)
}
inline void ImageData::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ImageData.url)
}
inline ::std::string* ImageData::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:suggestions.ImageData.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageData::release_url() {
  // @@protoc_insertion_point(field_release:suggestions.ImageData.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageData::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ImageData.url)
}

// optional bytes data = 2;
inline bool ImageData::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageData::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageData::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& ImageData::data() const {
  // @@protoc_insertion_point(field_get:suggestions.ImageData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ImageData.data)
}
inline void ImageData::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ImageData.data)
}
inline void ImageData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ImageData.data)
}
inline ::std::string* ImageData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:suggestions.ImageData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageData::release_data() {
  // @@protoc_insertion_point(field_release:suggestions.ImageData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ImageData.data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace suggestions

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::suggestions::ProviderId> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_suggestions_2eproto__INCLUDED
