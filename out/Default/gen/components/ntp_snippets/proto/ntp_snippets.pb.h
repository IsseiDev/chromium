// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ntp_snippets.proto

#ifndef PROTOBUF_ntp_5fsnippets_2eproto__INCLUDED
#define PROTOBUF_ntp_5fsnippets_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace ntp_snippets {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ntp_5fsnippets_2eproto();
void protobuf_AssignDesc_ntp_5fsnippets_2eproto();
void protobuf_ShutdownFile_ntp_5fsnippets_2eproto();

class SnippetImageProto;
class SnippetProto;
class SnippetSourceProto;

// ===================================================================

class SnippetSourceProto : public ::google::protobuf::MessageLite {
 public:
  SnippetSourceProto();
  virtual ~SnippetSourceProto();

  SnippetSourceProto(const SnippetSourceProto& from);

  inline SnippetSourceProto& operator=(const SnippetSourceProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const SnippetSourceProto& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SnippetSourceProto* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(SnippetSourceProto* other);

  // implements Message ----------------------------------------------

  inline SnippetSourceProto* New() const { return New(NULL); }

  SnippetSourceProto* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SnippetSourceProto& from);
  void MergeFrom(const SnippetSourceProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SnippetSourceProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string publisher_name = 2;
  bool has_publisher_name() const;
  void clear_publisher_name();
  static const int kPublisherNameFieldNumber = 2;
  const ::std::string& publisher_name() const;
  void set_publisher_name(const ::std::string& value);
  void set_publisher_name(const char* value);
  void set_publisher_name(const char* value, size_t size);
  ::std::string* mutable_publisher_name();
  ::std::string* release_publisher_name();
  void set_allocated_publisher_name(::std::string* publisher_name);

  // optional string amp_url = 3;
  bool has_amp_url() const;
  void clear_amp_url();
  static const int kAmpUrlFieldNumber = 3;
  const ::std::string& amp_url() const;
  void set_amp_url(const ::std::string& value);
  void set_amp_url(const char* value);
  void set_amp_url(const char* value, size_t size);
  ::std::string* mutable_amp_url();
  ::std::string* release_amp_url();
  void set_allocated_amp_url(::std::string* amp_url);

  // @@protoc_insertion_point(class_scope:ntp_snippets.SnippetSourceProto)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_publisher_name();
  inline void clear_has_publisher_name();
  inline void set_has_amp_url();
  inline void clear_has_amp_url();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr publisher_name_;
  ::google::protobuf::internal::ArenaStringPtr amp_url_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ntp_5fsnippets_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ntp_5fsnippets_2eproto();
  #endif
  friend void protobuf_AssignDesc_ntp_5fsnippets_2eproto();
  friend void protobuf_ShutdownFile_ntp_5fsnippets_2eproto();

  void InitAsDefaultInstance();
  static SnippetSourceProto* default_instance_;
};
// -------------------------------------------------------------------

class SnippetProto : public ::google::protobuf::MessageLite {
 public:
  SnippetProto();
  virtual ~SnippetProto();

  SnippetProto(const SnippetProto& from);

  inline SnippetProto& operator=(const SnippetProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const SnippetProto& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SnippetProto* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(SnippetProto* other);

  // implements Message ----------------------------------------------

  inline SnippetProto* New() const { return New(NULL); }

  SnippetProto* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SnippetProto& from);
  void MergeFrom(const SnippetProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SnippetProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string snippet = 3;
  bool has_snippet() const;
  void clear_snippet();
  static const int kSnippetFieldNumber = 3;
  const ::std::string& snippet() const;
  void set_snippet(const ::std::string& value);
  void set_snippet(const char* value);
  void set_snippet(const char* value, size_t size);
  ::std::string* mutable_snippet();
  ::std::string* release_snippet();
  void set_allocated_snippet(::std::string* snippet);

  // optional string salient_image_url = 4;
  bool has_salient_image_url() const;
  void clear_salient_image_url();
  static const int kSalientImageUrlFieldNumber = 4;
  const ::std::string& salient_image_url() const;
  void set_salient_image_url(const ::std::string& value);
  void set_salient_image_url(const char* value);
  void set_salient_image_url(const char* value, size_t size);
  ::std::string* mutable_salient_image_url();
  ::std::string* release_salient_image_url();
  void set_allocated_salient_image_url(::std::string* salient_image_url);

  // optional int64 publish_date = 5;
  bool has_publish_date() const;
  void clear_publish_date();
  static const int kPublishDateFieldNumber = 5;
  ::google::protobuf::int64 publish_date() const;
  void set_publish_date(::google::protobuf::int64 value);

  // optional int64 expiry_date = 6;
  bool has_expiry_date() const;
  void clear_expiry_date();
  static const int kExpiryDateFieldNumber = 6;
  ::google::protobuf::int64 expiry_date() const;
  void set_expiry_date(::google::protobuf::int64 value);

  // optional float score = 7;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 7;
  float score() const;
  void set_score(float value);

  // repeated .ntp_snippets.SnippetSourceProto sources = 8;
  int sources_size() const;
  void clear_sources();
  static const int kSourcesFieldNumber = 8;
  const ::ntp_snippets::SnippetSourceProto& sources(int index) const;
  ::ntp_snippets::SnippetSourceProto* mutable_sources(int index);
  ::ntp_snippets::SnippetSourceProto* add_sources();
  ::google::protobuf::RepeatedPtrField< ::ntp_snippets::SnippetSourceProto >*
      mutable_sources();
  const ::google::protobuf::RepeatedPtrField< ::ntp_snippets::SnippetSourceProto >&
      sources() const;

  // optional bool dismissed = 9;
  bool has_dismissed() const;
  void clear_dismissed();
  static const int kDismissedFieldNumber = 9;
  bool dismissed() const;
  void set_dismissed(bool value);

  // @@protoc_insertion_point(class_scope:ntp_snippets.SnippetProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_snippet();
  inline void clear_has_snippet();
  inline void set_has_salient_image_url();
  inline void clear_has_salient_image_url();
  inline void set_has_publish_date();
  inline void clear_has_publish_date();
  inline void set_has_expiry_date();
  inline void clear_has_expiry_date();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_dismissed();
  inline void clear_has_dismissed();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr snippet_;
  ::google::protobuf::internal::ArenaStringPtr salient_image_url_;
  ::google::protobuf::int64 publish_date_;
  ::google::protobuf::int64 expiry_date_;
  ::google::protobuf::RepeatedPtrField< ::ntp_snippets::SnippetSourceProto > sources_;
  float score_;
  bool dismissed_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ntp_5fsnippets_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ntp_5fsnippets_2eproto();
  #endif
  friend void protobuf_AssignDesc_ntp_5fsnippets_2eproto();
  friend void protobuf_ShutdownFile_ntp_5fsnippets_2eproto();

  void InitAsDefaultInstance();
  static SnippetProto* default_instance_;
};
// -------------------------------------------------------------------

class SnippetImageProto : public ::google::protobuf::MessageLite {
 public:
  SnippetImageProto();
  virtual ~SnippetImageProto();

  SnippetImageProto(const SnippetImageProto& from);

  inline SnippetImageProto& operator=(const SnippetImageProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const SnippetImageProto& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SnippetImageProto* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(SnippetImageProto* other);

  // implements Message ----------------------------------------------

  inline SnippetImageProto* New() const { return New(NULL); }

  SnippetImageProto* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SnippetImageProto& from);
  void MergeFrom(const SnippetImageProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SnippetImageProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ntp_snippets.SnippetImageProto)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ntp_5fsnippets_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ntp_5fsnippets_2eproto();
  #endif
  friend void protobuf_AssignDesc_ntp_5fsnippets_2eproto();
  friend void protobuf_ShutdownFile_ntp_5fsnippets_2eproto();

  void InitAsDefaultInstance();
  static SnippetImageProto* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SnippetSourceProto

// optional string url = 1;
inline bool SnippetSourceProto::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnippetSourceProto::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnippetSourceProto::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnippetSourceProto::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& SnippetSourceProto::url() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetSourceProto.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetSourceProto::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetSourceProto.url)
}
inline void SnippetSourceProto::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetSourceProto.url)
}
inline void SnippetSourceProto::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetSourceProto.url)
}
inline ::std::string* SnippetSourceProto::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetSourceProto.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnippetSourceProto::release_url() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetSourceProto.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetSourceProto::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetSourceProto.url)
}

// optional string publisher_name = 2;
inline bool SnippetSourceProto::has_publisher_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnippetSourceProto::set_has_publisher_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnippetSourceProto::clear_has_publisher_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnippetSourceProto::clear_publisher_name() {
  publisher_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publisher_name();
}
inline const ::std::string& SnippetSourceProto::publisher_name() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetSourceProto.publisher_name)
  return publisher_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetSourceProto::set_publisher_name(const ::std::string& value) {
  set_has_publisher_name();
  publisher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetSourceProto.publisher_name)
}
inline void SnippetSourceProto::set_publisher_name(const char* value) {
  set_has_publisher_name();
  publisher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetSourceProto.publisher_name)
}
inline void SnippetSourceProto::set_publisher_name(const char* value, size_t size) {
  set_has_publisher_name();
  publisher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetSourceProto.publisher_name)
}
inline ::std::string* SnippetSourceProto::mutable_publisher_name() {
  set_has_publisher_name();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetSourceProto.publisher_name)
  return publisher_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnippetSourceProto::release_publisher_name() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetSourceProto.publisher_name)
  clear_has_publisher_name();
  return publisher_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetSourceProto::set_allocated_publisher_name(::std::string* publisher_name) {
  if (publisher_name != NULL) {
    set_has_publisher_name();
  } else {
    clear_has_publisher_name();
  }
  publisher_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publisher_name);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetSourceProto.publisher_name)
}

// optional string amp_url = 3;
inline bool SnippetSourceProto::has_amp_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnippetSourceProto::set_has_amp_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SnippetSourceProto::clear_has_amp_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SnippetSourceProto::clear_amp_url() {
  amp_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_amp_url();
}
inline const ::std::string& SnippetSourceProto::amp_url() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetSourceProto.amp_url)
  return amp_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetSourceProto::set_amp_url(const ::std::string& value) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetSourceProto.amp_url)
}
inline void SnippetSourceProto::set_amp_url(const char* value) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetSourceProto.amp_url)
}
inline void SnippetSourceProto::set_amp_url(const char* value, size_t size) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetSourceProto.amp_url)
}
inline ::std::string* SnippetSourceProto::mutable_amp_url() {
  set_has_amp_url();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetSourceProto.amp_url)
  return amp_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnippetSourceProto::release_amp_url() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetSourceProto.amp_url)
  clear_has_amp_url();
  return amp_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetSourceProto::set_allocated_amp_url(::std::string* amp_url) {
  if (amp_url != NULL) {
    set_has_amp_url();
  } else {
    clear_has_amp_url();
  }
  amp_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amp_url);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetSourceProto.amp_url)
}

// -------------------------------------------------------------------

// SnippetProto

// optional string id = 1;
inline bool SnippetProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnippetProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnippetProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnippetProto::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& SnippetProto::id() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetProto::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.id)
}
inline void SnippetProto::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.id)
}
inline void SnippetProto::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.id)
}
inline ::std::string* SnippetProto::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnippetProto::release_id() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetProto::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.id)
}

// optional string title = 2;
inline bool SnippetProto::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnippetProto::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnippetProto::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnippetProto::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& SnippetProto::title() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetProto::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.title)
}
inline void SnippetProto::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.title)
}
inline void SnippetProto::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.title)
}
inline ::std::string* SnippetProto::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnippetProto::release_title() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetProto::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.title)
}

// optional string snippet = 3;
inline bool SnippetProto::has_snippet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnippetProto::set_has_snippet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SnippetProto::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SnippetProto::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
inline const ::std::string& SnippetProto::snippet() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.snippet)
  return snippet_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetProto::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.snippet)
}
inline void SnippetProto::set_snippet(const char* value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.snippet)
}
inline void SnippetProto::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.snippet)
}
inline ::std::string* SnippetProto::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnippetProto::release_snippet() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetProto::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.snippet)
}

// optional string salient_image_url = 4;
inline bool SnippetProto::has_salient_image_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SnippetProto::set_has_salient_image_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SnippetProto::clear_has_salient_image_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SnippetProto::clear_salient_image_url() {
  salient_image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_salient_image_url();
}
inline const ::std::string& SnippetProto::salient_image_url() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.salient_image_url)
  return salient_image_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetProto::set_salient_image_url(const ::std::string& value) {
  set_has_salient_image_url();
  salient_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.salient_image_url)
}
inline void SnippetProto::set_salient_image_url(const char* value) {
  set_has_salient_image_url();
  salient_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.salient_image_url)
}
inline void SnippetProto::set_salient_image_url(const char* value, size_t size) {
  set_has_salient_image_url();
  salient_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.salient_image_url)
}
inline ::std::string* SnippetProto::mutable_salient_image_url() {
  set_has_salient_image_url();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.salient_image_url)
  return salient_image_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnippetProto::release_salient_image_url() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.salient_image_url)
  clear_has_salient_image_url();
  return salient_image_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetProto::set_allocated_salient_image_url(::std::string* salient_image_url) {
  if (salient_image_url != NULL) {
    set_has_salient_image_url();
  } else {
    clear_has_salient_image_url();
  }
  salient_image_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salient_image_url);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.salient_image_url)
}

// optional int64 publish_date = 5;
inline bool SnippetProto::has_publish_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SnippetProto::set_has_publish_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SnippetProto::clear_has_publish_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SnippetProto::clear_publish_date() {
  publish_date_ = GOOGLE_LONGLONG(0);
  clear_has_publish_date();
}
inline ::google::protobuf::int64 SnippetProto::publish_date() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.publish_date)
  return publish_date_;
}
inline void SnippetProto::set_publish_date(::google::protobuf::int64 value) {
  set_has_publish_date();
  publish_date_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.publish_date)
}

// optional int64 expiry_date = 6;
inline bool SnippetProto::has_expiry_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SnippetProto::set_has_expiry_date() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SnippetProto::clear_has_expiry_date() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SnippetProto::clear_expiry_date() {
  expiry_date_ = GOOGLE_LONGLONG(0);
  clear_has_expiry_date();
}
inline ::google::protobuf::int64 SnippetProto::expiry_date() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.expiry_date)
  return expiry_date_;
}
inline void SnippetProto::set_expiry_date(::google::protobuf::int64 value) {
  set_has_expiry_date();
  expiry_date_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.expiry_date)
}

// optional float score = 7;
inline bool SnippetProto::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SnippetProto::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SnippetProto::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SnippetProto::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float SnippetProto::score() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.score)
  return score_;
}
inline void SnippetProto::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.score)
}

// repeated .ntp_snippets.SnippetSourceProto sources = 8;
inline int SnippetProto::sources_size() const {
  return sources_.size();
}
inline void SnippetProto::clear_sources() {
  sources_.Clear();
}
inline const ::ntp_snippets::SnippetSourceProto& SnippetProto::sources(int index) const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.sources)
  return sources_.Get(index);
}
inline ::ntp_snippets::SnippetSourceProto* SnippetProto::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.sources)
  return sources_.Mutable(index);
}
inline ::ntp_snippets::SnippetSourceProto* SnippetProto::add_sources() {
  // @@protoc_insertion_point(field_add:ntp_snippets.SnippetProto.sources)
  return sources_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ntp_snippets::SnippetSourceProto >*
SnippetProto::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:ntp_snippets.SnippetProto.sources)
  return &sources_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ntp_snippets::SnippetSourceProto >&
SnippetProto::sources() const {
  // @@protoc_insertion_point(field_list:ntp_snippets.SnippetProto.sources)
  return sources_;
}

// optional bool dismissed = 9;
inline bool SnippetProto::has_dismissed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SnippetProto::set_has_dismissed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SnippetProto::clear_has_dismissed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SnippetProto::clear_dismissed() {
  dismissed_ = false;
  clear_has_dismissed();
}
inline bool SnippetProto::dismissed() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.dismissed)
  return dismissed_;
}
inline void SnippetProto::set_dismissed(bool value) {
  set_has_dismissed();
  dismissed_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.dismissed)
}

// -------------------------------------------------------------------

// SnippetImageProto

// optional bytes data = 1;
inline bool SnippetImageProto::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnippetImageProto::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnippetImageProto::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnippetImageProto::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& SnippetImageProto::data() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetImageProto.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetImageProto::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetImageProto.data)
}
inline void SnippetImageProto::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetImageProto.data)
}
inline void SnippetImageProto::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetImageProto.data)
}
inline ::std::string* SnippetImageProto::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetImageProto.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnippetImageProto::release_data() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetImageProto.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetImageProto::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetImageProto.data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ntp_snippets

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ntp_5fsnippets_2eproto__INCLUDED
