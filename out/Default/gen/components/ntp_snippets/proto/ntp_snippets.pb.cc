// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ntp_snippets.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ntp_snippets.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace ntp_snippets {

void protobuf_ShutdownFile_ntp_5fsnippets_2eproto() {
  delete SnippetSourceProto::default_instance_;
  delete SnippetProto::default_instance_;
  delete SnippetImageProto::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ntp_5fsnippets_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ntp_5fsnippets_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SnippetSourceProto::default_instance_ = new SnippetSourceProto();
  SnippetProto::default_instance_ = new SnippetProto();
  SnippetImageProto::default_instance_ = new SnippetImageProto();
  SnippetSourceProto::default_instance_->InitAsDefaultInstance();
  SnippetProto::default_instance_->InitAsDefaultInstance();
  SnippetImageProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ntp_5fsnippets_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ntp_5fsnippets_2eproto_once_);
void protobuf_AddDesc_ntp_5fsnippets_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ntp_5fsnippets_2eproto_once_,
                 &protobuf_AddDesc_ntp_5fsnippets_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ntp_5fsnippets_2eproto {
  StaticDescriptorInitializer_ntp_5fsnippets_2eproto() {
    protobuf_AddDesc_ntp_5fsnippets_2eproto();
  }
} static_descriptor_initializer_ntp_5fsnippets_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForSnippetSourceProto(
    SnippetSourceProto* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnippetSourceProto::kUrlFieldNumber;
const int SnippetSourceProto::kPublisherNameFieldNumber;
const int SnippetSourceProto::kAmpUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnippetSourceProto::SnippetSourceProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntp_snippets.SnippetSourceProto)
}

void SnippetSourceProto::InitAsDefaultInstance() {
}

SnippetSourceProto::SnippetSourceProto(const SnippetSourceProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ntp_snippets.SnippetSourceProto)
}

void SnippetSourceProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisher_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amp_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnippetSourceProto::~SnippetSourceProto() {
  // @@protoc_insertion_point(destructor:ntp_snippets.SnippetSourceProto)
  SharedDtor();
}

void SnippetSourceProto::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisher_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amp_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SnippetSourceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SnippetSourceProto& SnippetSourceProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ntp_5fsnippets_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ntp_5fsnippets_2eproto();
#endif
  return *default_instance_;
}

SnippetSourceProto* SnippetSourceProto::default_instance_ = NULL;

SnippetSourceProto* SnippetSourceProto::New(::google::protobuf::Arena* arena) const {
  SnippetSourceProto* n = new SnippetSourceProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnippetSourceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ntp_snippets.SnippetSourceProto)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_publisher_name()) {
      publisher_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_amp_url()) {
      amp_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SnippetSourceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSnippetSourceProto, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ntp_snippets.SnippetSourceProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_publisher_name;
        break;
      }

      // optional string publisher_name = 2;
      case 2: {
        if (tag == 18) {
         parse_publisher_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_amp_url;
        break;
      }

      // optional string amp_url = 3;
      case 3: {
        if (tag == 26) {
         parse_amp_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amp_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ntp_snippets.SnippetSourceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ntp_snippets.SnippetSourceProto)
  return false;
#undef DO_
}

void SnippetSourceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ntp_snippets.SnippetSourceProto)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string publisher_name = 2;
  if (has_publisher_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->publisher_name(), output);
  }

  // optional string amp_url = 3;
  if (has_amp_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->amp_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ntp_snippets.SnippetSourceProto)
}

int SnippetSourceProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ntp_snippets.SnippetSourceProto)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string publisher_name = 2;
    if (has_publisher_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher_name());
    }

    // optional string amp_url = 3;
    if (has_amp_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amp_url());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnippetSourceProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SnippetSourceProto*>(&from));
}

void SnippetSourceProto::MergeFrom(const SnippetSourceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntp_snippets.SnippetSourceProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_publisher_name()) {
      set_has_publisher_name();
      publisher_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publisher_name_);
    }
    if (from.has_amp_url()) {
      set_has_amp_url();
      amp_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amp_url_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SnippetSourceProto::CopyFrom(const SnippetSourceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntp_snippets.SnippetSourceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetSourceProto::IsInitialized() const {

  return true;
}

void SnippetSourceProto::Swap(SnippetSourceProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnippetSourceProto::InternalSwap(SnippetSourceProto* other) {
  url_.Swap(&other->url_);
  publisher_name_.Swap(&other->publisher_name_);
  amp_url_.Swap(&other->amp_url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SnippetSourceProto::GetTypeName() const {
  return "ntp_snippets.SnippetSourceProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnippetSourceProto

// optional string url = 1;
bool SnippetSourceProto::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnippetSourceProto::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void SnippetSourceProto::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnippetSourceProto::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& SnippetSourceProto::url() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetSourceProto.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetSourceProto::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetSourceProto.url)
}
 void SnippetSourceProto::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetSourceProto.url)
}
 void SnippetSourceProto::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetSourceProto.url)
}
 ::std::string* SnippetSourceProto::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetSourceProto.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SnippetSourceProto::release_url() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetSourceProto.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetSourceProto::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetSourceProto.url)
}

// optional string publisher_name = 2;
bool SnippetSourceProto::has_publisher_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnippetSourceProto::set_has_publisher_name() {
  _has_bits_[0] |= 0x00000002u;
}
void SnippetSourceProto::clear_has_publisher_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnippetSourceProto::clear_publisher_name() {
  publisher_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publisher_name();
}
 const ::std::string& SnippetSourceProto::publisher_name() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetSourceProto.publisher_name)
  return publisher_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetSourceProto::set_publisher_name(const ::std::string& value) {
  set_has_publisher_name();
  publisher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetSourceProto.publisher_name)
}
 void SnippetSourceProto::set_publisher_name(const char* value) {
  set_has_publisher_name();
  publisher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetSourceProto.publisher_name)
}
 void SnippetSourceProto::set_publisher_name(const char* value, size_t size) {
  set_has_publisher_name();
  publisher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetSourceProto.publisher_name)
}
 ::std::string* SnippetSourceProto::mutable_publisher_name() {
  set_has_publisher_name();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetSourceProto.publisher_name)
  return publisher_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SnippetSourceProto::release_publisher_name() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetSourceProto.publisher_name)
  clear_has_publisher_name();
  return publisher_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetSourceProto::set_allocated_publisher_name(::std::string* publisher_name) {
  if (publisher_name != NULL) {
    set_has_publisher_name();
  } else {
    clear_has_publisher_name();
  }
  publisher_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publisher_name);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetSourceProto.publisher_name)
}

// optional string amp_url = 3;
bool SnippetSourceProto::has_amp_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnippetSourceProto::set_has_amp_url() {
  _has_bits_[0] |= 0x00000004u;
}
void SnippetSourceProto::clear_has_amp_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnippetSourceProto::clear_amp_url() {
  amp_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_amp_url();
}
 const ::std::string& SnippetSourceProto::amp_url() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetSourceProto.amp_url)
  return amp_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetSourceProto::set_amp_url(const ::std::string& value) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetSourceProto.amp_url)
}
 void SnippetSourceProto::set_amp_url(const char* value) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetSourceProto.amp_url)
}
 void SnippetSourceProto::set_amp_url(const char* value, size_t size) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetSourceProto.amp_url)
}
 ::std::string* SnippetSourceProto::mutable_amp_url() {
  set_has_amp_url();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetSourceProto.amp_url)
  return amp_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SnippetSourceProto::release_amp_url() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetSourceProto.amp_url)
  clear_has_amp_url();
  return amp_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetSourceProto::set_allocated_amp_url(::std::string* amp_url) {
  if (amp_url != NULL) {
    set_has_amp_url();
  } else {
    clear_has_amp_url();
  }
  amp_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amp_url);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetSourceProto.amp_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSnippetProto(
    SnippetProto* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnippetProto::kIdFieldNumber;
const int SnippetProto::kTitleFieldNumber;
const int SnippetProto::kSnippetFieldNumber;
const int SnippetProto::kSalientImageUrlFieldNumber;
const int SnippetProto::kPublishDateFieldNumber;
const int SnippetProto::kExpiryDateFieldNumber;
const int SnippetProto::kScoreFieldNumber;
const int SnippetProto::kSourcesFieldNumber;
const int SnippetProto::kDismissedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnippetProto::SnippetProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntp_snippets.SnippetProto)
}

void SnippetProto::InitAsDefaultInstance() {
}

SnippetProto::SnippetProto(const SnippetProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ntp_snippets.SnippetProto)
}

void SnippetProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salient_image_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publish_date_ = GOOGLE_LONGLONG(0);
  expiry_date_ = GOOGLE_LONGLONG(0);
  score_ = 0;
  dismissed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnippetProto::~SnippetProto() {
  // @@protoc_insertion_point(destructor:ntp_snippets.SnippetProto)
  SharedDtor();
}

void SnippetProto::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snippet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salient_image_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SnippetProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SnippetProto& SnippetProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ntp_5fsnippets_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ntp_5fsnippets_2eproto();
#endif
  return *default_instance_;
}

SnippetProto* SnippetProto::default_instance_ = NULL;

SnippetProto* SnippetProto::New(::google::protobuf::Arena* arena) const {
  SnippetProto* n = new SnippetProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnippetProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ntp_snippets.SnippetProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SnippetProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SnippetProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(publish_date_, expiry_date_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_snippet()) {
      snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_salient_image_url()) {
      salient_image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    score_ = 0;
  }
  dismissed_ = false;

#undef ZR_HELPER_
#undef ZR_

  sources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SnippetProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSnippetProto, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ntp_snippets.SnippetProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_snippet;
        break;
      }

      // optional string snippet = 3;
      case 3: {
        if (tag == 26) {
         parse_snippet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snippet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_salient_image_url;
        break;
      }

      // optional string salient_image_url = 4;
      case 4: {
        if (tag == 34) {
         parse_salient_image_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_salient_image_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_publish_date;
        break;
      }

      // optional int64 publish_date = 5;
      case 5: {
        if (tag == 40) {
         parse_publish_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &publish_date_)));
          set_has_publish_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_expiry_date;
        break;
      }

      // optional int64 expiry_date = 6;
      case 6: {
        if (tag == 48) {
         parse_expiry_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_date_)));
          set_has_expiry_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_score;
        break;
      }

      // optional float score = 7;
      case 7: {
        if (tag == 61) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sources;
        break;
      }

      // repeated .ntp_snippets.SnippetSourceProto sources = 8;
      case 8: {
        if (tag == 66) {
         parse_sources:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_sources;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(72)) goto parse_dismissed;
        break;
      }

      // optional bool dismissed = 9;
      case 9: {
        if (tag == 72) {
         parse_dismissed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dismissed_)));
          set_has_dismissed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ntp_snippets.SnippetProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ntp_snippets.SnippetProto)
  return false;
#undef DO_
}

void SnippetProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ntp_snippets.SnippetProto)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string snippet = 3;
  if (has_snippet()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->snippet(), output);
  }

  // optional string salient_image_url = 4;
  if (has_salient_image_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->salient_image_url(), output);
  }

  // optional int64 publish_date = 5;
  if (has_publish_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->publish_date(), output);
  }

  // optional int64 expiry_date = 6;
  if (has_expiry_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->expiry_date(), output);
  }

  // optional float score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->score(), output);
  }

  // repeated .ntp_snippets.SnippetSourceProto sources = 8;
  for (unsigned int i = 0, n = this->sources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->sources(i), output);
  }

  // optional bool dismissed = 9;
  if (has_dismissed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->dismissed(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ntp_snippets.SnippetProto)
}

int SnippetProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ntp_snippets.SnippetProto)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string snippet = 3;
    if (has_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snippet());
    }

    // optional string salient_image_url = 4;
    if (has_salient_image_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->salient_image_url());
    }

    // optional int64 publish_date = 5;
    if (has_publish_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->publish_date());
    }

    // optional int64 expiry_date = 6;
    if (has_expiry_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiry_date());
    }

    // optional float score = 7;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  // optional bool dismissed = 9;
  if (has_dismissed()) {
    total_size += 1 + 1;
  }

  // repeated .ntp_snippets.SnippetSourceProto sources = 8;
  total_size += 1 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sources(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnippetProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SnippetProto*>(&from));
}

void SnippetProto::MergeFrom(const SnippetProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntp_snippets.SnippetProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  sources_.MergeFrom(from.sources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_snippet()) {
      set_has_snippet();
      snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet_);
    }
    if (from.has_salient_image_url()) {
      set_has_salient_image_url();
      salient_image_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salient_image_url_);
    }
    if (from.has_publish_date()) {
      set_publish_date(from.publish_date());
    }
    if (from.has_expiry_date()) {
      set_expiry_date(from.expiry_date());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dismissed()) {
      set_dismissed(from.dismissed());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SnippetProto::CopyFrom(const SnippetProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntp_snippets.SnippetProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetProto::IsInitialized() const {

  return true;
}

void SnippetProto::Swap(SnippetProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnippetProto::InternalSwap(SnippetProto* other) {
  id_.Swap(&other->id_);
  title_.Swap(&other->title_);
  snippet_.Swap(&other->snippet_);
  salient_image_url_.Swap(&other->salient_image_url_);
  std::swap(publish_date_, other->publish_date_);
  std::swap(expiry_date_, other->expiry_date_);
  std::swap(score_, other->score_);
  sources_.UnsafeArenaSwap(&other->sources_);
  std::swap(dismissed_, other->dismissed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SnippetProto::GetTypeName() const {
  return "ntp_snippets.SnippetProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnippetProto

// optional string id = 1;
bool SnippetProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnippetProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SnippetProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnippetProto::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& SnippetProto::id() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetProto::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.id)
}
 void SnippetProto::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.id)
}
 void SnippetProto::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.id)
}
 ::std::string* SnippetProto::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SnippetProto::release_id() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetProto::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.id)
}

// optional string title = 2;
bool SnippetProto::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnippetProto::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void SnippetProto::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnippetProto::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& SnippetProto::title() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetProto::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.title)
}
 void SnippetProto::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.title)
}
 void SnippetProto::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.title)
}
 ::std::string* SnippetProto::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SnippetProto::release_title() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetProto::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.title)
}

// optional string snippet = 3;
bool SnippetProto::has_snippet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnippetProto::set_has_snippet() {
  _has_bits_[0] |= 0x00000004u;
}
void SnippetProto::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnippetProto::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
 const ::std::string& SnippetProto::snippet() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.snippet)
  return snippet_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetProto::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.snippet)
}
 void SnippetProto::set_snippet(const char* value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.snippet)
}
 void SnippetProto::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.snippet)
}
 ::std::string* SnippetProto::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SnippetProto::release_snippet() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetProto::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.snippet)
}

// optional string salient_image_url = 4;
bool SnippetProto::has_salient_image_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnippetProto::set_has_salient_image_url() {
  _has_bits_[0] |= 0x00000008u;
}
void SnippetProto::clear_has_salient_image_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnippetProto::clear_salient_image_url() {
  salient_image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_salient_image_url();
}
 const ::std::string& SnippetProto::salient_image_url() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.salient_image_url)
  return salient_image_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetProto::set_salient_image_url(const ::std::string& value) {
  set_has_salient_image_url();
  salient_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.salient_image_url)
}
 void SnippetProto::set_salient_image_url(const char* value) {
  set_has_salient_image_url();
  salient_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.salient_image_url)
}
 void SnippetProto::set_salient_image_url(const char* value, size_t size) {
  set_has_salient_image_url();
  salient_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.salient_image_url)
}
 ::std::string* SnippetProto::mutable_salient_image_url() {
  set_has_salient_image_url();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.salient_image_url)
  return salient_image_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SnippetProto::release_salient_image_url() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.salient_image_url)
  clear_has_salient_image_url();
  return salient_image_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetProto::set_allocated_salient_image_url(::std::string* salient_image_url) {
  if (salient_image_url != NULL) {
    set_has_salient_image_url();
  } else {
    clear_has_salient_image_url();
  }
  salient_image_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salient_image_url);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.salient_image_url)
}

// optional int64 publish_date = 5;
bool SnippetProto::has_publish_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnippetProto::set_has_publish_date() {
  _has_bits_[0] |= 0x00000010u;
}
void SnippetProto::clear_has_publish_date() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnippetProto::clear_publish_date() {
  publish_date_ = GOOGLE_LONGLONG(0);
  clear_has_publish_date();
}
 ::google::protobuf::int64 SnippetProto::publish_date() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.publish_date)
  return publish_date_;
}
 void SnippetProto::set_publish_date(::google::protobuf::int64 value) {
  set_has_publish_date();
  publish_date_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.publish_date)
}

// optional int64 expiry_date = 6;
bool SnippetProto::has_expiry_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnippetProto::set_has_expiry_date() {
  _has_bits_[0] |= 0x00000020u;
}
void SnippetProto::clear_has_expiry_date() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnippetProto::clear_expiry_date() {
  expiry_date_ = GOOGLE_LONGLONG(0);
  clear_has_expiry_date();
}
 ::google::protobuf::int64 SnippetProto::expiry_date() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.expiry_date)
  return expiry_date_;
}
 void SnippetProto::set_expiry_date(::google::protobuf::int64 value) {
  set_has_expiry_date();
  expiry_date_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.expiry_date)
}

// optional float score = 7;
bool SnippetProto::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnippetProto::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
void SnippetProto::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnippetProto::clear_score() {
  score_ = 0;
  clear_has_score();
}
 float SnippetProto::score() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.score)
  return score_;
}
 void SnippetProto::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.score)
}

// repeated .ntp_snippets.SnippetSourceProto sources = 8;
int SnippetProto::sources_size() const {
  return sources_.size();
}
void SnippetProto::clear_sources() {
  sources_.Clear();
}
const ::ntp_snippets::SnippetSourceProto& SnippetProto::sources(int index) const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.sources)
  return sources_.Get(index);
}
::ntp_snippets::SnippetSourceProto* SnippetProto::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.sources)
  return sources_.Mutable(index);
}
::ntp_snippets::SnippetSourceProto* SnippetProto::add_sources() {
  // @@protoc_insertion_point(field_add:ntp_snippets.SnippetProto.sources)
  return sources_.Add();
}
::google::protobuf::RepeatedPtrField< ::ntp_snippets::SnippetSourceProto >*
SnippetProto::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:ntp_snippets.SnippetProto.sources)
  return &sources_;
}
const ::google::protobuf::RepeatedPtrField< ::ntp_snippets::SnippetSourceProto >&
SnippetProto::sources() const {
  // @@protoc_insertion_point(field_list:ntp_snippets.SnippetProto.sources)
  return sources_;
}

// optional bool dismissed = 9;
bool SnippetProto::has_dismissed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SnippetProto::set_has_dismissed() {
  _has_bits_[0] |= 0x00000100u;
}
void SnippetProto::clear_has_dismissed() {
  _has_bits_[0] &= ~0x00000100u;
}
void SnippetProto::clear_dismissed() {
  dismissed_ = false;
  clear_has_dismissed();
}
 bool SnippetProto::dismissed() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.dismissed)
  return dismissed_;
}
 void SnippetProto::set_dismissed(bool value) {
  set_has_dismissed();
  dismissed_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.dismissed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSnippetImageProto(
    SnippetImageProto* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnippetImageProto::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnippetImageProto::SnippetImageProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntp_snippets.SnippetImageProto)
}

void SnippetImageProto::InitAsDefaultInstance() {
}

SnippetImageProto::SnippetImageProto(const SnippetImageProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ntp_snippets.SnippetImageProto)
}

void SnippetImageProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnippetImageProto::~SnippetImageProto() {
  // @@protoc_insertion_point(destructor:ntp_snippets.SnippetImageProto)
  SharedDtor();
}

void SnippetImageProto::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SnippetImageProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SnippetImageProto& SnippetImageProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ntp_5fsnippets_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ntp_5fsnippets_2eproto();
#endif
  return *default_instance_;
}

SnippetImageProto* SnippetImageProto::default_instance_ = NULL;

SnippetImageProto* SnippetImageProto::New(::google::protobuf::Arena* arena) const {
  SnippetImageProto* n = new SnippetImageProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnippetImageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ntp_snippets.SnippetImageProto)
  if (has_data()) {
    data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SnippetImageProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSnippetImageProto, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ntp_snippets.SnippetImageProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ntp_snippets.SnippetImageProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ntp_snippets.SnippetImageProto)
  return false;
#undef DO_
}

void SnippetImageProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ntp_snippets.SnippetImageProto)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ntp_snippets.SnippetImageProto)
}

int SnippetImageProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ntp_snippets.SnippetImageProto)
  int total_size = 0;

  // optional bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnippetImageProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SnippetImageProto*>(&from));
}

void SnippetImageProto::MergeFrom(const SnippetImageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntp_snippets.SnippetImageProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SnippetImageProto::CopyFrom(const SnippetImageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntp_snippets.SnippetImageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetImageProto::IsInitialized() const {

  return true;
}

void SnippetImageProto::Swap(SnippetImageProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnippetImageProto::InternalSwap(SnippetImageProto* other) {
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SnippetImageProto::GetTypeName() const {
  return "ntp_snippets.SnippetImageProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnippetImageProto

// optional bytes data = 1;
bool SnippetImageProto::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnippetImageProto::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void SnippetImageProto::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnippetImageProto::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& SnippetImageProto::data() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetImageProto.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetImageProto::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetImageProto.data)
}
 void SnippetImageProto::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetImageProto.data)
}
 void SnippetImageProto::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetImageProto.data)
}
 ::std::string* SnippetImageProto::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetImageProto.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SnippetImageProto::release_data() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetImageProto.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnippetImageProto::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetImageProto.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ntp_snippets

// @@protoc_insertion_point(global_scope)
