// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcm_encryption_data.proto

#ifndef PROTOBUF_gcm_5fencryption_5fdata_2eproto__INCLUDED
#define PROTOBUF_gcm_5fencryption_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace gcm {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto();
void protobuf_AssignDesc_gcm_5fencryption_5fdata_2eproto();
void protobuf_ShutdownFile_gcm_5fencryption_5fdata_2eproto();

class EncryptionData;
class KeyPair;

enum KeyPair_KeyType {
  KeyPair_KeyType_ECDH_P256 = 0
};
bool KeyPair_KeyType_IsValid(int value);
const KeyPair_KeyType KeyPair_KeyType_KeyType_MIN = KeyPair_KeyType_ECDH_P256;
const KeyPair_KeyType KeyPair_KeyType_KeyType_MAX = KeyPair_KeyType_ECDH_P256;
const int KeyPair_KeyType_KeyType_ARRAYSIZE = KeyPair_KeyType_KeyType_MAX + 1;

// ===================================================================

class KeyPair : public ::google::protobuf::MessageLite {
 public:
  KeyPair();
  virtual ~KeyPair();

  KeyPair(const KeyPair& from);

  inline KeyPair& operator=(const KeyPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const KeyPair& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const KeyPair* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(KeyPair* other);

  // implements Message ----------------------------------------------

  inline KeyPair* New() const { return New(NULL); }

  KeyPair* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const KeyPair& from);
  void MergeFrom(const KeyPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef KeyPair_KeyType KeyType;
  static const KeyType ECDH_P256 =
    KeyPair_KeyType_ECDH_P256;
  static inline bool KeyType_IsValid(int value) {
    return KeyPair_KeyType_IsValid(value);
  }
  static const KeyType KeyType_MIN =
    KeyPair_KeyType_KeyType_MIN;
  static const KeyType KeyType_MAX =
    KeyPair_KeyType_KeyType_MAX;
  static const int KeyType_ARRAYSIZE =
    KeyPair_KeyType_KeyType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .gcm.KeyPair.KeyType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gcm::KeyPair_KeyType type() const;
  void set_type(::gcm::KeyPair_KeyType value);

  // optional bytes private_key = 2;
  bool has_private_key() const;
  void clear_private_key();
  static const int kPrivateKeyFieldNumber = 2;
  const ::std::string& private_key() const;
  void set_private_key(const ::std::string& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  ::std::string* mutable_private_key();
  ::std::string* release_private_key();
  void set_allocated_private_key(::std::string* private_key);

  // optional bytes public_key_x509 = 3;
  bool has_public_key_x509() const;
  void clear_public_key_x509();
  static const int kPublicKeyX509FieldNumber = 3;
  const ::std::string& public_key_x509() const;
  void set_public_key_x509(const ::std::string& value);
  void set_public_key_x509(const char* value);
  void set_public_key_x509(const void* value, size_t size);
  ::std::string* mutable_public_key_x509();
  ::std::string* release_public_key_x509();
  void set_allocated_public_key_x509(::std::string* public_key_x509);

  // optional bytes public_key = 4;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 4;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:gcm.KeyPair)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_private_key();
  inline void clear_has_private_key();
  inline void set_has_public_key_x509();
  inline void clear_has_public_key_x509();
  inline void set_has_public_key();
  inline void clear_has_public_key();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr private_key_;
  ::google::protobuf::internal::ArenaStringPtr public_key_x509_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  int type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto();
  #endif
  friend void protobuf_AssignDesc_gcm_5fencryption_5fdata_2eproto();
  friend void protobuf_ShutdownFile_gcm_5fencryption_5fdata_2eproto();

  void InitAsDefaultInstance();
  static KeyPair* default_instance_;
};
// -------------------------------------------------------------------

class EncryptionData : public ::google::protobuf::MessageLite {
 public:
  EncryptionData();
  virtual ~EncryptionData();

  EncryptionData(const EncryptionData& from);

  inline EncryptionData& operator=(const EncryptionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const EncryptionData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EncryptionData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(EncryptionData* other);

  // implements Message ----------------------------------------------

  inline EncryptionData* New() const { return New(NULL); }

  EncryptionData* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EncryptionData& from);
  void MergeFrom(const EncryptionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncryptionData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string app_id = 1;
  bool has_app_id() const;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);

  // optional string authorized_entity = 4;
  bool has_authorized_entity() const;
  void clear_authorized_entity();
  static const int kAuthorizedEntityFieldNumber = 4;
  const ::std::string& authorized_entity() const;
  void set_authorized_entity(const ::std::string& value);
  void set_authorized_entity(const char* value);
  void set_authorized_entity(const char* value, size_t size);
  ::std::string* mutable_authorized_entity();
  ::std::string* release_authorized_entity();
  void set_allocated_authorized_entity(::std::string* authorized_entity);

  // repeated .gcm.KeyPair keys = 2;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 2;
  const ::gcm::KeyPair& keys(int index) const;
  ::gcm::KeyPair* mutable_keys(int index);
  ::gcm::KeyPair* add_keys();
  ::google::protobuf::RepeatedPtrField< ::gcm::KeyPair >*
      mutable_keys();
  const ::google::protobuf::RepeatedPtrField< ::gcm::KeyPair >&
      keys() const;

  // optional bytes auth_secret = 3;
  bool has_auth_secret() const;
  void clear_auth_secret();
  static const int kAuthSecretFieldNumber = 3;
  const ::std::string& auth_secret() const;
  void set_auth_secret(const ::std::string& value);
  void set_auth_secret(const char* value);
  void set_auth_secret(const void* value, size_t size);
  ::std::string* mutable_auth_secret();
  ::std::string* release_auth_secret();
  void set_allocated_auth_secret(::std::string* auth_secret);

  // @@protoc_insertion_point(class_scope:gcm.EncryptionData)
 private:
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_authorized_entity();
  inline void clear_has_authorized_entity();
  inline void set_has_auth_secret();
  inline void clear_has_auth_secret();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::internal::ArenaStringPtr authorized_entity_;
  ::google::protobuf::RepeatedPtrField< ::gcm::KeyPair > keys_;
  ::google::protobuf::internal::ArenaStringPtr auth_secret_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto();
  #endif
  friend void protobuf_AssignDesc_gcm_5fencryption_5fdata_2eproto();
  friend void protobuf_ShutdownFile_gcm_5fencryption_5fdata_2eproto();

  void InitAsDefaultInstance();
  static EncryptionData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyPair

// required .gcm.KeyPair.KeyType type = 1;
inline bool KeyPair::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyPair::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyPair::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyPair::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::gcm::KeyPair_KeyType KeyPair::type() const {
  // @@protoc_insertion_point(field_get:gcm.KeyPair.type)
  return static_cast< ::gcm::KeyPair_KeyType >(type_);
}
inline void KeyPair::set_type(::gcm::KeyPair_KeyType value) {
  assert(::gcm::KeyPair_KeyType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gcm.KeyPair.type)
}

// optional bytes private_key = 2;
inline bool KeyPair::has_private_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyPair::set_has_private_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyPair::clear_has_private_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyPair::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_key();
}
inline const ::std::string& KeyPair::private_key() const {
  // @@protoc_insertion_point(field_get:gcm.KeyPair.private_key)
  return private_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyPair::set_private_key(const ::std::string& value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.KeyPair.private_key)
}
inline void KeyPair::set_private_key(const char* value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.KeyPair.private_key)
}
inline void KeyPair::set_private_key(const void* value, size_t size) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.KeyPair.private_key)
}
inline ::std::string* KeyPair::mutable_private_key() {
  set_has_private_key();
  // @@protoc_insertion_point(field_mutable:gcm.KeyPair.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyPair::release_private_key() {
  // @@protoc_insertion_point(field_release:gcm.KeyPair.private_key)
  clear_has_private_key();
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyPair::set_allocated_private_key(::std::string* private_key) {
  if (private_key != NULL) {
    set_has_private_key();
  } else {
    clear_has_private_key();
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:gcm.KeyPair.private_key)
}

// optional bytes public_key_x509 = 3;
inline bool KeyPair::has_public_key_x509() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KeyPair::set_has_public_key_x509() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KeyPair::clear_has_public_key_x509() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KeyPair::clear_public_key_x509() {
  public_key_x509_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key_x509();
}
inline const ::std::string& KeyPair::public_key_x509() const {
  // @@protoc_insertion_point(field_get:gcm.KeyPair.public_key_x509)
  return public_key_x509_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyPair::set_public_key_x509(const ::std::string& value) {
  set_has_public_key_x509();
  public_key_x509_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.KeyPair.public_key_x509)
}
inline void KeyPair::set_public_key_x509(const char* value) {
  set_has_public_key_x509();
  public_key_x509_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.KeyPair.public_key_x509)
}
inline void KeyPair::set_public_key_x509(const void* value, size_t size) {
  set_has_public_key_x509();
  public_key_x509_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.KeyPair.public_key_x509)
}
inline ::std::string* KeyPair::mutable_public_key_x509() {
  set_has_public_key_x509();
  // @@protoc_insertion_point(field_mutable:gcm.KeyPair.public_key_x509)
  return public_key_x509_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyPair::release_public_key_x509() {
  // @@protoc_insertion_point(field_release:gcm.KeyPair.public_key_x509)
  clear_has_public_key_x509();
  return public_key_x509_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyPair::set_allocated_public_key_x509(::std::string* public_key_x509) {
  if (public_key_x509 != NULL) {
    set_has_public_key_x509();
  } else {
    clear_has_public_key_x509();
  }
  public_key_x509_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key_x509);
  // @@protoc_insertion_point(field_set_allocated:gcm.KeyPair.public_key_x509)
}

// optional bytes public_key = 4;
inline bool KeyPair::has_public_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KeyPair::set_has_public_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KeyPair::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KeyPair::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& KeyPair::public_key() const {
  // @@protoc_insertion_point(field_get:gcm.KeyPair.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyPair::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.KeyPair.public_key)
}
inline void KeyPair::set_public_key(const char* value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.KeyPair.public_key)
}
inline void KeyPair::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.KeyPair.public_key)
}
inline ::std::string* KeyPair::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:gcm.KeyPair.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyPair::release_public_key() {
  // @@protoc_insertion_point(field_release:gcm.KeyPair.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyPair::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:gcm.KeyPair.public_key)
}

// -------------------------------------------------------------------

// EncryptionData

// required string app_id = 1;
inline bool EncryptionData::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncryptionData::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncryptionData::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncryptionData::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_id();
}
inline const ::std::string& EncryptionData::app_id() const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.app_id)
  return app_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptionData::set_app_id(const ::std::string& value) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.EncryptionData.app_id)
}
inline void EncryptionData::set_app_id(const char* value) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.EncryptionData.app_id)
}
inline void EncryptionData::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.EncryptionData.app_id)
}
inline ::std::string* EncryptionData::mutable_app_id() {
  set_has_app_id();
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncryptionData::release_app_id() {
  // @@protoc_insertion_point(field_release:gcm.EncryptionData.app_id)
  clear_has_app_id();
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptionData::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    set_has_app_id();
  } else {
    clear_has_app_id();
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:gcm.EncryptionData.app_id)
}

// optional string authorized_entity = 4;
inline bool EncryptionData::has_authorized_entity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncryptionData::set_has_authorized_entity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EncryptionData::clear_has_authorized_entity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EncryptionData::clear_authorized_entity() {
  authorized_entity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authorized_entity();
}
inline const ::std::string& EncryptionData::authorized_entity() const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.authorized_entity)
  return authorized_entity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptionData::set_authorized_entity(const ::std::string& value) {
  set_has_authorized_entity();
  authorized_entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.EncryptionData.authorized_entity)
}
inline void EncryptionData::set_authorized_entity(const char* value) {
  set_has_authorized_entity();
  authorized_entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.EncryptionData.authorized_entity)
}
inline void EncryptionData::set_authorized_entity(const char* value, size_t size) {
  set_has_authorized_entity();
  authorized_entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.EncryptionData.authorized_entity)
}
inline ::std::string* EncryptionData::mutable_authorized_entity() {
  set_has_authorized_entity();
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.authorized_entity)
  return authorized_entity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncryptionData::release_authorized_entity() {
  // @@protoc_insertion_point(field_release:gcm.EncryptionData.authorized_entity)
  clear_has_authorized_entity();
  return authorized_entity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptionData::set_allocated_authorized_entity(::std::string* authorized_entity) {
  if (authorized_entity != NULL) {
    set_has_authorized_entity();
  } else {
    clear_has_authorized_entity();
  }
  authorized_entity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authorized_entity);
  // @@protoc_insertion_point(field_set_allocated:gcm.EncryptionData.authorized_entity)
}

// repeated .gcm.KeyPair keys = 2;
inline int EncryptionData::keys_size() const {
  return keys_.size();
}
inline void EncryptionData::clear_keys() {
  keys_.Clear();
}
inline const ::gcm::KeyPair& EncryptionData::keys(int index) const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.keys)
  return keys_.Get(index);
}
inline ::gcm::KeyPair* EncryptionData::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.keys)
  return keys_.Mutable(index);
}
inline ::gcm::KeyPair* EncryptionData::add_keys() {
  // @@protoc_insertion_point(field_add:gcm.EncryptionData.keys)
  return keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gcm::KeyPair >*
EncryptionData::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:gcm.EncryptionData.keys)
  return &keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gcm::KeyPair >&
EncryptionData::keys() const {
  // @@protoc_insertion_point(field_list:gcm.EncryptionData.keys)
  return keys_;
}

// optional bytes auth_secret = 3;
inline bool EncryptionData::has_auth_secret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EncryptionData::set_has_auth_secret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EncryptionData::clear_has_auth_secret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EncryptionData::clear_auth_secret() {
  auth_secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_secret();
}
inline const ::std::string& EncryptionData::auth_secret() const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.auth_secret)
  return auth_secret_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptionData::set_auth_secret(const ::std::string& value) {
  set_has_auth_secret();
  auth_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.EncryptionData.auth_secret)
}
inline void EncryptionData::set_auth_secret(const char* value) {
  set_has_auth_secret();
  auth_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.EncryptionData.auth_secret)
}
inline void EncryptionData::set_auth_secret(const void* value, size_t size) {
  set_has_auth_secret();
  auth_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.EncryptionData.auth_secret)
}
inline ::std::string* EncryptionData::mutable_auth_secret() {
  set_has_auth_secret();
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.auth_secret)
  return auth_secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncryptionData::release_auth_secret() {
  // @@protoc_insertion_point(field_release:gcm.EncryptionData.auth_secret)
  clear_has_auth_secret();
  return auth_secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptionData::set_allocated_auth_secret(::std::string* auth_secret) {
  if (auth_secret != NULL) {
    set_has_auth_secret();
  } else {
    clear_has_auth_secret();
  }
  auth_secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_secret);
  // @@protoc_insertion_point(field_set_allocated:gcm.EncryptionData.auth_secret)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gcm

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gcm::KeyPair_KeyType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gcm_5fencryption_5fdata_2eproto__INCLUDED
