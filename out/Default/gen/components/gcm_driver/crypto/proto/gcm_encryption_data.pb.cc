// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcm_encryption_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gcm_encryption_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace gcm {

void protobuf_ShutdownFile_gcm_5fencryption_5fdata_2eproto() {
  delete KeyPair::default_instance_;
  delete EncryptionData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  KeyPair::default_instance_ = new KeyPair();
  EncryptionData::default_instance_ = new EncryptionData();
  KeyPair::default_instance_->InitAsDefaultInstance();
  EncryptionData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gcm_5fencryption_5fdata_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto_once_);
void protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto_once_,
                 &protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gcm_5fencryption_5fdata_2eproto {
  StaticDescriptorInitializer_gcm_5fencryption_5fdata_2eproto() {
    protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto();
  }
} static_descriptor_initializer_gcm_5fencryption_5fdata_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForKeyPair(
    KeyPair* ptr) {
  return ptr->mutable_unknown_fields();
}

bool KeyPair_KeyType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const KeyPair_KeyType KeyPair::ECDH_P256;
const KeyPair_KeyType KeyPair::KeyType_MIN;
const KeyPair_KeyType KeyPair::KeyType_MAX;
const int KeyPair::KeyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyPair::kTypeFieldNumber;
const int KeyPair::kPrivateKeyFieldNumber;
const int KeyPair::kPublicKeyX509FieldNumber;
const int KeyPair::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyPair::KeyPair()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gcm.KeyPair)
}

void KeyPair::InitAsDefaultInstance() {
}

KeyPair::KeyPair(const KeyPair& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gcm.KeyPair)
}

void KeyPair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_x509_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyPair::~KeyPair() {
  // @@protoc_insertion_point(destructor:gcm.KeyPair)
  SharedDtor();
}

void KeyPair::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_x509_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void KeyPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KeyPair& KeyPair::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto();
#endif
  return *default_instance_;
}

KeyPair* KeyPair::default_instance_ = NULL;

KeyPair* KeyPair::New(::google::protobuf::Arena* arena) const {
  KeyPair* n = new KeyPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:gcm.KeyPair)
  if (_has_bits_[0 / 32] & 15u) {
    type_ = 0;
    if (has_private_key()) {
      private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_public_key_x509()) {
      public_key_x509_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_public_key()) {
      public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KeyPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForKeyPair, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:gcm.KeyPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gcm.KeyPair.KeyType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gcm::KeyPair_KeyType_IsValid(value)) {
            set_type(static_cast< ::gcm::KeyPair_KeyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_private_key;
        break;
      }

      // optional bytes private_key = 2;
      case 2: {
        if (tag == 18) {
         parse_private_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_public_key_x509;
        break;
      }

      // optional bytes public_key_x509 = 3;
      case 3: {
        if (tag == 26) {
         parse_public_key_x509:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key_x509()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }

      // optional bytes public_key = 4;
      case 4: {
        if (tag == 34) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gcm.KeyPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gcm.KeyPair)
  return false;
#undef DO_
}

void KeyPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gcm.KeyPair)
  // required .gcm.KeyPair.KeyType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes private_key = 2;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->private_key(), output);
  }

  // optional bytes public_key_x509 = 3;
  if (has_public_key_x509()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->public_key_x509(), output);
  }

  // optional bytes public_key = 4;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->public_key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:gcm.KeyPair)
}

int KeyPair::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gcm.KeyPair)
  int total_size = 0;

  // required .gcm.KeyPair.KeyType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional bytes private_key = 2;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->private_key());
    }

    // optional bytes public_key_x509 = 3;
    if (has_public_key_x509()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key_x509());
    }

    // optional bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyPair::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KeyPair*>(&from));
}

void KeyPair::MergeFrom(const KeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gcm.KeyPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_private_key()) {
      set_has_private_key();
      private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
    }
    if (from.has_public_key_x509()) {
      set_has_public_key_x509();
      public_key_x509_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_x509_);
    }
    if (from.has_public_key()) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void KeyPair::CopyFrom(const KeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gcm.KeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeyPair::Swap(KeyPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyPair::InternalSwap(KeyPair* other) {
  std::swap(type_, other->type_);
  private_key_.Swap(&other->private_key_);
  public_key_x509_.Swap(&other->public_key_x509_);
  public_key_.Swap(&other->public_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string KeyPair::GetTypeName() const {
  return "gcm.KeyPair";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyPair

// required .gcm.KeyPair.KeyType type = 1;
bool KeyPair::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeyPair::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void KeyPair::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeyPair::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::gcm::KeyPair_KeyType KeyPair::type() const {
  // @@protoc_insertion_point(field_get:gcm.KeyPair.type)
  return static_cast< ::gcm::KeyPair_KeyType >(type_);
}
 void KeyPair::set_type(::gcm::KeyPair_KeyType value) {
  assert(::gcm::KeyPair_KeyType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gcm.KeyPair.type)
}

// optional bytes private_key = 2;
bool KeyPair::has_private_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeyPair::set_has_private_key() {
  _has_bits_[0] |= 0x00000002u;
}
void KeyPair::clear_has_private_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeyPair::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_key();
}
 const ::std::string& KeyPair::private_key() const {
  // @@protoc_insertion_point(field_get:gcm.KeyPair.private_key)
  return private_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyPair::set_private_key(const ::std::string& value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.KeyPair.private_key)
}
 void KeyPair::set_private_key(const char* value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.KeyPair.private_key)
}
 void KeyPair::set_private_key(const void* value, size_t size) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.KeyPair.private_key)
}
 ::std::string* KeyPair::mutable_private_key() {
  set_has_private_key();
  // @@protoc_insertion_point(field_mutable:gcm.KeyPair.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyPair::release_private_key() {
  // @@protoc_insertion_point(field_release:gcm.KeyPair.private_key)
  clear_has_private_key();
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyPair::set_allocated_private_key(::std::string* private_key) {
  if (private_key != NULL) {
    set_has_private_key();
  } else {
    clear_has_private_key();
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:gcm.KeyPair.private_key)
}

// optional bytes public_key_x509 = 3;
bool KeyPair::has_public_key_x509() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KeyPair::set_has_public_key_x509() {
  _has_bits_[0] |= 0x00000004u;
}
void KeyPair::clear_has_public_key_x509() {
  _has_bits_[0] &= ~0x00000004u;
}
void KeyPair::clear_public_key_x509() {
  public_key_x509_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key_x509();
}
 const ::std::string& KeyPair::public_key_x509() const {
  // @@protoc_insertion_point(field_get:gcm.KeyPair.public_key_x509)
  return public_key_x509_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyPair::set_public_key_x509(const ::std::string& value) {
  set_has_public_key_x509();
  public_key_x509_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.KeyPair.public_key_x509)
}
 void KeyPair::set_public_key_x509(const char* value) {
  set_has_public_key_x509();
  public_key_x509_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.KeyPair.public_key_x509)
}
 void KeyPair::set_public_key_x509(const void* value, size_t size) {
  set_has_public_key_x509();
  public_key_x509_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.KeyPair.public_key_x509)
}
 ::std::string* KeyPair::mutable_public_key_x509() {
  set_has_public_key_x509();
  // @@protoc_insertion_point(field_mutable:gcm.KeyPair.public_key_x509)
  return public_key_x509_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyPair::release_public_key_x509() {
  // @@protoc_insertion_point(field_release:gcm.KeyPair.public_key_x509)
  clear_has_public_key_x509();
  return public_key_x509_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyPair::set_allocated_public_key_x509(::std::string* public_key_x509) {
  if (public_key_x509 != NULL) {
    set_has_public_key_x509();
  } else {
    clear_has_public_key_x509();
  }
  public_key_x509_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key_x509);
  // @@protoc_insertion_point(field_set_allocated:gcm.KeyPair.public_key_x509)
}

// optional bytes public_key = 4;
bool KeyPair::has_public_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KeyPair::set_has_public_key() {
  _has_bits_[0] |= 0x00000008u;
}
void KeyPair::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void KeyPair::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
 const ::std::string& KeyPair::public_key() const {
  // @@protoc_insertion_point(field_get:gcm.KeyPair.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyPair::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.KeyPair.public_key)
}
 void KeyPair::set_public_key(const char* value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.KeyPair.public_key)
}
 void KeyPair::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.KeyPair.public_key)
}
 ::std::string* KeyPair::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:gcm.KeyPair.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyPair::release_public_key() {
  // @@protoc_insertion_point(field_release:gcm.KeyPair.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyPair::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:gcm.KeyPair.public_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForEncryptionData(
    EncryptionData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncryptionData::kAppIdFieldNumber;
const int EncryptionData::kAuthorizedEntityFieldNumber;
const int EncryptionData::kKeysFieldNumber;
const int EncryptionData::kAuthSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncryptionData::EncryptionData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gcm.EncryptionData)
}

void EncryptionData::InitAsDefaultInstance() {
}

EncryptionData::EncryptionData(const EncryptionData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gcm.EncryptionData)
}

void EncryptionData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorized_entity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptionData::~EncryptionData() {
  // @@protoc_insertion_point(destructor:gcm.EncryptionData)
  SharedDtor();
}

void EncryptionData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorized_entity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EncryptionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EncryptionData& EncryptionData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_gcm_5fencryption_5fdata_2eproto();
#endif
  return *default_instance_;
}

EncryptionData* EncryptionData::default_instance_ = NULL;

EncryptionData* EncryptionData::New(::google::protobuf::Arena* arena) const {
  EncryptionData* n = new EncryptionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EncryptionData::Clear() {
// @@protoc_insertion_point(message_clear_start:gcm.EncryptionData)
  if (_has_bits_[0 / 32] & 11u) {
    if (has_app_id()) {
      app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_authorized_entity()) {
      authorized_entity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_auth_secret()) {
      auth_secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EncryptionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForEncryptionData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:gcm.EncryptionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string app_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated .gcm.KeyPair keys = 2;
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_(input->IncrementRecursionDepth());
         parse_loop_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_keys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_auth_secret;
        break;
      }

      // optional bytes auth_secret = 3;
      case 3: {
        if (tag == 26) {
         parse_auth_secret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_auth_secret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_authorized_entity;
        break;
      }

      // optional string authorized_entity = 4;
      case 4: {
        if (tag == 34) {
         parse_authorized_entity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorized_entity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gcm.EncryptionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gcm.EncryptionData)
  return false;
#undef DO_
}

void EncryptionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gcm.EncryptionData)
  // required string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // repeated .gcm.KeyPair keys = 2;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->keys(i), output);
  }

  // optional bytes auth_secret = 3;
  if (has_auth_secret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->auth_secret(), output);
  }

  // optional string authorized_entity = 4;
  if (has_authorized_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->authorized_entity(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:gcm.EncryptionData)
}

int EncryptionData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gcm.EncryptionData)
  int total_size = 0;

  // required string app_id = 1;
  if (has_app_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }
  if (_has_bits_[1 / 32] & 10u) {
    // optional string authorized_entity = 4;
    if (has_authorized_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authorized_entity());
    }

    // optional bytes auth_secret = 3;
    if (has_auth_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->auth_secret());
    }

  }
  // repeated .gcm.KeyPair keys = 2;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptionData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EncryptionData*>(&from));
}

void EncryptionData::MergeFrom(const EncryptionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gcm.EncryptionData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_has_app_id();
      app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
    }
    if (from.has_authorized_entity()) {
      set_has_authorized_entity();
      authorized_entity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authorized_entity_);
    }
    if (from.has_auth_secret()) {
      set_has_auth_secret();
      auth_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_secret_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void EncryptionData::CopyFrom(const EncryptionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gcm.EncryptionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptionData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->keys())) return false;
  return true;
}

void EncryptionData::Swap(EncryptionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncryptionData::InternalSwap(EncryptionData* other) {
  app_id_.Swap(&other->app_id_);
  authorized_entity_.Swap(&other->authorized_entity_);
  keys_.UnsafeArenaSwap(&other->keys_);
  auth_secret_.Swap(&other->auth_secret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EncryptionData::GetTypeName() const {
  return "gcm.EncryptionData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EncryptionData

// required string app_id = 1;
bool EncryptionData::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EncryptionData::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void EncryptionData::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void EncryptionData::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_id();
}
 const ::std::string& EncryptionData::app_id() const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.app_id)
  return app_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EncryptionData::set_app_id(const ::std::string& value) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.EncryptionData.app_id)
}
 void EncryptionData::set_app_id(const char* value) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.EncryptionData.app_id)
}
 void EncryptionData::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.EncryptionData.app_id)
}
 ::std::string* EncryptionData::mutable_app_id() {
  set_has_app_id();
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EncryptionData::release_app_id() {
  // @@protoc_insertion_point(field_release:gcm.EncryptionData.app_id)
  clear_has_app_id();
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EncryptionData::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    set_has_app_id();
  } else {
    clear_has_app_id();
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:gcm.EncryptionData.app_id)
}

// optional string authorized_entity = 4;
bool EncryptionData::has_authorized_entity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EncryptionData::set_has_authorized_entity() {
  _has_bits_[0] |= 0x00000002u;
}
void EncryptionData::clear_has_authorized_entity() {
  _has_bits_[0] &= ~0x00000002u;
}
void EncryptionData::clear_authorized_entity() {
  authorized_entity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authorized_entity();
}
 const ::std::string& EncryptionData::authorized_entity() const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.authorized_entity)
  return authorized_entity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EncryptionData::set_authorized_entity(const ::std::string& value) {
  set_has_authorized_entity();
  authorized_entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.EncryptionData.authorized_entity)
}
 void EncryptionData::set_authorized_entity(const char* value) {
  set_has_authorized_entity();
  authorized_entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.EncryptionData.authorized_entity)
}
 void EncryptionData::set_authorized_entity(const char* value, size_t size) {
  set_has_authorized_entity();
  authorized_entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.EncryptionData.authorized_entity)
}
 ::std::string* EncryptionData::mutable_authorized_entity() {
  set_has_authorized_entity();
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.authorized_entity)
  return authorized_entity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EncryptionData::release_authorized_entity() {
  // @@protoc_insertion_point(field_release:gcm.EncryptionData.authorized_entity)
  clear_has_authorized_entity();
  return authorized_entity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EncryptionData::set_allocated_authorized_entity(::std::string* authorized_entity) {
  if (authorized_entity != NULL) {
    set_has_authorized_entity();
  } else {
    clear_has_authorized_entity();
  }
  authorized_entity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authorized_entity);
  // @@protoc_insertion_point(field_set_allocated:gcm.EncryptionData.authorized_entity)
}

// repeated .gcm.KeyPair keys = 2;
int EncryptionData::keys_size() const {
  return keys_.size();
}
void EncryptionData::clear_keys() {
  keys_.Clear();
}
const ::gcm::KeyPair& EncryptionData::keys(int index) const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.keys)
  return keys_.Get(index);
}
::gcm::KeyPair* EncryptionData::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.keys)
  return keys_.Mutable(index);
}
::gcm::KeyPair* EncryptionData::add_keys() {
  // @@protoc_insertion_point(field_add:gcm.EncryptionData.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::gcm::KeyPair >*
EncryptionData::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:gcm.EncryptionData.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::gcm::KeyPair >&
EncryptionData::keys() const {
  // @@protoc_insertion_point(field_list:gcm.EncryptionData.keys)
  return keys_;
}

// optional bytes auth_secret = 3;
bool EncryptionData::has_auth_secret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EncryptionData::set_has_auth_secret() {
  _has_bits_[0] |= 0x00000008u;
}
void EncryptionData::clear_has_auth_secret() {
  _has_bits_[0] &= ~0x00000008u;
}
void EncryptionData::clear_auth_secret() {
  auth_secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_secret();
}
 const ::std::string& EncryptionData::auth_secret() const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.auth_secret)
  return auth_secret_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EncryptionData::set_auth_secret(const ::std::string& value) {
  set_has_auth_secret();
  auth_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.EncryptionData.auth_secret)
}
 void EncryptionData::set_auth_secret(const char* value) {
  set_has_auth_secret();
  auth_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.EncryptionData.auth_secret)
}
 void EncryptionData::set_auth_secret(const void* value, size_t size) {
  set_has_auth_secret();
  auth_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.EncryptionData.auth_secret)
}
 ::std::string* EncryptionData::mutable_auth_secret() {
  set_has_auth_secret();
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.auth_secret)
  return auth_secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EncryptionData::release_auth_secret() {
  // @@protoc_insertion_point(field_release:gcm.EncryptionData.auth_secret)
  clear_has_auth_secret();
  return auth_secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EncryptionData::set_allocated_auth_secret(::std::string* auth_secret) {
  if (auth_secret != NULL) {
    set_has_auth_secret();
  } else {
    clear_has_auth_secret();
  }
  auth_secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_secret);
  // @@protoc_insertion_point(field_set_allocated:gcm.EncryptionData.auth_secret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gcm

// @@protoc_insertion_point(global_scope)
