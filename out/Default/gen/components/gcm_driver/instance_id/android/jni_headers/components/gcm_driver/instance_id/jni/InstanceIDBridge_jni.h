// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/gcm_driver/instance_id/InstanceIDBridge

#ifndef org_chromium_components_gcm_driver_instance_id_InstanceIDBridge_JNI
#define org_chromium_components_gcm_driver_instance_id_InstanceIDBridge_JNI

#include <jni.h>

#include "../../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kInstanceIDBridgeClassPath[] =
    "org/chromium/components/gcm_driver/instance_id/InstanceIDBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_InstanceIDBridge_clazz __attribute__((unused)) = 0;
#define InstanceIDBridge_clazz(env) base::android::LazyGetClass(env, kInstanceIDBridgeClassPath, &g_InstanceIDBridge_clazz)

}  // namespace

namespace instance_id {

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_nativeDidGetID(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeInstanceIDAndroid,
    jint requestId,
    jstring id) {
  InstanceIDAndroid* native =
      reinterpret_cast<InstanceIDAndroid*>(nativeInstanceIDAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DidGetID");
  return native->DidGetID(env, base::android::JavaParamRef<jobject>(env,
      jcaller), requestId, base::android::JavaParamRef<jstring>(env, id));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_nativeDidGetCreationTime(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeInstanceIDAndroid,
    jint requestId,
    jlong creationTime) {
  InstanceIDAndroid* native =
      reinterpret_cast<InstanceIDAndroid*>(nativeInstanceIDAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DidGetCreationTime");
  return native->DidGetCreationTime(env,
      base::android::JavaParamRef<jobject>(env, jcaller), requestId,
      creationTime);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_nativeDidGetToken(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeInstanceIDAndroid,
    jint requestId,
    jstring token) {
  InstanceIDAndroid* native =
      reinterpret_cast<InstanceIDAndroid*>(nativeInstanceIDAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DidGetToken");
  return native->DidGetToken(env, base::android::JavaParamRef<jobject>(env,
      jcaller), requestId, base::android::JavaParamRef<jstring>(env, token));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_nativeDidDeleteToken(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeInstanceIDAndroid,
    jint requestId,
    jboolean success) {
  InstanceIDAndroid* native =
      reinterpret_cast<InstanceIDAndroid*>(nativeInstanceIDAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DidDeleteToken");
  return native->DidDeleteToken(env, base::android::JavaParamRef<jobject>(env,
      jcaller), requestId, success);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_nativeDidDeleteID(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeInstanceIDAndroid,
    jint requestId,
    jboolean success) {
  InstanceIDAndroid* native =
      reinterpret_cast<InstanceIDAndroid*>(nativeInstanceIDAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DidDeleteID");
  return native->DidDeleteID(env, base::android::JavaParamRef<jobject>(env,
      jcaller), requestId, success);
}

static base::subtle::AtomicWord g_InstanceIDBridge_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_InstanceIDBridge_create(JNIEnv* env, jlong nativeInstanceIDAndroid,
    const base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jstring>& subtype) {
  CHECK_CLAZZ(env, InstanceIDBridge_clazz(env),
      InstanceIDBridge_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, InstanceIDBridge_clazz(env),
      "create",

"("
"J"
"Landroid/content/Context;"
"Ljava/lang/String;"
")"
"Lorg/chromium/components/gcm_driver/instance_id/InstanceIDBridge;",
      &g_InstanceIDBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(InstanceIDBridge_clazz(env),
          method_id, nativeInstanceIDAndroid, context.obj(), subtype.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_InstanceIDBridge_destroy = 0;
static void Java_InstanceIDBridge_destroy(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      InstanceIDBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, InstanceIDBridge_clazz(env),
      "destroy",

"("
")"
"V",
      &g_InstanceIDBridge_destroy);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_InstanceIDBridge_setBlockOnAsyncTasksForTesting = 0;
static jboolean Java_InstanceIDBridge_setBlockOnAsyncTasksForTesting(JNIEnv*
    env, jboolean block) {
  CHECK_CLAZZ(env, InstanceIDBridge_clazz(env),
      InstanceIDBridge_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, InstanceIDBridge_clazz(env),
      "setBlockOnAsyncTasksForTesting",

"("
"Z"
")"
"Z",
      &g_InstanceIDBridge_setBlockOnAsyncTasksForTesting);

  jboolean ret =
      env->CallStaticBooleanMethod(InstanceIDBridge_clazz(env),
          method_id, block);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_InstanceIDBridge_getId = 0;
static void Java_InstanceIDBridge_getId(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper requestId) {
  CHECK_CLAZZ(env, obj.obj(),
      InstanceIDBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, InstanceIDBridge_clazz(env),
      "getId",

"("
"I"
")"
"V",
      &g_InstanceIDBridge_getId);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(requestId));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_InstanceIDBridge_getCreationTime = 0;
static void Java_InstanceIDBridge_getCreationTime(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper requestId) {
  CHECK_CLAZZ(env, obj.obj(),
      InstanceIDBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, InstanceIDBridge_clazz(env),
      "getCreationTime",

"("
"I"
")"
"V",
      &g_InstanceIDBridge_getCreationTime);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(requestId));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_InstanceIDBridge_getToken = 0;
static void Java_InstanceIDBridge_getToken(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper requestId,
    const base::android::JavaRefOrBare<jstring>& authorizedEntity,
    const base::android::JavaRefOrBare<jstring>& scope,
    const base::android::JavaRefOrBare<jobjectArray>& extrasStrings) {
  CHECK_CLAZZ(env, obj.obj(),
      InstanceIDBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, InstanceIDBridge_clazz(env),
      "getToken",

"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"[Ljava/lang/String;"
")"
"V",
      &g_InstanceIDBridge_getToken);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(requestId), authorizedEntity.obj(), scope.obj(),
              extrasStrings.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_InstanceIDBridge_deleteToken = 0;
static void Java_InstanceIDBridge_deleteToken(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper requestId,
    const base::android::JavaRefOrBare<jstring>& authorizedEntity,
    const base::android::JavaRefOrBare<jstring>& scope) {
  CHECK_CLAZZ(env, obj.obj(),
      InstanceIDBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, InstanceIDBridge_clazz(env),
      "deleteToken",

"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_InstanceIDBridge_deleteToken);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(requestId), authorizedEntity.obj(), scope.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_InstanceIDBridge_deleteInstanceID = 0;
static void Java_InstanceIDBridge_deleteInstanceID(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper requestId) {
  CHECK_CLAZZ(env, obj.obj(),
      InstanceIDBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, InstanceIDBridge_clazz(env),
      "deleteInstanceID",

"("
"I"
")"
"V",
      &g_InstanceIDBridge_deleteInstanceID);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(requestId));
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsInstanceIDBridge[] = {
    { "nativeDidGetID",
"("
"J"
"I"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_nativeDidGetID)
    },
    { "nativeDidGetCreationTime",
"("
"J"
"I"
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_nativeDidGetCreationTime)
    },
    { "nativeDidGetToken",
"("
"J"
"I"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_nativeDidGetToken)
    },
    { "nativeDidDeleteToken",
"("
"J"
"I"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_nativeDidDeleteToken)
    },
    { "nativeDidDeleteID",
"("
"J"
"I"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_gcm_1driver_instance_1id_InstanceIDBridge_nativeDidDeleteID)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsInstanceIDBridgeSize = arraysize(kMethodsInstanceIDBridge);

  if (env->RegisterNatives(InstanceIDBridge_clazz(env),
                           kMethodsInstanceIDBridge,
                           kMethodsInstanceIDBridgeSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, InstanceIDBridge_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace instance_id

#endif  // org_chromium_components_gcm_driver_instance_id_InstanceIDBridge_JNI
