// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/dom_distiller/content/DistillablePageUtils

#ifndef org_chromium_components_dom_distiller_content_DistillablePageUtils_JNI
#define org_chromium_components_dom_distiller_content_DistillablePageUtils_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDistillablePageUtilsClassPath[] =
    "org/chromium/components/dom_distiller/content/DistillablePageUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DistillablePageUtils_clazz __attribute__((unused)) =
    0;
#define DistillablePageUtils_clazz(env) base::android::LazyGetClass(env, kDistillablePageUtilsClassPath, &g_DistillablePageUtils_clazz)

}  // namespace

namespace dom_distiller {
namespace android {

// Step 2: method stubs.

static void IsPageDistillable(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& webContents,
    jboolean isMobileOptimized,
    const base::android::JavaParamRef<jobject>& callback);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_components_dom_1distiller_content_DistillablePageUtils_nativeIsPageDistillable(JNIEnv*
    env, jclass jcaller,
    jobject webContents,
    jboolean isMobileOptimized,
    jobject callback) {
  return IsPageDistillable(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, webContents),
      isMobileOptimized, base::android::JavaParamRef<jobject>(env, callback));
}

static void SetDelegate(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    const base::android::JavaParamRef<jobject>& webContents,
    const base::android::JavaParamRef<jobject>& delegate);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_components_dom_1distiller_content_DistillablePageUtils_nativeSetDelegate(JNIEnv*
    env, jclass jcaller,
    jobject webContents,
    jobject delegate) {
  return SetDelegate(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, webContents),
      base::android::JavaParamRef<jobject>(env, delegate));
}

static base::subtle::AtomicWord
    g_DistillablePageUtils_callOnIsPageDistillableResult = 0;
static void Java_DistillablePageUtils_callOnIsPageDistillableResult(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& callback,
    jboolean isDistillable) {
  CHECK_CLAZZ(env, DistillablePageUtils_clazz(env),
      DistillablePageUtils_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, DistillablePageUtils_clazz(env),
      "callOnIsPageDistillableResult",

"("
"Lorg/chromium/components/dom_distiller/content/DistillablePageUtils$PageDistillableCallback;"
"Z"
")"
"V",
      &g_DistillablePageUtils_callOnIsPageDistillableResult);

     env->CallStaticVoidMethod(DistillablePageUtils_clazz(env),
          method_id, callback.obj(), isDistillable);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_DistillablePageUtils_callOnIsPageDistillableUpdate = 0;
static void Java_DistillablePageUtils_callOnIsPageDistillableUpdate(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& delegate,
    jboolean isDistillable,
    jboolean isLast) {
  CHECK_CLAZZ(env, DistillablePageUtils_clazz(env),
      DistillablePageUtils_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, DistillablePageUtils_clazz(env),
      "callOnIsPageDistillableUpdate",

"("
"Lorg/chromium/components/dom_distiller/content/DistillablePageUtils$PageDistillableDelegate;"
"Z"
"Z"
")"
"V",
      &g_DistillablePageUtils_callOnIsPageDistillableUpdate);

     env->CallStaticVoidMethod(DistillablePageUtils_clazz(env),
          method_id, delegate.obj(), isDistillable, isLast);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsDistillablePageUtils[] = {
    { "nativeIsPageDistillable",
"("
"Lorg/chromium/content_public/browser/WebContents;"
"Z"
"Lorg/chromium/components/dom_distiller/content/DistillablePageUtils$PageDistillableCallback;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_content_DistillablePageUtils_nativeIsPageDistillable)
    },
    { "nativeSetDelegate",
"("
"Lorg/chromium/content_public/browser/WebContents;"
"Lorg/chromium/components/dom_distiller/content/DistillablePageUtils$PageDistillableDelegate;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_content_DistillablePageUtils_nativeSetDelegate)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsDistillablePageUtilsSize =
      arraysize(kMethodsDistillablePageUtils);

  if (env->RegisterNatives(DistillablePageUtils_clazz(env),
                           kMethodsDistillablePageUtils,
                           kMethodsDistillablePageUtilsSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, DistillablePageUtils_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace dom_distiller

#endif  // org_chromium_components_dom_distiller_content_DistillablePageUtils_JNI
