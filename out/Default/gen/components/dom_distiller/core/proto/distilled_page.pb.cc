// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distilled_page.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "distilled_page.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace dom_distiller {

void protobuf_ShutdownFile_distilled_5fpage_2eproto() {
  delete DistilledPageProto::default_instance_;
  delete DistilledPageProto_Image::default_instance_;
  delete DistilledPageProto_DebugInfo::default_instance_;
  delete DistilledPageProto_PaginationInfo::default_instance_;
  delete DistilledPageProto_TimingInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_distilled_5fpage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_distilled_5fpage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DistilledPageProto::default_instance_ = new DistilledPageProto();
  DistilledPageProto_Image::default_instance_ = new DistilledPageProto_Image();
  DistilledPageProto_DebugInfo::default_instance_ = new DistilledPageProto_DebugInfo();
  DistilledPageProto_PaginationInfo::default_instance_ = new DistilledPageProto_PaginationInfo();
  DistilledPageProto_TimingInfo::default_instance_ = new DistilledPageProto_TimingInfo();
  DistilledPageProto::default_instance_->InitAsDefaultInstance();
  DistilledPageProto_Image::default_instance_->InitAsDefaultInstance();
  DistilledPageProto_DebugInfo::default_instance_->InitAsDefaultInstance();
  DistilledPageProto_PaginationInfo::default_instance_->InitAsDefaultInstance();
  DistilledPageProto_TimingInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_distilled_5fpage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_distilled_5fpage_2eproto_once_);
void protobuf_AddDesc_distilled_5fpage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_distilled_5fpage_2eproto_once_,
                 &protobuf_AddDesc_distilled_5fpage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_distilled_5fpage_2eproto {
  StaticDescriptorInitializer_distilled_5fpage_2eproto() {
    protobuf_AddDesc_distilled_5fpage_2eproto();
  }
} static_descriptor_initializer_distilled_5fpage_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForDistilledPageProto(
    DistilledPageProto* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForDistilledPageProto_Image(
    DistilledPageProto_Image* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistilledPageProto_Image::kNameFieldNumber;
const int DistilledPageProto_Image::kDataFieldNumber;
const int DistilledPageProto_Image::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistilledPageProto_Image::DistilledPageProto_Image()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.DistilledPageProto.Image)
}

void DistilledPageProto_Image::InitAsDefaultInstance() {
}

DistilledPageProto_Image::DistilledPageProto_Image(const DistilledPageProto_Image& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto.Image)
}

void DistilledPageProto_Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DistilledPageProto_Image::~DistilledPageProto_Image() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto.Image)
  SharedDtor();
}

void DistilledPageProto_Image::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DistilledPageProto_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DistilledPageProto_Image& DistilledPageProto_Image::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_distilled_5fpage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_distilled_5fpage_2eproto();
#endif
  return *default_instance_;
}

DistilledPageProto_Image* DistilledPageProto_Image::default_instance_ = NULL;

DistilledPageProto_Image* DistilledPageProto_Image::New(::google::protobuf::Arena* arena) const {
  DistilledPageProto_Image* n = new DistilledPageProto_Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistilledPageProto_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto.Image)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DistilledPageProto_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForDistilledPageProto_Image, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.DistilledPageProto.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (tag == 26) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.DistilledPageProto.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.DistilledPageProto.Image)
  return false;
#undef DO_
}

void DistilledPageProto_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.DistilledPageProto.Image)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.DistilledPageProto.Image)
}

int DistilledPageProto_Image::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dom_distiller.DistilledPageProto.Image)
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  return total_size;
}
int DistilledPageProto_Image::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto.Image)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string url = 3;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistilledPageProto_Image::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DistilledPageProto_Image*>(&from));
}

void DistilledPageProto_Image::MergeFrom(const DistilledPageProto_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DistilledPageProto_Image::CopyFrom(const DistilledPageProto_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto_Image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DistilledPageProto_Image::Swap(DistilledPageProto_Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistilledPageProto_Image::InternalSwap(DistilledPageProto_Image* other) {
  name_.Swap(&other->name_);
  data_.Swap(&other->data_);
  url_.Swap(&other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DistilledPageProto_Image::GetTypeName() const {
  return "dom_distiller.DistilledPageProto.Image";
}


// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForDistilledPageProto_DebugInfo(
    DistilledPageProto_DebugInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistilledPageProto_DebugInfo::kLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistilledPageProto_DebugInfo::DistilledPageProto_DebugInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.DistilledPageProto.DebugInfo)
}

void DistilledPageProto_DebugInfo::InitAsDefaultInstance() {
}

DistilledPageProto_DebugInfo::DistilledPageProto_DebugInfo(const DistilledPageProto_DebugInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto.DebugInfo)
}

void DistilledPageProto_DebugInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DistilledPageProto_DebugInfo::~DistilledPageProto_DebugInfo() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto.DebugInfo)
  SharedDtor();
}

void DistilledPageProto_DebugInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DistilledPageProto_DebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DistilledPageProto_DebugInfo& DistilledPageProto_DebugInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_distilled_5fpage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_distilled_5fpage_2eproto();
#endif
  return *default_instance_;
}

DistilledPageProto_DebugInfo* DistilledPageProto_DebugInfo::default_instance_ = NULL;

DistilledPageProto_DebugInfo* DistilledPageProto_DebugInfo::New(::google::protobuf::Arena* arena) const {
  DistilledPageProto_DebugInfo* n = new DistilledPageProto_DebugInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistilledPageProto_DebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto.DebugInfo)
  if (has_log()) {
    log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DistilledPageProto_DebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForDistilledPageProto_DebugInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.DistilledPageProto.DebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string log = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.DistilledPageProto.DebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.DistilledPageProto.DebugInfo)
  return false;
#undef DO_
}

void DistilledPageProto_DebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.DistilledPageProto.DebugInfo)
  // optional string log = 1;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->log(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.DistilledPageProto.DebugInfo)
}

int DistilledPageProto_DebugInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto.DebugInfo)
  int total_size = 0;

  // optional string log = 1;
  if (has_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistilledPageProto_DebugInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DistilledPageProto_DebugInfo*>(&from));
}

void DistilledPageProto_DebugInfo::MergeFrom(const DistilledPageProto_DebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto.DebugInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log()) {
      set_has_log();
      log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DistilledPageProto_DebugInfo::CopyFrom(const DistilledPageProto_DebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto.DebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto_DebugInfo::IsInitialized() const {

  return true;
}

void DistilledPageProto_DebugInfo::Swap(DistilledPageProto_DebugInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistilledPageProto_DebugInfo::InternalSwap(DistilledPageProto_DebugInfo* other) {
  log_.Swap(&other->log_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DistilledPageProto_DebugInfo::GetTypeName() const {
  return "dom_distiller.DistilledPageProto.DebugInfo";
}


// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForDistilledPageProto_PaginationInfo(
    DistilledPageProto_PaginationInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistilledPageProto_PaginationInfo::kNextPageFieldNumber;
const int DistilledPageProto_PaginationInfo::kPrevPageFieldNumber;
const int DistilledPageProto_PaginationInfo::kCanonicalPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistilledPageProto_PaginationInfo::DistilledPageProto_PaginationInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.DistilledPageProto.PaginationInfo)
}

void DistilledPageProto_PaginationInfo::InitAsDefaultInstance() {
}

DistilledPageProto_PaginationInfo::DistilledPageProto_PaginationInfo(const DistilledPageProto_PaginationInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto.PaginationInfo)
}

void DistilledPageProto_PaginationInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DistilledPageProto_PaginationInfo::~DistilledPageProto_PaginationInfo() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto.PaginationInfo)
  SharedDtor();
}

void DistilledPageProto_PaginationInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DistilledPageProto_PaginationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DistilledPageProto_PaginationInfo& DistilledPageProto_PaginationInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_distilled_5fpage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_distilled_5fpage_2eproto();
#endif
  return *default_instance_;
}

DistilledPageProto_PaginationInfo* DistilledPageProto_PaginationInfo::default_instance_ = NULL;

DistilledPageProto_PaginationInfo* DistilledPageProto_PaginationInfo::New(::google::protobuf::Arena* arena) const {
  DistilledPageProto_PaginationInfo* n = new DistilledPageProto_PaginationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistilledPageProto_PaginationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto.PaginationInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_next_page()) {
      next_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_prev_page()) {
      prev_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_canonical_page()) {
      canonical_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DistilledPageProto_PaginationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForDistilledPageProto_PaginationInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.DistilledPageProto.PaginationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string next_page = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_prev_page;
        break;
      }

      // optional string prev_page = 2;
      case 2: {
        if (tag == 18) {
         parse_prev_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_page()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_canonical_page;
        break;
      }

      // optional string canonical_page = 3;
      case 3: {
        if (tag == 26) {
         parse_canonical_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canonical_page()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.DistilledPageProto.PaginationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.DistilledPageProto.PaginationInfo)
  return false;
#undef DO_
}

void DistilledPageProto_PaginationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.DistilledPageProto.PaginationInfo)
  // optional string next_page = 1;
  if (has_next_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->next_page(), output);
  }

  // optional string prev_page = 2;
  if (has_prev_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prev_page(), output);
  }

  // optional string canonical_page = 3;
  if (has_canonical_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->canonical_page(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.DistilledPageProto.PaginationInfo)
}

int DistilledPageProto_PaginationInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto.PaginationInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string next_page = 1;
    if (has_next_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->next_page());
    }

    // optional string prev_page = 2;
    if (has_prev_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prev_page());
    }

    // optional string canonical_page = 3;
    if (has_canonical_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->canonical_page());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistilledPageProto_PaginationInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DistilledPageProto_PaginationInfo*>(&from));
}

void DistilledPageProto_PaginationInfo::MergeFrom(const DistilledPageProto_PaginationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto.PaginationInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_next_page()) {
      set_has_next_page();
      next_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_);
    }
    if (from.has_prev_page()) {
      set_has_prev_page();
      prev_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_page_);
    }
    if (from.has_canonical_page()) {
      set_has_canonical_page();
      canonical_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_page_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DistilledPageProto_PaginationInfo::CopyFrom(const DistilledPageProto_PaginationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto.PaginationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto_PaginationInfo::IsInitialized() const {

  return true;
}

void DistilledPageProto_PaginationInfo::Swap(DistilledPageProto_PaginationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistilledPageProto_PaginationInfo::InternalSwap(DistilledPageProto_PaginationInfo* other) {
  next_page_.Swap(&other->next_page_);
  prev_page_.Swap(&other->prev_page_);
  canonical_page_.Swap(&other->canonical_page_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DistilledPageProto_PaginationInfo::GetTypeName() const {
  return "dom_distiller.DistilledPageProto.PaginationInfo";
}


// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForDistilledPageProto_TimingInfo(
    DistilledPageProto_TimingInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistilledPageProto_TimingInfo::kNameFieldNumber;
const int DistilledPageProto_TimingInfo::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistilledPageProto_TimingInfo::DistilledPageProto_TimingInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.DistilledPageProto.TimingInfo)
}

void DistilledPageProto_TimingInfo::InitAsDefaultInstance() {
}

DistilledPageProto_TimingInfo::DistilledPageProto_TimingInfo(const DistilledPageProto_TimingInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto.TimingInfo)
}

void DistilledPageProto_TimingInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DistilledPageProto_TimingInfo::~DistilledPageProto_TimingInfo() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto.TimingInfo)
  SharedDtor();
}

void DistilledPageProto_TimingInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DistilledPageProto_TimingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DistilledPageProto_TimingInfo& DistilledPageProto_TimingInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_distilled_5fpage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_distilled_5fpage_2eproto();
#endif
  return *default_instance_;
}

DistilledPageProto_TimingInfo* DistilledPageProto_TimingInfo::default_instance_ = NULL;

DistilledPageProto_TimingInfo* DistilledPageProto_TimingInfo::New(::google::protobuf::Arena* arena) const {
  DistilledPageProto_TimingInfo* n = new DistilledPageProto_TimingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistilledPageProto_TimingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto.TimingInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DistilledPageProto_TimingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForDistilledPageProto_TimingInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.DistilledPageProto.TimingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_time;
        break;
      }

      // optional double time = 2;
      case 2: {
        if (tag == 17) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.DistilledPageProto.TimingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.DistilledPageProto.TimingInfo)
  return false;
#undef DO_
}

void DistilledPageProto_TimingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.DistilledPageProto.TimingInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.DistilledPageProto.TimingInfo)
}

int DistilledPageProto_TimingInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto.TimingInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double time = 2;
    if (has_time()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistilledPageProto_TimingInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DistilledPageProto_TimingInfo*>(&from));
}

void DistilledPageProto_TimingInfo::MergeFrom(const DistilledPageProto_TimingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto.TimingInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DistilledPageProto_TimingInfo::CopyFrom(const DistilledPageProto_TimingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto.TimingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto_TimingInfo::IsInitialized() const {

  return true;
}

void DistilledPageProto_TimingInfo::Swap(DistilledPageProto_TimingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistilledPageProto_TimingInfo::InternalSwap(DistilledPageProto_TimingInfo* other) {
  name_.Swap(&other->name_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DistilledPageProto_TimingInfo::GetTypeName() const {
  return "dom_distiller.DistilledPageProto.TimingInfo";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistilledPageProto::kUrlFieldNumber;
const int DistilledPageProto::kHtmlFieldNumber;
const int DistilledPageProto::kImageFieldNumber;
const int DistilledPageProto::kTitleFieldNumber;
const int DistilledPageProto::kDebugInfoFieldNumber;
const int DistilledPageProto::kTextDirectionFieldNumber;
const int DistilledPageProto::kPaginationInfoFieldNumber;
const int DistilledPageProto::kTimingInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistilledPageProto::DistilledPageProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.DistilledPageProto)
}

void DistilledPageProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  debug_info_ = const_cast< ::dom_distiller::DistilledPageProto_DebugInfo*>(
      ::dom_distiller::DistilledPageProto_DebugInfo::internal_default_instance());
#else
  debug_info_ = const_cast< ::dom_distiller::DistilledPageProto_DebugInfo*>(&::dom_distiller::DistilledPageProto_DebugInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pagination_info_ = const_cast< ::dom_distiller::DistilledPageProto_PaginationInfo*>(
      ::dom_distiller::DistilledPageProto_PaginationInfo::internal_default_instance());
#else
  pagination_info_ = const_cast< ::dom_distiller::DistilledPageProto_PaginationInfo*>(&::dom_distiller::DistilledPageProto_PaginationInfo::default_instance());
#endif
}

DistilledPageProto::DistilledPageProto(const DistilledPageProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto)
}

void DistilledPageProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_info_ = NULL;
  text_direction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagination_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DistilledPageProto::~DistilledPageProto() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto)
  SharedDtor();
}

void DistilledPageProto::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_direction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete debug_info_;
    delete pagination_info_;
  }
}

void DistilledPageProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DistilledPageProto& DistilledPageProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_distilled_5fpage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_distilled_5fpage_2eproto();
#endif
  return *default_instance_;
}

DistilledPageProto* DistilledPageProto::default_instance_ = NULL;

DistilledPageProto* DistilledPageProto::New(::google::protobuf::Arena* arena) const {
  DistilledPageProto* n = new DistilledPageProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistilledPageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto)
  if (_has_bits_[0 / 32] & 123u) {
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_html()) {
      html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_debug_info()) {
      if (debug_info_ != NULL) debug_info_->::dom_distiller::DistilledPageProto_DebugInfo::Clear();
    }
    if (has_text_direction()) {
      text_direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pagination_info()) {
      if (pagination_info_ != NULL) pagination_info_->::dom_distiller::DistilledPageProto_PaginationInfo::Clear();
    }
  }
  image_.Clear();
  timing_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DistilledPageProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForDistilledPageProto, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.DistilledPageProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_html;
        break;
      }

      // required string html = 3;
      case 3: {
        if (tag == 26) {
         parse_html:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_image;
        break;
      }

      // repeated .dom_distiller.DistilledPageProto.Image image = 4;
      case 4: {
        if (tag == 34) {
         parse_image:
          DO_(input->IncrementRecursionDepth());
         parse_loop_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_image;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }

      // optional string title = 5;
      case 5: {
        if (tag == 42) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_debug_info;
        break;
      }

      // optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
      case 6: {
        if (tag == 50) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_text_direction;
        break;
      }

      // optional string text_direction = 7;
      case 7: {
        if (tag == 58) {
         parse_text_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_pagination_info;
        break;
      }

      // optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
      case 8: {
        if (tag == 66) {
         parse_pagination_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pagination_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_timing_info;
        break;
      }

      // repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
      case 9: {
        if (tag == 74) {
         parse_timing_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_timing_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_timing_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_timing_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.DistilledPageProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.DistilledPageProto)
  return false;
#undef DO_
}

void DistilledPageProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.DistilledPageProto)
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required string html = 3;
  if (has_html()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->html(), output);
  }

  // repeated .dom_distiller.DistilledPageProto.Image image = 4;
  for (unsigned int i = 0, n = this->image_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->image(i), output);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->debug_info_, output);
  }

  // optional string text_direction = 7;
  if (has_text_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->text_direction(), output);
  }

  // optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
  if (has_pagination_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->pagination_info_, output);
  }

  // repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
  for (unsigned int i = 0, n = this->timing_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->timing_info(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.DistilledPageProto)
}

int DistilledPageProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dom_distiller.DistilledPageProto)
  int total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_html()) {
    // required string html = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->html());
  }

  return total_size;
}
int DistilledPageProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required string html = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->html());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 120u) {
    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->debug_info_);
    }

    // optional string text_direction = 7;
    if (has_text_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_direction());
    }

    // optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
    if (has_pagination_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pagination_info_);
    }

  }
  // repeated .dom_distiller.DistilledPageProto.Image image = 4;
  total_size += 1 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image(i));
  }

  // repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
  total_size += 1 * this->timing_info_size();
  for (int i = 0; i < this->timing_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timing_info(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistilledPageProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DistilledPageProto*>(&from));
}

void DistilledPageProto::MergeFrom(const DistilledPageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  image_.MergeFrom(from.image_);
  timing_info_.MergeFrom(from.timing_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_html()) {
      set_has_html();
      html_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.html_);
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_debug_info()) {
      mutable_debug_info()->::dom_distiller::DistilledPageProto_DebugInfo::MergeFrom(from.debug_info());
    }
    if (from.has_text_direction()) {
      set_has_text_direction();
      text_direction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_direction_);
    }
    if (from.has_pagination_info()) {
      mutable_pagination_info()->::dom_distiller::DistilledPageProto_PaginationInfo::MergeFrom(from.pagination_info());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DistilledPageProto::CopyFrom(const DistilledPageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->image())) return false;
  return true;
}

void DistilledPageProto::Swap(DistilledPageProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistilledPageProto::InternalSwap(DistilledPageProto* other) {
  url_.Swap(&other->url_);
  html_.Swap(&other->html_);
  image_.UnsafeArenaSwap(&other->image_);
  title_.Swap(&other->title_);
  std::swap(debug_info_, other->debug_info_);
  text_direction_.Swap(&other->text_direction_);
  std::swap(pagination_info_, other->pagination_info_);
  timing_info_.UnsafeArenaSwap(&other->timing_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DistilledPageProto::GetTypeName() const {
  return "dom_distiller.DistilledPageProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DistilledPageProto_Image

// required string name = 1;
bool DistilledPageProto_Image::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistilledPageProto_Image::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DistilledPageProto_Image::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistilledPageProto_Image::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& DistilledPageProto_Image::name() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.Image.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_Image::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.Image.name)
}
 void DistilledPageProto_Image::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.Image.name)
}
 void DistilledPageProto_Image::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.Image.name)
}
 ::std::string* DistilledPageProto_Image::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.Image.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DistilledPageProto_Image::release_name() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.Image.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_Image::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.Image.name)
}

// required bytes data = 2;
bool DistilledPageProto_Image::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DistilledPageProto_Image::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void DistilledPageProto_Image::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void DistilledPageProto_Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& DistilledPageProto_Image::data() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.Image.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_Image::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.Image.data)
}
 void DistilledPageProto_Image::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.Image.data)
}
 void DistilledPageProto_Image::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.Image.data)
}
 ::std::string* DistilledPageProto_Image::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DistilledPageProto_Image::release_data() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.Image.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.Image.data)
}

// optional string url = 3;
bool DistilledPageProto_Image::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DistilledPageProto_Image::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
void DistilledPageProto_Image::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void DistilledPageProto_Image::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& DistilledPageProto_Image::url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.Image.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_Image::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.Image.url)
}
 void DistilledPageProto_Image::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.Image.url)
}
 void DistilledPageProto_Image::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.Image.url)
}
 ::std::string* DistilledPageProto_Image::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.Image.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DistilledPageProto_Image::release_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.Image.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_Image::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.Image.url)
}

// -------------------------------------------------------------------

// DistilledPageProto_DebugInfo

// optional string log = 1;
bool DistilledPageProto_DebugInfo::has_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistilledPageProto_DebugInfo::set_has_log() {
  _has_bits_[0] |= 0x00000001u;
}
void DistilledPageProto_DebugInfo::clear_has_log() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistilledPageProto_DebugInfo::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log();
}
 const ::std::string& DistilledPageProto_DebugInfo::log() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.DebugInfo.log)
  return log_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_DebugInfo::set_log(const ::std::string& value) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.DebugInfo.log)
}
 void DistilledPageProto_DebugInfo::set_log(const char* value) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.DebugInfo.log)
}
 void DistilledPageProto_DebugInfo::set_log(const char* value, size_t size) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.DebugInfo.log)
}
 ::std::string* DistilledPageProto_DebugInfo::mutable_log() {
  set_has_log();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.DebugInfo.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DistilledPageProto_DebugInfo::release_log() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.DebugInfo.log)
  clear_has_log();
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_DebugInfo::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    set_has_log();
  } else {
    clear_has_log();
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.DebugInfo.log)
}

// -------------------------------------------------------------------

// DistilledPageProto_PaginationInfo

// optional string next_page = 1;
bool DistilledPageProto_PaginationInfo::has_next_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistilledPageProto_PaginationInfo::set_has_next_page() {
  _has_bits_[0] |= 0x00000001u;
}
void DistilledPageProto_PaginationInfo::clear_has_next_page() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistilledPageProto_PaginationInfo::clear_next_page() {
  next_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next_page();
}
 const ::std::string& DistilledPageProto_PaginationInfo::next_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
  return next_page_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_PaginationInfo::set_next_page(const ::std::string& value) {
  set_has_next_page();
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}
 void DistilledPageProto_PaginationInfo::set_next_page(const char* value) {
  set_has_next_page();
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}
 void DistilledPageProto_PaginationInfo::set_next_page(const char* value, size_t size) {
  set_has_next_page();
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}
 ::std::string* DistilledPageProto_PaginationInfo::mutable_next_page() {
  set_has_next_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
  return next_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DistilledPageProto_PaginationInfo::release_next_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
  clear_has_next_page();
  return next_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_PaginationInfo::set_allocated_next_page(::std::string* next_page) {
  if (next_page != NULL) {
    set_has_next_page();
  } else {
    clear_has_next_page();
  }
  next_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}

// optional string prev_page = 2;
bool DistilledPageProto_PaginationInfo::has_prev_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DistilledPageProto_PaginationInfo::set_has_prev_page() {
  _has_bits_[0] |= 0x00000002u;
}
void DistilledPageProto_PaginationInfo::clear_has_prev_page() {
  _has_bits_[0] &= ~0x00000002u;
}
void DistilledPageProto_PaginationInfo::clear_prev_page() {
  prev_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev_page();
}
 const ::std::string& DistilledPageProto_PaginationInfo::prev_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
  return prev_page_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_PaginationInfo::set_prev_page(const ::std::string& value) {
  set_has_prev_page();
  prev_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}
 void DistilledPageProto_PaginationInfo::set_prev_page(const char* value) {
  set_has_prev_page();
  prev_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}
 void DistilledPageProto_PaginationInfo::set_prev_page(const char* value, size_t size) {
  set_has_prev_page();
  prev_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}
 ::std::string* DistilledPageProto_PaginationInfo::mutable_prev_page() {
  set_has_prev_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
  return prev_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DistilledPageProto_PaginationInfo::release_prev_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
  clear_has_prev_page();
  return prev_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_PaginationInfo::set_allocated_prev_page(::std::string* prev_page) {
  if (prev_page != NULL) {
    set_has_prev_page();
  } else {
    clear_has_prev_page();
  }
  prev_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}

// optional string canonical_page = 3;
bool DistilledPageProto_PaginationInfo::has_canonical_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DistilledPageProto_PaginationInfo::set_has_canonical_page() {
  _has_bits_[0] |= 0x00000004u;
}
void DistilledPageProto_PaginationInfo::clear_has_canonical_page() {
  _has_bits_[0] &= ~0x00000004u;
}
void DistilledPageProto_PaginationInfo::clear_canonical_page() {
  canonical_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_canonical_page();
}
 const ::std::string& DistilledPageProto_PaginationInfo::canonical_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
  return canonical_page_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_PaginationInfo::set_canonical_page(const ::std::string& value) {
  set_has_canonical_page();
  canonical_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}
 void DistilledPageProto_PaginationInfo::set_canonical_page(const char* value) {
  set_has_canonical_page();
  canonical_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}
 void DistilledPageProto_PaginationInfo::set_canonical_page(const char* value, size_t size) {
  set_has_canonical_page();
  canonical_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}
 ::std::string* DistilledPageProto_PaginationInfo::mutable_canonical_page() {
  set_has_canonical_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
  return canonical_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DistilledPageProto_PaginationInfo::release_canonical_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
  clear_has_canonical_page();
  return canonical_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_PaginationInfo::set_allocated_canonical_page(::std::string* canonical_page) {
  if (canonical_page != NULL) {
    set_has_canonical_page();
  } else {
    clear_has_canonical_page();
  }
  canonical_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonical_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}

// -------------------------------------------------------------------

// DistilledPageProto_TimingInfo

// optional string name = 1;
bool DistilledPageProto_TimingInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistilledPageProto_TimingInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DistilledPageProto_TimingInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistilledPageProto_TimingInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& DistilledPageProto_TimingInfo::name() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.TimingInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_TimingInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.TimingInfo.name)
}
 void DistilledPageProto_TimingInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.TimingInfo.name)
}
 void DistilledPageProto_TimingInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.TimingInfo.name)
}
 ::std::string* DistilledPageProto_TimingInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.TimingInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DistilledPageProto_TimingInfo::release_name() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.TimingInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto_TimingInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.TimingInfo.name)
}

// optional double time = 2;
bool DistilledPageProto_TimingInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DistilledPageProto_TimingInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void DistilledPageProto_TimingInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void DistilledPageProto_TimingInfo::clear_time() {
  time_ = 0;
  clear_has_time();
}
 double DistilledPageProto_TimingInfo::time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.TimingInfo.time)
  return time_;
}
 void DistilledPageProto_TimingInfo::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.TimingInfo.time)
}

// -------------------------------------------------------------------

// DistilledPageProto

// required string url = 1;
bool DistilledPageProto::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistilledPageProto::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void DistilledPageProto::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistilledPageProto::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& DistilledPageProto::url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.url)
}
 void DistilledPageProto::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.url)
}
 void DistilledPageProto::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.url)
}
 ::std::string* DistilledPageProto::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DistilledPageProto::release_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.url)
}

// required string html = 3;
bool DistilledPageProto::has_html() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DistilledPageProto::set_has_html() {
  _has_bits_[0] |= 0x00000002u;
}
void DistilledPageProto::clear_has_html() {
  _has_bits_[0] &= ~0x00000002u;
}
void DistilledPageProto::clear_html() {
  html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_html();
}
 const ::std::string& DistilledPageProto::html() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.html)
  return html_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto::set_html(const ::std::string& value) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.html)
}
 void DistilledPageProto::set_html(const char* value) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.html)
}
 void DistilledPageProto::set_html(const char* value, size_t size) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.html)
}
 ::std::string* DistilledPageProto::mutable_html() {
  set_has_html();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.html)
  return html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DistilledPageProto::release_html() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.html)
  clear_has_html();
  return html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto::set_allocated_html(::std::string* html) {
  if (html != NULL) {
    set_has_html();
  } else {
    clear_has_html();
  }
  html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.html)
}

// repeated .dom_distiller.DistilledPageProto.Image image = 4;
int DistilledPageProto::image_size() const {
  return image_.size();
}
void DistilledPageProto::clear_image() {
  image_.Clear();
}
const ::dom_distiller::DistilledPageProto_Image& DistilledPageProto::image(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.image)
  return image_.Get(index);
}
::dom_distiller::DistilledPageProto_Image* DistilledPageProto::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.image)
  return image_.Mutable(index);
}
::dom_distiller::DistilledPageProto_Image* DistilledPageProto::add_image() {
  // @@protoc_insertion_point(field_add:dom_distiller.DistilledPageProto.image)
  return image_.Add();
}
::google::protobuf::RepeatedPtrField< ::dom_distiller::DistilledPageProto_Image >*
DistilledPageProto::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.DistilledPageProto.image)
  return &image_;
}
const ::google::protobuf::RepeatedPtrField< ::dom_distiller::DistilledPageProto_Image >&
DistilledPageProto::image() const {
  // @@protoc_insertion_point(field_list:dom_distiller.DistilledPageProto.image)
  return image_;
}

// optional string title = 5;
bool DistilledPageProto::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DistilledPageProto::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
void DistilledPageProto::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
void DistilledPageProto::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& DistilledPageProto::title() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.title)
}
 void DistilledPageProto::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.title)
}
 void DistilledPageProto::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.title)
}
 ::std::string* DistilledPageProto::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DistilledPageProto::release_title() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.title)
}

// optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
bool DistilledPageProto::has_debug_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DistilledPageProto::set_has_debug_info() {
  _has_bits_[0] |= 0x00000010u;
}
void DistilledPageProto::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void DistilledPageProto::clear_debug_info() {
  if (debug_info_ != NULL) debug_info_->::dom_distiller::DistilledPageProto_DebugInfo::Clear();
  clear_has_debug_info();
}
const ::dom_distiller::DistilledPageProto_DebugInfo& DistilledPageProto::debug_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.debug_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return debug_info_ != NULL ? *debug_info_ : *default_instance().debug_info_;
#else
  return debug_info_ != NULL ? *debug_info_ : *default_instance_->debug_info_;
#endif
}
::dom_distiller::DistilledPageProto_DebugInfo* DistilledPageProto::mutable_debug_info() {
  set_has_debug_info();
  if (debug_info_ == NULL) {
    debug_info_ = new ::dom_distiller::DistilledPageProto_DebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.debug_info)
  return debug_info_;
}
::dom_distiller::DistilledPageProto_DebugInfo* DistilledPageProto::release_debug_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.debug_info)
  clear_has_debug_info();
  ::dom_distiller::DistilledPageProto_DebugInfo* temp = debug_info_;
  debug_info_ = NULL;
  return temp;
}
void DistilledPageProto::set_allocated_debug_info(::dom_distiller::DistilledPageProto_DebugInfo* debug_info) {
  delete debug_info_;
  debug_info_ = debug_info;
  if (debug_info) {
    set_has_debug_info();
  } else {
    clear_has_debug_info();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.debug_info)
}

// optional string text_direction = 7;
bool DistilledPageProto::has_text_direction() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DistilledPageProto::set_has_text_direction() {
  _has_bits_[0] |= 0x00000020u;
}
void DistilledPageProto::clear_has_text_direction() {
  _has_bits_[0] &= ~0x00000020u;
}
void DistilledPageProto::clear_text_direction() {
  text_direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_direction();
}
 const ::std::string& DistilledPageProto::text_direction() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.text_direction)
  return text_direction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto::set_text_direction(const ::std::string& value) {
  set_has_text_direction();
  text_direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.text_direction)
}
 void DistilledPageProto::set_text_direction(const char* value) {
  set_has_text_direction();
  text_direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.text_direction)
}
 void DistilledPageProto::set_text_direction(const char* value, size_t size) {
  set_has_text_direction();
  text_direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.text_direction)
}
 ::std::string* DistilledPageProto::mutable_text_direction() {
  set_has_text_direction();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.text_direction)
  return text_direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DistilledPageProto::release_text_direction() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.text_direction)
  clear_has_text_direction();
  return text_direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledPageProto::set_allocated_text_direction(::std::string* text_direction) {
  if (text_direction != NULL) {
    set_has_text_direction();
  } else {
    clear_has_text_direction();
  }
  text_direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_direction);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.text_direction)
}

// optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
bool DistilledPageProto::has_pagination_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DistilledPageProto::set_has_pagination_info() {
  _has_bits_[0] |= 0x00000040u;
}
void DistilledPageProto::clear_has_pagination_info() {
  _has_bits_[0] &= ~0x00000040u;
}
void DistilledPageProto::clear_pagination_info() {
  if (pagination_info_ != NULL) pagination_info_->::dom_distiller::DistilledPageProto_PaginationInfo::Clear();
  clear_has_pagination_info();
}
const ::dom_distiller::DistilledPageProto_PaginationInfo& DistilledPageProto::pagination_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.pagination_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pagination_info_ != NULL ? *pagination_info_ : *default_instance().pagination_info_;
#else
  return pagination_info_ != NULL ? *pagination_info_ : *default_instance_->pagination_info_;
#endif
}
::dom_distiller::DistilledPageProto_PaginationInfo* DistilledPageProto::mutable_pagination_info() {
  set_has_pagination_info();
  if (pagination_info_ == NULL) {
    pagination_info_ = new ::dom_distiller::DistilledPageProto_PaginationInfo;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.pagination_info)
  return pagination_info_;
}
::dom_distiller::DistilledPageProto_PaginationInfo* DistilledPageProto::release_pagination_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.pagination_info)
  clear_has_pagination_info();
  ::dom_distiller::DistilledPageProto_PaginationInfo* temp = pagination_info_;
  pagination_info_ = NULL;
  return temp;
}
void DistilledPageProto::set_allocated_pagination_info(::dom_distiller::DistilledPageProto_PaginationInfo* pagination_info) {
  delete pagination_info_;
  pagination_info_ = pagination_info;
  if (pagination_info) {
    set_has_pagination_info();
  } else {
    clear_has_pagination_info();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.pagination_info)
}

// repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
int DistilledPageProto::timing_info_size() const {
  return timing_info_.size();
}
void DistilledPageProto::clear_timing_info() {
  timing_info_.Clear();
}
const ::dom_distiller::DistilledPageProto_TimingInfo& DistilledPageProto::timing_info(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.timing_info)
  return timing_info_.Get(index);
}
::dom_distiller::DistilledPageProto_TimingInfo* DistilledPageProto::mutable_timing_info(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.timing_info)
  return timing_info_.Mutable(index);
}
::dom_distiller::DistilledPageProto_TimingInfo* DistilledPageProto::add_timing_info() {
  // @@protoc_insertion_point(field_add:dom_distiller.DistilledPageProto.timing_info)
  return timing_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::dom_distiller::DistilledPageProto_TimingInfo >*
DistilledPageProto::mutable_timing_info() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.DistilledPageProto.timing_info)
  return &timing_info_;
}
const ::google::protobuf::RepeatedPtrField< ::dom_distiller::DistilledPageProto_TimingInfo >&
DistilledPageProto::timing_info() const {
  // @@protoc_insertion_point(field_list:dom_distiller.DistilledPageProto.timing_info)
  return timing_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dom_distiller

// @@protoc_insertion_point(global_scope)
