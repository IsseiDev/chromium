// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distilled_article.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "distilled_article.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace dom_distiller {

void protobuf_ShutdownFile_distilled_5farticle_2eproto() {
  delete DistilledArticleProto::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_distilled_5farticle_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_distilled_5farticle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::dom_distiller::protobuf_AddDesc_distilled_5fpage_2eproto();
  DistilledArticleProto::default_instance_ = new DistilledArticleProto();
  DistilledArticleProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_distilled_5farticle_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_distilled_5farticle_2eproto_once_);
void protobuf_AddDesc_distilled_5farticle_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_distilled_5farticle_2eproto_once_,
                 &protobuf_AddDesc_distilled_5farticle_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_distilled_5farticle_2eproto {
  StaticDescriptorInitializer_distilled_5farticle_2eproto() {
    protobuf_AddDesc_distilled_5farticle_2eproto();
  }
} static_descriptor_initializer_distilled_5farticle_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForDistilledArticleProto(
    DistilledArticleProto* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistilledArticleProto::kTitleFieldNumber;
const int DistilledArticleProto::kPagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistilledArticleProto::DistilledArticleProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.DistilledArticleProto)
}

void DistilledArticleProto::InitAsDefaultInstance() {
}

DistilledArticleProto::DistilledArticleProto(const DistilledArticleProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledArticleProto)
}

void DistilledArticleProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DistilledArticleProto::~DistilledArticleProto() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledArticleProto)
  SharedDtor();
}

void DistilledArticleProto::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DistilledArticleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DistilledArticleProto& DistilledArticleProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_distilled_5farticle_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_distilled_5farticle_2eproto();
#endif
  return *default_instance_;
}

DistilledArticleProto* DistilledArticleProto::default_instance_ = NULL;

DistilledArticleProto* DistilledArticleProto::New(::google::protobuf::Arena* arena) const {
  DistilledArticleProto* n = new DistilledArticleProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistilledArticleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledArticleProto)
  if (has_title()) {
    title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  pages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DistilledArticleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForDistilledArticleProto, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.DistilledArticleProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pages;
        break;
      }

      // repeated .dom_distiller.DistilledPageProto pages = 2;
      case 2: {
        if (tag == 18) {
         parse_pages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.DistilledArticleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.DistilledArticleProto)
  return false;
#undef DO_
}

void DistilledArticleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.DistilledArticleProto)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // repeated .dom_distiller.DistilledPageProto pages = 2;
  for (unsigned int i = 0, n = this->pages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->pages(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.DistilledArticleProto)
}

int DistilledArticleProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledArticleProto)
  int total_size = 0;

  // optional string title = 1;
  if (has_title()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // repeated .dom_distiller.DistilledPageProto pages = 2;
  total_size += 1 * this->pages_size();
  for (int i = 0; i < this->pages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pages(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistilledArticleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DistilledArticleProto*>(&from));
}

void DistilledArticleProto::MergeFrom(const DistilledArticleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledArticleProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  pages_.MergeFrom(from.pages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DistilledArticleProto::CopyFrom(const DistilledArticleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledArticleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledArticleProto::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->pages())) return false;
  return true;
}

void DistilledArticleProto::Swap(DistilledArticleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistilledArticleProto::InternalSwap(DistilledArticleProto* other) {
  title_.Swap(&other->title_);
  pages_.UnsafeArenaSwap(&other->pages_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DistilledArticleProto::GetTypeName() const {
  return "dom_distiller.DistilledArticleProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DistilledArticleProto

// optional string title = 1;
bool DistilledArticleProto::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistilledArticleProto::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void DistilledArticleProto::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistilledArticleProto::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& DistilledArticleProto::title() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledArticleProto.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledArticleProto::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledArticleProto.title)
}
 void DistilledArticleProto::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledArticleProto.title)
}
 void DistilledArticleProto::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledArticleProto.title)
}
 ::std::string* DistilledArticleProto::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledArticleProto.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DistilledArticleProto::release_title() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledArticleProto.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DistilledArticleProto::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledArticleProto.title)
}

// repeated .dom_distiller.DistilledPageProto pages = 2;
int DistilledArticleProto::pages_size() const {
  return pages_.size();
}
void DistilledArticleProto::clear_pages() {
  pages_.Clear();
}
const ::dom_distiller::DistilledPageProto& DistilledArticleProto::pages(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledArticleProto.pages)
  return pages_.Get(index);
}
::dom_distiller::DistilledPageProto* DistilledArticleProto::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledArticleProto.pages)
  return pages_.Mutable(index);
}
::dom_distiller::DistilledPageProto* DistilledArticleProto::add_pages() {
  // @@protoc_insertion_point(field_add:dom_distiller.DistilledArticleProto.pages)
  return pages_.Add();
}
::google::protobuf::RepeatedPtrField< ::dom_distiller::DistilledPageProto >*
DistilledArticleProto::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.DistilledArticleProto.pages)
  return &pages_;
}
const ::google::protobuf::RepeatedPtrField< ::dom_distiller::DistilledPageProto >&
DistilledArticleProto::pages() const {
  // @@protoc_insertion_point(field_list:dom_distiller.DistilledArticleProto.pages)
  return pages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dom_distiller

// @@protoc_insertion_point(global_scope)
