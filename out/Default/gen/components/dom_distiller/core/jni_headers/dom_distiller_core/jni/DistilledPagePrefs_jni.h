// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/dom_distiller/core/DistilledPagePrefs

#ifndef org_chromium_components_dom_distiller_core_DistilledPagePrefs_JNI
#define org_chromium_components_dom_distiller_core_DistilledPagePrefs_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDistilledPagePrefsObserverWrapperClassPath[] =
    "org/chromium/components/dom_distiller/core/DistilledPagePrefs$DistilledPagePrefsObserverWrapper";
const char kDistilledPagePrefsClassPath[] =
    "org/chromium/components/dom_distiller/core/DistilledPagePrefs";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DistilledPagePrefsObserverWrapper_clazz
    __attribute__((unused)) = 0;
#define DistilledPagePrefsObserverWrapper_clazz(env) base::android::LazyGetClass(env, kDistilledPagePrefsObserverWrapperClassPath, &g_DistilledPagePrefsObserverWrapper_clazz)
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DistilledPagePrefs_clazz __attribute__((unused)) = 0;
#define DistilledPagePrefs_clazz(env) base::android::LazyGetClass(env, kDistilledPagePrefsClassPath, &g_DistilledPagePrefs_clazz)

}  // namespace

namespace dom_distiller {
namespace android {

// Step 2: method stubs.

static jlong InitObserverAndroid(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_nativeInitObserverAndroid(JNIEnv*
    env, jobject jcaller) {
  return InitObserverAndroid(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_nativeDestroyObserverAndroid(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDistilledPagePrefsObserverAndroid) {
  DistilledPagePrefsObserverAndroid* native =
      reinterpret_cast<DistilledPagePrefsObserverAndroid*>(nativeDistilledPagePrefsObserverAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DestroyObserverAndroid");
  return native->DestroyObserverAndroid(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    jlong distilledPagePrefPtr);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeInit(JNIEnv*
    env, jobject jcaller,
    jlong distilledPagePrefPtr) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
      distilledPagePrefPtr);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeSetFontFamily(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDistilledPagePrefsAndroid,
    jint fontFamily) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetFontFamily");
  return native->SetFontFamily(env, base::android::JavaParamRef<jobject>(env,
      jcaller), fontFamily);
}

extern "C" __attribute__((visibility("default")))
jint
    Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeGetFontFamily(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDistilledPagePrefsAndroid) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetFontFamily", 0);
  return native->GetFontFamily(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeSetTheme(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDistilledPagePrefsAndroid,
    jint theme) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetTheme");
  return native->SetTheme(env, base::android::JavaParamRef<jobject>(env,
      jcaller), theme);
}

extern "C" __attribute__((visibility("default")))
jint
    Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeGetTheme(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDistilledPagePrefsAndroid) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTheme", 0);
  return native->GetTheme(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeSetFontScaling(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDistilledPagePrefsAndroid,
    jfloat scaling) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetFontScaling");
  return native->SetFontScaling(env, base::android::JavaParamRef<jobject>(env,
      jcaller), scaling);
}

extern "C" __attribute__((visibility("default")))
jfloat
    Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeGetFontScaling(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDistilledPagePrefsAndroid) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetFontScaling", 0);
  return native->GetFontScaling(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeAddObserver(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDistilledPagePrefsAndroid,
    jlong nativeObserverPtr) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddObserver");
  return native->AddObserver(env, base::android::JavaParamRef<jobject>(env,
      jcaller), nativeObserverPtr);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeRemoveObserver(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDistilledPagePrefsAndroid,
    jlong nativeObserverPtr) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveObserver");
  return native->RemoveObserver(env, base::android::JavaParamRef<jobject>(env,
      jcaller), nativeObserverPtr);
}

static base::subtle::AtomicWord
    g_DistilledPagePrefsObserverWrapper_onChangeFontFamily = 0;
static void Java_DistilledPagePrefsObserverWrapper_onChangeFontFamily(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper
    fontFamily) {
  CHECK_CLAZZ(env, obj.obj(),
      DistilledPagePrefsObserverWrapper_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DistilledPagePrefsObserverWrapper_clazz(env),
      "onChangeFontFamily",

"("
"I"
")"
"V",
      &g_DistilledPagePrefsObserverWrapper_onChangeFontFamily);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(fontFamily));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_DistilledPagePrefsObserverWrapper_onChangeTheme = 0;
static void Java_DistilledPagePrefsObserverWrapper_onChangeTheme(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper theme) {
  CHECK_CLAZZ(env, obj.obj(),
      DistilledPagePrefsObserverWrapper_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DistilledPagePrefsObserverWrapper_clazz(env),
      "onChangeTheme",

"("
"I"
")"
"V",
      &g_DistilledPagePrefsObserverWrapper_onChangeTheme);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(theme));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_DistilledPagePrefsObserverWrapper_onChangeFontScaling = 0;
static void Java_DistilledPagePrefsObserverWrapper_onChangeFontScaling(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj, jfloat scaling) {
  CHECK_CLAZZ(env, obj.obj(),
      DistilledPagePrefsObserverWrapper_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DistilledPagePrefsObserverWrapper_clazz(env),
      "onChangeFontScaling",

"("
"F"
")"
"V",
      &g_DistilledPagePrefsObserverWrapper_onChangeFontScaling);

     env->CallVoidMethod(obj.obj(),
          method_id, scaling);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsDistilledPagePrefsObserverWrapper[] = {
    { "nativeInitObserverAndroid",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_nativeInitObserverAndroid)
    },
    { "nativeDestroyObserverAndroid",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_nativeDestroyObserverAndroid)
    },
};

static const JNINativeMethod kMethodsDistilledPagePrefs[] = {
    { "nativeInit",
"("
"J"
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeInit)
    },
    { "nativeSetFontFamily",
"("
"J"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeSetFontFamily)
    },
    { "nativeGetFontFamily",
"("
"J"
")"
"I",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeGetFontFamily)
    },
    { "nativeSetTheme",
"("
"J"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeSetTheme)
    },
    { "nativeGetTheme",
"("
"J"
")"
"I",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeGetTheme)
    },
    { "nativeSetFontScaling",
"("
"J"
"F"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeSetFontScaling)
    },
    { "nativeGetFontScaling",
"("
"J"
")"
"F",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeGetFontScaling)
    },
    { "nativeAddObserver",
"("
"J"
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeAddObserver)
    },
    { "nativeRemoveObserver",
"("
"J"
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_nativeRemoveObserver)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsDistilledPagePrefsObserverWrapperSize =
      arraysize(kMethodsDistilledPagePrefsObserverWrapper);

  if (env->RegisterNatives(DistilledPagePrefsObserverWrapper_clazz(env),
                           kMethodsDistilledPagePrefsObserverWrapper,
                           kMethodsDistilledPagePrefsObserverWrapperSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, DistilledPagePrefsObserverWrapper_clazz(env), __FILE__);
    return false;
  }

  const int kMethodsDistilledPagePrefsSize =
      arraysize(kMethodsDistilledPagePrefs);

  if (env->RegisterNatives(DistilledPagePrefs_clazz(env),
                           kMethodsDistilledPagePrefs,
                           kMethodsDistilledPagePrefsSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, DistilledPagePrefs_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace dom_distiller

#endif  // org_chromium_components_dom_distiller_core_DistilledPagePrefs_JNI
