// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/dom_distiller/core/DomDistillerService

#ifndef org_chromium_components_dom_distiller_core_DomDistillerService_JNI
#define org_chromium_components_dom_distiller_core_DomDistillerService_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDomDistillerServiceClassPath[] =
    "org/chromium/components/dom_distiller/core/DomDistillerService";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DomDistillerService_clazz __attribute__((unused)) =
    0;
#define DomDistillerService_clazz(env) base::android::LazyGetClass(env, kDomDistillerServiceClassPath, &g_DomDistillerService_clazz)

}  // namespace

namespace dom_distiller {
namespace android {

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_components_dom_1distiller_core_DomDistillerService_nativeHasEntry(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDomDistillerServiceAndroid,
    jstring entryId) {
  DomDistillerServiceAndroid* native =
      reinterpret_cast<DomDistillerServiceAndroid*>(nativeDomDistillerServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasEntry", false);
  return native->HasEntry(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, entryId));
}

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_components_dom_1distiller_core_DomDistillerService_nativeGetUrlForEntry(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDomDistillerServiceAndroid,
    jstring entryId) {
  DomDistillerServiceAndroid* native =
      reinterpret_cast<DomDistillerServiceAndroid*>(nativeDomDistillerServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetUrlForEntry", NULL);
  return native->GetUrlForEntry(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, entryId)).Release();
}

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_components_dom_1distiller_core_DomDistillerService_nativeGetDistilledPagePrefsPtr(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDomDistillerServiceAndroid) {
  DomDistillerServiceAndroid* native =
      reinterpret_cast<DomDistillerServiceAndroid*>(nativeDomDistillerServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetDistilledPagePrefsPtr", 0);
  return native->GetDistilledPagePrefsPtr(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_DomDistillerService_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_DomDistillerService_create(JNIEnv* env, jlong
    nativeDomDistillerServiceAndroid) {
  CHECK_CLAZZ(env, DomDistillerService_clazz(env),
      DomDistillerService_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, DomDistillerService_clazz(env),
      "create",

"("
"J"
")"
"Lorg/chromium/components/dom_distiller/core/DomDistillerService;",
      &g_DomDistillerService_create);

  jobject ret =
      env->CallStaticObjectMethod(DomDistillerService_clazz(env),
          method_id, nativeDomDistillerServiceAndroid);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsDomDistillerService[] = {
    { "nativeHasEntry",
"("
"J"
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DomDistillerService_nativeHasEntry)
    },
    { "nativeGetUrlForEntry",
"("
"J"
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DomDistillerService_nativeGetUrlForEntry)
    },
    { "nativeGetDistilledPagePrefsPtr",
"("
"J"
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DomDistillerService_nativeGetDistilledPagePrefsPtr)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsDomDistillerServiceSize =
      arraysize(kMethodsDomDistillerService);

  if (env->RegisterNatives(DomDistillerService_clazz(env),
                           kMethodsDomDistillerService,
                           kMethodsDomDistillerServiceSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, DomDistillerService_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace dom_distiller

#endif  // org_chromium_components_dom_distiller_core_DomDistillerService_JNI
