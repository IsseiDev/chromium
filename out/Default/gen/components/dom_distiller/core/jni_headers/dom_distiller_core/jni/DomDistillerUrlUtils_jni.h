// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/dom_distiller/core/DomDistillerUrlUtils

#ifndef org_chromium_components_dom_distiller_core_DomDistillerUrlUtils_JNI
#define org_chromium_components_dom_distiller_core_DomDistillerUrlUtils_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDomDistillerUrlUtilsClassPath[] =
    "org/chromium/components/dom_distiller/core/DomDistillerUrlUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DomDistillerUrlUtils_clazz __attribute__((unused)) =
    0;
#define DomDistillerUrlUtils_clazz(env) base::android::LazyGetClass(env, kDomDistillerUrlUtilsClassPath, &g_DomDistillerUrlUtils_clazz)

}  // namespace

namespace dom_distiller {
namespace url_utils {
namespace android {

// Step 2: method stubs.

static base::android::ScopedJavaLocalRef<jstring>
    GetDistillerViewUrlFromUrl(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& scheme,
    const base::android::JavaParamRef<jstring>& url);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_components_dom_1distiller_core_DomDistillerUrlUtils_nativeGetDistillerViewUrlFromUrl(JNIEnv*
    env, jclass jcaller,
    jstring scheme,
    jstring url) {
  return GetDistillerViewUrlFromUrl(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, scheme),
      base::android::JavaParamRef<jstring>(env, url)).Release();
}

static base::android::ScopedJavaLocalRef<jstring> GetIsDistillableJs(JNIEnv*
    env, const base::android::JavaParamRef<jclass>& jcaller);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_components_dom_1distiller_core_DomDistillerUrlUtils_nativeGetIsDistillableJs(JNIEnv*
    env, jclass jcaller) {
  return GetIsDistillableJs(env, base::android::JavaParamRef<jclass>(env,
      jcaller)).Release();
}

static base::android::ScopedJavaLocalRef<jstring>
    GetOriginalUrlFromDistillerUrl(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& viewerUrl);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_components_dom_1distiller_core_DomDistillerUrlUtils_nativeGetOriginalUrlFromDistillerUrl(JNIEnv*
    env, jclass jcaller,
    jstring viewerUrl) {
  return GetOriginalUrlFromDistillerUrl(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, viewerUrl)).Release();
}

static jboolean IsDistilledPage(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_components_dom_1distiller_core_DomDistillerUrlUtils_nativeIsDistilledPage(JNIEnv*
    env, jclass jcaller,
    jstring url) {
  return IsDistilledPage(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, url));
}

static jboolean IsUrlDistillable(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_components_dom_1distiller_core_DomDistillerUrlUtils_nativeIsUrlDistillable(JNIEnv*
    env, jclass jcaller,
    jstring url) {
  return IsUrlDistillable(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, url));
}

static base::android::ScopedJavaLocalRef<jstring> GetValueForKeyInUrl(JNIEnv*
    env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& key);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_components_dom_1distiller_core_DomDistillerUrlUtils_nativeGetValueForKeyInUrl(JNIEnv*
    env, jclass jcaller,
    jstring url,
    jstring key) {
  return GetValueForKeyInUrl(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, url),
      base::android::JavaParamRef<jstring>(env, key)).Release();
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsDomDistillerUrlUtils[] = {
    { "nativeGetDistillerViewUrlFromUrl",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DomDistillerUrlUtils_nativeGetDistillerViewUrlFromUrl)
    },
    { "nativeGetIsDistillableJs",
"("
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DomDistillerUrlUtils_nativeGetIsDistillableJs)
    },
    { "nativeGetOriginalUrlFromDistillerUrl",
"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DomDistillerUrlUtils_nativeGetOriginalUrlFromDistillerUrl)
    },
    { "nativeIsDistilledPage",
"("
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DomDistillerUrlUtils_nativeIsDistilledPage)
    },
    { "nativeIsUrlDistillable",
"("
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DomDistillerUrlUtils_nativeIsUrlDistillable)
    },
    { "nativeGetValueForKeyInUrl",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_components_dom_1distiller_core_DomDistillerUrlUtils_nativeGetValueForKeyInUrl)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsDomDistillerUrlUtilsSize =
      arraysize(kMethodsDomDistillerUrlUtils);

  if (env->RegisterNatives(DomDistillerUrlUtils_clazz(env),
                           kMethodsDomDistillerUrlUtils,
                           kMethodsDomDistillerUrlUtilsSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, DomDistillerUrlUtils_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace url_utils
}  // namespace dom_distiller

#endif  // org_chromium_components_dom_distiller_core_DomDistillerUrlUtils_JNI
