// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: precache.proto

#ifndef PROTOBUF_precache_2eproto__INCLUDED
#define PROTOBUF_precache_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_lite.h>
// @@protoc_insertion_point(includes)

namespace precache {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_precache_2eproto();
void protobuf_AssignDesc_precache_2eproto();
void protobuf_ShutdownFile_precache_2eproto();

class PrecacheConfigurationSettings;
class PrecacheExperiments;
class PrecacheManifest;
class PrecacheResource;
class PrecacheResourceSelection;

// ===================================================================

class PrecacheResource : public ::google::protobuf::MessageLite {
 public:
  PrecacheResource();
  virtual ~PrecacheResource();

  PrecacheResource(const PrecacheResource& from);

  inline PrecacheResource& operator=(const PrecacheResource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const PrecacheResource& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PrecacheResource* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PrecacheResource* other);

  // implements Message ----------------------------------------------

  inline PrecacheResource* New() const { return New(NULL); }

  PrecacheResource* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PrecacheResource& from);
  void MergeFrom(const PrecacheResource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrecacheResource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:precache.PrecacheResource)
 private:
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_precache_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_precache_2eproto();
  #endif
  friend void protobuf_AssignDesc_precache_2eproto();
  friend void protobuf_ShutdownFile_precache_2eproto();

  void InitAsDefaultInstance();
  static PrecacheResource* default_instance_;
};
// -------------------------------------------------------------------

class PrecacheManifest : public ::google::protobuf::MessageLite {
 public:
  PrecacheManifest();
  virtual ~PrecacheManifest();

  PrecacheManifest(const PrecacheManifest& from);

  inline PrecacheManifest& operator=(const PrecacheManifest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const PrecacheManifest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PrecacheManifest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PrecacheManifest* other);

  // implements Message ----------------------------------------------

  inline PrecacheManifest* New() const { return New(NULL); }

  PrecacheManifest* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PrecacheManifest& from);
  void MergeFrom(const PrecacheManifest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrecacheManifest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .precache.PrecacheResource resource = 1;
  int resource_size() const;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::precache::PrecacheResource& resource(int index) const;
  ::precache::PrecacheResource* mutable_resource(int index);
  ::precache::PrecacheResource* add_resource();
  ::google::protobuf::RepeatedPtrField< ::precache::PrecacheResource >*
      mutable_resource();
  const ::google::protobuf::RepeatedPtrField< ::precache::PrecacheResource >&
      resource() const;

  // optional .precache.PrecacheExperiments experiments = 2;
  bool has_experiments() const;
  void clear_experiments();
  static const int kExperimentsFieldNumber = 2;
  const ::precache::PrecacheExperiments& experiments() const;
  ::precache::PrecacheExperiments* mutable_experiments();
  ::precache::PrecacheExperiments* release_experiments();
  void set_allocated_experiments(::precache::PrecacheExperiments* experiments);

  // @@protoc_insertion_point(class_scope:precache.PrecacheManifest)
 private:
  inline void set_has_experiments();
  inline void clear_has_experiments();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::precache::PrecacheResource > resource_;
  ::precache::PrecacheExperiments* experiments_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_precache_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_precache_2eproto();
  #endif
  friend void protobuf_AssignDesc_precache_2eproto();
  friend void protobuf_ShutdownFile_precache_2eproto();

  void InitAsDefaultInstance();
  static PrecacheManifest* default_instance_;
};
// -------------------------------------------------------------------

class PrecacheExperiments : public ::google::protobuf::MessageLite {
 public:
  PrecacheExperiments();
  virtual ~PrecacheExperiments();

  PrecacheExperiments(const PrecacheExperiments& from);

  inline PrecacheExperiments& operator=(const PrecacheExperiments& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const PrecacheExperiments& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PrecacheExperiments* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PrecacheExperiments* other);

  // implements Message ----------------------------------------------

  inline PrecacheExperiments* New() const { return New(NULL); }

  PrecacheExperiments* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PrecacheExperiments& from);
  void MergeFrom(const PrecacheExperiments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrecacheExperiments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<fixed32, .precache.PrecacheResourceSelection> resources_by_experiment_group = 1;
  int resources_by_experiment_group_size() const;
  void clear_resources_by_experiment_group();
  static const int kResourcesByExperimentGroupFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::precache::PrecacheResourceSelection >&
      resources_by_experiment_group() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::precache::PrecacheResourceSelection >*
      mutable_resources_by_experiment_group();

  // @@protoc_insertion_point(class_scope:precache.PrecacheExperiments)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, ::precache::PrecacheResourceSelection,
      ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      PrecacheExperiments_ResourcesByExperimentGroupEntry;
  ::google::protobuf::internal::MapFieldLite<
      ::google::protobuf::uint32, ::precache::PrecacheResourceSelection,
      ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > resources_by_experiment_group_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_precache_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_precache_2eproto();
  #endif
  friend void protobuf_AssignDesc_precache_2eproto();
  friend void protobuf_ShutdownFile_precache_2eproto();

  void InitAsDefaultInstance();
  static PrecacheExperiments* default_instance_;
};
// -------------------------------------------------------------------

class PrecacheResourceSelection : public ::google::protobuf::MessageLite {
 public:
  PrecacheResourceSelection();
  virtual ~PrecacheResourceSelection();

  PrecacheResourceSelection(const PrecacheResourceSelection& from);

  inline PrecacheResourceSelection& operator=(const PrecacheResourceSelection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const PrecacheResourceSelection& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PrecacheResourceSelection* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PrecacheResourceSelection* other);

  // implements Message ----------------------------------------------

  inline PrecacheResourceSelection* New() const { return New(NULL); }

  PrecacheResourceSelection* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PrecacheResourceSelection& from);
  void MergeFrom(const PrecacheResourceSelection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrecacheResourceSelection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 bitset = 1 [default = 18446744073709551615];
  bool has_bitset() const;
  void clear_bitset();
  static const int kBitsetFieldNumber = 1;
  ::google::protobuf::uint64 bitset() const;
  void set_bitset(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:precache.PrecacheResourceSelection)
 private:
  inline void set_has_bitset();
  inline void clear_has_bitset();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bitset_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_precache_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_precache_2eproto();
  #endif
  friend void protobuf_AssignDesc_precache_2eproto();
  friend void protobuf_ShutdownFile_precache_2eproto();

  void InitAsDefaultInstance();
  static PrecacheResourceSelection* default_instance_;
};
// -------------------------------------------------------------------

class PrecacheConfigurationSettings : public ::google::protobuf::MessageLite {
 public:
  PrecacheConfigurationSettings();
  virtual ~PrecacheConfigurationSettings();

  PrecacheConfigurationSettings(const PrecacheConfigurationSettings& from);

  inline PrecacheConfigurationSettings& operator=(const PrecacheConfigurationSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const PrecacheConfigurationSettings& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PrecacheConfigurationSettings* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PrecacheConfigurationSettings* other);

  // implements Message ----------------------------------------------

  inline PrecacheConfigurationSettings* New() const { return New(NULL); }

  PrecacheConfigurationSettings* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PrecacheConfigurationSettings& from);
  void MergeFrom(const PrecacheConfigurationSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrecacheConfigurationSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 top_sites_count = 1 [default = 100];
  bool has_top_sites_count() const;
  void clear_top_sites_count();
  static const int kTopSitesCountFieldNumber = 1;
  ::google::protobuf::int64 top_sites_count() const;
  void set_top_sites_count(::google::protobuf::int64 value);

  // repeated string forced_site = 2;
  int forced_site_size() const;
  void clear_forced_site();
  static const int kForcedSiteFieldNumber = 2;
  const ::std::string& forced_site(int index) const;
  ::std::string* mutable_forced_site(int index);
  void set_forced_site(int index, const ::std::string& value);
  void set_forced_site(int index, const char* value);
  void set_forced_site(int index, const char* value, size_t size);
  ::std::string* add_forced_site();
  void add_forced_site(const ::std::string& value);
  void add_forced_site(const char* value);
  void add_forced_site(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& forced_site() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_forced_site();

  // optional int32 top_resources_count = 3 [default = 100];
  bool has_top_resources_count() const;
  void clear_top_resources_count();
  static const int kTopResourcesCountFieldNumber = 3;
  ::google::protobuf::int32 top_resources_count() const;
  void set_top_resources_count(::google::protobuf::int32 value);

  // optional uint64 max_bytes_per_resource = 4 [default = 500000];
  bool has_max_bytes_per_resource() const;
  void clear_max_bytes_per_resource();
  static const int kMaxBytesPerResourceFieldNumber = 4;
  ::google::protobuf::uint64 max_bytes_per_resource() const;
  void set_max_bytes_per_resource(::google::protobuf::uint64 value);

  // optional uint64 max_bytes_total = 5 [default = 10000000];
  bool has_max_bytes_total() const;
  void clear_max_bytes_total();
  static const int kMaxBytesTotalFieldNumber = 5;
  ::google::protobuf::uint64 max_bytes_total() const;
  void set_max_bytes_total(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:precache.PrecacheConfigurationSettings)
 private:
  inline void set_has_top_sites_count();
  inline void clear_has_top_sites_count();
  inline void set_has_top_resources_count();
  inline void clear_has_top_resources_count();
  inline void set_has_max_bytes_per_resource();
  inline void clear_has_max_bytes_per_resource();
  inline void set_has_max_bytes_total();
  inline void clear_has_max_bytes_total();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 top_sites_count_;
  ::google::protobuf::RepeatedPtrField< ::std::string> forced_site_;
  ::google::protobuf::uint64 max_bytes_per_resource_;
  ::google::protobuf::uint64 max_bytes_total_;
  ::google::protobuf::int32 top_resources_count_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_precache_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_precache_2eproto();
  #endif
  friend void protobuf_AssignDesc_precache_2eproto();
  friend void protobuf_ShutdownFile_precache_2eproto();

  void InitAsDefaultInstance();
  static PrecacheConfigurationSettings* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PrecacheResource

// optional string url = 1;
inline bool PrecacheResource::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrecacheResource::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrecacheResource::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrecacheResource::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& PrecacheResource::url() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheResource.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrecacheResource::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:precache.PrecacheResource.url)
}
inline void PrecacheResource::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:precache.PrecacheResource.url)
}
inline void PrecacheResource::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:precache.PrecacheResource.url)
}
inline ::std::string* PrecacheResource::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:precache.PrecacheResource.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrecacheResource::release_url() {
  // @@protoc_insertion_point(field_release:precache.PrecacheResource.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrecacheResource::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:precache.PrecacheResource.url)
}

// -------------------------------------------------------------------

// PrecacheManifest

// repeated .precache.PrecacheResource resource = 1;
inline int PrecacheManifest::resource_size() const {
  return resource_.size();
}
inline void PrecacheManifest::clear_resource() {
  resource_.Clear();
}
inline const ::precache::PrecacheResource& PrecacheManifest::resource(int index) const {
  // @@protoc_insertion_point(field_get:precache.PrecacheManifest.resource)
  return resource_.Get(index);
}
inline ::precache::PrecacheResource* PrecacheManifest::mutable_resource(int index) {
  // @@protoc_insertion_point(field_mutable:precache.PrecacheManifest.resource)
  return resource_.Mutable(index);
}
inline ::precache::PrecacheResource* PrecacheManifest::add_resource() {
  // @@protoc_insertion_point(field_add:precache.PrecacheManifest.resource)
  return resource_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::precache::PrecacheResource >*
PrecacheManifest::mutable_resource() {
  // @@protoc_insertion_point(field_mutable_list:precache.PrecacheManifest.resource)
  return &resource_;
}
inline const ::google::protobuf::RepeatedPtrField< ::precache::PrecacheResource >&
PrecacheManifest::resource() const {
  // @@protoc_insertion_point(field_list:precache.PrecacheManifest.resource)
  return resource_;
}

// optional .precache.PrecacheExperiments experiments = 2;
inline bool PrecacheManifest::has_experiments() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrecacheManifest::set_has_experiments() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrecacheManifest::clear_has_experiments() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrecacheManifest::clear_experiments() {
  if (experiments_ != NULL) experiments_->::precache::PrecacheExperiments::Clear();
  clear_has_experiments();
}
inline const ::precache::PrecacheExperiments& PrecacheManifest::experiments() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheManifest.experiments)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return experiments_ != NULL ? *experiments_ : *default_instance().experiments_;
#else
  return experiments_ != NULL ? *experiments_ : *default_instance_->experiments_;
#endif
}
inline ::precache::PrecacheExperiments* PrecacheManifest::mutable_experiments() {
  set_has_experiments();
  if (experiments_ == NULL) {
    experiments_ = new ::precache::PrecacheExperiments;
  }
  // @@protoc_insertion_point(field_mutable:precache.PrecacheManifest.experiments)
  return experiments_;
}
inline ::precache::PrecacheExperiments* PrecacheManifest::release_experiments() {
  // @@protoc_insertion_point(field_release:precache.PrecacheManifest.experiments)
  clear_has_experiments();
  ::precache::PrecacheExperiments* temp = experiments_;
  experiments_ = NULL;
  return temp;
}
inline void PrecacheManifest::set_allocated_experiments(::precache::PrecacheExperiments* experiments) {
  delete experiments_;
  experiments_ = experiments;
  if (experiments) {
    set_has_experiments();
  } else {
    clear_has_experiments();
  }
  // @@protoc_insertion_point(field_set_allocated:precache.PrecacheManifest.experiments)
}

// -------------------------------------------------------------------

// PrecacheExperiments

// map<fixed32, .precache.PrecacheResourceSelection> resources_by_experiment_group = 1;
inline int PrecacheExperiments::resources_by_experiment_group_size() const {
  return resources_by_experiment_group_.size();
}
inline void PrecacheExperiments::clear_resources_by_experiment_group() {
  resources_by_experiment_group_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::precache::PrecacheResourceSelection >&
PrecacheExperiments::resources_by_experiment_group() const {
  // @@protoc_insertion_point(field_map:precache.PrecacheExperiments.resources_by_experiment_group)
  return resources_by_experiment_group_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::precache::PrecacheResourceSelection >*
PrecacheExperiments::mutable_resources_by_experiment_group() {
  // @@protoc_insertion_point(field_mutable_map:precache.PrecacheExperiments.resources_by_experiment_group)
  return resources_by_experiment_group_.MutableMap();
}

// -------------------------------------------------------------------

// PrecacheResourceSelection

// optional fixed64 bitset = 1 [default = 18446744073709551615];
inline bool PrecacheResourceSelection::has_bitset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrecacheResourceSelection::set_has_bitset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrecacheResourceSelection::clear_has_bitset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrecacheResourceSelection::clear_bitset() {
  bitset_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_bitset();
}
inline ::google::protobuf::uint64 PrecacheResourceSelection::bitset() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheResourceSelection.bitset)
  return bitset_;
}
inline void PrecacheResourceSelection::set_bitset(::google::protobuf::uint64 value) {
  set_has_bitset();
  bitset_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheResourceSelection.bitset)
}

// -------------------------------------------------------------------

// PrecacheConfigurationSettings

// optional int64 top_sites_count = 1 [default = 100];
inline bool PrecacheConfigurationSettings::has_top_sites_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrecacheConfigurationSettings::set_has_top_sites_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrecacheConfigurationSettings::clear_has_top_sites_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrecacheConfigurationSettings::clear_top_sites_count() {
  top_sites_count_ = GOOGLE_LONGLONG(100);
  clear_has_top_sites_count();
}
inline ::google::protobuf::int64 PrecacheConfigurationSettings::top_sites_count() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheConfigurationSettings.top_sites_count)
  return top_sites_count_;
}
inline void PrecacheConfigurationSettings::set_top_sites_count(::google::protobuf::int64 value) {
  set_has_top_sites_count();
  top_sites_count_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheConfigurationSettings.top_sites_count)
}

// repeated string forced_site = 2;
inline int PrecacheConfigurationSettings::forced_site_size() const {
  return forced_site_.size();
}
inline void PrecacheConfigurationSettings::clear_forced_site() {
  forced_site_.Clear();
}
inline const ::std::string& PrecacheConfigurationSettings::forced_site(int index) const {
  // @@protoc_insertion_point(field_get:precache.PrecacheConfigurationSettings.forced_site)
  return forced_site_.Get(index);
}
inline ::std::string* PrecacheConfigurationSettings::mutable_forced_site(int index) {
  // @@protoc_insertion_point(field_mutable:precache.PrecacheConfigurationSettings.forced_site)
  return forced_site_.Mutable(index);
}
inline void PrecacheConfigurationSettings::set_forced_site(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:precache.PrecacheConfigurationSettings.forced_site)
  forced_site_.Mutable(index)->assign(value);
}
inline void PrecacheConfigurationSettings::set_forced_site(int index, const char* value) {
  forced_site_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:precache.PrecacheConfigurationSettings.forced_site)
}
inline void PrecacheConfigurationSettings::set_forced_site(int index, const char* value, size_t size) {
  forced_site_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:precache.PrecacheConfigurationSettings.forced_site)
}
inline ::std::string* PrecacheConfigurationSettings::add_forced_site() {
  // @@protoc_insertion_point(field_add_mutable:precache.PrecacheConfigurationSettings.forced_site)
  return forced_site_.Add();
}
inline void PrecacheConfigurationSettings::add_forced_site(const ::std::string& value) {
  forced_site_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:precache.PrecacheConfigurationSettings.forced_site)
}
inline void PrecacheConfigurationSettings::add_forced_site(const char* value) {
  forced_site_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:precache.PrecacheConfigurationSettings.forced_site)
}
inline void PrecacheConfigurationSettings::add_forced_site(const char* value, size_t size) {
  forced_site_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:precache.PrecacheConfigurationSettings.forced_site)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PrecacheConfigurationSettings::forced_site() const {
  // @@protoc_insertion_point(field_list:precache.PrecacheConfigurationSettings.forced_site)
  return forced_site_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PrecacheConfigurationSettings::mutable_forced_site() {
  // @@protoc_insertion_point(field_mutable_list:precache.PrecacheConfigurationSettings.forced_site)
  return &forced_site_;
}

// optional int32 top_resources_count = 3 [default = 100];
inline bool PrecacheConfigurationSettings::has_top_resources_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrecacheConfigurationSettings::set_has_top_resources_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrecacheConfigurationSettings::clear_has_top_resources_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrecacheConfigurationSettings::clear_top_resources_count() {
  top_resources_count_ = 100;
  clear_has_top_resources_count();
}
inline ::google::protobuf::int32 PrecacheConfigurationSettings::top_resources_count() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheConfigurationSettings.top_resources_count)
  return top_resources_count_;
}
inline void PrecacheConfigurationSettings::set_top_resources_count(::google::protobuf::int32 value) {
  set_has_top_resources_count();
  top_resources_count_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheConfigurationSettings.top_resources_count)
}

// optional uint64 max_bytes_per_resource = 4 [default = 500000];
inline bool PrecacheConfigurationSettings::has_max_bytes_per_resource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrecacheConfigurationSettings::set_has_max_bytes_per_resource() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrecacheConfigurationSettings::clear_has_max_bytes_per_resource() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrecacheConfigurationSettings::clear_max_bytes_per_resource() {
  max_bytes_per_resource_ = GOOGLE_ULONGLONG(500000);
  clear_has_max_bytes_per_resource();
}
inline ::google::protobuf::uint64 PrecacheConfigurationSettings::max_bytes_per_resource() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheConfigurationSettings.max_bytes_per_resource)
  return max_bytes_per_resource_;
}
inline void PrecacheConfigurationSettings::set_max_bytes_per_resource(::google::protobuf::uint64 value) {
  set_has_max_bytes_per_resource();
  max_bytes_per_resource_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheConfigurationSettings.max_bytes_per_resource)
}

// optional uint64 max_bytes_total = 5 [default = 10000000];
inline bool PrecacheConfigurationSettings::has_max_bytes_total() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrecacheConfigurationSettings::set_has_max_bytes_total() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrecacheConfigurationSettings::clear_has_max_bytes_total() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrecacheConfigurationSettings::clear_max_bytes_total() {
  max_bytes_total_ = GOOGLE_ULONGLONG(10000000);
  clear_has_max_bytes_total();
}
inline ::google::protobuf::uint64 PrecacheConfigurationSettings::max_bytes_total() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheConfigurationSettings.max_bytes_total)
  return max_bytes_total_;
}
inline void PrecacheConfigurationSettings::set_max_bytes_total(::google::protobuf::uint64 value) {
  set_has_max_bytes_total();
  max_bytes_total_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheConfigurationSettings.max_bytes_total)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace precache

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_precache_2eproto__INCLUDED
