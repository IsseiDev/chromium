// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: precache.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "precache.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace precache {

void protobuf_ShutdownFile_precache_2eproto() {
  delete PrecacheResource::default_instance_;
  delete PrecacheManifest::default_instance_;
  delete PrecacheExperiments::default_instance_;
  delete PrecacheResourceSelection::default_instance_;
  delete PrecacheConfigurationSettings::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_precache_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_precache_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  PrecacheResource::default_instance_ = new PrecacheResource();
  PrecacheManifest::default_instance_ = new PrecacheManifest();
  PrecacheExperiments::default_instance_ = new PrecacheExperiments();
  PrecacheResourceSelection::default_instance_ = new PrecacheResourceSelection();
  PrecacheConfigurationSettings::default_instance_ = new PrecacheConfigurationSettings();
  PrecacheResource::default_instance_->InitAsDefaultInstance();
  PrecacheManifest::default_instance_->InitAsDefaultInstance();
  PrecacheExperiments::default_instance_->InitAsDefaultInstance();
  PrecacheResourceSelection::default_instance_->InitAsDefaultInstance();
  PrecacheConfigurationSettings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_precache_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_precache_2eproto_once_);
void protobuf_AddDesc_precache_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_precache_2eproto_once_,
                 &protobuf_AddDesc_precache_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_precache_2eproto {
  StaticDescriptorInitializer_precache_2eproto() {
    protobuf_AddDesc_precache_2eproto();
  }
} static_descriptor_initializer_precache_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForPrecacheResource(
    PrecacheResource* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrecacheResource::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrecacheResource::PrecacheResource()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:precache.PrecacheResource)
}

void PrecacheResource::InitAsDefaultInstance() {
}

PrecacheResource::PrecacheResource(const PrecacheResource& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:precache.PrecacheResource)
}

void PrecacheResource::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrecacheResource::~PrecacheResource() {
  // @@protoc_insertion_point(destructor:precache.PrecacheResource)
  SharedDtor();
}

void PrecacheResource::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PrecacheResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PrecacheResource& PrecacheResource::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_precache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_precache_2eproto();
#endif
  return *default_instance_;
}

PrecacheResource* PrecacheResource::default_instance_ = NULL;

PrecacheResource* PrecacheResource::New(::google::protobuf::Arena* arena) const {
  PrecacheResource* n = new PrecacheResource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrecacheResource::Clear() {
// @@protoc_insertion_point(message_clear_start:precache.PrecacheResource)
  if (has_url()) {
    url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PrecacheResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPrecacheResource, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:precache.PrecacheResource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:precache.PrecacheResource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:precache.PrecacheResource)
  return false;
#undef DO_
}

void PrecacheResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:precache.PrecacheResource)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:precache.PrecacheResource)
}

int PrecacheResource::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:precache.PrecacheResource)
  int total_size = 0;

  // optional string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrecacheResource::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PrecacheResource*>(&from));
}

void PrecacheResource::MergeFrom(const PrecacheResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:precache.PrecacheResource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PrecacheResource::CopyFrom(const PrecacheResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:precache.PrecacheResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrecacheResource::IsInitialized() const {

  return true;
}

void PrecacheResource::Swap(PrecacheResource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrecacheResource::InternalSwap(PrecacheResource* other) {
  url_.Swap(&other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PrecacheResource::GetTypeName() const {
  return "precache.PrecacheResource";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrecacheResource

// optional string url = 1;
bool PrecacheResource::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PrecacheResource::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void PrecacheResource::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void PrecacheResource::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& PrecacheResource::url() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheResource.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrecacheResource::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:precache.PrecacheResource.url)
}
 void PrecacheResource::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:precache.PrecacheResource.url)
}
 void PrecacheResource::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:precache.PrecacheResource.url)
}
 ::std::string* PrecacheResource::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:precache.PrecacheResource.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PrecacheResource::release_url() {
  // @@protoc_insertion_point(field_release:precache.PrecacheResource.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrecacheResource::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:precache.PrecacheResource.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPrecacheManifest(
    PrecacheManifest* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrecacheManifest::kResourceFieldNumber;
const int PrecacheManifest::kExperimentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrecacheManifest::PrecacheManifest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:precache.PrecacheManifest)
}

void PrecacheManifest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  experiments_ = const_cast< ::precache::PrecacheExperiments*>(
      ::precache::PrecacheExperiments::internal_default_instance());
#else
  experiments_ = const_cast< ::precache::PrecacheExperiments*>(&::precache::PrecacheExperiments::default_instance());
#endif
}

PrecacheManifest::PrecacheManifest(const PrecacheManifest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:precache.PrecacheManifest)
}

void PrecacheManifest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  experiments_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrecacheManifest::~PrecacheManifest() {
  // @@protoc_insertion_point(destructor:precache.PrecacheManifest)
  SharedDtor();
}

void PrecacheManifest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete experiments_;
  }
}

void PrecacheManifest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PrecacheManifest& PrecacheManifest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_precache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_precache_2eproto();
#endif
  return *default_instance_;
}

PrecacheManifest* PrecacheManifest::default_instance_ = NULL;

PrecacheManifest* PrecacheManifest::New(::google::protobuf::Arena* arena) const {
  PrecacheManifest* n = new PrecacheManifest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrecacheManifest::Clear() {
// @@protoc_insertion_point(message_clear_start:precache.PrecacheManifest)
  if (has_experiments()) {
    if (experiments_ != NULL) experiments_->::precache::PrecacheExperiments::Clear();
  }
  resource_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PrecacheManifest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPrecacheManifest, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:precache.PrecacheManifest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .precache.PrecacheResource resource = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_resource()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_resource;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_experiments;
        break;
      }

      // optional .precache.PrecacheExperiments experiments = 2;
      case 2: {
        if (tag == 18) {
         parse_experiments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experiments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:precache.PrecacheManifest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:precache.PrecacheManifest)
  return false;
#undef DO_
}

void PrecacheManifest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:precache.PrecacheManifest)
  // repeated .precache.PrecacheResource resource = 1;
  for (unsigned int i = 0, n = this->resource_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->resource(i), output);
  }

  // optional .precache.PrecacheExperiments experiments = 2;
  if (has_experiments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->experiments_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:precache.PrecacheManifest)
}

int PrecacheManifest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:precache.PrecacheManifest)
  int total_size = 0;

  // optional .precache.PrecacheExperiments experiments = 2;
  if (has_experiments()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->experiments_);
  }

  // repeated .precache.PrecacheResource resource = 1;
  total_size += 1 * this->resource_size();
  for (int i = 0; i < this->resource_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrecacheManifest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PrecacheManifest*>(&from));
}

void PrecacheManifest::MergeFrom(const PrecacheManifest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:precache.PrecacheManifest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  resource_.MergeFrom(from.resource_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_experiments()) {
      mutable_experiments()->::precache::PrecacheExperiments::MergeFrom(from.experiments());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PrecacheManifest::CopyFrom(const PrecacheManifest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:precache.PrecacheManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrecacheManifest::IsInitialized() const {

  return true;
}

void PrecacheManifest::Swap(PrecacheManifest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrecacheManifest::InternalSwap(PrecacheManifest* other) {
  resource_.UnsafeArenaSwap(&other->resource_);
  std::swap(experiments_, other->experiments_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PrecacheManifest::GetTypeName() const {
  return "precache.PrecacheManifest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrecacheManifest

// repeated .precache.PrecacheResource resource = 1;
int PrecacheManifest::resource_size() const {
  return resource_.size();
}
void PrecacheManifest::clear_resource() {
  resource_.Clear();
}
const ::precache::PrecacheResource& PrecacheManifest::resource(int index) const {
  // @@protoc_insertion_point(field_get:precache.PrecacheManifest.resource)
  return resource_.Get(index);
}
::precache::PrecacheResource* PrecacheManifest::mutable_resource(int index) {
  // @@protoc_insertion_point(field_mutable:precache.PrecacheManifest.resource)
  return resource_.Mutable(index);
}
::precache::PrecacheResource* PrecacheManifest::add_resource() {
  // @@protoc_insertion_point(field_add:precache.PrecacheManifest.resource)
  return resource_.Add();
}
::google::protobuf::RepeatedPtrField< ::precache::PrecacheResource >*
PrecacheManifest::mutable_resource() {
  // @@protoc_insertion_point(field_mutable_list:precache.PrecacheManifest.resource)
  return &resource_;
}
const ::google::protobuf::RepeatedPtrField< ::precache::PrecacheResource >&
PrecacheManifest::resource() const {
  // @@protoc_insertion_point(field_list:precache.PrecacheManifest.resource)
  return resource_;
}

// optional .precache.PrecacheExperiments experiments = 2;
bool PrecacheManifest::has_experiments() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PrecacheManifest::set_has_experiments() {
  _has_bits_[0] |= 0x00000002u;
}
void PrecacheManifest::clear_has_experiments() {
  _has_bits_[0] &= ~0x00000002u;
}
void PrecacheManifest::clear_experiments() {
  if (experiments_ != NULL) experiments_->::precache::PrecacheExperiments::Clear();
  clear_has_experiments();
}
const ::precache::PrecacheExperiments& PrecacheManifest::experiments() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheManifest.experiments)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return experiments_ != NULL ? *experiments_ : *default_instance().experiments_;
#else
  return experiments_ != NULL ? *experiments_ : *default_instance_->experiments_;
#endif
}
::precache::PrecacheExperiments* PrecacheManifest::mutable_experiments() {
  set_has_experiments();
  if (experiments_ == NULL) {
    experiments_ = new ::precache::PrecacheExperiments;
  }
  // @@protoc_insertion_point(field_mutable:precache.PrecacheManifest.experiments)
  return experiments_;
}
::precache::PrecacheExperiments* PrecacheManifest::release_experiments() {
  // @@protoc_insertion_point(field_release:precache.PrecacheManifest.experiments)
  clear_has_experiments();
  ::precache::PrecacheExperiments* temp = experiments_;
  experiments_ = NULL;
  return temp;
}
void PrecacheManifest::set_allocated_experiments(::precache::PrecacheExperiments* experiments) {
  delete experiments_;
  experiments_ = experiments;
  if (experiments) {
    set_has_experiments();
  } else {
    clear_has_experiments();
  }
  // @@protoc_insertion_point(field_set_allocated:precache.PrecacheManifest.experiments)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPrecacheExperiments(
    PrecacheExperiments* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrecacheExperiments::kResourcesByExperimentGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrecacheExperiments::PrecacheExperiments()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:precache.PrecacheExperiments)
}

void PrecacheExperiments::InitAsDefaultInstance() {
}

PrecacheExperiments::PrecacheExperiments(const PrecacheExperiments& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:precache.PrecacheExperiments)
}

void PrecacheExperiments::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrecacheExperiments::~PrecacheExperiments() {
  // @@protoc_insertion_point(destructor:precache.PrecacheExperiments)
  SharedDtor();
}

void PrecacheExperiments::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PrecacheExperiments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PrecacheExperiments& PrecacheExperiments::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_precache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_precache_2eproto();
#endif
  return *default_instance_;
}

PrecacheExperiments* PrecacheExperiments::default_instance_ = NULL;

PrecacheExperiments* PrecacheExperiments::New(::google::protobuf::Arena* arena) const {
  PrecacheExperiments* n = new PrecacheExperiments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrecacheExperiments::Clear() {
// @@protoc_insertion_point(message_clear_start:precache.PrecacheExperiments)
  resources_by_experiment_group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PrecacheExperiments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPrecacheExperiments, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:precache.PrecacheExperiments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<fixed32, .precache.PrecacheResourceSelection> resources_by_experiment_group = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_resources_by_experiment_group:
          ::google::protobuf::scoped_ptr<PrecacheExperiments_ResourcesByExperimentGroupEntry> entry(resources_by_experiment_group_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_resources_by_experiment_group())[entry->key()].Swap(entry->mutable_value());
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_resources_by_experiment_group;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:precache.PrecacheExperiments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:precache.PrecacheExperiments)
  return false;
#undef DO_
}

void PrecacheExperiments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:precache.PrecacheExperiments)
  // map<fixed32, .precache.PrecacheResourceSelection> resources_by_experiment_group = 1;
  {
    ::google::protobuf::scoped_ptr<PrecacheExperiments_ResourcesByExperimentGroupEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::precache::PrecacheResourceSelection >::const_iterator
        it = this->resources_by_experiment_group().begin();
        it != this->resources_by_experiment_group().end(); ++it) {
      entry.reset(resources_by_experiment_group_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
          1, *entry, output);
    }
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:precache.PrecacheExperiments)
}

int PrecacheExperiments::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:precache.PrecacheExperiments)
  int total_size = 0;

  // map<fixed32, .precache.PrecacheResourceSelection> resources_by_experiment_group = 1;
  total_size += 1 * this->resources_by_experiment_group_size();
  {
    ::google::protobuf::scoped_ptr<PrecacheExperiments_ResourcesByExperimentGroupEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::precache::PrecacheResourceSelection >::const_iterator
        it = this->resources_by_experiment_group().begin();
        it != this->resources_by_experiment_group().end(); ++it) {
      entry.reset(resources_by_experiment_group_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrecacheExperiments::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PrecacheExperiments*>(&from));
}

void PrecacheExperiments::MergeFrom(const PrecacheExperiments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:precache.PrecacheExperiments)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  resources_by_experiment_group_.MergeFrom(from.resources_by_experiment_group_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PrecacheExperiments::CopyFrom(const PrecacheExperiments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:precache.PrecacheExperiments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrecacheExperiments::IsInitialized() const {

  return true;
}

void PrecacheExperiments::Swap(PrecacheExperiments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrecacheExperiments::InternalSwap(PrecacheExperiments* other) {
  resources_by_experiment_group_.Swap(&other->resources_by_experiment_group_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PrecacheExperiments::GetTypeName() const {
  return "precache.PrecacheExperiments";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrecacheExperiments

// map<fixed32, .precache.PrecacheResourceSelection> resources_by_experiment_group = 1;
int PrecacheExperiments::resources_by_experiment_group_size() const {
  return resources_by_experiment_group_.size();
}
void PrecacheExperiments::clear_resources_by_experiment_group() {
  resources_by_experiment_group_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::precache::PrecacheResourceSelection >&
PrecacheExperiments::resources_by_experiment_group() const {
  // @@protoc_insertion_point(field_map:precache.PrecacheExperiments.resources_by_experiment_group)
  return resources_by_experiment_group_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::precache::PrecacheResourceSelection >*
PrecacheExperiments::mutable_resources_by_experiment_group() {
  // @@protoc_insertion_point(field_mutable_map:precache.PrecacheExperiments.resources_by_experiment_group)
  return resources_by_experiment_group_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPrecacheResourceSelection(
    PrecacheResourceSelection* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrecacheResourceSelection::kBitsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrecacheResourceSelection::PrecacheResourceSelection()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:precache.PrecacheResourceSelection)
}

void PrecacheResourceSelection::InitAsDefaultInstance() {
}

PrecacheResourceSelection::PrecacheResourceSelection(const PrecacheResourceSelection& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:precache.PrecacheResourceSelection)
}

void PrecacheResourceSelection::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitset_ = GOOGLE_ULONGLONG(18446744073709551615);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrecacheResourceSelection::~PrecacheResourceSelection() {
  // @@protoc_insertion_point(destructor:precache.PrecacheResourceSelection)
  SharedDtor();
}

void PrecacheResourceSelection::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PrecacheResourceSelection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PrecacheResourceSelection& PrecacheResourceSelection::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_precache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_precache_2eproto();
#endif
  return *default_instance_;
}

PrecacheResourceSelection* PrecacheResourceSelection::default_instance_ = NULL;

PrecacheResourceSelection* PrecacheResourceSelection::New(::google::protobuf::Arena* arena) const {
  PrecacheResourceSelection* n = new PrecacheResourceSelection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrecacheResourceSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:precache.PrecacheResourceSelection)
  bitset_ = GOOGLE_ULONGLONG(18446744073709551615);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PrecacheResourceSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPrecacheResourceSelection, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:precache.PrecacheResourceSelection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 bitset = 1 [default = 18446744073709551615];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &bitset_)));
          set_has_bitset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:precache.PrecacheResourceSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:precache.PrecacheResourceSelection)
  return false;
#undef DO_
}

void PrecacheResourceSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:precache.PrecacheResourceSelection)
  // optional fixed64 bitset = 1 [default = 18446744073709551615];
  if (has_bitset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->bitset(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:precache.PrecacheResourceSelection)
}

int PrecacheResourceSelection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:precache.PrecacheResourceSelection)
  int total_size = 0;

  // optional fixed64 bitset = 1 [default = 18446744073709551615];
  if (has_bitset()) {
    total_size += 1 + 8;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrecacheResourceSelection::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PrecacheResourceSelection*>(&from));
}

void PrecacheResourceSelection::MergeFrom(const PrecacheResourceSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:precache.PrecacheResourceSelection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bitset()) {
      set_bitset(from.bitset());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PrecacheResourceSelection::CopyFrom(const PrecacheResourceSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:precache.PrecacheResourceSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrecacheResourceSelection::IsInitialized() const {

  return true;
}

void PrecacheResourceSelection::Swap(PrecacheResourceSelection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrecacheResourceSelection::InternalSwap(PrecacheResourceSelection* other) {
  std::swap(bitset_, other->bitset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PrecacheResourceSelection::GetTypeName() const {
  return "precache.PrecacheResourceSelection";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrecacheResourceSelection

// optional fixed64 bitset = 1 [default = 18446744073709551615];
bool PrecacheResourceSelection::has_bitset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PrecacheResourceSelection::set_has_bitset() {
  _has_bits_[0] |= 0x00000001u;
}
void PrecacheResourceSelection::clear_has_bitset() {
  _has_bits_[0] &= ~0x00000001u;
}
void PrecacheResourceSelection::clear_bitset() {
  bitset_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_bitset();
}
 ::google::protobuf::uint64 PrecacheResourceSelection::bitset() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheResourceSelection.bitset)
  return bitset_;
}
 void PrecacheResourceSelection::set_bitset(::google::protobuf::uint64 value) {
  set_has_bitset();
  bitset_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheResourceSelection.bitset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPrecacheConfigurationSettings(
    PrecacheConfigurationSettings* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrecacheConfigurationSettings::kTopSitesCountFieldNumber;
const int PrecacheConfigurationSettings::kForcedSiteFieldNumber;
const int PrecacheConfigurationSettings::kTopResourcesCountFieldNumber;
const int PrecacheConfigurationSettings::kMaxBytesPerResourceFieldNumber;
const int PrecacheConfigurationSettings::kMaxBytesTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrecacheConfigurationSettings::PrecacheConfigurationSettings()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:precache.PrecacheConfigurationSettings)
}

void PrecacheConfigurationSettings::InitAsDefaultInstance() {
}

PrecacheConfigurationSettings::PrecacheConfigurationSettings(const PrecacheConfigurationSettings& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:precache.PrecacheConfigurationSettings)
}

void PrecacheConfigurationSettings::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  top_sites_count_ = GOOGLE_LONGLONG(100);
  top_resources_count_ = 100;
  max_bytes_per_resource_ = GOOGLE_ULONGLONG(500000);
  max_bytes_total_ = GOOGLE_ULONGLONG(10000000);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrecacheConfigurationSettings::~PrecacheConfigurationSettings() {
  // @@protoc_insertion_point(destructor:precache.PrecacheConfigurationSettings)
  SharedDtor();
}

void PrecacheConfigurationSettings::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PrecacheConfigurationSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PrecacheConfigurationSettings& PrecacheConfigurationSettings::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_precache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_precache_2eproto();
#endif
  return *default_instance_;
}

PrecacheConfigurationSettings* PrecacheConfigurationSettings::default_instance_ = NULL;

PrecacheConfigurationSettings* PrecacheConfigurationSettings::New(::google::protobuf::Arena* arena) const {
  PrecacheConfigurationSettings* n = new PrecacheConfigurationSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrecacheConfigurationSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:precache.PrecacheConfigurationSettings)
  if (_has_bits_[0 / 32] & 29u) {
    top_sites_count_ = GOOGLE_LONGLONG(100);
    top_resources_count_ = 100;
    max_bytes_per_resource_ = GOOGLE_ULONGLONG(500000);
    max_bytes_total_ = GOOGLE_ULONGLONG(10000000);
  }
  forced_site_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PrecacheConfigurationSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPrecacheConfigurationSettings, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:precache.PrecacheConfigurationSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 top_sites_count = 1 [default = 100];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &top_sites_count_)));
          set_has_top_sites_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_forced_site;
        break;
      }

      // repeated string forced_site = 2;
      case 2: {
        if (tag == 18) {
         parse_forced_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_forced_site()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_forced_site;
        if (input->ExpectTag(24)) goto parse_top_resources_count;
        break;
      }

      // optional int32 top_resources_count = 3 [default = 100];
      case 3: {
        if (tag == 24) {
         parse_top_resources_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_resources_count_)));
          set_has_top_resources_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_bytes_per_resource;
        break;
      }

      // optional uint64 max_bytes_per_resource = 4 [default = 500000];
      case 4: {
        if (tag == 32) {
         parse_max_bytes_per_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_bytes_per_resource_)));
          set_has_max_bytes_per_resource();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_bytes_total;
        break;
      }

      // optional uint64 max_bytes_total = 5 [default = 10000000];
      case 5: {
        if (tag == 40) {
         parse_max_bytes_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_bytes_total_)));
          set_has_max_bytes_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:precache.PrecacheConfigurationSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:precache.PrecacheConfigurationSettings)
  return false;
#undef DO_
}

void PrecacheConfigurationSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:precache.PrecacheConfigurationSettings)
  // optional int64 top_sites_count = 1 [default = 100];
  if (has_top_sites_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->top_sites_count(), output);
  }

  // repeated string forced_site = 2;
  for (int i = 0; i < this->forced_site_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->forced_site(i), output);
  }

  // optional int32 top_resources_count = 3 [default = 100];
  if (has_top_resources_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->top_resources_count(), output);
  }

  // optional uint64 max_bytes_per_resource = 4 [default = 500000];
  if (has_max_bytes_per_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_bytes_per_resource(), output);
  }

  // optional uint64 max_bytes_total = 5 [default = 10000000];
  if (has_max_bytes_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->max_bytes_total(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:precache.PrecacheConfigurationSettings)
}

int PrecacheConfigurationSettings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:precache.PrecacheConfigurationSettings)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 29u) {
    // optional int64 top_sites_count = 1 [default = 100];
    if (has_top_sites_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->top_sites_count());
    }

    // optional int32 top_resources_count = 3 [default = 100];
    if (has_top_resources_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_resources_count());
    }

    // optional uint64 max_bytes_per_resource = 4 [default = 500000];
    if (has_max_bytes_per_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_bytes_per_resource());
    }

    // optional uint64 max_bytes_total = 5 [default = 10000000];
    if (has_max_bytes_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_bytes_total());
    }

  }
  // repeated string forced_site = 2;
  total_size += 1 * this->forced_site_size();
  for (int i = 0; i < this->forced_site_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->forced_site(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrecacheConfigurationSettings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PrecacheConfigurationSettings*>(&from));
}

void PrecacheConfigurationSettings::MergeFrom(const PrecacheConfigurationSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:precache.PrecacheConfigurationSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  forced_site_.MergeFrom(from.forced_site_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_sites_count()) {
      set_top_sites_count(from.top_sites_count());
    }
    if (from.has_top_resources_count()) {
      set_top_resources_count(from.top_resources_count());
    }
    if (from.has_max_bytes_per_resource()) {
      set_max_bytes_per_resource(from.max_bytes_per_resource());
    }
    if (from.has_max_bytes_total()) {
      set_max_bytes_total(from.max_bytes_total());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PrecacheConfigurationSettings::CopyFrom(const PrecacheConfigurationSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:precache.PrecacheConfigurationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrecacheConfigurationSettings::IsInitialized() const {

  return true;
}

void PrecacheConfigurationSettings::Swap(PrecacheConfigurationSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrecacheConfigurationSettings::InternalSwap(PrecacheConfigurationSettings* other) {
  std::swap(top_sites_count_, other->top_sites_count_);
  forced_site_.UnsafeArenaSwap(&other->forced_site_);
  std::swap(top_resources_count_, other->top_resources_count_);
  std::swap(max_bytes_per_resource_, other->max_bytes_per_resource_);
  std::swap(max_bytes_total_, other->max_bytes_total_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PrecacheConfigurationSettings::GetTypeName() const {
  return "precache.PrecacheConfigurationSettings";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrecacheConfigurationSettings

// optional int64 top_sites_count = 1 [default = 100];
bool PrecacheConfigurationSettings::has_top_sites_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PrecacheConfigurationSettings::set_has_top_sites_count() {
  _has_bits_[0] |= 0x00000001u;
}
void PrecacheConfigurationSettings::clear_has_top_sites_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void PrecacheConfigurationSettings::clear_top_sites_count() {
  top_sites_count_ = GOOGLE_LONGLONG(100);
  clear_has_top_sites_count();
}
 ::google::protobuf::int64 PrecacheConfigurationSettings::top_sites_count() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheConfigurationSettings.top_sites_count)
  return top_sites_count_;
}
 void PrecacheConfigurationSettings::set_top_sites_count(::google::protobuf::int64 value) {
  set_has_top_sites_count();
  top_sites_count_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheConfigurationSettings.top_sites_count)
}

// repeated string forced_site = 2;
int PrecacheConfigurationSettings::forced_site_size() const {
  return forced_site_.size();
}
void PrecacheConfigurationSettings::clear_forced_site() {
  forced_site_.Clear();
}
 const ::std::string& PrecacheConfigurationSettings::forced_site(int index) const {
  // @@protoc_insertion_point(field_get:precache.PrecacheConfigurationSettings.forced_site)
  return forced_site_.Get(index);
}
 ::std::string* PrecacheConfigurationSettings::mutable_forced_site(int index) {
  // @@protoc_insertion_point(field_mutable:precache.PrecacheConfigurationSettings.forced_site)
  return forced_site_.Mutable(index);
}
 void PrecacheConfigurationSettings::set_forced_site(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:precache.PrecacheConfigurationSettings.forced_site)
  forced_site_.Mutable(index)->assign(value);
}
 void PrecacheConfigurationSettings::set_forced_site(int index, const char* value) {
  forced_site_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:precache.PrecacheConfigurationSettings.forced_site)
}
 void PrecacheConfigurationSettings::set_forced_site(int index, const char* value, size_t size) {
  forced_site_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:precache.PrecacheConfigurationSettings.forced_site)
}
 ::std::string* PrecacheConfigurationSettings::add_forced_site() {
  // @@protoc_insertion_point(field_add_mutable:precache.PrecacheConfigurationSettings.forced_site)
  return forced_site_.Add();
}
 void PrecacheConfigurationSettings::add_forced_site(const ::std::string& value) {
  forced_site_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:precache.PrecacheConfigurationSettings.forced_site)
}
 void PrecacheConfigurationSettings::add_forced_site(const char* value) {
  forced_site_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:precache.PrecacheConfigurationSettings.forced_site)
}
 void PrecacheConfigurationSettings::add_forced_site(const char* value, size_t size) {
  forced_site_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:precache.PrecacheConfigurationSettings.forced_site)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PrecacheConfigurationSettings::forced_site() const {
  // @@protoc_insertion_point(field_list:precache.PrecacheConfigurationSettings.forced_site)
  return forced_site_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PrecacheConfigurationSettings::mutable_forced_site() {
  // @@protoc_insertion_point(field_mutable_list:precache.PrecacheConfigurationSettings.forced_site)
  return &forced_site_;
}

// optional int32 top_resources_count = 3 [default = 100];
bool PrecacheConfigurationSettings::has_top_resources_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PrecacheConfigurationSettings::set_has_top_resources_count() {
  _has_bits_[0] |= 0x00000004u;
}
void PrecacheConfigurationSettings::clear_has_top_resources_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void PrecacheConfigurationSettings::clear_top_resources_count() {
  top_resources_count_ = 100;
  clear_has_top_resources_count();
}
 ::google::protobuf::int32 PrecacheConfigurationSettings::top_resources_count() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheConfigurationSettings.top_resources_count)
  return top_resources_count_;
}
 void PrecacheConfigurationSettings::set_top_resources_count(::google::protobuf::int32 value) {
  set_has_top_resources_count();
  top_resources_count_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheConfigurationSettings.top_resources_count)
}

// optional uint64 max_bytes_per_resource = 4 [default = 500000];
bool PrecacheConfigurationSettings::has_max_bytes_per_resource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PrecacheConfigurationSettings::set_has_max_bytes_per_resource() {
  _has_bits_[0] |= 0x00000008u;
}
void PrecacheConfigurationSettings::clear_has_max_bytes_per_resource() {
  _has_bits_[0] &= ~0x00000008u;
}
void PrecacheConfigurationSettings::clear_max_bytes_per_resource() {
  max_bytes_per_resource_ = GOOGLE_ULONGLONG(500000);
  clear_has_max_bytes_per_resource();
}
 ::google::protobuf::uint64 PrecacheConfigurationSettings::max_bytes_per_resource() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheConfigurationSettings.max_bytes_per_resource)
  return max_bytes_per_resource_;
}
 void PrecacheConfigurationSettings::set_max_bytes_per_resource(::google::protobuf::uint64 value) {
  set_has_max_bytes_per_resource();
  max_bytes_per_resource_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheConfigurationSettings.max_bytes_per_resource)
}

// optional uint64 max_bytes_total = 5 [default = 10000000];
bool PrecacheConfigurationSettings::has_max_bytes_total() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PrecacheConfigurationSettings::set_has_max_bytes_total() {
  _has_bits_[0] |= 0x00000010u;
}
void PrecacheConfigurationSettings::clear_has_max_bytes_total() {
  _has_bits_[0] &= ~0x00000010u;
}
void PrecacheConfigurationSettings::clear_max_bytes_total() {
  max_bytes_total_ = GOOGLE_ULONGLONG(10000000);
  clear_has_max_bytes_total();
}
 ::google::protobuf::uint64 PrecacheConfigurationSettings::max_bytes_total() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheConfigurationSettings.max_bytes_total)
  return max_bytes_total_;
}
 void PrecacheConfigurationSettings::set_max_bytes_total(::google::protobuf::uint64 value) {
  set_has_max_bytes_total();
  max_bytes_total_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheConfigurationSettings.max_bytes_total)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace precache

// @@protoc_insertion_point(global_scope)
