// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unfinished_work.proto

#ifndef PROTOBUF_unfinished_5fwork_2eproto__INCLUDED
#define PROTOBUF_unfinished_5fwork_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "precache.pb.h"
// @@protoc_insertion_point(includes)

namespace precache {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_unfinished_5fwork_2eproto();
void protobuf_AssignDesc_unfinished_5fwork_2eproto();
void protobuf_ShutdownFile_unfinished_5fwork_2eproto();

class PrecacheManifestURL;
class PrecacheUnfinishedWork;
class TopHost;

// ===================================================================

class TopHost : public ::google::protobuf::MessageLite {
 public:
  TopHost();
  virtual ~TopHost();

  TopHost(const TopHost& from);

  inline TopHost& operator=(const TopHost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const TopHost& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TopHost* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(TopHost* other);

  // implements Message ----------------------------------------------

  inline TopHost* New() const { return New(NULL); }

  TopHost* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TopHost& from);
  void MergeFrom(const TopHost& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hostname = 1;
  bool has_hostname() const;
  void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // @@protoc_insertion_point(class_scope:precache.TopHost)
 private:
  inline void set_has_hostname();
  inline void clear_has_hostname();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_unfinished_5fwork_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_unfinished_5fwork_2eproto();
  #endif
  friend void protobuf_AssignDesc_unfinished_5fwork_2eproto();
  friend void protobuf_ShutdownFile_unfinished_5fwork_2eproto();

  void InitAsDefaultInstance();
  static TopHost* default_instance_;
};
// -------------------------------------------------------------------

class PrecacheManifestURL : public ::google::protobuf::MessageLite {
 public:
  PrecacheManifestURL();
  virtual ~PrecacheManifestURL();

  PrecacheManifestURL(const PrecacheManifestURL& from);

  inline PrecacheManifestURL& operator=(const PrecacheManifestURL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const PrecacheManifestURL& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PrecacheManifestURL* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PrecacheManifestURL* other);

  // implements Message ----------------------------------------------

  inline PrecacheManifestURL* New() const { return New(NULL); }

  PrecacheManifestURL* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PrecacheManifestURL& from);
  void MergeFrom(const PrecacheManifestURL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrecacheManifestURL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:precache.PrecacheManifestURL)
 private:
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_unfinished_5fwork_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_unfinished_5fwork_2eproto();
  #endif
  friend void protobuf_AssignDesc_unfinished_5fwork_2eproto();
  friend void protobuf_ShutdownFile_unfinished_5fwork_2eproto();

  void InitAsDefaultInstance();
  static PrecacheManifestURL* default_instance_;
};
// -------------------------------------------------------------------

class PrecacheUnfinishedWork : public ::google::protobuf::MessageLite {
 public:
  PrecacheUnfinishedWork();
  virtual ~PrecacheUnfinishedWork();

  PrecacheUnfinishedWork(const PrecacheUnfinishedWork& from);

  inline PrecacheUnfinishedWork& operator=(const PrecacheUnfinishedWork& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const PrecacheUnfinishedWork& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PrecacheUnfinishedWork* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PrecacheUnfinishedWork* other);

  // implements Message ----------------------------------------------

  inline PrecacheUnfinishedWork* New() const { return New(NULL); }

  PrecacheUnfinishedWork* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PrecacheUnfinishedWork& from);
  void MergeFrom(const PrecacheUnfinishedWork& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrecacheUnfinishedWork* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .precache.TopHost top_host = 1;
  int top_host_size() const;
  void clear_top_host();
  static const int kTopHostFieldNumber = 1;
  const ::precache::TopHost& top_host(int index) const;
  ::precache::TopHost* mutable_top_host(int index);
  ::precache::TopHost* add_top_host();
  ::google::protobuf::RepeatedPtrField< ::precache::TopHost >*
      mutable_top_host();
  const ::google::protobuf::RepeatedPtrField< ::precache::TopHost >&
      top_host() const;

  // optional .precache.PrecacheConfigurationSettings config_settings = 2;
  bool has_config_settings() const;
  void clear_config_settings();
  static const int kConfigSettingsFieldNumber = 2;
  const ::precache::PrecacheConfigurationSettings& config_settings() const;
  ::precache::PrecacheConfigurationSettings* mutable_config_settings();
  ::precache::PrecacheConfigurationSettings* release_config_settings();
  void set_allocated_config_settings(::precache::PrecacheConfigurationSettings* config_settings);

  // repeated .precache.PrecacheManifestURL manifest = 3;
  int manifest_size() const;
  void clear_manifest();
  static const int kManifestFieldNumber = 3;
  const ::precache::PrecacheManifestURL& manifest(int index) const;
  ::precache::PrecacheManifestURL* mutable_manifest(int index);
  ::precache::PrecacheManifestURL* add_manifest();
  ::google::protobuf::RepeatedPtrField< ::precache::PrecacheManifestURL >*
      mutable_manifest();
  const ::google::protobuf::RepeatedPtrField< ::precache::PrecacheManifestURL >&
      manifest() const;

  // repeated .precache.PrecacheResource resource = 4;
  int resource_size() const;
  void clear_resource();
  static const int kResourceFieldNumber = 4;
  const ::precache::PrecacheResource& resource(int index) const;
  ::precache::PrecacheResource* mutable_resource(int index);
  ::precache::PrecacheResource* add_resource();
  ::google::protobuf::RepeatedPtrField< ::precache::PrecacheResource >*
      mutable_resource();
  const ::google::protobuf::RepeatedPtrField< ::precache::PrecacheResource >&
      resource() const;

  // optional uint64 total_bytes = 5;
  bool has_total_bytes() const;
  void clear_total_bytes();
  static const int kTotalBytesFieldNumber = 5;
  ::google::protobuf::uint64 total_bytes() const;
  void set_total_bytes(::google::protobuf::uint64 value);

  // optional uint64 network_bytes = 6;
  bool has_network_bytes() const;
  void clear_network_bytes();
  static const int kNetworkBytesFieldNumber = 6;
  ::google::protobuf::uint64 network_bytes() const;
  void set_network_bytes(::google::protobuf::uint64 value);

  // optional uint64 num_manifest_urls = 7;
  bool has_num_manifest_urls() const;
  void clear_num_manifest_urls();
  static const int kNumManifestUrlsFieldNumber = 7;
  ::google::protobuf::uint64 num_manifest_urls() const;
  void set_num_manifest_urls(::google::protobuf::uint64 value);

  // optional int64 start_time = 8;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 8;
  ::google::protobuf::int64 start_time() const;
  void set_start_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:precache.PrecacheUnfinishedWork)
 private:
  inline void set_has_config_settings();
  inline void clear_has_config_settings();
  inline void set_has_total_bytes();
  inline void clear_has_total_bytes();
  inline void set_has_network_bytes();
  inline void clear_has_network_bytes();
  inline void set_has_num_manifest_urls();
  inline void clear_has_num_manifest_urls();
  inline void set_has_start_time();
  inline void clear_has_start_time();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::precache::TopHost > top_host_;
  ::precache::PrecacheConfigurationSettings* config_settings_;
  ::google::protobuf::RepeatedPtrField< ::precache::PrecacheManifestURL > manifest_;
  ::google::protobuf::RepeatedPtrField< ::precache::PrecacheResource > resource_;
  ::google::protobuf::uint64 total_bytes_;
  ::google::protobuf::uint64 network_bytes_;
  ::google::protobuf::uint64 num_manifest_urls_;
  ::google::protobuf::int64 start_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_unfinished_5fwork_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_unfinished_5fwork_2eproto();
  #endif
  friend void protobuf_AssignDesc_unfinished_5fwork_2eproto();
  friend void protobuf_ShutdownFile_unfinished_5fwork_2eproto();

  void InitAsDefaultInstance();
  static PrecacheUnfinishedWork* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TopHost

// optional string hostname = 1;
inline bool TopHost::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopHost::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopHost::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopHost::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
inline const ::std::string& TopHost::hostname() const {
  // @@protoc_insertion_point(field_get:precache.TopHost.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopHost::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:precache.TopHost.hostname)
}
inline void TopHost::set_hostname(const char* value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:precache.TopHost.hostname)
}
inline void TopHost::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:precache.TopHost.hostname)
}
inline ::std::string* TopHost::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:precache.TopHost.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopHost::release_hostname() {
  // @@protoc_insertion_point(field_release:precache.TopHost.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopHost::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:precache.TopHost.hostname)
}

// -------------------------------------------------------------------

// PrecacheManifestURL

// optional string url = 1;
inline bool PrecacheManifestURL::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrecacheManifestURL::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrecacheManifestURL::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrecacheManifestURL::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& PrecacheManifestURL::url() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheManifestURL.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrecacheManifestURL::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:precache.PrecacheManifestURL.url)
}
inline void PrecacheManifestURL::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:precache.PrecacheManifestURL.url)
}
inline void PrecacheManifestURL::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:precache.PrecacheManifestURL.url)
}
inline ::std::string* PrecacheManifestURL::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:precache.PrecacheManifestURL.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrecacheManifestURL::release_url() {
  // @@protoc_insertion_point(field_release:precache.PrecacheManifestURL.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrecacheManifestURL::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:precache.PrecacheManifestURL.url)
}

// -------------------------------------------------------------------

// PrecacheUnfinishedWork

// repeated .precache.TopHost top_host = 1;
inline int PrecacheUnfinishedWork::top_host_size() const {
  return top_host_.size();
}
inline void PrecacheUnfinishedWork::clear_top_host() {
  top_host_.Clear();
}
inline const ::precache::TopHost& PrecacheUnfinishedWork::top_host(int index) const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.top_host)
  return top_host_.Get(index);
}
inline ::precache::TopHost* PrecacheUnfinishedWork::mutable_top_host(int index) {
  // @@protoc_insertion_point(field_mutable:precache.PrecacheUnfinishedWork.top_host)
  return top_host_.Mutable(index);
}
inline ::precache::TopHost* PrecacheUnfinishedWork::add_top_host() {
  // @@protoc_insertion_point(field_add:precache.PrecacheUnfinishedWork.top_host)
  return top_host_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::precache::TopHost >*
PrecacheUnfinishedWork::mutable_top_host() {
  // @@protoc_insertion_point(field_mutable_list:precache.PrecacheUnfinishedWork.top_host)
  return &top_host_;
}
inline const ::google::protobuf::RepeatedPtrField< ::precache::TopHost >&
PrecacheUnfinishedWork::top_host() const {
  // @@protoc_insertion_point(field_list:precache.PrecacheUnfinishedWork.top_host)
  return top_host_;
}

// optional .precache.PrecacheConfigurationSettings config_settings = 2;
inline bool PrecacheUnfinishedWork::has_config_settings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrecacheUnfinishedWork::set_has_config_settings() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrecacheUnfinishedWork::clear_has_config_settings() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrecacheUnfinishedWork::clear_config_settings() {
  if (config_settings_ != NULL) config_settings_->::precache::PrecacheConfigurationSettings::Clear();
  clear_has_config_settings();
}
inline const ::precache::PrecacheConfigurationSettings& PrecacheUnfinishedWork::config_settings() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.config_settings)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return config_settings_ != NULL ? *config_settings_ : *default_instance().config_settings_;
#else
  return config_settings_ != NULL ? *config_settings_ : *default_instance_->config_settings_;
#endif
}
inline ::precache::PrecacheConfigurationSettings* PrecacheUnfinishedWork::mutable_config_settings() {
  set_has_config_settings();
  if (config_settings_ == NULL) {
    config_settings_ = new ::precache::PrecacheConfigurationSettings;
  }
  // @@protoc_insertion_point(field_mutable:precache.PrecacheUnfinishedWork.config_settings)
  return config_settings_;
}
inline ::precache::PrecacheConfigurationSettings* PrecacheUnfinishedWork::release_config_settings() {
  // @@protoc_insertion_point(field_release:precache.PrecacheUnfinishedWork.config_settings)
  clear_has_config_settings();
  ::precache::PrecacheConfigurationSettings* temp = config_settings_;
  config_settings_ = NULL;
  return temp;
}
inline void PrecacheUnfinishedWork::set_allocated_config_settings(::precache::PrecacheConfigurationSettings* config_settings) {
  delete config_settings_;
  config_settings_ = config_settings;
  if (config_settings) {
    set_has_config_settings();
  } else {
    clear_has_config_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:precache.PrecacheUnfinishedWork.config_settings)
}

// repeated .precache.PrecacheManifestURL manifest = 3;
inline int PrecacheUnfinishedWork::manifest_size() const {
  return manifest_.size();
}
inline void PrecacheUnfinishedWork::clear_manifest() {
  manifest_.Clear();
}
inline const ::precache::PrecacheManifestURL& PrecacheUnfinishedWork::manifest(int index) const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.manifest)
  return manifest_.Get(index);
}
inline ::precache::PrecacheManifestURL* PrecacheUnfinishedWork::mutable_manifest(int index) {
  // @@protoc_insertion_point(field_mutable:precache.PrecacheUnfinishedWork.manifest)
  return manifest_.Mutable(index);
}
inline ::precache::PrecacheManifestURL* PrecacheUnfinishedWork::add_manifest() {
  // @@protoc_insertion_point(field_add:precache.PrecacheUnfinishedWork.manifest)
  return manifest_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::precache::PrecacheManifestURL >*
PrecacheUnfinishedWork::mutable_manifest() {
  // @@protoc_insertion_point(field_mutable_list:precache.PrecacheUnfinishedWork.manifest)
  return &manifest_;
}
inline const ::google::protobuf::RepeatedPtrField< ::precache::PrecacheManifestURL >&
PrecacheUnfinishedWork::manifest() const {
  // @@protoc_insertion_point(field_list:precache.PrecacheUnfinishedWork.manifest)
  return manifest_;
}

// repeated .precache.PrecacheResource resource = 4;
inline int PrecacheUnfinishedWork::resource_size() const {
  return resource_.size();
}
inline void PrecacheUnfinishedWork::clear_resource() {
  resource_.Clear();
}
inline const ::precache::PrecacheResource& PrecacheUnfinishedWork::resource(int index) const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.resource)
  return resource_.Get(index);
}
inline ::precache::PrecacheResource* PrecacheUnfinishedWork::mutable_resource(int index) {
  // @@protoc_insertion_point(field_mutable:precache.PrecacheUnfinishedWork.resource)
  return resource_.Mutable(index);
}
inline ::precache::PrecacheResource* PrecacheUnfinishedWork::add_resource() {
  // @@protoc_insertion_point(field_add:precache.PrecacheUnfinishedWork.resource)
  return resource_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::precache::PrecacheResource >*
PrecacheUnfinishedWork::mutable_resource() {
  // @@protoc_insertion_point(field_mutable_list:precache.PrecacheUnfinishedWork.resource)
  return &resource_;
}
inline const ::google::protobuf::RepeatedPtrField< ::precache::PrecacheResource >&
PrecacheUnfinishedWork::resource() const {
  // @@protoc_insertion_point(field_list:precache.PrecacheUnfinishedWork.resource)
  return resource_;
}

// optional uint64 total_bytes = 5;
inline bool PrecacheUnfinishedWork::has_total_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrecacheUnfinishedWork::set_has_total_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrecacheUnfinishedWork::clear_has_total_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrecacheUnfinishedWork::clear_total_bytes() {
  total_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_total_bytes();
}
inline ::google::protobuf::uint64 PrecacheUnfinishedWork::total_bytes() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.total_bytes)
  return total_bytes_;
}
inline void PrecacheUnfinishedWork::set_total_bytes(::google::protobuf::uint64 value) {
  set_has_total_bytes();
  total_bytes_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheUnfinishedWork.total_bytes)
}

// optional uint64 network_bytes = 6;
inline bool PrecacheUnfinishedWork::has_network_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrecacheUnfinishedWork::set_has_network_bytes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrecacheUnfinishedWork::clear_has_network_bytes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrecacheUnfinishedWork::clear_network_bytes() {
  network_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_network_bytes();
}
inline ::google::protobuf::uint64 PrecacheUnfinishedWork::network_bytes() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.network_bytes)
  return network_bytes_;
}
inline void PrecacheUnfinishedWork::set_network_bytes(::google::protobuf::uint64 value) {
  set_has_network_bytes();
  network_bytes_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheUnfinishedWork.network_bytes)
}

// optional uint64 num_manifest_urls = 7;
inline bool PrecacheUnfinishedWork::has_num_manifest_urls() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrecacheUnfinishedWork::set_has_num_manifest_urls() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrecacheUnfinishedWork::clear_has_num_manifest_urls() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrecacheUnfinishedWork::clear_num_manifest_urls() {
  num_manifest_urls_ = GOOGLE_ULONGLONG(0);
  clear_has_num_manifest_urls();
}
inline ::google::protobuf::uint64 PrecacheUnfinishedWork::num_manifest_urls() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.num_manifest_urls)
  return num_manifest_urls_;
}
inline void PrecacheUnfinishedWork::set_num_manifest_urls(::google::protobuf::uint64 value) {
  set_has_num_manifest_urls();
  num_manifest_urls_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheUnfinishedWork.num_manifest_urls)
}

// optional int64 start_time = 8;
inline bool PrecacheUnfinishedWork::has_start_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrecacheUnfinishedWork::set_has_start_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrecacheUnfinishedWork::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrecacheUnfinishedWork::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::int64 PrecacheUnfinishedWork::start_time() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.start_time)
  return start_time_;
}
inline void PrecacheUnfinishedWork::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheUnfinishedWork.start_time)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace precache

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_unfinished_5fwork_2eproto__INCLUDED
