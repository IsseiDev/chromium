// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unfinished_work.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "unfinished_work.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace precache {

void protobuf_ShutdownFile_unfinished_5fwork_2eproto() {
  delete TopHost::default_instance_;
  delete PrecacheManifestURL::default_instance_;
  delete PrecacheUnfinishedWork::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_unfinished_5fwork_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_unfinished_5fwork_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::precache::protobuf_AddDesc_precache_2eproto();
  TopHost::default_instance_ = new TopHost();
  PrecacheManifestURL::default_instance_ = new PrecacheManifestURL();
  PrecacheUnfinishedWork::default_instance_ = new PrecacheUnfinishedWork();
  TopHost::default_instance_->InitAsDefaultInstance();
  PrecacheManifestURL::default_instance_->InitAsDefaultInstance();
  PrecacheUnfinishedWork::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_unfinished_5fwork_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_unfinished_5fwork_2eproto_once_);
void protobuf_AddDesc_unfinished_5fwork_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_unfinished_5fwork_2eproto_once_,
                 &protobuf_AddDesc_unfinished_5fwork_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_unfinished_5fwork_2eproto {
  StaticDescriptorInitializer_unfinished_5fwork_2eproto() {
    protobuf_AddDesc_unfinished_5fwork_2eproto();
  }
} static_descriptor_initializer_unfinished_5fwork_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForTopHost(
    TopHost* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopHost::kHostnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopHost::TopHost()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:precache.TopHost)
}

void TopHost::InitAsDefaultInstance() {
}

TopHost::TopHost(const TopHost& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:precache.TopHost)
}

void TopHost::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopHost::~TopHost() {
  // @@protoc_insertion_point(destructor:precache.TopHost)
  SharedDtor();
}

void TopHost::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TopHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TopHost& TopHost::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_unfinished_5fwork_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_unfinished_5fwork_2eproto();
#endif
  return *default_instance_;
}

TopHost* TopHost::default_instance_ = NULL;

TopHost* TopHost::New(::google::protobuf::Arena* arena) const {
  TopHost* n = new TopHost;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopHost::Clear() {
// @@protoc_insertion_point(message_clear_start:precache.TopHost)
  if (has_hostname()) {
    hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TopHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForTopHost, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:precache.TopHost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:precache.TopHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:precache.TopHost)
  return false;
#undef DO_
}

void TopHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:precache.TopHost)
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:precache.TopHost)
}

int TopHost::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:precache.TopHost)
  int total_size = 0;

  // optional string hostname = 1;
  if (has_hostname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopHost::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TopHost*>(&from));
}

void TopHost::MergeFrom(const TopHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:precache.TopHost)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_has_hostname();
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void TopHost::CopyFrom(const TopHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:precache.TopHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopHost::IsInitialized() const {

  return true;
}

void TopHost::Swap(TopHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopHost::InternalSwap(TopHost* other) {
  hostname_.Swap(&other->hostname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TopHost::GetTypeName() const {
  return "precache.TopHost";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopHost

// optional string hostname = 1;
bool TopHost::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopHost::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
void TopHost::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopHost::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
 const ::std::string& TopHost::hostname() const {
  // @@protoc_insertion_point(field_get:precache.TopHost.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopHost::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:precache.TopHost.hostname)
}
 void TopHost::set_hostname(const char* value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:precache.TopHost.hostname)
}
 void TopHost::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:precache.TopHost.hostname)
}
 ::std::string* TopHost::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:precache.TopHost.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TopHost::release_hostname() {
  // @@protoc_insertion_point(field_release:precache.TopHost.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopHost::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:precache.TopHost.hostname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPrecacheManifestURL(
    PrecacheManifestURL* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrecacheManifestURL::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrecacheManifestURL::PrecacheManifestURL()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:precache.PrecacheManifestURL)
}

void PrecacheManifestURL::InitAsDefaultInstance() {
}

PrecacheManifestURL::PrecacheManifestURL(const PrecacheManifestURL& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:precache.PrecacheManifestURL)
}

void PrecacheManifestURL::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrecacheManifestURL::~PrecacheManifestURL() {
  // @@protoc_insertion_point(destructor:precache.PrecacheManifestURL)
  SharedDtor();
}

void PrecacheManifestURL::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PrecacheManifestURL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PrecacheManifestURL& PrecacheManifestURL::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_unfinished_5fwork_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_unfinished_5fwork_2eproto();
#endif
  return *default_instance_;
}

PrecacheManifestURL* PrecacheManifestURL::default_instance_ = NULL;

PrecacheManifestURL* PrecacheManifestURL::New(::google::protobuf::Arena* arena) const {
  PrecacheManifestURL* n = new PrecacheManifestURL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrecacheManifestURL::Clear() {
// @@protoc_insertion_point(message_clear_start:precache.PrecacheManifestURL)
  if (has_url()) {
    url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PrecacheManifestURL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPrecacheManifestURL, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:precache.PrecacheManifestURL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:precache.PrecacheManifestURL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:precache.PrecacheManifestURL)
  return false;
#undef DO_
}

void PrecacheManifestURL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:precache.PrecacheManifestURL)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:precache.PrecacheManifestURL)
}

int PrecacheManifestURL::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:precache.PrecacheManifestURL)
  int total_size = 0;

  // optional string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrecacheManifestURL::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PrecacheManifestURL*>(&from));
}

void PrecacheManifestURL::MergeFrom(const PrecacheManifestURL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:precache.PrecacheManifestURL)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PrecacheManifestURL::CopyFrom(const PrecacheManifestURL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:precache.PrecacheManifestURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrecacheManifestURL::IsInitialized() const {

  return true;
}

void PrecacheManifestURL::Swap(PrecacheManifestURL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrecacheManifestURL::InternalSwap(PrecacheManifestURL* other) {
  url_.Swap(&other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PrecacheManifestURL::GetTypeName() const {
  return "precache.PrecacheManifestURL";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrecacheManifestURL

// optional string url = 1;
bool PrecacheManifestURL::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PrecacheManifestURL::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void PrecacheManifestURL::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void PrecacheManifestURL::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& PrecacheManifestURL::url() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheManifestURL.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrecacheManifestURL::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:precache.PrecacheManifestURL.url)
}
 void PrecacheManifestURL::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:precache.PrecacheManifestURL.url)
}
 void PrecacheManifestURL::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:precache.PrecacheManifestURL.url)
}
 ::std::string* PrecacheManifestURL::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:precache.PrecacheManifestURL.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PrecacheManifestURL::release_url() {
  // @@protoc_insertion_point(field_release:precache.PrecacheManifestURL.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrecacheManifestURL::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:precache.PrecacheManifestURL.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPrecacheUnfinishedWork(
    PrecacheUnfinishedWork* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrecacheUnfinishedWork::kTopHostFieldNumber;
const int PrecacheUnfinishedWork::kConfigSettingsFieldNumber;
const int PrecacheUnfinishedWork::kManifestFieldNumber;
const int PrecacheUnfinishedWork::kResourceFieldNumber;
const int PrecacheUnfinishedWork::kTotalBytesFieldNumber;
const int PrecacheUnfinishedWork::kNetworkBytesFieldNumber;
const int PrecacheUnfinishedWork::kNumManifestUrlsFieldNumber;
const int PrecacheUnfinishedWork::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrecacheUnfinishedWork::PrecacheUnfinishedWork()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:precache.PrecacheUnfinishedWork)
}

void PrecacheUnfinishedWork::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  config_settings_ = const_cast< ::precache::PrecacheConfigurationSettings*>(
      ::precache::PrecacheConfigurationSettings::internal_default_instance());
#else
  config_settings_ = const_cast< ::precache::PrecacheConfigurationSettings*>(&::precache::PrecacheConfigurationSettings::default_instance());
#endif
}

PrecacheUnfinishedWork::PrecacheUnfinishedWork(const PrecacheUnfinishedWork& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:precache.PrecacheUnfinishedWork)
}

void PrecacheUnfinishedWork::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_settings_ = NULL;
  total_bytes_ = GOOGLE_ULONGLONG(0);
  network_bytes_ = GOOGLE_ULONGLONG(0);
  num_manifest_urls_ = GOOGLE_ULONGLONG(0);
  start_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrecacheUnfinishedWork::~PrecacheUnfinishedWork() {
  // @@protoc_insertion_point(destructor:precache.PrecacheUnfinishedWork)
  SharedDtor();
}

void PrecacheUnfinishedWork::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete config_settings_;
  }
}

void PrecacheUnfinishedWork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PrecacheUnfinishedWork& PrecacheUnfinishedWork::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_unfinished_5fwork_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_unfinished_5fwork_2eproto();
#endif
  return *default_instance_;
}

PrecacheUnfinishedWork* PrecacheUnfinishedWork::default_instance_ = NULL;

PrecacheUnfinishedWork* PrecacheUnfinishedWork::New(::google::protobuf::Arena* arena) const {
  PrecacheUnfinishedWork* n = new PrecacheUnfinishedWork;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrecacheUnfinishedWork::Clear() {
// @@protoc_insertion_point(message_clear_start:precache.PrecacheUnfinishedWork)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PrecacheUnfinishedWork, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PrecacheUnfinishedWork*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 242u) {
    ZR_(total_bytes_, start_time_);
    if (has_config_settings()) {
      if (config_settings_ != NULL) config_settings_->::precache::PrecacheConfigurationSettings::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  top_host_.Clear();
  manifest_.Clear();
  resource_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PrecacheUnfinishedWork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPrecacheUnfinishedWork, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:precache.PrecacheUnfinishedWork)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .precache.TopHost top_host = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_top_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_top_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_top_host;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_config_settings;
        break;
      }

      // optional .precache.PrecacheConfigurationSettings config_settings = 2;
      case 2: {
        if (tag == 18) {
         parse_config_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_manifest;
        break;
      }

      // repeated .precache.PrecacheManifestURL manifest = 3;
      case 3: {
        if (tag == 26) {
         parse_manifest:
          DO_(input->IncrementRecursionDepth());
         parse_loop_manifest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_manifest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_manifest;
        if (input->ExpectTag(34)) goto parse_loop_resource;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .precache.PrecacheResource resource = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_resource()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_resource;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_total_bytes;
        break;
      }

      // optional uint64 total_bytes = 5;
      case 5: {
        if (tag == 40) {
         parse_total_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_bytes_)));
          set_has_total_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_network_bytes;
        break;
      }

      // optional uint64 network_bytes = 6;
      case 6: {
        if (tag == 48) {
         parse_network_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &network_bytes_)));
          set_has_network_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_manifest_urls;
        break;
      }

      // optional uint64 num_manifest_urls = 7;
      case 7: {
        if (tag == 56) {
         parse_num_manifest_urls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_manifest_urls_)));
          set_has_num_manifest_urls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 8;
      case 8: {
        if (tag == 64) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:precache.PrecacheUnfinishedWork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:precache.PrecacheUnfinishedWork)
  return false;
#undef DO_
}

void PrecacheUnfinishedWork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:precache.PrecacheUnfinishedWork)
  // repeated .precache.TopHost top_host = 1;
  for (unsigned int i = 0, n = this->top_host_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->top_host(i), output);
  }

  // optional .precache.PrecacheConfigurationSettings config_settings = 2;
  if (has_config_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->config_settings_, output);
  }

  // repeated .precache.PrecacheManifestURL manifest = 3;
  for (unsigned int i = 0, n = this->manifest_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->manifest(i), output);
  }

  // repeated .precache.PrecacheResource resource = 4;
  for (unsigned int i = 0, n = this->resource_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->resource(i), output);
  }

  // optional uint64 total_bytes = 5;
  if (has_total_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->total_bytes(), output);
  }

  // optional uint64 network_bytes = 6;
  if (has_network_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->network_bytes(), output);
  }

  // optional uint64 num_manifest_urls = 7;
  if (has_num_manifest_urls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->num_manifest_urls(), output);
  }

  // optional int64 start_time = 8;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->start_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:precache.PrecacheUnfinishedWork)
}

int PrecacheUnfinishedWork::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:precache.PrecacheUnfinishedWork)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 242u) {
    // optional .precache.PrecacheConfigurationSettings config_settings = 2;
    if (has_config_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->config_settings_);
    }

    // optional uint64 total_bytes = 5;
    if (has_total_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_bytes());
    }

    // optional uint64 network_bytes = 6;
    if (has_network_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->network_bytes());
    }

    // optional uint64 num_manifest_urls = 7;
    if (has_num_manifest_urls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_manifest_urls());
    }

    // optional int64 start_time = 8;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

  }
  // repeated .precache.TopHost top_host = 1;
  total_size += 1 * this->top_host_size();
  for (int i = 0; i < this->top_host_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->top_host(i));
  }

  // repeated .precache.PrecacheManifestURL manifest = 3;
  total_size += 1 * this->manifest_size();
  for (int i = 0; i < this->manifest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manifest(i));
  }

  // repeated .precache.PrecacheResource resource = 4;
  total_size += 1 * this->resource_size();
  for (int i = 0; i < this->resource_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrecacheUnfinishedWork::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PrecacheUnfinishedWork*>(&from));
}

void PrecacheUnfinishedWork::MergeFrom(const PrecacheUnfinishedWork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:precache.PrecacheUnfinishedWork)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  top_host_.MergeFrom(from.top_host_);
  manifest_.MergeFrom(from.manifest_);
  resource_.MergeFrom(from.resource_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_config_settings()) {
      mutable_config_settings()->::precache::PrecacheConfigurationSettings::MergeFrom(from.config_settings());
    }
    if (from.has_total_bytes()) {
      set_total_bytes(from.total_bytes());
    }
    if (from.has_network_bytes()) {
      set_network_bytes(from.network_bytes());
    }
    if (from.has_num_manifest_urls()) {
      set_num_manifest_urls(from.num_manifest_urls());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PrecacheUnfinishedWork::CopyFrom(const PrecacheUnfinishedWork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:precache.PrecacheUnfinishedWork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrecacheUnfinishedWork::IsInitialized() const {

  return true;
}

void PrecacheUnfinishedWork::Swap(PrecacheUnfinishedWork* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrecacheUnfinishedWork::InternalSwap(PrecacheUnfinishedWork* other) {
  top_host_.UnsafeArenaSwap(&other->top_host_);
  std::swap(config_settings_, other->config_settings_);
  manifest_.UnsafeArenaSwap(&other->manifest_);
  resource_.UnsafeArenaSwap(&other->resource_);
  std::swap(total_bytes_, other->total_bytes_);
  std::swap(network_bytes_, other->network_bytes_);
  std::swap(num_manifest_urls_, other->num_manifest_urls_);
  std::swap(start_time_, other->start_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PrecacheUnfinishedWork::GetTypeName() const {
  return "precache.PrecacheUnfinishedWork";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrecacheUnfinishedWork

// repeated .precache.TopHost top_host = 1;
int PrecacheUnfinishedWork::top_host_size() const {
  return top_host_.size();
}
void PrecacheUnfinishedWork::clear_top_host() {
  top_host_.Clear();
}
const ::precache::TopHost& PrecacheUnfinishedWork::top_host(int index) const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.top_host)
  return top_host_.Get(index);
}
::precache::TopHost* PrecacheUnfinishedWork::mutable_top_host(int index) {
  // @@protoc_insertion_point(field_mutable:precache.PrecacheUnfinishedWork.top_host)
  return top_host_.Mutable(index);
}
::precache::TopHost* PrecacheUnfinishedWork::add_top_host() {
  // @@protoc_insertion_point(field_add:precache.PrecacheUnfinishedWork.top_host)
  return top_host_.Add();
}
::google::protobuf::RepeatedPtrField< ::precache::TopHost >*
PrecacheUnfinishedWork::mutable_top_host() {
  // @@protoc_insertion_point(field_mutable_list:precache.PrecacheUnfinishedWork.top_host)
  return &top_host_;
}
const ::google::protobuf::RepeatedPtrField< ::precache::TopHost >&
PrecacheUnfinishedWork::top_host() const {
  // @@protoc_insertion_point(field_list:precache.PrecacheUnfinishedWork.top_host)
  return top_host_;
}

// optional .precache.PrecacheConfigurationSettings config_settings = 2;
bool PrecacheUnfinishedWork::has_config_settings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PrecacheUnfinishedWork::set_has_config_settings() {
  _has_bits_[0] |= 0x00000002u;
}
void PrecacheUnfinishedWork::clear_has_config_settings() {
  _has_bits_[0] &= ~0x00000002u;
}
void PrecacheUnfinishedWork::clear_config_settings() {
  if (config_settings_ != NULL) config_settings_->::precache::PrecacheConfigurationSettings::Clear();
  clear_has_config_settings();
}
const ::precache::PrecacheConfigurationSettings& PrecacheUnfinishedWork::config_settings() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.config_settings)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return config_settings_ != NULL ? *config_settings_ : *default_instance().config_settings_;
#else
  return config_settings_ != NULL ? *config_settings_ : *default_instance_->config_settings_;
#endif
}
::precache::PrecacheConfigurationSettings* PrecacheUnfinishedWork::mutable_config_settings() {
  set_has_config_settings();
  if (config_settings_ == NULL) {
    config_settings_ = new ::precache::PrecacheConfigurationSettings;
  }
  // @@protoc_insertion_point(field_mutable:precache.PrecacheUnfinishedWork.config_settings)
  return config_settings_;
}
::precache::PrecacheConfigurationSettings* PrecacheUnfinishedWork::release_config_settings() {
  // @@protoc_insertion_point(field_release:precache.PrecacheUnfinishedWork.config_settings)
  clear_has_config_settings();
  ::precache::PrecacheConfigurationSettings* temp = config_settings_;
  config_settings_ = NULL;
  return temp;
}
void PrecacheUnfinishedWork::set_allocated_config_settings(::precache::PrecacheConfigurationSettings* config_settings) {
  delete config_settings_;
  config_settings_ = config_settings;
  if (config_settings) {
    set_has_config_settings();
  } else {
    clear_has_config_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:precache.PrecacheUnfinishedWork.config_settings)
}

// repeated .precache.PrecacheManifestURL manifest = 3;
int PrecacheUnfinishedWork::manifest_size() const {
  return manifest_.size();
}
void PrecacheUnfinishedWork::clear_manifest() {
  manifest_.Clear();
}
const ::precache::PrecacheManifestURL& PrecacheUnfinishedWork::manifest(int index) const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.manifest)
  return manifest_.Get(index);
}
::precache::PrecacheManifestURL* PrecacheUnfinishedWork::mutable_manifest(int index) {
  // @@protoc_insertion_point(field_mutable:precache.PrecacheUnfinishedWork.manifest)
  return manifest_.Mutable(index);
}
::precache::PrecacheManifestURL* PrecacheUnfinishedWork::add_manifest() {
  // @@protoc_insertion_point(field_add:precache.PrecacheUnfinishedWork.manifest)
  return manifest_.Add();
}
::google::protobuf::RepeatedPtrField< ::precache::PrecacheManifestURL >*
PrecacheUnfinishedWork::mutable_manifest() {
  // @@protoc_insertion_point(field_mutable_list:precache.PrecacheUnfinishedWork.manifest)
  return &manifest_;
}
const ::google::protobuf::RepeatedPtrField< ::precache::PrecacheManifestURL >&
PrecacheUnfinishedWork::manifest() const {
  // @@protoc_insertion_point(field_list:precache.PrecacheUnfinishedWork.manifest)
  return manifest_;
}

// repeated .precache.PrecacheResource resource = 4;
int PrecacheUnfinishedWork::resource_size() const {
  return resource_.size();
}
void PrecacheUnfinishedWork::clear_resource() {
  resource_.Clear();
}
const ::precache::PrecacheResource& PrecacheUnfinishedWork::resource(int index) const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.resource)
  return resource_.Get(index);
}
::precache::PrecacheResource* PrecacheUnfinishedWork::mutable_resource(int index) {
  // @@protoc_insertion_point(field_mutable:precache.PrecacheUnfinishedWork.resource)
  return resource_.Mutable(index);
}
::precache::PrecacheResource* PrecacheUnfinishedWork::add_resource() {
  // @@protoc_insertion_point(field_add:precache.PrecacheUnfinishedWork.resource)
  return resource_.Add();
}
::google::protobuf::RepeatedPtrField< ::precache::PrecacheResource >*
PrecacheUnfinishedWork::mutable_resource() {
  // @@protoc_insertion_point(field_mutable_list:precache.PrecacheUnfinishedWork.resource)
  return &resource_;
}
const ::google::protobuf::RepeatedPtrField< ::precache::PrecacheResource >&
PrecacheUnfinishedWork::resource() const {
  // @@protoc_insertion_point(field_list:precache.PrecacheUnfinishedWork.resource)
  return resource_;
}

// optional uint64 total_bytes = 5;
bool PrecacheUnfinishedWork::has_total_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PrecacheUnfinishedWork::set_has_total_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
void PrecacheUnfinishedWork::clear_has_total_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
void PrecacheUnfinishedWork::clear_total_bytes() {
  total_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_total_bytes();
}
 ::google::protobuf::uint64 PrecacheUnfinishedWork::total_bytes() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.total_bytes)
  return total_bytes_;
}
 void PrecacheUnfinishedWork::set_total_bytes(::google::protobuf::uint64 value) {
  set_has_total_bytes();
  total_bytes_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheUnfinishedWork.total_bytes)
}

// optional uint64 network_bytes = 6;
bool PrecacheUnfinishedWork::has_network_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PrecacheUnfinishedWork::set_has_network_bytes() {
  _has_bits_[0] |= 0x00000020u;
}
void PrecacheUnfinishedWork::clear_has_network_bytes() {
  _has_bits_[0] &= ~0x00000020u;
}
void PrecacheUnfinishedWork::clear_network_bytes() {
  network_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_network_bytes();
}
 ::google::protobuf::uint64 PrecacheUnfinishedWork::network_bytes() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.network_bytes)
  return network_bytes_;
}
 void PrecacheUnfinishedWork::set_network_bytes(::google::protobuf::uint64 value) {
  set_has_network_bytes();
  network_bytes_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheUnfinishedWork.network_bytes)
}

// optional uint64 num_manifest_urls = 7;
bool PrecacheUnfinishedWork::has_num_manifest_urls() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PrecacheUnfinishedWork::set_has_num_manifest_urls() {
  _has_bits_[0] |= 0x00000040u;
}
void PrecacheUnfinishedWork::clear_has_num_manifest_urls() {
  _has_bits_[0] &= ~0x00000040u;
}
void PrecacheUnfinishedWork::clear_num_manifest_urls() {
  num_manifest_urls_ = GOOGLE_ULONGLONG(0);
  clear_has_num_manifest_urls();
}
 ::google::protobuf::uint64 PrecacheUnfinishedWork::num_manifest_urls() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.num_manifest_urls)
  return num_manifest_urls_;
}
 void PrecacheUnfinishedWork::set_num_manifest_urls(::google::protobuf::uint64 value) {
  set_has_num_manifest_urls();
  num_manifest_urls_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheUnfinishedWork.num_manifest_urls)
}

// optional int64 start_time = 8;
bool PrecacheUnfinishedWork::has_start_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PrecacheUnfinishedWork::set_has_start_time() {
  _has_bits_[0] |= 0x00000080u;
}
void PrecacheUnfinishedWork::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void PrecacheUnfinishedWork::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
 ::google::protobuf::int64 PrecacheUnfinishedWork::start_time() const {
  // @@protoc_insertion_point(field_get:precache.PrecacheUnfinishedWork.start_time)
  return start_time_;
}
 void PrecacheUnfinishedWork::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:precache.PrecacheUnfinishedWork.start_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace precache

// @@protoc_insertion_point(global_scope)
