// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crx_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "crx_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace extensions {

void protobuf_ShutdownFile_crx_5finfo_2eproto() {
  delete ClientCRXListInfoRequest::default_instance_;
  delete ClientCRXListInfoResponse::default_instance_;
  delete ClientCRXListInfoResponse_UserMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_crx_5finfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_crx_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ClientCRXListInfoRequest::default_instance_ = new ClientCRXListInfoRequest();
  ClientCRXListInfoResponse::default_instance_ = new ClientCRXListInfoResponse();
  ClientCRXListInfoResponse_UserMessage::default_instance_ = new ClientCRXListInfoResponse_UserMessage();
  ClientCRXListInfoRequest::default_instance_->InitAsDefaultInstance();
  ClientCRXListInfoResponse::default_instance_->InitAsDefaultInstance();
  ClientCRXListInfoResponse_UserMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_crx_5finfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_crx_5finfo_2eproto_once_);
void protobuf_AddDesc_crx_5finfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_crx_5finfo_2eproto_once_,
                 &protobuf_AddDesc_crx_5finfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_crx_5finfo_2eproto {
  StaticDescriptorInitializer_crx_5finfo_2eproto() {
    protobuf_AddDesc_crx_5finfo_2eproto();
  }
} static_descriptor_initializer_crx_5finfo_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForClientCRXListInfoRequest(
    ClientCRXListInfoRequest* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientCRXListInfoRequest::kIdFieldNumber;
const int ClientCRXListInfoRequest::kLocaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientCRXListInfoRequest::ClientCRXListInfoRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:extensions.ClientCRXListInfoRequest)
}

void ClientCRXListInfoRequest::InitAsDefaultInstance() {
}

ClientCRXListInfoRequest::ClientCRXListInfoRequest(const ClientCRXListInfoRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:extensions.ClientCRXListInfoRequest)
}

void ClientCRXListInfoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCRXListInfoRequest::~ClientCRXListInfoRequest() {
  // @@protoc_insertion_point(destructor:extensions.ClientCRXListInfoRequest)
  SharedDtor();
}

void ClientCRXListInfoRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientCRXListInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientCRXListInfoRequest& ClientCRXListInfoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_crx_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_crx_5finfo_2eproto();
#endif
  return *default_instance_;
}

ClientCRXListInfoRequest* ClientCRXListInfoRequest::default_instance_ = NULL;

ClientCRXListInfoRequest* ClientCRXListInfoRequest::New(::google::protobuf::Arena* arena) const {
  ClientCRXListInfoRequest* n = new ClientCRXListInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientCRXListInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:extensions.ClientCRXListInfoRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_locale()) {
      locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClientCRXListInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForClientCRXListInfoRequest, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:extensions.ClientCRXListInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_locale;
        break;
      }

      // optional string locale = 2;
      case 2: {
        if (tag == 18) {
         parse_locale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:extensions.ClientCRXListInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:extensions.ClientCRXListInfoRequest)
  return false;
#undef DO_
}

void ClientCRXListInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:extensions.ClientCRXListInfoRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string locale = 2;
  if (has_locale()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->locale(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:extensions.ClientCRXListInfoRequest)
}

int ClientCRXListInfoRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:extensions.ClientCRXListInfoRequest)
  int total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  // optional string locale = 2;
  if (has_locale()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->locale());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCRXListInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientCRXListInfoRequest*>(&from));
}

void ClientCRXListInfoRequest::MergeFrom(const ClientCRXListInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:extensions.ClientCRXListInfoRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_locale()) {
      set_has_locale();
      locale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locale_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ClientCRXListInfoRequest::CopyFrom(const ClientCRXListInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extensions.ClientCRXListInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCRXListInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientCRXListInfoRequest::Swap(ClientCRXListInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientCRXListInfoRequest::InternalSwap(ClientCRXListInfoRequest* other) {
  id_.Swap(&other->id_);
  locale_.Swap(&other->locale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientCRXListInfoRequest::GetTypeName() const {
  return "extensions.ClientCRXListInfoRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientCRXListInfoRequest

// required string id = 1;
bool ClientCRXListInfoRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientCRXListInfoRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientCRXListInfoRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientCRXListInfoRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& ClientCRXListInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoRequest.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientCRXListInfoRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:extensions.ClientCRXListInfoRequest.id)
}
 void ClientCRXListInfoRequest::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:extensions.ClientCRXListInfoRequest.id)
}
 void ClientCRXListInfoRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:extensions.ClientCRXListInfoRequest.id)
}
 ::std::string* ClientCRXListInfoRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:extensions.ClientCRXListInfoRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClientCRXListInfoRequest::release_id() {
  // @@protoc_insertion_point(field_release:extensions.ClientCRXListInfoRequest.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientCRXListInfoRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:extensions.ClientCRXListInfoRequest.id)
}

// optional string locale = 2;
bool ClientCRXListInfoRequest::has_locale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientCRXListInfoRequest::set_has_locale() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientCRXListInfoRequest::clear_has_locale() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientCRXListInfoRequest::clear_locale() {
  locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locale();
}
 const ::std::string& ClientCRXListInfoRequest::locale() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoRequest.locale)
  return locale_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientCRXListInfoRequest::set_locale(const ::std::string& value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:extensions.ClientCRXListInfoRequest.locale)
}
 void ClientCRXListInfoRequest::set_locale(const char* value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:extensions.ClientCRXListInfoRequest.locale)
}
 void ClientCRXListInfoRequest::set_locale(const char* value, size_t size) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:extensions.ClientCRXListInfoRequest.locale)
}
 ::std::string* ClientCRXListInfoRequest::mutable_locale() {
  set_has_locale();
  // @@protoc_insertion_point(field_mutable:extensions.ClientCRXListInfoRequest.locale)
  return locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClientCRXListInfoRequest::release_locale() {
  // @@protoc_insertion_point(field_release:extensions.ClientCRXListInfoRequest.locale)
  clear_has_locale();
  return locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientCRXListInfoRequest::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    set_has_locale();
  } else {
    clear_has_locale();
  }
  locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:extensions.ClientCRXListInfoRequest.locale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForClientCRXListInfoResponse(
    ClientCRXListInfoResponse* ptr) {
  return ptr->mutable_unknown_fields();
}

bool ClientCRXListInfoResponse_Verdict_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::NOT_IN_BLACKLIST;
const ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::MALWARE;
const ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::SECURITY_VULNERABILITY;
const ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::CWS_POLICY_VIOLATION;
const ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::POTENTIALLY_UNWANTED;
const ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::Verdict_MIN;
const ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::Verdict_MAX;
const int ClientCRXListInfoResponse::Verdict_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
static ::std::string* MutableUnknownFieldsForClientCRXListInfoResponse_UserMessage(
    ClientCRXListInfoResponse_UserMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientCRXListInfoResponse_UserMessage::kDetailMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientCRXListInfoResponse_UserMessage::ClientCRXListInfoResponse_UserMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:extensions.ClientCRXListInfoResponse.UserMessage)
}

void ClientCRXListInfoResponse_UserMessage::InitAsDefaultInstance() {
}

ClientCRXListInfoResponse_UserMessage::ClientCRXListInfoResponse_UserMessage(const ClientCRXListInfoResponse_UserMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:extensions.ClientCRXListInfoResponse.UserMessage)
}

void ClientCRXListInfoResponse_UserMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCRXListInfoResponse_UserMessage::~ClientCRXListInfoResponse_UserMessage() {
  // @@protoc_insertion_point(destructor:extensions.ClientCRXListInfoResponse.UserMessage)
  SharedDtor();
}

void ClientCRXListInfoResponse_UserMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientCRXListInfoResponse_UserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientCRXListInfoResponse_UserMessage& ClientCRXListInfoResponse_UserMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_crx_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_crx_5finfo_2eproto();
#endif
  return *default_instance_;
}

ClientCRXListInfoResponse_UserMessage* ClientCRXListInfoResponse_UserMessage::default_instance_ = NULL;

ClientCRXListInfoResponse_UserMessage* ClientCRXListInfoResponse_UserMessage::New(::google::protobuf::Arena* arena) const {
  ClientCRXListInfoResponse_UserMessage* n = new ClientCRXListInfoResponse_UserMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientCRXListInfoResponse_UserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:extensions.ClientCRXListInfoResponse.UserMessage)
  if (has_detail_message()) {
    detail_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClientCRXListInfoResponse_UserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForClientCRXListInfoResponse_UserMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:extensions.ClientCRXListInfoResponse.UserMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string detail_message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:extensions.ClientCRXListInfoResponse.UserMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:extensions.ClientCRXListInfoResponse.UserMessage)
  return false;
#undef DO_
}

void ClientCRXListInfoResponse_UserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:extensions.ClientCRXListInfoResponse.UserMessage)
  // optional string detail_message = 1;
  if (has_detail_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->detail_message(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:extensions.ClientCRXListInfoResponse.UserMessage)
}

int ClientCRXListInfoResponse_UserMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:extensions.ClientCRXListInfoResponse.UserMessage)
  int total_size = 0;

  // optional string detail_message = 1;
  if (has_detail_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detail_message());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCRXListInfoResponse_UserMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientCRXListInfoResponse_UserMessage*>(&from));
}

void ClientCRXListInfoResponse_UserMessage::MergeFrom(const ClientCRXListInfoResponse_UserMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:extensions.ClientCRXListInfoResponse.UserMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_detail_message()) {
      set_has_detail_message();
      detail_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_message_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ClientCRXListInfoResponse_UserMessage::CopyFrom(const ClientCRXListInfoResponse_UserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extensions.ClientCRXListInfoResponse.UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCRXListInfoResponse_UserMessage::IsInitialized() const {

  return true;
}

void ClientCRXListInfoResponse_UserMessage::Swap(ClientCRXListInfoResponse_UserMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientCRXListInfoResponse_UserMessage::InternalSwap(ClientCRXListInfoResponse_UserMessage* other) {
  detail_message_.Swap(&other->detail_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientCRXListInfoResponse_UserMessage::GetTypeName() const {
  return "extensions.ClientCRXListInfoResponse.UserMessage";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientCRXListInfoResponse::kVerdictFieldNumber;
const int ClientCRXListInfoResponse::kUserMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientCRXListInfoResponse::ClientCRXListInfoResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:extensions.ClientCRXListInfoResponse)
}

void ClientCRXListInfoResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_message_ = const_cast< ::extensions::ClientCRXListInfoResponse_UserMessage*>(
      ::extensions::ClientCRXListInfoResponse_UserMessage::internal_default_instance());
#else
  user_message_ = const_cast< ::extensions::ClientCRXListInfoResponse_UserMessage*>(&::extensions::ClientCRXListInfoResponse_UserMessage::default_instance());
#endif
}

ClientCRXListInfoResponse::ClientCRXListInfoResponse(const ClientCRXListInfoResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:extensions.ClientCRXListInfoResponse)
}

void ClientCRXListInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verdict_ = 0;
  user_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCRXListInfoResponse::~ClientCRXListInfoResponse() {
  // @@protoc_insertion_point(destructor:extensions.ClientCRXListInfoResponse)
  SharedDtor();
}

void ClientCRXListInfoResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_message_;
  }
}

void ClientCRXListInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientCRXListInfoResponse& ClientCRXListInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_crx_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_crx_5finfo_2eproto();
#endif
  return *default_instance_;
}

ClientCRXListInfoResponse* ClientCRXListInfoResponse::default_instance_ = NULL;

ClientCRXListInfoResponse* ClientCRXListInfoResponse::New(::google::protobuf::Arena* arena) const {
  ClientCRXListInfoResponse* n = new ClientCRXListInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientCRXListInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:extensions.ClientCRXListInfoResponse)
  if (_has_bits_[0 / 32] & 3u) {
    verdict_ = 0;
    if (has_user_message()) {
      if (user_message_ != NULL) user_message_->::extensions::ClientCRXListInfoResponse_UserMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClientCRXListInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForClientCRXListInfoResponse, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:extensions.ClientCRXListInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLACKLIST];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::ClientCRXListInfoResponse_Verdict_IsValid(value)) {
            set_verdict(static_cast< ::extensions::ClientCRXListInfoResponse_Verdict >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_message;
        break;
      }

      // optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
      case 2: {
        if (tag == 18) {
         parse_user_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:extensions.ClientCRXListInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:extensions.ClientCRXListInfoResponse)
  return false;
#undef DO_
}

void ClientCRXListInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:extensions.ClientCRXListInfoResponse)
  // optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLACKLIST];
  if (has_verdict()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->verdict(), output);
  }

  // optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
  if (has_user_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->user_message_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:extensions.ClientCRXListInfoResponse)
}

int ClientCRXListInfoResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:extensions.ClientCRXListInfoResponse)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLACKLIST];
    if (has_verdict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->verdict());
    }

    // optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
    if (has_user_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_message_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCRXListInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientCRXListInfoResponse*>(&from));
}

void ClientCRXListInfoResponse::MergeFrom(const ClientCRXListInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:extensions.ClientCRXListInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_verdict()) {
      set_verdict(from.verdict());
    }
    if (from.has_user_message()) {
      mutable_user_message()->::extensions::ClientCRXListInfoResponse_UserMessage::MergeFrom(from.user_message());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ClientCRXListInfoResponse::CopyFrom(const ClientCRXListInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extensions.ClientCRXListInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCRXListInfoResponse::IsInitialized() const {

  return true;
}

void ClientCRXListInfoResponse::Swap(ClientCRXListInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientCRXListInfoResponse::InternalSwap(ClientCRXListInfoResponse* other) {
  std::swap(verdict_, other->verdict_);
  std::swap(user_message_, other->user_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientCRXListInfoResponse::GetTypeName() const {
  return "extensions.ClientCRXListInfoResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientCRXListInfoResponse_UserMessage

// optional string detail_message = 1;
bool ClientCRXListInfoResponse_UserMessage::has_detail_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientCRXListInfoResponse_UserMessage::set_has_detail_message() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientCRXListInfoResponse_UserMessage::clear_has_detail_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientCRXListInfoResponse_UserMessage::clear_detail_message() {
  detail_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_detail_message();
}
 const ::std::string& ClientCRXListInfoResponse_UserMessage::detail_message() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
  return detail_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientCRXListInfoResponse_UserMessage::set_detail_message(const ::std::string& value) {
  set_has_detail_message();
  detail_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
}
 void ClientCRXListInfoResponse_UserMessage::set_detail_message(const char* value) {
  set_has_detail_message();
  detail_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
}
 void ClientCRXListInfoResponse_UserMessage::set_detail_message(const char* value, size_t size) {
  set_has_detail_message();
  detail_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
}
 ::std::string* ClientCRXListInfoResponse_UserMessage::mutable_detail_message() {
  set_has_detail_message();
  // @@protoc_insertion_point(field_mutable:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
  return detail_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClientCRXListInfoResponse_UserMessage::release_detail_message() {
  // @@protoc_insertion_point(field_release:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
  clear_has_detail_message();
  return detail_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientCRXListInfoResponse_UserMessage::set_allocated_detail_message(::std::string* detail_message) {
  if (detail_message != NULL) {
    set_has_detail_message();
  } else {
    clear_has_detail_message();
  }
  detail_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail_message);
  // @@protoc_insertion_point(field_set_allocated:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
}

// -------------------------------------------------------------------

// ClientCRXListInfoResponse

// optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLACKLIST];
bool ClientCRXListInfoResponse::has_verdict() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientCRXListInfoResponse::set_has_verdict() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientCRXListInfoResponse::clear_has_verdict() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientCRXListInfoResponse::clear_verdict() {
  verdict_ = 0;
  clear_has_verdict();
}
 ::extensions::ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::verdict() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoResponse.verdict)
  return static_cast< ::extensions::ClientCRXListInfoResponse_Verdict >(verdict_);
}
 void ClientCRXListInfoResponse::set_verdict(::extensions::ClientCRXListInfoResponse_Verdict value) {
  assert(::extensions::ClientCRXListInfoResponse_Verdict_IsValid(value));
  set_has_verdict();
  verdict_ = value;
  // @@protoc_insertion_point(field_set:extensions.ClientCRXListInfoResponse.verdict)
}

// optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
bool ClientCRXListInfoResponse::has_user_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientCRXListInfoResponse::set_has_user_message() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientCRXListInfoResponse::clear_has_user_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientCRXListInfoResponse::clear_user_message() {
  if (user_message_ != NULL) user_message_->::extensions::ClientCRXListInfoResponse_UserMessage::Clear();
  clear_has_user_message();
}
const ::extensions::ClientCRXListInfoResponse_UserMessage& ClientCRXListInfoResponse::user_message() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoResponse.user_message)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_message_ != NULL ? *user_message_ : *default_instance().user_message_;
#else
  return user_message_ != NULL ? *user_message_ : *default_instance_->user_message_;
#endif
}
::extensions::ClientCRXListInfoResponse_UserMessage* ClientCRXListInfoResponse::mutable_user_message() {
  set_has_user_message();
  if (user_message_ == NULL) {
    user_message_ = new ::extensions::ClientCRXListInfoResponse_UserMessage;
  }
  // @@protoc_insertion_point(field_mutable:extensions.ClientCRXListInfoResponse.user_message)
  return user_message_;
}
::extensions::ClientCRXListInfoResponse_UserMessage* ClientCRXListInfoResponse::release_user_message() {
  // @@protoc_insertion_point(field_release:extensions.ClientCRXListInfoResponse.user_message)
  clear_has_user_message();
  ::extensions::ClientCRXListInfoResponse_UserMessage* temp = user_message_;
  user_message_ = NULL;
  return temp;
}
void ClientCRXListInfoResponse::set_allocated_user_message(::extensions::ClientCRXListInfoResponse_UserMessage* user_message) {
  delete user_message_;
  user_message_ = user_message;
  if (user_message) {
    set_has_user_message();
  } else {
    clear_has_user_message();
  }
  // @@protoc_insertion_point(field_set_allocated:extensions.ClientCRXListInfoResponse.user_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace extensions

// @@protoc_insertion_point(global_scope)
