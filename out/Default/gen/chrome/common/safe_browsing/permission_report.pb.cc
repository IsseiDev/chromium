// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: permission_report.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "permission_report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace safe_browsing {

void protobuf_ShutdownFile_permission_5freport_2eproto() {
  delete PermissionReport::default_instance_;
  delete PermissionReport_FieldTrial::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_permission_5freport_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_permission_5freport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  PermissionReport::default_instance_ = new PermissionReport();
  PermissionReport_FieldTrial::default_instance_ = new PermissionReport_FieldTrial();
  PermissionReport::default_instance_->InitAsDefaultInstance();
  PermissionReport_FieldTrial::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_permission_5freport_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_permission_5freport_2eproto_once_);
void protobuf_AddDesc_permission_5freport_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_permission_5freport_2eproto_once_,
                 &protobuf_AddDesc_permission_5freport_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_permission_5freport_2eproto {
  StaticDescriptorInitializer_permission_5freport_2eproto() {
    protobuf_AddDesc_permission_5freport_2eproto();
  }
} static_descriptor_initializer_permission_5freport_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForPermissionReport(
    PermissionReport* ptr) {
  return ptr->mutable_unknown_fields();
}

bool PermissionReport_PlatformType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PermissionReport_PlatformType PermissionReport::PLATFORM_TYPE_UNSPECIFIED;
const PermissionReport_PlatformType PermissionReport::DESKTOP_PLATFORM;
const PermissionReport_PlatformType PermissionReport::ANDROID_PLATFORM;
const PermissionReport_PlatformType PermissionReport::PlatformType_MIN;
const PermissionReport_PlatformType PermissionReport::PlatformType_MAX;
const int PermissionReport::PlatformType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PermissionReport_GestureType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PermissionReport_GestureType PermissionReport::GESTURE_TYPE_UNSPECIFIED;
const PermissionReport_GestureType PermissionReport::GESTURE;
const PermissionReport_GestureType PermissionReport::NO_GESTURE;
const PermissionReport_GestureType PermissionReport::GestureType_MIN;
const PermissionReport_GestureType PermissionReport::GestureType_MAX;
const int PermissionReport::GestureType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PermissionReport_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PermissionReport_Action PermissionReport::ACTION_UNSPECIFIED;
const PermissionReport_Action PermissionReport::GRANTED;
const PermissionReport_Action PermissionReport::DENIED;
const PermissionReport_Action PermissionReport::DISMISSED;
const PermissionReport_Action PermissionReport::IGNORED;
const PermissionReport_Action PermissionReport::REVOKED;
const PermissionReport_Action PermissionReport::Action_MIN;
const PermissionReport_Action PermissionReport::Action_MAX;
const int PermissionReport::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PermissionReport_SourceUI_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PermissionReport_SourceUI PermissionReport::SOURCE_UI_UNSPECIFIED;
const PermissionReport_SourceUI PermissionReport::PROMPT;
const PermissionReport_SourceUI PermissionReport::OIB;
const PermissionReport_SourceUI PermissionReport::SITE_SETTINGS;
const PermissionReport_SourceUI PermissionReport::PAGE_ACTION;
const PermissionReport_SourceUI PermissionReport::SourceUI_MIN;
const PermissionReport_SourceUI PermissionReport::SourceUI_MAX;
const int PermissionReport::SourceUI_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PermissionReport_PermissionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PermissionReport_PermissionType PermissionReport::UNKNOWN_PERMISSION;
const PermissionReport_PermissionType PermissionReport::MIDI_SYSEX;
const PermissionReport_PermissionType PermissionReport::PUSH_MESSAGING;
const PermissionReport_PermissionType PermissionReport::NOTIFICATIONS;
const PermissionReport_PermissionType PermissionReport::GEOLOCATION;
const PermissionReport_PermissionType PermissionReport::PROTECTED_MEDIA_IDENTIFIER;
const PermissionReport_PermissionType PermissionReport::MIDI;
const PermissionReport_PermissionType PermissionReport::DURABLE_STORAGE;
const PermissionReport_PermissionType PermissionReport::AUDIO_CAPTURE;
const PermissionReport_PermissionType PermissionReport::VIDEO_CAPTURE;
const PermissionReport_PermissionType PermissionReport::PermissionType_MIN;
const PermissionReport_PermissionType PermissionReport::PermissionType_MAX;
const int PermissionReport::PermissionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PermissionReport_PersistDecision_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PermissionReport_PersistDecision PermissionReport::PERSIST_DECISION_UNSPECIFIED;
const PermissionReport_PersistDecision PermissionReport::PERSISTED;
const PermissionReport_PersistDecision PermissionReport::NOT_PERSISTED;
const PermissionReport_PersistDecision PermissionReport::PersistDecision_MIN;
const PermissionReport_PersistDecision PermissionReport::PersistDecision_MAX;
const int PermissionReport::PersistDecision_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
static ::std::string* MutableUnknownFieldsForPermissionReport_FieldTrial(
    PermissionReport_FieldTrial* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PermissionReport_FieldTrial::kNameIdFieldNumber;
const int PermissionReport_FieldTrial::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PermissionReport_FieldTrial::PermissionReport_FieldTrial()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.PermissionReport.FieldTrial)
}

void PermissionReport_FieldTrial::InitAsDefaultInstance() {
}

PermissionReport_FieldTrial::PermissionReport_FieldTrial(const PermissionReport_FieldTrial& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safe_browsing.PermissionReport.FieldTrial)
}

void PermissionReport_FieldTrial::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_id_ = 0u;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PermissionReport_FieldTrial::~PermissionReport_FieldTrial() {
  // @@protoc_insertion_point(destructor:safe_browsing.PermissionReport.FieldTrial)
  SharedDtor();
}

void PermissionReport_FieldTrial::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PermissionReport_FieldTrial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PermissionReport_FieldTrial& PermissionReport_FieldTrial::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_permission_5freport_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_permission_5freport_2eproto();
#endif
  return *default_instance_;
}

PermissionReport_FieldTrial* PermissionReport_FieldTrial::default_instance_ = NULL;

PermissionReport_FieldTrial* PermissionReport_FieldTrial::New(::google::protobuf::Arena* arena) const {
  PermissionReport_FieldTrial* n = new PermissionReport_FieldTrial;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PermissionReport_FieldTrial::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.PermissionReport.FieldTrial)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PermissionReport_FieldTrial, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PermissionReport_FieldTrial*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(name_id_, group_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PermissionReport_FieldTrial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPermissionReport_FieldTrial, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.PermissionReport.FieldTrial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 name_id = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &name_id_)));
          set_has_name_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_group_id;
        break;
      }

      // optional fixed32 group_id = 2;
      case 2: {
        if (tag == 21) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.PermissionReport.FieldTrial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.PermissionReport.FieldTrial)
  return false;
#undef DO_
}

void PermissionReport_FieldTrial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.PermissionReport.FieldTrial)
  // optional fixed32 name_id = 1;
  if (has_name_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->name_id(), output);
  }

  // optional fixed32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->group_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.PermissionReport.FieldTrial)
}

int PermissionReport_FieldTrial::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.PermissionReport.FieldTrial)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed32 name_id = 1;
    if (has_name_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PermissionReport_FieldTrial::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PermissionReport_FieldTrial*>(&from));
}

void PermissionReport_FieldTrial::MergeFrom(const PermissionReport_FieldTrial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.PermissionReport.FieldTrial)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name_id()) {
      set_name_id(from.name_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PermissionReport_FieldTrial::CopyFrom(const PermissionReport_FieldTrial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.PermissionReport.FieldTrial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionReport_FieldTrial::IsInitialized() const {

  return true;
}

void PermissionReport_FieldTrial::Swap(PermissionReport_FieldTrial* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PermissionReport_FieldTrial::InternalSwap(PermissionReport_FieldTrial* other) {
  std::swap(name_id_, other->name_id_);
  std::swap(group_id_, other->group_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PermissionReport_FieldTrial::GetTypeName() const {
  return "safe_browsing.PermissionReport.FieldTrial";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PermissionReport::kOriginFieldNumber;
const int PermissionReport::kPermissionFieldNumber;
const int PermissionReport::kPlatformTypeFieldNumber;
const int PermissionReport::kGestureFieldNumber;
const int PermissionReport::kActionFieldNumber;
const int PermissionReport::kSourceUiFieldNumber;
const int PermissionReport::kFieldTrialsFieldNumber;
const int PermissionReport::kNumPriorDismissalsFieldNumber;
const int PermissionReport::kNumPriorIgnoresFieldNumber;
const int PermissionReport::kPersistedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PermissionReport::PermissionReport()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.PermissionReport)
}

void PermissionReport::InitAsDefaultInstance() {
}

PermissionReport::PermissionReport(const PermissionReport& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safe_browsing.PermissionReport)
}

void PermissionReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permission_ = 0;
  platform_type_ = 0;
  gesture_ = 0;
  action_ = 0;
  source_ui_ = 0;
  num_prior_dismissals_ = 0;
  num_prior_ignores_ = 0;
  persisted_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PermissionReport::~PermissionReport() {
  // @@protoc_insertion_point(destructor:safe_browsing.PermissionReport)
  SharedDtor();
}

void PermissionReport::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PermissionReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PermissionReport& PermissionReport::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_permission_5freport_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_permission_5freport_2eproto();
#endif
  return *default_instance_;
}

PermissionReport* PermissionReport::default_instance_ = NULL;

PermissionReport* PermissionReport::New(::google::protobuf::Arena* arena) const {
  PermissionReport* n = new PermissionReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PermissionReport::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.PermissionReport)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PermissionReport, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PermissionReport*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 191u) {
    ZR_(permission_, action_);
    ZR_(source_ui_, num_prior_dismissals_);
    if (has_origin()) {
      origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(num_prior_ignores_, persisted_);

#undef ZR_HELPER_
#undef ZR_

  field_trials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PermissionReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPermissionReport, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.PermissionReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string origin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_permission;
        break;
      }

      // optional .safe_browsing.PermissionReport.PermissionType permission = 2;
      case 2: {
        if (tag == 16) {
         parse_permission:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::PermissionReport_PermissionType_IsValid(value)) {
            set_permission(static_cast< ::safe_browsing::PermissionReport_PermissionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_platform_type;
        break;
      }

      // optional .safe_browsing.PermissionReport.PlatformType platform_type = 3;
      case 3: {
        if (tag == 24) {
         parse_platform_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::PermissionReport_PlatformType_IsValid(value)) {
            set_platform_type(static_cast< ::safe_browsing::PermissionReport_PlatformType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gesture;
        break;
      }

      // optional .safe_browsing.PermissionReport.GestureType gesture = 4;
      case 4: {
        if (tag == 32) {
         parse_gesture:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::PermissionReport_GestureType_IsValid(value)) {
            set_gesture(static_cast< ::safe_browsing::PermissionReport_GestureType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_action;
        break;
      }

      // optional .safe_browsing.PermissionReport.Action action = 5;
      case 5: {
        if (tag == 40) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::PermissionReport_Action_IsValid(value)) {
            set_action(static_cast< ::safe_browsing::PermissionReport_Action >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_source_ui;
        break;
      }

      // optional .safe_browsing.PermissionReport.SourceUI source_ui = 6;
      case 6: {
        if (tag == 48) {
         parse_source_ui:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::PermissionReport_SourceUI_IsValid(value)) {
            set_source_ui(static_cast< ::safe_browsing::PermissionReport_SourceUI >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_field_trials;
        break;
      }

      // repeated .safe_browsing.PermissionReport.FieldTrial field_trials = 7;
      case 7: {
        if (tag == 58) {
         parse_field_trials:
          DO_(input->IncrementRecursionDepth());
         parse_loop_field_trials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_field_trials()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_field_trials;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(64)) goto parse_num_prior_dismissals;
        break;
      }

      // optional int32 num_prior_dismissals = 8;
      case 8: {
        if (tag == 64) {
         parse_num_prior_dismissals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_prior_dismissals_)));
          set_has_num_prior_dismissals();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_prior_ignores;
        break;
      }

      // optional int32 num_prior_ignores = 9;
      case 9: {
        if (tag == 72) {
         parse_num_prior_ignores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_prior_ignores_)));
          set_has_num_prior_ignores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_persisted;
        break;
      }

      // optional .safe_browsing.PermissionReport.PersistDecision persisted = 10;
      case 10: {
        if (tag == 80) {
         parse_persisted:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::PermissionReport_PersistDecision_IsValid(value)) {
            set_persisted(static_cast< ::safe_browsing::PermissionReport_PersistDecision >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.PermissionReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.PermissionReport)
  return false;
#undef DO_
}

void PermissionReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.PermissionReport)
  // optional string origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->origin(), output);
  }

  // optional .safe_browsing.PermissionReport.PermissionType permission = 2;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->permission(), output);
  }

  // optional .safe_browsing.PermissionReport.PlatformType platform_type = 3;
  if (has_platform_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->platform_type(), output);
  }

  // optional .safe_browsing.PermissionReport.GestureType gesture = 4;
  if (has_gesture()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gesture(), output);
  }

  // optional .safe_browsing.PermissionReport.Action action = 5;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->action(), output);
  }

  // optional .safe_browsing.PermissionReport.SourceUI source_ui = 6;
  if (has_source_ui()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->source_ui(), output);
  }

  // repeated .safe_browsing.PermissionReport.FieldTrial field_trials = 7;
  for (unsigned int i = 0, n = this->field_trials_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->field_trials(i), output);
  }

  // optional int32 num_prior_dismissals = 8;
  if (has_num_prior_dismissals()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_prior_dismissals(), output);
  }

  // optional int32 num_prior_ignores = 9;
  if (has_num_prior_ignores()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_prior_ignores(), output);
  }

  // optional .safe_browsing.PermissionReport.PersistDecision persisted = 10;
  if (has_persisted()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->persisted(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.PermissionReport)
}

int PermissionReport::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.PermissionReport)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 191u) {
    // optional string origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin());
    }

    // optional .safe_browsing.PermissionReport.PermissionType permission = 2;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->permission());
    }

    // optional .safe_browsing.PermissionReport.PlatformType platform_type = 3;
    if (has_platform_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform_type());
    }

    // optional .safe_browsing.PermissionReport.GestureType gesture = 4;
    if (has_gesture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gesture());
    }

    // optional .safe_browsing.PermissionReport.Action action = 5;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .safe_browsing.PermissionReport.SourceUI source_ui = 6;
    if (has_source_ui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_ui());
    }

    // optional int32 num_prior_dismissals = 8;
    if (has_num_prior_dismissals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_prior_dismissals());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 num_prior_ignores = 9;
    if (has_num_prior_ignores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_prior_ignores());
    }

    // optional .safe_browsing.PermissionReport.PersistDecision persisted = 10;
    if (has_persisted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->persisted());
    }

  }
  // repeated .safe_browsing.PermissionReport.FieldTrial field_trials = 7;
  total_size += 1 * this->field_trials_size();
  for (int i = 0; i < this->field_trials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field_trials(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PermissionReport::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PermissionReport*>(&from));
}

void PermissionReport::MergeFrom(const PermissionReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.PermissionReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  field_trials_.MergeFrom(from.field_trials_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      set_has_origin();
      origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
    if (from.has_platform_type()) {
      set_platform_type(from.platform_type());
    }
    if (from.has_gesture()) {
      set_gesture(from.gesture());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_source_ui()) {
      set_source_ui(from.source_ui());
    }
    if (from.has_num_prior_dismissals()) {
      set_num_prior_dismissals(from.num_prior_dismissals());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_prior_ignores()) {
      set_num_prior_ignores(from.num_prior_ignores());
    }
    if (from.has_persisted()) {
      set_persisted(from.persisted());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PermissionReport::CopyFrom(const PermissionReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.PermissionReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionReport::IsInitialized() const {

  return true;
}

void PermissionReport::Swap(PermissionReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PermissionReport::InternalSwap(PermissionReport* other) {
  origin_.Swap(&other->origin_);
  std::swap(permission_, other->permission_);
  std::swap(platform_type_, other->platform_type_);
  std::swap(gesture_, other->gesture_);
  std::swap(action_, other->action_);
  std::swap(source_ui_, other->source_ui_);
  field_trials_.UnsafeArenaSwap(&other->field_trials_);
  std::swap(num_prior_dismissals_, other->num_prior_dismissals_);
  std::swap(num_prior_ignores_, other->num_prior_ignores_);
  std::swap(persisted_, other->persisted_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PermissionReport::GetTypeName() const {
  return "safe_browsing.PermissionReport";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PermissionReport_FieldTrial

// optional fixed32 name_id = 1;
bool PermissionReport_FieldTrial::has_name_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PermissionReport_FieldTrial::set_has_name_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PermissionReport_FieldTrial::clear_has_name_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PermissionReport_FieldTrial::clear_name_id() {
  name_id_ = 0u;
  clear_has_name_id();
}
 ::google::protobuf::uint32 PermissionReport_FieldTrial::name_id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.FieldTrial.name_id)
  return name_id_;
}
 void PermissionReport_FieldTrial::set_name_id(::google::protobuf::uint32 value) {
  set_has_name_id();
  name_id_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.FieldTrial.name_id)
}

// optional fixed32 group_id = 2;
bool PermissionReport_FieldTrial::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PermissionReport_FieldTrial::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
void PermissionReport_FieldTrial::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void PermissionReport_FieldTrial::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
 ::google::protobuf::uint32 PermissionReport_FieldTrial::group_id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.FieldTrial.group_id)
  return group_id_;
}
 void PermissionReport_FieldTrial::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.FieldTrial.group_id)
}

// -------------------------------------------------------------------

// PermissionReport

// optional string origin = 1;
bool PermissionReport::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PermissionReport::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void PermissionReport::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void PermissionReport::clear_origin() {
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin();
}
 const ::std::string& PermissionReport::origin() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.origin)
  return origin_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PermissionReport::set_origin(const ::std::string& value) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.origin)
}
 void PermissionReport::set_origin(const char* value) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safe_browsing.PermissionReport.origin)
}
 void PermissionReport::set_origin(const char* value, size_t size) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.PermissionReport.origin)
}
 ::std::string* PermissionReport::mutable_origin() {
  set_has_origin();
  // @@protoc_insertion_point(field_mutable:safe_browsing.PermissionReport.origin)
  return origin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PermissionReport::release_origin() {
  // @@protoc_insertion_point(field_release:safe_browsing.PermissionReport.origin)
  clear_has_origin();
  return origin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PermissionReport::set_allocated_origin(::std::string* origin) {
  if (origin != NULL) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  origin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.PermissionReport.origin)
}

// optional .safe_browsing.PermissionReport.PermissionType permission = 2;
bool PermissionReport::has_permission() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PermissionReport::set_has_permission() {
  _has_bits_[0] |= 0x00000002u;
}
void PermissionReport::clear_has_permission() {
  _has_bits_[0] &= ~0x00000002u;
}
void PermissionReport::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
 ::safe_browsing::PermissionReport_PermissionType PermissionReport::permission() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.permission)
  return static_cast< ::safe_browsing::PermissionReport_PermissionType >(permission_);
}
 void PermissionReport::set_permission(::safe_browsing::PermissionReport_PermissionType value) {
  assert(::safe_browsing::PermissionReport_PermissionType_IsValid(value));
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.permission)
}

// optional .safe_browsing.PermissionReport.PlatformType platform_type = 3;
bool PermissionReport::has_platform_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PermissionReport::set_has_platform_type() {
  _has_bits_[0] |= 0x00000004u;
}
void PermissionReport::clear_has_platform_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void PermissionReport::clear_platform_type() {
  platform_type_ = 0;
  clear_has_platform_type();
}
 ::safe_browsing::PermissionReport_PlatformType PermissionReport::platform_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.platform_type)
  return static_cast< ::safe_browsing::PermissionReport_PlatformType >(platform_type_);
}
 void PermissionReport::set_platform_type(::safe_browsing::PermissionReport_PlatformType value) {
  assert(::safe_browsing::PermissionReport_PlatformType_IsValid(value));
  set_has_platform_type();
  platform_type_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.platform_type)
}

// optional .safe_browsing.PermissionReport.GestureType gesture = 4;
bool PermissionReport::has_gesture() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PermissionReport::set_has_gesture() {
  _has_bits_[0] |= 0x00000008u;
}
void PermissionReport::clear_has_gesture() {
  _has_bits_[0] &= ~0x00000008u;
}
void PermissionReport::clear_gesture() {
  gesture_ = 0;
  clear_has_gesture();
}
 ::safe_browsing::PermissionReport_GestureType PermissionReport::gesture() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.gesture)
  return static_cast< ::safe_browsing::PermissionReport_GestureType >(gesture_);
}
 void PermissionReport::set_gesture(::safe_browsing::PermissionReport_GestureType value) {
  assert(::safe_browsing::PermissionReport_GestureType_IsValid(value));
  set_has_gesture();
  gesture_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.gesture)
}

// optional .safe_browsing.PermissionReport.Action action = 5;
bool PermissionReport::has_action() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PermissionReport::set_has_action() {
  _has_bits_[0] |= 0x00000010u;
}
void PermissionReport::clear_has_action() {
  _has_bits_[0] &= ~0x00000010u;
}
void PermissionReport::clear_action() {
  action_ = 0;
  clear_has_action();
}
 ::safe_browsing::PermissionReport_Action PermissionReport::action() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.action)
  return static_cast< ::safe_browsing::PermissionReport_Action >(action_);
}
 void PermissionReport::set_action(::safe_browsing::PermissionReport_Action value) {
  assert(::safe_browsing::PermissionReport_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.action)
}

// optional .safe_browsing.PermissionReport.SourceUI source_ui = 6;
bool PermissionReport::has_source_ui() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PermissionReport::set_has_source_ui() {
  _has_bits_[0] |= 0x00000020u;
}
void PermissionReport::clear_has_source_ui() {
  _has_bits_[0] &= ~0x00000020u;
}
void PermissionReport::clear_source_ui() {
  source_ui_ = 0;
  clear_has_source_ui();
}
 ::safe_browsing::PermissionReport_SourceUI PermissionReport::source_ui() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.source_ui)
  return static_cast< ::safe_browsing::PermissionReport_SourceUI >(source_ui_);
}
 void PermissionReport::set_source_ui(::safe_browsing::PermissionReport_SourceUI value) {
  assert(::safe_browsing::PermissionReport_SourceUI_IsValid(value));
  set_has_source_ui();
  source_ui_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.source_ui)
}

// repeated .safe_browsing.PermissionReport.FieldTrial field_trials = 7;
int PermissionReport::field_trials_size() const {
  return field_trials_.size();
}
void PermissionReport::clear_field_trials() {
  field_trials_.Clear();
}
const ::safe_browsing::PermissionReport_FieldTrial& PermissionReport::field_trials(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.field_trials)
  return field_trials_.Get(index);
}
::safe_browsing::PermissionReport_FieldTrial* PermissionReport::mutable_field_trials(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.PermissionReport.field_trials)
  return field_trials_.Mutable(index);
}
::safe_browsing::PermissionReport_FieldTrial* PermissionReport::add_field_trials() {
  // @@protoc_insertion_point(field_add:safe_browsing.PermissionReport.field_trials)
  return field_trials_.Add();
}
::google::protobuf::RepeatedPtrField< ::safe_browsing::PermissionReport_FieldTrial >*
PermissionReport::mutable_field_trials() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.PermissionReport.field_trials)
  return &field_trials_;
}
const ::google::protobuf::RepeatedPtrField< ::safe_browsing::PermissionReport_FieldTrial >&
PermissionReport::field_trials() const {
  // @@protoc_insertion_point(field_list:safe_browsing.PermissionReport.field_trials)
  return field_trials_;
}

// optional int32 num_prior_dismissals = 8;
bool PermissionReport::has_num_prior_dismissals() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PermissionReport::set_has_num_prior_dismissals() {
  _has_bits_[0] |= 0x00000080u;
}
void PermissionReport::clear_has_num_prior_dismissals() {
  _has_bits_[0] &= ~0x00000080u;
}
void PermissionReport::clear_num_prior_dismissals() {
  num_prior_dismissals_ = 0;
  clear_has_num_prior_dismissals();
}
 ::google::protobuf::int32 PermissionReport::num_prior_dismissals() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.num_prior_dismissals)
  return num_prior_dismissals_;
}
 void PermissionReport::set_num_prior_dismissals(::google::protobuf::int32 value) {
  set_has_num_prior_dismissals();
  num_prior_dismissals_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.num_prior_dismissals)
}

// optional int32 num_prior_ignores = 9;
bool PermissionReport::has_num_prior_ignores() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PermissionReport::set_has_num_prior_ignores() {
  _has_bits_[0] |= 0x00000100u;
}
void PermissionReport::clear_has_num_prior_ignores() {
  _has_bits_[0] &= ~0x00000100u;
}
void PermissionReport::clear_num_prior_ignores() {
  num_prior_ignores_ = 0;
  clear_has_num_prior_ignores();
}
 ::google::protobuf::int32 PermissionReport::num_prior_ignores() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.num_prior_ignores)
  return num_prior_ignores_;
}
 void PermissionReport::set_num_prior_ignores(::google::protobuf::int32 value) {
  set_has_num_prior_ignores();
  num_prior_ignores_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.num_prior_ignores)
}

// optional .safe_browsing.PermissionReport.PersistDecision persisted = 10;
bool PermissionReport::has_persisted() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PermissionReport::set_has_persisted() {
  _has_bits_[0] |= 0x00000200u;
}
void PermissionReport::clear_has_persisted() {
  _has_bits_[0] &= ~0x00000200u;
}
void PermissionReport::clear_persisted() {
  persisted_ = 0;
  clear_has_persisted();
}
 ::safe_browsing::PermissionReport_PersistDecision PermissionReport::persisted() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.persisted)
  return static_cast< ::safe_browsing::PermissionReport_PersistDecision >(persisted_);
}
 void PermissionReport::set_persisted(::safe_browsing::PermissionReport_PersistDecision value) {
  assert(::safe_browsing::PermissionReport_PersistDecision_IsValid(value));
  set_has_persisted();
  persisted_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.persisted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace safe_browsing

// @@protoc_insertion_point(global_scope)
