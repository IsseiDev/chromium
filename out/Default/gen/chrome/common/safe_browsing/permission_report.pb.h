// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: permission_report.proto

#ifndef PROTOBUF_permission_5freport_2eproto__INCLUDED
#define PROTOBUF_permission_5freport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace safe_browsing {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_permission_5freport_2eproto();
void protobuf_AssignDesc_permission_5freport_2eproto();
void protobuf_ShutdownFile_permission_5freport_2eproto();

class PermissionReport;
class PermissionReport_FieldTrial;

enum PermissionReport_PlatformType {
  PermissionReport_PlatformType_PLATFORM_TYPE_UNSPECIFIED = 0,
  PermissionReport_PlatformType_DESKTOP_PLATFORM = 1,
  PermissionReport_PlatformType_ANDROID_PLATFORM = 2
};
bool PermissionReport_PlatformType_IsValid(int value);
const PermissionReport_PlatformType PermissionReport_PlatformType_PlatformType_MIN = PermissionReport_PlatformType_PLATFORM_TYPE_UNSPECIFIED;
const PermissionReport_PlatformType PermissionReport_PlatformType_PlatformType_MAX = PermissionReport_PlatformType_ANDROID_PLATFORM;
const int PermissionReport_PlatformType_PlatformType_ARRAYSIZE = PermissionReport_PlatformType_PlatformType_MAX + 1;

enum PermissionReport_GestureType {
  PermissionReport_GestureType_GESTURE_TYPE_UNSPECIFIED = 0,
  PermissionReport_GestureType_GESTURE = 1,
  PermissionReport_GestureType_NO_GESTURE = 2
};
bool PermissionReport_GestureType_IsValid(int value);
const PermissionReport_GestureType PermissionReport_GestureType_GestureType_MIN = PermissionReport_GestureType_GESTURE_TYPE_UNSPECIFIED;
const PermissionReport_GestureType PermissionReport_GestureType_GestureType_MAX = PermissionReport_GestureType_NO_GESTURE;
const int PermissionReport_GestureType_GestureType_ARRAYSIZE = PermissionReport_GestureType_GestureType_MAX + 1;

enum PermissionReport_Action {
  PermissionReport_Action_ACTION_UNSPECIFIED = 0,
  PermissionReport_Action_GRANTED = 1,
  PermissionReport_Action_DENIED = 2,
  PermissionReport_Action_DISMISSED = 3,
  PermissionReport_Action_IGNORED = 4,
  PermissionReport_Action_REVOKED = 5
};
bool PermissionReport_Action_IsValid(int value);
const PermissionReport_Action PermissionReport_Action_Action_MIN = PermissionReport_Action_ACTION_UNSPECIFIED;
const PermissionReport_Action PermissionReport_Action_Action_MAX = PermissionReport_Action_REVOKED;
const int PermissionReport_Action_Action_ARRAYSIZE = PermissionReport_Action_Action_MAX + 1;

enum PermissionReport_SourceUI {
  PermissionReport_SourceUI_SOURCE_UI_UNSPECIFIED = 0,
  PermissionReport_SourceUI_PROMPT = 1,
  PermissionReport_SourceUI_OIB = 2,
  PermissionReport_SourceUI_SITE_SETTINGS = 3,
  PermissionReport_SourceUI_PAGE_ACTION = 4
};
bool PermissionReport_SourceUI_IsValid(int value);
const PermissionReport_SourceUI PermissionReport_SourceUI_SourceUI_MIN = PermissionReport_SourceUI_SOURCE_UI_UNSPECIFIED;
const PermissionReport_SourceUI PermissionReport_SourceUI_SourceUI_MAX = PermissionReport_SourceUI_PAGE_ACTION;
const int PermissionReport_SourceUI_SourceUI_ARRAYSIZE = PermissionReport_SourceUI_SourceUI_MAX + 1;

enum PermissionReport_PermissionType {
  PermissionReport_PermissionType_UNKNOWN_PERMISSION = 0,
  PermissionReport_PermissionType_MIDI_SYSEX = 1,
  PermissionReport_PermissionType_PUSH_MESSAGING = 2,
  PermissionReport_PermissionType_NOTIFICATIONS = 3,
  PermissionReport_PermissionType_GEOLOCATION = 4,
  PermissionReport_PermissionType_PROTECTED_MEDIA_IDENTIFIER = 5,
  PermissionReport_PermissionType_MIDI = 6,
  PermissionReport_PermissionType_DURABLE_STORAGE = 7,
  PermissionReport_PermissionType_AUDIO_CAPTURE = 8,
  PermissionReport_PermissionType_VIDEO_CAPTURE = 9
};
bool PermissionReport_PermissionType_IsValid(int value);
const PermissionReport_PermissionType PermissionReport_PermissionType_PermissionType_MIN = PermissionReport_PermissionType_UNKNOWN_PERMISSION;
const PermissionReport_PermissionType PermissionReport_PermissionType_PermissionType_MAX = PermissionReport_PermissionType_VIDEO_CAPTURE;
const int PermissionReport_PermissionType_PermissionType_ARRAYSIZE = PermissionReport_PermissionType_PermissionType_MAX + 1;

enum PermissionReport_PersistDecision {
  PermissionReport_PersistDecision_PERSIST_DECISION_UNSPECIFIED = 0,
  PermissionReport_PersistDecision_PERSISTED = 1,
  PermissionReport_PersistDecision_NOT_PERSISTED = 2
};
bool PermissionReport_PersistDecision_IsValid(int value);
const PermissionReport_PersistDecision PermissionReport_PersistDecision_PersistDecision_MIN = PermissionReport_PersistDecision_PERSIST_DECISION_UNSPECIFIED;
const PermissionReport_PersistDecision PermissionReport_PersistDecision_PersistDecision_MAX = PermissionReport_PersistDecision_NOT_PERSISTED;
const int PermissionReport_PersistDecision_PersistDecision_ARRAYSIZE = PermissionReport_PersistDecision_PersistDecision_MAX + 1;

// ===================================================================

class PermissionReport_FieldTrial : public ::google::protobuf::MessageLite {
 public:
  PermissionReport_FieldTrial();
  virtual ~PermissionReport_FieldTrial();

  PermissionReport_FieldTrial(const PermissionReport_FieldTrial& from);

  inline PermissionReport_FieldTrial& operator=(const PermissionReport_FieldTrial& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const PermissionReport_FieldTrial& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PermissionReport_FieldTrial* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PermissionReport_FieldTrial* other);

  // implements Message ----------------------------------------------

  inline PermissionReport_FieldTrial* New() const { return New(NULL); }

  PermissionReport_FieldTrial* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PermissionReport_FieldTrial& from);
  void MergeFrom(const PermissionReport_FieldTrial& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PermissionReport_FieldTrial* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 name_id = 1;
  bool has_name_id() const;
  void clear_name_id();
  static const int kNameIdFieldNumber = 1;
  ::google::protobuf::uint32 name_id() const;
  void set_name_id(::google::protobuf::uint32 value);

  // optional fixed32 group_id = 2;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:safe_browsing.PermissionReport.FieldTrial)
 private:
  inline void set_has_name_id();
  inline void clear_has_name_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 name_id_;
  ::google::protobuf::uint32 group_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_permission_5freport_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_permission_5freport_2eproto();
  #endif
  friend void protobuf_AssignDesc_permission_5freport_2eproto();
  friend void protobuf_ShutdownFile_permission_5freport_2eproto();

  void InitAsDefaultInstance();
  static PermissionReport_FieldTrial* default_instance_;
};
// -------------------------------------------------------------------

class PermissionReport : public ::google::protobuf::MessageLite {
 public:
  PermissionReport();
  virtual ~PermissionReport();

  PermissionReport(const PermissionReport& from);

  inline PermissionReport& operator=(const PermissionReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const PermissionReport& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PermissionReport* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PermissionReport* other);

  // implements Message ----------------------------------------------

  inline PermissionReport* New() const { return New(NULL); }

  PermissionReport* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PermissionReport& from);
  void MergeFrom(const PermissionReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PermissionReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef PermissionReport_FieldTrial FieldTrial;

  typedef PermissionReport_PlatformType PlatformType;
  static const PlatformType PLATFORM_TYPE_UNSPECIFIED =
    PermissionReport_PlatformType_PLATFORM_TYPE_UNSPECIFIED;
  static const PlatformType DESKTOP_PLATFORM =
    PermissionReport_PlatformType_DESKTOP_PLATFORM;
  static const PlatformType ANDROID_PLATFORM =
    PermissionReport_PlatformType_ANDROID_PLATFORM;
  static inline bool PlatformType_IsValid(int value) {
    return PermissionReport_PlatformType_IsValid(value);
  }
  static const PlatformType PlatformType_MIN =
    PermissionReport_PlatformType_PlatformType_MIN;
  static const PlatformType PlatformType_MAX =
    PermissionReport_PlatformType_PlatformType_MAX;
  static const int PlatformType_ARRAYSIZE =
    PermissionReport_PlatformType_PlatformType_ARRAYSIZE;

  typedef PermissionReport_GestureType GestureType;
  static const GestureType GESTURE_TYPE_UNSPECIFIED =
    PermissionReport_GestureType_GESTURE_TYPE_UNSPECIFIED;
  static const GestureType GESTURE =
    PermissionReport_GestureType_GESTURE;
  static const GestureType NO_GESTURE =
    PermissionReport_GestureType_NO_GESTURE;
  static inline bool GestureType_IsValid(int value) {
    return PermissionReport_GestureType_IsValid(value);
  }
  static const GestureType GestureType_MIN =
    PermissionReport_GestureType_GestureType_MIN;
  static const GestureType GestureType_MAX =
    PermissionReport_GestureType_GestureType_MAX;
  static const int GestureType_ARRAYSIZE =
    PermissionReport_GestureType_GestureType_ARRAYSIZE;

  typedef PermissionReport_Action Action;
  static const Action ACTION_UNSPECIFIED =
    PermissionReport_Action_ACTION_UNSPECIFIED;
  static const Action GRANTED =
    PermissionReport_Action_GRANTED;
  static const Action DENIED =
    PermissionReport_Action_DENIED;
  static const Action DISMISSED =
    PermissionReport_Action_DISMISSED;
  static const Action IGNORED =
    PermissionReport_Action_IGNORED;
  static const Action REVOKED =
    PermissionReport_Action_REVOKED;
  static inline bool Action_IsValid(int value) {
    return PermissionReport_Action_IsValid(value);
  }
  static const Action Action_MIN =
    PermissionReport_Action_Action_MIN;
  static const Action Action_MAX =
    PermissionReport_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    PermissionReport_Action_Action_ARRAYSIZE;

  typedef PermissionReport_SourceUI SourceUI;
  static const SourceUI SOURCE_UI_UNSPECIFIED =
    PermissionReport_SourceUI_SOURCE_UI_UNSPECIFIED;
  static const SourceUI PROMPT =
    PermissionReport_SourceUI_PROMPT;
  static const SourceUI OIB =
    PermissionReport_SourceUI_OIB;
  static const SourceUI SITE_SETTINGS =
    PermissionReport_SourceUI_SITE_SETTINGS;
  static const SourceUI PAGE_ACTION =
    PermissionReport_SourceUI_PAGE_ACTION;
  static inline bool SourceUI_IsValid(int value) {
    return PermissionReport_SourceUI_IsValid(value);
  }
  static const SourceUI SourceUI_MIN =
    PermissionReport_SourceUI_SourceUI_MIN;
  static const SourceUI SourceUI_MAX =
    PermissionReport_SourceUI_SourceUI_MAX;
  static const int SourceUI_ARRAYSIZE =
    PermissionReport_SourceUI_SourceUI_ARRAYSIZE;

  typedef PermissionReport_PermissionType PermissionType;
  static const PermissionType UNKNOWN_PERMISSION =
    PermissionReport_PermissionType_UNKNOWN_PERMISSION;
  static const PermissionType MIDI_SYSEX =
    PermissionReport_PermissionType_MIDI_SYSEX;
  static const PermissionType PUSH_MESSAGING =
    PermissionReport_PermissionType_PUSH_MESSAGING;
  static const PermissionType NOTIFICATIONS =
    PermissionReport_PermissionType_NOTIFICATIONS;
  static const PermissionType GEOLOCATION =
    PermissionReport_PermissionType_GEOLOCATION;
  static const PermissionType PROTECTED_MEDIA_IDENTIFIER =
    PermissionReport_PermissionType_PROTECTED_MEDIA_IDENTIFIER;
  static const PermissionType MIDI =
    PermissionReport_PermissionType_MIDI;
  static const PermissionType DURABLE_STORAGE =
    PermissionReport_PermissionType_DURABLE_STORAGE;
  static const PermissionType AUDIO_CAPTURE =
    PermissionReport_PermissionType_AUDIO_CAPTURE;
  static const PermissionType VIDEO_CAPTURE =
    PermissionReport_PermissionType_VIDEO_CAPTURE;
  static inline bool PermissionType_IsValid(int value) {
    return PermissionReport_PermissionType_IsValid(value);
  }
  static const PermissionType PermissionType_MIN =
    PermissionReport_PermissionType_PermissionType_MIN;
  static const PermissionType PermissionType_MAX =
    PermissionReport_PermissionType_PermissionType_MAX;
  static const int PermissionType_ARRAYSIZE =
    PermissionReport_PermissionType_PermissionType_ARRAYSIZE;

  typedef PermissionReport_PersistDecision PersistDecision;
  static const PersistDecision PERSIST_DECISION_UNSPECIFIED =
    PermissionReport_PersistDecision_PERSIST_DECISION_UNSPECIFIED;
  static const PersistDecision PERSISTED =
    PermissionReport_PersistDecision_PERSISTED;
  static const PersistDecision NOT_PERSISTED =
    PermissionReport_PersistDecision_NOT_PERSISTED;
  static inline bool PersistDecision_IsValid(int value) {
    return PermissionReport_PersistDecision_IsValid(value);
  }
  static const PersistDecision PersistDecision_MIN =
    PermissionReport_PersistDecision_PersistDecision_MIN;
  static const PersistDecision PersistDecision_MAX =
    PermissionReport_PersistDecision_PersistDecision_MAX;
  static const int PersistDecision_ARRAYSIZE =
    PermissionReport_PersistDecision_PersistDecision_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::std::string& origin() const;
  void set_origin(const ::std::string& value);
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  ::std::string* mutable_origin();
  ::std::string* release_origin();
  void set_allocated_origin(::std::string* origin);

  // optional .safe_browsing.PermissionReport.PermissionType permission = 2;
  bool has_permission() const;
  void clear_permission();
  static const int kPermissionFieldNumber = 2;
  ::safe_browsing::PermissionReport_PermissionType permission() const;
  void set_permission(::safe_browsing::PermissionReport_PermissionType value);

  // optional .safe_browsing.PermissionReport.PlatformType platform_type = 3;
  bool has_platform_type() const;
  void clear_platform_type();
  static const int kPlatformTypeFieldNumber = 3;
  ::safe_browsing::PermissionReport_PlatformType platform_type() const;
  void set_platform_type(::safe_browsing::PermissionReport_PlatformType value);

  // optional .safe_browsing.PermissionReport.GestureType gesture = 4;
  bool has_gesture() const;
  void clear_gesture();
  static const int kGestureFieldNumber = 4;
  ::safe_browsing::PermissionReport_GestureType gesture() const;
  void set_gesture(::safe_browsing::PermissionReport_GestureType value);

  // optional .safe_browsing.PermissionReport.Action action = 5;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 5;
  ::safe_browsing::PermissionReport_Action action() const;
  void set_action(::safe_browsing::PermissionReport_Action value);

  // optional .safe_browsing.PermissionReport.SourceUI source_ui = 6;
  bool has_source_ui() const;
  void clear_source_ui();
  static const int kSourceUiFieldNumber = 6;
  ::safe_browsing::PermissionReport_SourceUI source_ui() const;
  void set_source_ui(::safe_browsing::PermissionReport_SourceUI value);

  // repeated .safe_browsing.PermissionReport.FieldTrial field_trials = 7;
  int field_trials_size() const;
  void clear_field_trials();
  static const int kFieldTrialsFieldNumber = 7;
  const ::safe_browsing::PermissionReport_FieldTrial& field_trials(int index) const;
  ::safe_browsing::PermissionReport_FieldTrial* mutable_field_trials(int index);
  ::safe_browsing::PermissionReport_FieldTrial* add_field_trials();
  ::google::protobuf::RepeatedPtrField< ::safe_browsing::PermissionReport_FieldTrial >*
      mutable_field_trials();
  const ::google::protobuf::RepeatedPtrField< ::safe_browsing::PermissionReport_FieldTrial >&
      field_trials() const;

  // optional int32 num_prior_dismissals = 8;
  bool has_num_prior_dismissals() const;
  void clear_num_prior_dismissals();
  static const int kNumPriorDismissalsFieldNumber = 8;
  ::google::protobuf::int32 num_prior_dismissals() const;
  void set_num_prior_dismissals(::google::protobuf::int32 value);

  // optional int32 num_prior_ignores = 9;
  bool has_num_prior_ignores() const;
  void clear_num_prior_ignores();
  static const int kNumPriorIgnoresFieldNumber = 9;
  ::google::protobuf::int32 num_prior_ignores() const;
  void set_num_prior_ignores(::google::protobuf::int32 value);

  // optional .safe_browsing.PermissionReport.PersistDecision persisted = 10;
  bool has_persisted() const;
  void clear_persisted();
  static const int kPersistedFieldNumber = 10;
  ::safe_browsing::PermissionReport_PersistDecision persisted() const;
  void set_persisted(::safe_browsing::PermissionReport_PersistDecision value);

  // @@protoc_insertion_point(class_scope:safe_browsing.PermissionReport)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_permission();
  inline void clear_has_permission();
  inline void set_has_platform_type();
  inline void clear_has_platform_type();
  inline void set_has_gesture();
  inline void clear_has_gesture();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_source_ui();
  inline void clear_has_source_ui();
  inline void set_has_num_prior_dismissals();
  inline void clear_has_num_prior_dismissals();
  inline void set_has_num_prior_ignores();
  inline void clear_has_num_prior_ignores();
  inline void set_has_persisted();
  inline void clear_has_persisted();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr origin_;
  int permission_;
  int platform_type_;
  int gesture_;
  int action_;
  ::google::protobuf::RepeatedPtrField< ::safe_browsing::PermissionReport_FieldTrial > field_trials_;
  int source_ui_;
  ::google::protobuf::int32 num_prior_dismissals_;
  ::google::protobuf::int32 num_prior_ignores_;
  int persisted_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_permission_5freport_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_permission_5freport_2eproto();
  #endif
  friend void protobuf_AssignDesc_permission_5freport_2eproto();
  friend void protobuf_ShutdownFile_permission_5freport_2eproto();

  void InitAsDefaultInstance();
  static PermissionReport* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PermissionReport_FieldTrial

// optional fixed32 name_id = 1;
inline bool PermissionReport_FieldTrial::has_name_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PermissionReport_FieldTrial::set_has_name_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PermissionReport_FieldTrial::clear_has_name_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PermissionReport_FieldTrial::clear_name_id() {
  name_id_ = 0u;
  clear_has_name_id();
}
inline ::google::protobuf::uint32 PermissionReport_FieldTrial::name_id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.FieldTrial.name_id)
  return name_id_;
}
inline void PermissionReport_FieldTrial::set_name_id(::google::protobuf::uint32 value) {
  set_has_name_id();
  name_id_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.FieldTrial.name_id)
}

// optional fixed32 group_id = 2;
inline bool PermissionReport_FieldTrial::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PermissionReport_FieldTrial::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PermissionReport_FieldTrial::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PermissionReport_FieldTrial::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 PermissionReport_FieldTrial::group_id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.FieldTrial.group_id)
  return group_id_;
}
inline void PermissionReport_FieldTrial::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.FieldTrial.group_id)
}

// -------------------------------------------------------------------

// PermissionReport

// optional string origin = 1;
inline bool PermissionReport::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PermissionReport::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PermissionReport::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PermissionReport::clear_origin() {
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin();
}
inline const ::std::string& PermissionReport::origin() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.origin)
  return origin_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PermissionReport::set_origin(const ::std::string& value) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.origin)
}
inline void PermissionReport::set_origin(const char* value) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safe_browsing.PermissionReport.origin)
}
inline void PermissionReport::set_origin(const char* value, size_t size) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.PermissionReport.origin)
}
inline ::std::string* PermissionReport::mutable_origin() {
  set_has_origin();
  // @@protoc_insertion_point(field_mutable:safe_browsing.PermissionReport.origin)
  return origin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PermissionReport::release_origin() {
  // @@protoc_insertion_point(field_release:safe_browsing.PermissionReport.origin)
  clear_has_origin();
  return origin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PermissionReport::set_allocated_origin(::std::string* origin) {
  if (origin != NULL) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  origin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.PermissionReport.origin)
}

// optional .safe_browsing.PermissionReport.PermissionType permission = 2;
inline bool PermissionReport::has_permission() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PermissionReport::set_has_permission() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PermissionReport::clear_has_permission() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PermissionReport::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
inline ::safe_browsing::PermissionReport_PermissionType PermissionReport::permission() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.permission)
  return static_cast< ::safe_browsing::PermissionReport_PermissionType >(permission_);
}
inline void PermissionReport::set_permission(::safe_browsing::PermissionReport_PermissionType value) {
  assert(::safe_browsing::PermissionReport_PermissionType_IsValid(value));
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.permission)
}

// optional .safe_browsing.PermissionReport.PlatformType platform_type = 3;
inline bool PermissionReport::has_platform_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PermissionReport::set_has_platform_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PermissionReport::clear_has_platform_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PermissionReport::clear_platform_type() {
  platform_type_ = 0;
  clear_has_platform_type();
}
inline ::safe_browsing::PermissionReport_PlatformType PermissionReport::platform_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.platform_type)
  return static_cast< ::safe_browsing::PermissionReport_PlatformType >(platform_type_);
}
inline void PermissionReport::set_platform_type(::safe_browsing::PermissionReport_PlatformType value) {
  assert(::safe_browsing::PermissionReport_PlatformType_IsValid(value));
  set_has_platform_type();
  platform_type_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.platform_type)
}

// optional .safe_browsing.PermissionReport.GestureType gesture = 4;
inline bool PermissionReport::has_gesture() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PermissionReport::set_has_gesture() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PermissionReport::clear_has_gesture() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PermissionReport::clear_gesture() {
  gesture_ = 0;
  clear_has_gesture();
}
inline ::safe_browsing::PermissionReport_GestureType PermissionReport::gesture() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.gesture)
  return static_cast< ::safe_browsing::PermissionReport_GestureType >(gesture_);
}
inline void PermissionReport::set_gesture(::safe_browsing::PermissionReport_GestureType value) {
  assert(::safe_browsing::PermissionReport_GestureType_IsValid(value));
  set_has_gesture();
  gesture_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.gesture)
}

// optional .safe_browsing.PermissionReport.Action action = 5;
inline bool PermissionReport::has_action() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PermissionReport::set_has_action() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PermissionReport::clear_has_action() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PermissionReport::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::safe_browsing::PermissionReport_Action PermissionReport::action() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.action)
  return static_cast< ::safe_browsing::PermissionReport_Action >(action_);
}
inline void PermissionReport::set_action(::safe_browsing::PermissionReport_Action value) {
  assert(::safe_browsing::PermissionReport_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.action)
}

// optional .safe_browsing.PermissionReport.SourceUI source_ui = 6;
inline bool PermissionReport::has_source_ui() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PermissionReport::set_has_source_ui() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PermissionReport::clear_has_source_ui() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PermissionReport::clear_source_ui() {
  source_ui_ = 0;
  clear_has_source_ui();
}
inline ::safe_browsing::PermissionReport_SourceUI PermissionReport::source_ui() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.source_ui)
  return static_cast< ::safe_browsing::PermissionReport_SourceUI >(source_ui_);
}
inline void PermissionReport::set_source_ui(::safe_browsing::PermissionReport_SourceUI value) {
  assert(::safe_browsing::PermissionReport_SourceUI_IsValid(value));
  set_has_source_ui();
  source_ui_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.source_ui)
}

// repeated .safe_browsing.PermissionReport.FieldTrial field_trials = 7;
inline int PermissionReport::field_trials_size() const {
  return field_trials_.size();
}
inline void PermissionReport::clear_field_trials() {
  field_trials_.Clear();
}
inline const ::safe_browsing::PermissionReport_FieldTrial& PermissionReport::field_trials(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.field_trials)
  return field_trials_.Get(index);
}
inline ::safe_browsing::PermissionReport_FieldTrial* PermissionReport::mutable_field_trials(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.PermissionReport.field_trials)
  return field_trials_.Mutable(index);
}
inline ::safe_browsing::PermissionReport_FieldTrial* PermissionReport::add_field_trials() {
  // @@protoc_insertion_point(field_add:safe_browsing.PermissionReport.field_trials)
  return field_trials_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::safe_browsing::PermissionReport_FieldTrial >*
PermissionReport::mutable_field_trials() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.PermissionReport.field_trials)
  return &field_trials_;
}
inline const ::google::protobuf::RepeatedPtrField< ::safe_browsing::PermissionReport_FieldTrial >&
PermissionReport::field_trials() const {
  // @@protoc_insertion_point(field_list:safe_browsing.PermissionReport.field_trials)
  return field_trials_;
}

// optional int32 num_prior_dismissals = 8;
inline bool PermissionReport::has_num_prior_dismissals() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PermissionReport::set_has_num_prior_dismissals() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PermissionReport::clear_has_num_prior_dismissals() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PermissionReport::clear_num_prior_dismissals() {
  num_prior_dismissals_ = 0;
  clear_has_num_prior_dismissals();
}
inline ::google::protobuf::int32 PermissionReport::num_prior_dismissals() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.num_prior_dismissals)
  return num_prior_dismissals_;
}
inline void PermissionReport::set_num_prior_dismissals(::google::protobuf::int32 value) {
  set_has_num_prior_dismissals();
  num_prior_dismissals_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.num_prior_dismissals)
}

// optional int32 num_prior_ignores = 9;
inline bool PermissionReport::has_num_prior_ignores() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PermissionReport::set_has_num_prior_ignores() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PermissionReport::clear_has_num_prior_ignores() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PermissionReport::clear_num_prior_ignores() {
  num_prior_ignores_ = 0;
  clear_has_num_prior_ignores();
}
inline ::google::protobuf::int32 PermissionReport::num_prior_ignores() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.num_prior_ignores)
  return num_prior_ignores_;
}
inline void PermissionReport::set_num_prior_ignores(::google::protobuf::int32 value) {
  set_has_num_prior_ignores();
  num_prior_ignores_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.num_prior_ignores)
}

// optional .safe_browsing.PermissionReport.PersistDecision persisted = 10;
inline bool PermissionReport::has_persisted() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PermissionReport::set_has_persisted() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PermissionReport::clear_has_persisted() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PermissionReport::clear_persisted() {
  persisted_ = 0;
  clear_has_persisted();
}
inline ::safe_browsing::PermissionReport_PersistDecision PermissionReport::persisted() const {
  // @@protoc_insertion_point(field_get:safe_browsing.PermissionReport.persisted)
  return static_cast< ::safe_browsing::PermissionReport_PersistDecision >(persisted_);
}
inline void PermissionReport::set_persisted(::safe_browsing::PermissionReport_PersistDecision value) {
  assert(::safe_browsing::PermissionReport_PersistDecision_IsValid(value));
  set_has_persisted();
  persisted_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.PermissionReport.persisted)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safe_browsing

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::safe_browsing::PermissionReport_PlatformType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::safe_browsing::PermissionReport_GestureType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::safe_browsing::PermissionReport_Action> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::safe_browsing::PermissionReport_SourceUI> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::safe_browsing::PermissionReport_PermissionType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::safe_browsing::PermissionReport_PersistDecision> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_permission_5freport_2eproto__INCLUDED
