// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Generated by
//  chrome/browser/devtools/devtools_protocol_constants_generator.py from
//  gen/blink/core/inspector/protocol.json

#include "base/strings/string_number_conversions.h"
#include "base/strings/string_split.h"
#include "base/strings/string_util.h"
#include "chrome/browser/devtools/devtools_protocol_constants.h"

namespace chrome {
namespace devtools {

const char kProtocolVersion[] = "1.1";

bool IsSupportedProtocolVersion(const std::string& version) {
  std::vector<base::StringPiece> tokens = base::SplitStringPiece(
      version, ".", base::KEEP_WHITESPACE, base::SPLIT_WANT_NONEMPTY);
  int major, minor;
  return tokens.size() == 2 &&
      base::StringToInt(tokens[0], &major) && major == 1 &&
      base::StringToInt(tokens[1], &minor) && minor <= 1;
}

const char kResult[] = "result";

namespace Browser {
  const char kName[] = "Browser";

  namespace TargetInfo {
    const char kParamTargetId[] = "targetId";
    const char kParamTitle[] = "title";
    const char kParamType[] = "type";
    const char kParamUrl[] = "url";
  } // TargetInfo

  namespace attach {
    const char kName[] = "Browser.attach";
    const char kParamTargetId[] = "targetId";
  } // attach

  namespace closeTarget {
    const char kName[] = "Browser.closeTarget";
    const char kParamTargetId[] = "targetId";
    const char kResponseSuccess[] = "success";
  } // closeTarget

  namespace createBrowserContext {
    const char kName[] = "Browser.createBrowserContext";
    const char kResponseBrowserContextId[] = "browserContextId";
  } // createBrowserContext

  namespace createTarget {
    const char kName[] = "Browser.createTarget";
    const char kParamBrowserContextId[] = "browserContextId";
    const char kParamHeight[] = "height";
    const char kParamUrl[] = "url";
    const char kParamWidth[] = "width";
    const char kResponseTargetId[] = "targetId";
  } // createTarget

  namespace detach {
    const char kName[] = "Browser.detach";
    const char kParamTargetId[] = "targetId";
  } // detach

  namespace dispatchMessage {
    const char kName[] = "Browser.dispatchMessage";
    const char kParamMessage[] = "message";
    const char kParamTargetId[] = "targetId";
  } // dispatchMessage

  namespace disposeBrowserContext {
    const char kName[] = "Browser.disposeBrowserContext";
    const char kParamBrowserContextId[] = "browserContextId";
    const char kResponseSuccess[] = "success";
  } // disposeBrowserContext

  namespace getTargets {
    const char kName[] = "Browser.getTargets";
    const char kResponseTargetInfo[] = "targetInfo";
  } // getTargets

  namespace sendMessage {
    const char kName[] = "Browser.sendMessage";
    const char kParamMessage[] = "message";
    const char kParamTargetId[] = "targetId";
  } // sendMessage
} // Browser

namespace DOM {
  const char kName[] = "DOM";

  namespace RGBA {
    const char kParamA[] = "a";
    const char kParamB[] = "b";
    const char kParamG[] = "g";
    const char kParamR[] = "r";
  } // RGBA

  namespace setFileInputFiles {
    const char kName[] = "DOM.setFileInputFiles";
    const char kParamFiles[] = "files";
    const char kParamNodeId[] = "nodeId";
  } // setFileInputFiles
} // DOM

namespace Emulation {
  const char kName[] = "Emulation";

  namespace ScreenOrientation {
    const char kParamAngle[] = "angle";
    const char kParamType[] = "type";

    namespace Type {
      const char kEnumLandscapePrimary[] = "landscapePrimary";
      const char kEnumLandscapeSecondary[] = "landscapeSecondary";
      const char kEnumPortraitPrimary[] = "portraitPrimary";
      const char kEnumPortraitSecondary[] = "portraitSecondary";
    } // Type
  } // ScreenOrientation

  namespace canEmulate {
    const char kName[] = "Emulation.canEmulate";
    const char kResponseResult[] = "result";
  } // canEmulate

  namespace clearDeviceMetricsOverride {
    const char kName[] = "Emulation.clearDeviceMetricsOverride";
  } // clearDeviceMetricsOverride

  namespace clearGeolocationOverride {
    const char kName[] = "Emulation.clearGeolocationOverride";
  } // clearGeolocationOverride

  namespace setDeviceMetricsOverride {
    const char kName[] = "Emulation.setDeviceMetricsOverride";
    const char kParamDeviceScaleFactor[] = "deviceScaleFactor";
    const char kParamFitWindow[] = "fitWindow";
    const char kParamHeight[] = "height";
    const char kParamMobile[] = "mobile";
    const char kParamOffsetX[] = "offsetX";
    const char kParamOffsetY[] = "offsetY";
    const char kParamPositionX[] = "positionX";
    const char kParamPositionY[] = "positionY";
    const char kParamScale[] = "scale";
    const char kParamScreenHeight[] = "screenHeight";
    const char kParamScreenOrientation[] = "screenOrientation";
    const char kParamScreenWidth[] = "screenWidth";
    const char kParamWidth[] = "width";
  } // setDeviceMetricsOverride

  namespace setGeolocationOverride {
    const char kName[] = "Emulation.setGeolocationOverride";
    const char kParamAccuracy[] = "accuracy";
    const char kParamLatitude[] = "latitude";
    const char kParamLongitude[] = "longitude";
  } // setGeolocationOverride

  namespace setTouchEmulationEnabled {
    const char kName[] = "Emulation.setTouchEmulationEnabled";
    const char kParamConfiguration[] = "configuration";
    const char kParamEnabled[] = "enabled";

    namespace Configuration {
      const char kEnumDesktop[] = "desktop";
      const char kEnumMobile[] = "mobile";
    } // Configuration
  } // setTouchEmulationEnabled

  namespace setVisibleSize {
    const char kName[] = "Emulation.setVisibleSize";
    const char kParamHeight[] = "height";
    const char kParamWidth[] = "width";
  } // setVisibleSize
} // Emulation

namespace IO {
  const char kName[] = "IO";

  namespace close {
    const char kName[] = "IO.close";
    const char kParamHandle[] = "handle";
  } // close

  namespace read {
    const char kName[] = "IO.read";
    const char kParamHandle[] = "handle";
    const char kParamOffset[] = "offset";
    const char kParamSize[] = "size";
    const char kResponseData[] = "data";
    const char kResponseEof[] = "eof";
  } // read
} // IO

namespace Input {
  const char kName[] = "Input";

  namespace dispatchKeyEvent {
    const char kName[] = "Input.dispatchKeyEvent";
    const char kParamAutoRepeat[] = "autoRepeat";
    const char kParamCode[] = "code";
    const char kParamIsKeypad[] = "isKeypad";
    const char kParamIsSystemKey[] = "isSystemKey";
    const char kParamKey[] = "key";
    const char kParamKeyIdentifier[] = "keyIdentifier";
    const char kParamModifiers[] = "modifiers";
    const char kParamNativeVirtualKeyCode[] = "nativeVirtualKeyCode";
    const char kParamText[] = "text";
    const char kParamTimestamp[] = "timestamp";
    const char kParamType[] = "type";
    const char kParamUnmodifiedText[] = "unmodifiedText";
    const char kParamWindowsVirtualKeyCode[] = "windowsVirtualKeyCode";

    namespace Type {
      const char kEnumChar[] = "char";
      const char kEnumKeyDown[] = "keyDown";
      const char kEnumKeyUp[] = "keyUp";
      const char kEnumRawKeyDown[] = "rawKeyDown";
    } // Type
  } // dispatchKeyEvent

  namespace dispatchMouseEvent {
    const char kName[] = "Input.dispatchMouseEvent";
    const char kParamButton[] = "button";
    const char kParamClickCount[] = "clickCount";
    const char kParamModifiers[] = "modifiers";
    const char kParamTimestamp[] = "timestamp";
    const char kParamType[] = "type";
    const char kParamX[] = "x";
    const char kParamY[] = "y";

    namespace Button {
      const char kEnumLeft[] = "left";
      const char kEnumMiddle[] = "middle";
      const char kEnumNone[] = "none";
      const char kEnumRight[] = "right";
    } // Button

    namespace Type {
      const char kEnumMouseMoved[] = "mouseMoved";
      const char kEnumMousePressed[] = "mousePressed";
      const char kEnumMouseReleased[] = "mouseReleased";
    } // Type
  } // dispatchMouseEvent

  namespace emulateTouchFromMouseEvent {
    const char kName[] = "Input.emulateTouchFromMouseEvent";
    const char kParamButton[] = "button";
    const char kParamClickCount[] = "clickCount";
    const char kParamDeltaX[] = "deltaX";
    const char kParamDeltaY[] = "deltaY";
    const char kParamModifiers[] = "modifiers";
    const char kParamTimestamp[] = "timestamp";
    const char kParamType[] = "type";
    const char kParamX[] = "x";
    const char kParamY[] = "y";

    namespace Button {
      const char kEnumLeft[] = "left";
      const char kEnumMiddle[] = "middle";
      const char kEnumNone[] = "none";
      const char kEnumRight[] = "right";
    } // Button

    namespace Type {
      const char kEnumMouseMoved[] = "mouseMoved";
      const char kEnumMousePressed[] = "mousePressed";
      const char kEnumMouseReleased[] = "mouseReleased";
      const char kEnumMouseWheel[] = "mouseWheel";
    } // Type
  } // emulateTouchFromMouseEvent

  namespace synthesizePinchGesture {
    const char kName[] = "Input.synthesizePinchGesture";
    const char kParamGestureSourceType[] = "gestureSourceType";
    const char kParamRelativeSpeed[] = "relativeSpeed";
    const char kParamScaleFactor[] = "scaleFactor";
    const char kParamX[] = "x";
    const char kParamY[] = "y";
  } // synthesizePinchGesture

  namespace synthesizeScrollGesture {
    const char kName[] = "Input.synthesizeScrollGesture";
    const char kParamGestureSourceType[] = "gestureSourceType";
    const char kParamInteractionMarkerName[] = "interactionMarkerName";
    const char kParamPreventFling[] = "preventFling";
    const char kParamRepeatCount[] = "repeatCount";
    const char kParamRepeatDelayMs[] = "repeatDelayMs";
    const char kParamSpeed[] = "speed";
    const char kParamX[] = "x";
    const char kParamXDistance[] = "xDistance";
    const char kParamXOverscroll[] = "xOverscroll";
    const char kParamY[] = "y";
    const char kParamYDistance[] = "yDistance";
    const char kParamYOverscroll[] = "yOverscroll";
  } // synthesizeScrollGesture

  namespace synthesizeTapGesture {
    const char kName[] = "Input.synthesizeTapGesture";
    const char kParamDuration[] = "duration";
    const char kParamGestureSourceType[] = "gestureSourceType";
    const char kParamTapCount[] = "tapCount";
    const char kParamX[] = "x";
    const char kParamY[] = "y";
  } // synthesizeTapGesture
} // Input

namespace Inspector {
  const char kName[] = "Inspector";

  namespace detached {
    const char kName[] = "Inspector.detached";
    const char kParamReason[] = "reason";
  } // detached

  namespace disable {
    const char kName[] = "Inspector.disable";
  } // disable

  namespace enable {
    const char kName[] = "Inspector.enable";
  } // enable

  namespace targetCrashed {
    const char kName[] = "Inspector.targetCrashed";
  } // targetCrashed
} // Inspector

namespace Memory {
  const char kName[] = "Memory";

  namespace setPressureNotificationsSuppressed {
    const char kName[] = "Memory.setPressureNotificationsSuppressed";
    const char kParamSuppressed[] = "suppressed";
  } // setPressureNotificationsSuppressed

  namespace simulatePressureNotification {
    const char kName[] = "Memory.simulatePressureNotification";
    const char kParamLevel[] = "level";
  } // simulatePressureNotification
} // Memory

namespace Network {
  const char kName[] = "Network";

  namespace CertificateDetails {
    const char kParamIssuer[] = "issuer";
    const char kParamSubject[] = "subject";
    const char kParamValidFrom[] = "validFrom";
    const char kParamValidTo[] = "validTo";
  } // CertificateDetails

  namespace CertificateSubject {
    const char kParamName[] = "name";
    const char kParamSanDnsNames[] = "sanDnsNames";
    const char kParamSanIpAddresses[] = "sanIpAddresses";
  } // CertificateSubject

  namespace Cookie {
    const char kParamDomain[] = "domain";
    const char kParamExpires[] = "expires";
    const char kParamHttpOnly[] = "httpOnly";
    const char kParamName[] = "name";
    const char kParamPath[] = "path";
    const char kParamSameSite[] = "sameSite";
    const char kParamSecure[] = "secure";
    const char kParamSession[] = "session";
    const char kParamSize[] = "size";
    const char kParamValue[] = "value";
  } // Cookie

  namespace canEmulateNetworkConditions {
    const char kName[] = "Network.canEmulateNetworkConditions";
    const char kResponseResult[] = "result";
  } // canEmulateNetworkConditions

  namespace clearBrowserCache {
    const char kName[] = "Network.clearBrowserCache";
  } // clearBrowserCache

  namespace clearBrowserCookies {
    const char kName[] = "Network.clearBrowserCookies";
  } // clearBrowserCookies

  namespace deleteCookie {
    const char kName[] = "Network.deleteCookie";
    const char kParamCookieName[] = "cookieName";
    const char kParamUrl[] = "url";
  } // deleteCookie

  namespace emulateNetworkConditions {
    const char kName[] = "Network.emulateNetworkConditions";
    const char kParamConnectionType[] = "connectionType";
    const char kParamDownloadThroughput[] = "downloadThroughput";
    const char kParamLatency[] = "latency";
    const char kParamOffline[] = "offline";
    const char kParamUploadThroughput[] = "uploadThroughput";
  } // emulateNetworkConditions

  namespace getCertificateDetails {
    const char kName[] = "Network.getCertificateDetails";
    const char kParamCertificateId[] = "certificateId";
    const char kResponseResult[] = "result";
  } // getCertificateDetails

  namespace getCookies {
    const char kName[] = "Network.getCookies";
    const char kResponseCookies[] = "cookies";
  } // getCookies

  namespace setCookie {
    const char kName[] = "Network.setCookie";
    const char kParamDomain[] = "domain";
    const char kParamExpirationDate[] = "expirationDate";
    const char kParamHttpOnly[] = "httpOnly";
    const char kParamName[] = "name";
    const char kParamPath[] = "path";
    const char kParamSameSite[] = "sameSite";
    const char kParamSecure[] = "secure";
    const char kParamUrl[] = "url";
    const char kParamValue[] = "value";
    const char kResponseSuccess[] = "success";
  } // setCookie

  namespace showCertificateViewer {
    const char kName[] = "Network.showCertificateViewer";
    const char kParamCertificateId[] = "certificateId";
  } // showCertificateViewer
} // Network

namespace Page {
  const char kName[] = "Page";

  namespace NavigationEntry {
    const char kParamId[] = "id";
    const char kParamTitle[] = "title";
    const char kParamUrl[] = "url";
  } // NavigationEntry

  namespace ScreencastFrameMetadata {
    const char kParamDeviceHeight[] = "deviceHeight";
    const char kParamDeviceWidth[] = "deviceWidth";
    const char kParamOffsetTop[] = "offsetTop";
    const char kParamPageScaleFactor[] = "pageScaleFactor";
    const char kParamScrollOffsetX[] = "scrollOffsetX";
    const char kParamScrollOffsetY[] = "scrollOffsetY";
    const char kParamTimestamp[] = "timestamp";
  } // ScreencastFrameMetadata

  namespace captureScreenshot {
    const char kName[] = "Page.captureScreenshot";
    const char kResponseData[] = "data";
  } // captureScreenshot

  namespace clearDeviceMetricsOverride {
    const char kName[] = "Page.clearDeviceMetricsOverride";
  } // clearDeviceMetricsOverride

  namespace clearGeolocationOverride {
    const char kName[] = "Page.clearGeolocationOverride";
  } // clearGeolocationOverride

  namespace colorPicked {
    const char kName[] = "Page.colorPicked";
    const char kParamColor[] = "color";
  } // colorPicked

  namespace deleteCookie {
    const char kName[] = "Page.deleteCookie";
    const char kParamCookieName[] = "cookieName";
    const char kParamUrl[] = "url";
  } // deleteCookie

  namespace disable {
    const char kName[] = "Page.disable";
  } // disable

  namespace enable {
    const char kName[] = "Page.enable";
  } // enable

  namespace getCookies {
    const char kName[] = "Page.getCookies";
    const char kResponseCookies[] = "cookies";
  } // getCookies

  namespace getNavigationHistory {
    const char kName[] = "Page.getNavigationHistory";
    const char kResponseCurrentIndex[] = "currentIndex";
    const char kResponseEntries[] = "entries";
  } // getNavigationHistory

  namespace handleJavaScriptDialog {
    const char kName[] = "Page.handleJavaScriptDialog";
    const char kParamAccept[] = "accept";
    const char kParamPromptText[] = "promptText";
  } // handleJavaScriptDialog

  namespace interstitialHidden {
    const char kName[] = "Page.interstitialHidden";
  } // interstitialHidden

  namespace interstitialShown {
    const char kName[] = "Page.interstitialShown";
  } // interstitialShown

  namespace navigate {
    const char kName[] = "Page.navigate";
    const char kParamUrl[] = "url";
    const char kResponseFrameId[] = "frameId";
  } // navigate

  namespace navigateToHistoryEntry {
    const char kName[] = "Page.navigateToHistoryEntry";
    const char kParamEntryId[] = "entryId";
  } // navigateToHistoryEntry

  namespace navigationRequested {
    const char kName[] = "Page.navigationRequested";
    const char kParamIsInMainFrame[] = "isInMainFrame";
    const char kParamIsRedirect[] = "isRedirect";
    const char kParamNavigationId[] = "navigationId";
    const char kParamUrl[] = "url";
  } // navigationRequested

  namespace processNavigation {
    const char kName[] = "Page.processNavigation";
    const char kParamNavigationId[] = "navigationId";
    const char kParamResponse[] = "response";
  } // processNavigation

  namespace reload {
    const char kName[] = "Page.reload";
    const char kParamIgnoreCache[] = "ignoreCache";
    const char kParamScriptToEvaluateOnLoad[] = "scriptToEvaluateOnLoad";
  } // reload

  namespace requestAppBanner {
    const char kName[] = "Page.requestAppBanner";
  } // requestAppBanner

  namespace screencastFrame {
    const char kName[] = "Page.screencastFrame";
    const char kParamData[] = "data";
    const char kParamMetadata[] = "metadata";
    const char kParamSessionId[] = "sessionId";
  } // screencastFrame

  namespace screencastFrameAck {
    const char kName[] = "Page.screencastFrameAck";
    const char kParamSessionId[] = "sessionId";
  } // screencastFrameAck

  namespace screencastVisibilityChanged {
    const char kName[] = "Page.screencastVisibilityChanged";
    const char kParamVisible[] = "visible";
  } // screencastVisibilityChanged

  namespace setColorPickerEnabled {
    const char kName[] = "Page.setColorPickerEnabled";
    const char kParamEnabled[] = "enabled";
  } // setColorPickerEnabled

  namespace setControlNavigations {
    const char kName[] = "Page.setControlNavigations";
    const char kParamEnabled[] = "enabled";
  } // setControlNavigations

  namespace setDeviceMetricsOverride {
    const char kName[] = "Page.setDeviceMetricsOverride";
    const char kParamDeviceScaleFactor[] = "deviceScaleFactor";
    const char kParamFitWindow[] = "fitWindow";
    const char kParamHeight[] = "height";
    const char kParamMobile[] = "mobile";
    const char kParamOffsetX[] = "offsetX";
    const char kParamOffsetY[] = "offsetY";
    const char kParamPositionX[] = "positionX";
    const char kParamPositionY[] = "positionY";
    const char kParamScale[] = "scale";
    const char kParamScreenHeight[] = "screenHeight";
    const char kParamScreenOrientation[] = "screenOrientation";
    const char kParamScreenWidth[] = "screenWidth";
    const char kParamWidth[] = "width";
  } // setDeviceMetricsOverride

  namespace setGeolocationOverride {
    const char kName[] = "Page.setGeolocationOverride";
    const char kParamAccuracy[] = "accuracy";
    const char kParamLatitude[] = "latitude";
    const char kParamLongitude[] = "longitude";
  } // setGeolocationOverride

  namespace setTouchEmulationEnabled {
    const char kName[] = "Page.setTouchEmulationEnabled";
    const char kParamConfiguration[] = "configuration";
    const char kParamEnabled[] = "enabled";

    namespace Configuration {
      const char kEnumDesktop[] = "desktop";
      const char kEnumMobile[] = "mobile";
    } // Configuration
  } // setTouchEmulationEnabled

  namespace startScreencast {
    const char kName[] = "Page.startScreencast";
    const char kParamEveryNthFrame[] = "everyNthFrame";
    const char kParamFormat[] = "format";
    const char kParamMaxHeight[] = "maxHeight";
    const char kParamMaxWidth[] = "maxWidth";
    const char kParamQuality[] = "quality";

    namespace Format {
      const char kEnumJpeg[] = "jpeg";
      const char kEnumPng[] = "png";
    } // Format
  } // startScreencast

  namespace stopScreencast {
    const char kName[] = "Page.stopScreencast";
  } // stopScreencast
} // Page

namespace Schema {
  const char kName[] = "Schema";

  namespace Domain {
    const char kParamName[] = "name";
    const char kParamVersion[] = "version";
  } // Domain

  namespace getDomains {
    const char kName[] = "Schema.getDomains";
    const char kResponseDomains[] = "domains";
  } // getDomains
} // Schema

namespace Security {
  const char kName[] = "Security";

  namespace MixedContentStatus {
    const char kParamDisplayedInsecureContent[] = "displayedInsecureContent";
    const char kParamDisplayedInsecureContentStyle[] = "displayedInsecureContentStyle";
    const char kParamRanInsecureContent[] = "ranInsecureContent";
    const char kParamRanInsecureContentStyle[] = "ranInsecureContentStyle";
  } // MixedContentStatus

  namespace SecurityStateExplanation {
    const char kParamCertificateId[] = "certificateId";
    const char kParamDescription[] = "description";
    const char kParamSecurityState[] = "securityState";
    const char kParamSummary[] = "summary";
  } // SecurityStateExplanation

  namespace disable {
    const char kName[] = "Security.disable";
  } // disable

  namespace enable {
    const char kName[] = "Security.enable";
  } // enable

  namespace securityStateChanged {
    const char kName[] = "Security.securityStateChanged";
    const char kParamExplanations[] = "explanations";
    const char kParamMixedContentStatus[] = "mixedContentStatus";
    const char kParamSchemeIsCryptographic[] = "schemeIsCryptographic";
    const char kParamSecurityState[] = "securityState";
  } // securityStateChanged
} // Security

namespace ServiceWorker {
  const char kName[] = "ServiceWorker";

  namespace ServiceWorkerErrorMessage {
    const char kParamColumnNumber[] = "columnNumber";
    const char kParamErrorMessage[] = "errorMessage";
    const char kParamLineNumber[] = "lineNumber";
    const char kParamRegistrationId[] = "registrationId";
    const char kParamSourceURL[] = "sourceURL";
    const char kParamVersionId[] = "versionId";
  } // ServiceWorkerErrorMessage

  namespace ServiceWorkerRegistration {
    const char kParamIsDeleted[] = "isDeleted";
    const char kParamRegistrationId[] = "registrationId";
    const char kParamScopeURL[] = "scopeURL";
  } // ServiceWorkerRegistration

  namespace ServiceWorkerVersion {
    const char kParamControlledClients[] = "controlledClients";
    const char kParamRegistrationId[] = "registrationId";
    const char kParamRunningStatus[] = "runningStatus";
    const char kParamScriptLastModified[] = "scriptLastModified";
    const char kParamScriptResponseTime[] = "scriptResponseTime";
    const char kParamScriptURL[] = "scriptURL";
    const char kParamStatus[] = "status";
    const char kParamVersionId[] = "versionId";
  } // ServiceWorkerVersion

  namespace TargetInfo {
    const char kParamId[] = "id";
    const char kParamTitle[] = "title";
    const char kParamType[] = "type";
    const char kParamUrl[] = "url";
  } // TargetInfo

  namespace activateTarget {
    const char kName[] = "ServiceWorker.activateTarget";
    const char kParamTargetId[] = "targetId";
  } // activateTarget

  namespace deliverPushMessage {
    const char kName[] = "ServiceWorker.deliverPushMessage";
    const char kParamData[] = "data";
    const char kParamOrigin[] = "origin";
    const char kParamRegistrationId[] = "registrationId";
  } // deliverPushMessage

  namespace disable {
    const char kName[] = "ServiceWorker.disable";
  } // disable

  namespace dispatchMessage {
    const char kName[] = "ServiceWorker.dispatchMessage";
    const char kParamMessage[] = "message";
    const char kParamWorkerId[] = "workerId";
  } // dispatchMessage

  namespace dispatchSyncEvent {
    const char kName[] = "ServiceWorker.dispatchSyncEvent";
    const char kParamLastChance[] = "lastChance";
    const char kParamOrigin[] = "origin";
    const char kParamRegistrationId[] = "registrationId";
    const char kParamTag[] = "tag";
  } // dispatchSyncEvent

  namespace enable {
    const char kName[] = "ServiceWorker.enable";
  } // enable

  namespace getTargetInfo {
    const char kName[] = "ServiceWorker.getTargetInfo";
    const char kParamTargetId[] = "targetId";
    const char kResponseTargetInfo[] = "targetInfo";
  } // getTargetInfo

  namespace inspectWorker {
    const char kName[] = "ServiceWorker.inspectWorker";
    const char kParamVersionId[] = "versionId";
  } // inspectWorker

  namespace sendMessage {
    const char kName[] = "ServiceWorker.sendMessage";
    const char kParamMessage[] = "message";
    const char kParamWorkerId[] = "workerId";
  } // sendMessage

  namespace setForceUpdateOnPageLoad {
    const char kName[] = "ServiceWorker.setForceUpdateOnPageLoad";
    const char kParamForceUpdateOnPageLoad[] = "forceUpdateOnPageLoad";
  } // setForceUpdateOnPageLoad

  namespace skipWaiting {
    const char kName[] = "ServiceWorker.skipWaiting";
    const char kParamScopeURL[] = "scopeURL";
  } // skipWaiting

  namespace startWorker {
    const char kName[] = "ServiceWorker.startWorker";
    const char kParamScopeURL[] = "scopeURL";
  } // startWorker

  namespace stop {
    const char kName[] = "ServiceWorker.stop";
    const char kParamWorkerId[] = "workerId";
  } // stop

  namespace stopWorker {
    const char kName[] = "ServiceWorker.stopWorker";
    const char kParamVersionId[] = "versionId";
  } // stopWorker

  namespace unregister {
    const char kName[] = "ServiceWorker.unregister";
    const char kParamScopeURL[] = "scopeURL";
  } // unregister

  namespace updateRegistration {
    const char kName[] = "ServiceWorker.updateRegistration";
    const char kParamScopeURL[] = "scopeURL";
  } // updateRegistration

  namespace workerCreated {
    const char kName[] = "ServiceWorker.workerCreated";
    const char kParamUrl[] = "url";
    const char kParamVersionId[] = "versionId";
    const char kParamWorkerId[] = "workerId";
  } // workerCreated

  namespace workerErrorReported {
    const char kName[] = "ServiceWorker.workerErrorReported";
    const char kParamErrorMessage[] = "errorMessage";
  } // workerErrorReported

  namespace workerRegistrationUpdated {
    const char kName[] = "ServiceWorker.workerRegistrationUpdated";
    const char kParamRegistrations[] = "registrations";
  } // workerRegistrationUpdated

  namespace workerTerminated {
    const char kName[] = "ServiceWorker.workerTerminated";
    const char kParamWorkerId[] = "workerId";
  } // workerTerminated

  namespace workerVersionUpdated {
    const char kName[] = "ServiceWorker.workerVersionUpdated";
    const char kParamVersions[] = "versions";
  } // workerVersionUpdated
} // ServiceWorker

namespace Storage {
  const char kName[] = "Storage";

  namespace clearDataForOrigin {
    const char kName[] = "Storage.clearDataForOrigin";
    const char kParamOrigin[] = "origin";
    const char kParamStorageTypes[] = "storageTypes";
  } // clearDataForOrigin
} // Storage

namespace SystemInfo {
  const char kName[] = "SystemInfo";

  namespace GPUDevice {
    const char kParamDeviceId[] = "deviceId";
    const char kParamDeviceString[] = "deviceString";
    const char kParamVendorId[] = "vendorId";
    const char kParamVendorString[] = "vendorString";
  } // GPUDevice

  namespace GPUInfo {
    const char kParamAuxAttributes[] = "auxAttributes";
    const char kParamDevices[] = "devices";
    const char kParamDriverBugWorkarounds[] = "driverBugWorkarounds";
    const char kParamFeatureStatus[] = "featureStatus";
  } // GPUInfo

  namespace getInfo {
    const char kName[] = "SystemInfo.getInfo";
    const char kResponseGpu[] = "gpu";
    const char kResponseModelName[] = "modelName";
    const char kResponseModelVersion[] = "modelVersion";
  } // getInfo
} // SystemInfo

namespace Tethering {
  const char kName[] = "Tethering";

  namespace accepted {
    const char kName[] = "Tethering.accepted";
    const char kParamConnectionId[] = "connectionId";
    const char kParamPort[] = "port";
  } // accepted

  namespace bind {
    const char kName[] = "Tethering.bind";
    const char kParamPort[] = "port";
  } // bind

  namespace unbind {
    const char kName[] = "Tethering.unbind";
    const char kParamPort[] = "port";
  } // unbind
} // Tethering

namespace Tracing {
  const char kName[] = "Tracing";

  namespace TraceConfig {
    const char kParamEnableArgumentFilter[] = "enableArgumentFilter";
    const char kParamEnableSampling[] = "enableSampling";
    const char kParamEnableSystrace[] = "enableSystrace";
    const char kParamExcludedCategories[] = "excludedCategories";
    const char kParamIncludedCategories[] = "includedCategories";
    const char kParamMemoryDumpConfig[] = "memoryDumpConfig";
    const char kParamRecordMode[] = "recordMode";
    const char kParamSyntheticDelays[] = "syntheticDelays";

    namespace RecordMode {
      const char kEnumEchoToConsole[] = "echoToConsole";
      const char kEnumRecordAsMuchAsPossible[] = "recordAsMuchAsPossible";
      const char kEnumRecordContinuously[] = "recordContinuously";
      const char kEnumRecordUntilFull[] = "recordUntilFull";
    } // RecordMode
  } // TraceConfig

  namespace bufferUsage {
    const char kName[] = "Tracing.bufferUsage";
    const char kParamEventCount[] = "eventCount";
    const char kParamPercentFull[] = "percentFull";
    const char kParamValue[] = "value";
  } // bufferUsage

  namespace dataCollected {
    const char kName[] = "Tracing.dataCollected";
    const char kParamValue[] = "value";
  } // dataCollected

  namespace end {
    const char kName[] = "Tracing.end";
  } // end

  namespace getCategories {
    const char kName[] = "Tracing.getCategories";
    const char kResponseCategories[] = "categories";
  } // getCategories

  namespace recordClockSyncMarker {
    const char kName[] = "Tracing.recordClockSyncMarker";
    const char kParamSyncId[] = "syncId";
  } // recordClockSyncMarker

  namespace requestMemoryDump {
    const char kName[] = "Tracing.requestMemoryDump";
    const char kResponseDumpGuid[] = "dumpGuid";
    const char kResponseSuccess[] = "success";
  } // requestMemoryDump

  namespace start {
    const char kName[] = "Tracing.start";
    const char kParamBufferUsageReportingInterval[] = "bufferUsageReportingInterval";
    const char kParamCategories[] = "categories";
    const char kParamOptions[] = "options";
    const char kParamTraceConfig[] = "traceConfig";
    const char kParamTransferMode[] = "transferMode";

    namespace TransferMode {
      const char kEnumReportEvents[] = "ReportEvents";
      const char kEnumReturnAsStream[] = "ReturnAsStream";
    } // TransferMode
  } // start

  namespace tracingComplete {
    const char kName[] = "Tracing.tracingComplete";
    const char kParamStream[] = "stream";
  } // tracingComplete
} // Tracing


}  // devtools
}  // chrome
