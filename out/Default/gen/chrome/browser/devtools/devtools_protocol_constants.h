// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_DEVTOOLS_DEVTOOLS_PROTOCOL_CONSTANTS_H_
#define CHROME_BROWSER_DEVTOOLS_DEVTOOLS_PROTOCOL_CONSTANTS_H_

// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Generated by
//  chrome/browser/devtools/devtools_protocol_constants_generator.py from
//  gen/blink/core/inspector/protocol.json

#include <string>

namespace chrome {
namespace devtools {

extern const char kProtocolVersion[];

bool IsSupportedProtocolVersion(const std::string& version);

extern const char kResult[];

namespace Browser {
  extern const char kName[];

  namespace TargetInfo {
    extern const char kParamTargetId[];
    extern const char kParamTitle[];
    extern const char kParamType[];
    extern const char kParamUrl[];
  } // TargetInfo

  namespace attach {
    extern const char kName[];
    extern const char kParamTargetId[];
  } // attach

  namespace closeTarget {
    extern const char kName[];
    extern const char kParamTargetId[];
    extern const char kResponseSuccess[];
  } // closeTarget

  namespace createBrowserContext {
    extern const char kName[];
    extern const char kResponseBrowserContextId[];
  } // createBrowserContext

  namespace createTarget {
    extern const char kName[];
    extern const char kParamBrowserContextId[];
    extern const char kParamHeight[];
    extern const char kParamUrl[];
    extern const char kParamWidth[];
    extern const char kResponseTargetId[];
  } // createTarget

  namespace detach {
    extern const char kName[];
    extern const char kParamTargetId[];
  } // detach

  namespace dispatchMessage {
    extern const char kName[];
    extern const char kParamMessage[];
    extern const char kParamTargetId[];
  } // dispatchMessage

  namespace disposeBrowserContext {
    extern const char kName[];
    extern const char kParamBrowserContextId[];
    extern const char kResponseSuccess[];
  } // disposeBrowserContext

  namespace getTargets {
    extern const char kName[];
    extern const char kResponseTargetInfo[];
  } // getTargets

  namespace sendMessage {
    extern const char kName[];
    extern const char kParamMessage[];
    extern const char kParamTargetId[];
  } // sendMessage
} // Browser

namespace DOM {
  extern const char kName[];

  namespace RGBA {
    extern const char kParamA[];
    extern const char kParamB[];
    extern const char kParamG[];
    extern const char kParamR[];
  } // RGBA

  namespace setFileInputFiles {
    extern const char kName[];
    extern const char kParamFiles[];
    extern const char kParamNodeId[];
  } // setFileInputFiles
} // DOM

namespace Emulation {
  extern const char kName[];

  namespace ScreenOrientation {
    extern const char kParamAngle[];
    extern const char kParamType[];

    namespace Type {
      extern const char kEnumLandscapePrimary[];
      extern const char kEnumLandscapeSecondary[];
      extern const char kEnumPortraitPrimary[];
      extern const char kEnumPortraitSecondary[];
    } // Type
  } // ScreenOrientation

  namespace canEmulate {
    extern const char kName[];
    extern const char kResponseResult[];
  } // canEmulate

  namespace clearDeviceMetricsOverride {
    extern const char kName[];
  } // clearDeviceMetricsOverride

  namespace clearGeolocationOverride {
    extern const char kName[];
  } // clearGeolocationOverride

  namespace setDeviceMetricsOverride {
    extern const char kName[];
    extern const char kParamDeviceScaleFactor[];
    extern const char kParamFitWindow[];
    extern const char kParamHeight[];
    extern const char kParamMobile[];
    extern const char kParamOffsetX[];
    extern const char kParamOffsetY[];
    extern const char kParamPositionX[];
    extern const char kParamPositionY[];
    extern const char kParamScale[];
    extern const char kParamScreenHeight[];
    extern const char kParamScreenOrientation[];
    extern const char kParamScreenWidth[];
    extern const char kParamWidth[];
  } // setDeviceMetricsOverride

  namespace setGeolocationOverride {
    extern const char kName[];
    extern const char kParamAccuracy[];
    extern const char kParamLatitude[];
    extern const char kParamLongitude[];
  } // setGeolocationOverride

  namespace setTouchEmulationEnabled {
    extern const char kName[];
    extern const char kParamConfiguration[];
    extern const char kParamEnabled[];

    namespace Configuration {
      extern const char kEnumDesktop[];
      extern const char kEnumMobile[];
    } // Configuration
  } // setTouchEmulationEnabled

  namespace setVisibleSize {
    extern const char kName[];
    extern const char kParamHeight[];
    extern const char kParamWidth[];
  } // setVisibleSize
} // Emulation

namespace IO {
  extern const char kName[];

  namespace close {
    extern const char kName[];
    extern const char kParamHandle[];
  } // close

  namespace read {
    extern const char kName[];
    extern const char kParamHandle[];
    extern const char kParamOffset[];
    extern const char kParamSize[];
    extern const char kResponseData[];
    extern const char kResponseEof[];
  } // read
} // IO

namespace Input {
  extern const char kName[];

  namespace dispatchKeyEvent {
    extern const char kName[];
    extern const char kParamAutoRepeat[];
    extern const char kParamCode[];
    extern const char kParamIsKeypad[];
    extern const char kParamIsSystemKey[];
    extern const char kParamKey[];
    extern const char kParamKeyIdentifier[];
    extern const char kParamModifiers[];
    extern const char kParamNativeVirtualKeyCode[];
    extern const char kParamText[];
    extern const char kParamTimestamp[];
    extern const char kParamType[];
    extern const char kParamUnmodifiedText[];
    extern const char kParamWindowsVirtualKeyCode[];

    namespace Type {
      extern const char kEnumChar[];
      extern const char kEnumKeyDown[];
      extern const char kEnumKeyUp[];
      extern const char kEnumRawKeyDown[];
    } // Type
  } // dispatchKeyEvent

  namespace dispatchMouseEvent {
    extern const char kName[];
    extern const char kParamButton[];
    extern const char kParamClickCount[];
    extern const char kParamModifiers[];
    extern const char kParamTimestamp[];
    extern const char kParamType[];
    extern const char kParamX[];
    extern const char kParamY[];

    namespace Button {
      extern const char kEnumLeft[];
      extern const char kEnumMiddle[];
      extern const char kEnumNone[];
      extern const char kEnumRight[];
    } // Button

    namespace Type {
      extern const char kEnumMouseMoved[];
      extern const char kEnumMousePressed[];
      extern const char kEnumMouseReleased[];
    } // Type
  } // dispatchMouseEvent

  namespace emulateTouchFromMouseEvent {
    extern const char kName[];
    extern const char kParamButton[];
    extern const char kParamClickCount[];
    extern const char kParamDeltaX[];
    extern const char kParamDeltaY[];
    extern const char kParamModifiers[];
    extern const char kParamTimestamp[];
    extern const char kParamType[];
    extern const char kParamX[];
    extern const char kParamY[];

    namespace Button {
      extern const char kEnumLeft[];
      extern const char kEnumMiddle[];
      extern const char kEnumNone[];
      extern const char kEnumRight[];
    } // Button

    namespace Type {
      extern const char kEnumMouseMoved[];
      extern const char kEnumMousePressed[];
      extern const char kEnumMouseReleased[];
      extern const char kEnumMouseWheel[];
    } // Type
  } // emulateTouchFromMouseEvent

  namespace synthesizePinchGesture {
    extern const char kName[];
    extern const char kParamGestureSourceType[];
    extern const char kParamRelativeSpeed[];
    extern const char kParamScaleFactor[];
    extern const char kParamX[];
    extern const char kParamY[];
  } // synthesizePinchGesture

  namespace synthesizeScrollGesture {
    extern const char kName[];
    extern const char kParamGestureSourceType[];
    extern const char kParamInteractionMarkerName[];
    extern const char kParamPreventFling[];
    extern const char kParamRepeatCount[];
    extern const char kParamRepeatDelayMs[];
    extern const char kParamSpeed[];
    extern const char kParamX[];
    extern const char kParamXDistance[];
    extern const char kParamXOverscroll[];
    extern const char kParamY[];
    extern const char kParamYDistance[];
    extern const char kParamYOverscroll[];
  } // synthesizeScrollGesture

  namespace synthesizeTapGesture {
    extern const char kName[];
    extern const char kParamDuration[];
    extern const char kParamGestureSourceType[];
    extern const char kParamTapCount[];
    extern const char kParamX[];
    extern const char kParamY[];
  } // synthesizeTapGesture
} // Input

namespace Inspector {
  extern const char kName[];

  namespace detached {
    extern const char kName[];
    extern const char kParamReason[];
  } // detached

  namespace disable {
    extern const char kName[];
  } // disable

  namespace enable {
    extern const char kName[];
  } // enable

  namespace targetCrashed {
    extern const char kName[];
  } // targetCrashed
} // Inspector

namespace Memory {
  extern const char kName[];

  namespace setPressureNotificationsSuppressed {
    extern const char kName[];
    extern const char kParamSuppressed[];
  } // setPressureNotificationsSuppressed

  namespace simulatePressureNotification {
    extern const char kName[];
    extern const char kParamLevel[];
  } // simulatePressureNotification
} // Memory

namespace Network {
  extern const char kName[];

  namespace CertificateDetails {
    extern const char kParamIssuer[];
    extern const char kParamSubject[];
    extern const char kParamValidFrom[];
    extern const char kParamValidTo[];
  } // CertificateDetails

  namespace CertificateSubject {
    extern const char kParamName[];
    extern const char kParamSanDnsNames[];
    extern const char kParamSanIpAddresses[];
  } // CertificateSubject

  namespace Cookie {
    extern const char kParamDomain[];
    extern const char kParamExpires[];
    extern const char kParamHttpOnly[];
    extern const char kParamName[];
    extern const char kParamPath[];
    extern const char kParamSameSite[];
    extern const char kParamSecure[];
    extern const char kParamSession[];
    extern const char kParamSize[];
    extern const char kParamValue[];
  } // Cookie

  namespace canEmulateNetworkConditions {
    extern const char kName[];
    extern const char kResponseResult[];
  } // canEmulateNetworkConditions

  namespace clearBrowserCache {
    extern const char kName[];
  } // clearBrowserCache

  namespace clearBrowserCookies {
    extern const char kName[];
  } // clearBrowserCookies

  namespace deleteCookie {
    extern const char kName[];
    extern const char kParamCookieName[];
    extern const char kParamUrl[];
  } // deleteCookie

  namespace emulateNetworkConditions {
    extern const char kName[];
    extern const char kParamConnectionType[];
    extern const char kParamDownloadThroughput[];
    extern const char kParamLatency[];
    extern const char kParamOffline[];
    extern const char kParamUploadThroughput[];
  } // emulateNetworkConditions

  namespace getCertificateDetails {
    extern const char kName[];
    extern const char kParamCertificateId[];
    extern const char kResponseResult[];
  } // getCertificateDetails

  namespace getCookies {
    extern const char kName[];
    extern const char kResponseCookies[];
  } // getCookies

  namespace setCookie {
    extern const char kName[];
    extern const char kParamDomain[];
    extern const char kParamExpirationDate[];
    extern const char kParamHttpOnly[];
    extern const char kParamName[];
    extern const char kParamPath[];
    extern const char kParamSameSite[];
    extern const char kParamSecure[];
    extern const char kParamUrl[];
    extern const char kParamValue[];
    extern const char kResponseSuccess[];
  } // setCookie

  namespace showCertificateViewer {
    extern const char kName[];
    extern const char kParamCertificateId[];
  } // showCertificateViewer
} // Network

namespace Page {
  extern const char kName[];

  namespace NavigationEntry {
    extern const char kParamId[];
    extern const char kParamTitle[];
    extern const char kParamUrl[];
  } // NavigationEntry

  namespace ScreencastFrameMetadata {
    extern const char kParamDeviceHeight[];
    extern const char kParamDeviceWidth[];
    extern const char kParamOffsetTop[];
    extern const char kParamPageScaleFactor[];
    extern const char kParamScrollOffsetX[];
    extern const char kParamScrollOffsetY[];
    extern const char kParamTimestamp[];
  } // ScreencastFrameMetadata

  namespace captureScreenshot {
    extern const char kName[];
    extern const char kResponseData[];
  } // captureScreenshot

  namespace clearDeviceMetricsOverride {
    extern const char kName[];
  } // clearDeviceMetricsOverride

  namespace clearGeolocationOverride {
    extern const char kName[];
  } // clearGeolocationOverride

  namespace colorPicked {
    extern const char kName[];
    extern const char kParamColor[];
  } // colorPicked

  namespace deleteCookie {
    extern const char kName[];
    extern const char kParamCookieName[];
    extern const char kParamUrl[];
  } // deleteCookie

  namespace disable {
    extern const char kName[];
  } // disable

  namespace enable {
    extern const char kName[];
  } // enable

  namespace getCookies {
    extern const char kName[];
    extern const char kResponseCookies[];
  } // getCookies

  namespace getNavigationHistory {
    extern const char kName[];
    extern const char kResponseCurrentIndex[];
    extern const char kResponseEntries[];
  } // getNavigationHistory

  namespace handleJavaScriptDialog {
    extern const char kName[];
    extern const char kParamAccept[];
    extern const char kParamPromptText[];
  } // handleJavaScriptDialog

  namespace interstitialHidden {
    extern const char kName[];
  } // interstitialHidden

  namespace interstitialShown {
    extern const char kName[];
  } // interstitialShown

  namespace navigate {
    extern const char kName[];
    extern const char kParamUrl[];
    extern const char kResponseFrameId[];
  } // navigate

  namespace navigateToHistoryEntry {
    extern const char kName[];
    extern const char kParamEntryId[];
  } // navigateToHistoryEntry

  namespace navigationRequested {
    extern const char kName[];
    extern const char kParamIsInMainFrame[];
    extern const char kParamIsRedirect[];
    extern const char kParamNavigationId[];
    extern const char kParamUrl[];
  } // navigationRequested

  namespace processNavigation {
    extern const char kName[];
    extern const char kParamNavigationId[];
    extern const char kParamResponse[];
  } // processNavigation

  namespace reload {
    extern const char kName[];
    extern const char kParamIgnoreCache[];
    extern const char kParamScriptToEvaluateOnLoad[];
  } // reload

  namespace requestAppBanner {
    extern const char kName[];
  } // requestAppBanner

  namespace screencastFrame {
    extern const char kName[];
    extern const char kParamData[];
    extern const char kParamMetadata[];
    extern const char kParamSessionId[];
  } // screencastFrame

  namespace screencastFrameAck {
    extern const char kName[];
    extern const char kParamSessionId[];
  } // screencastFrameAck

  namespace screencastVisibilityChanged {
    extern const char kName[];
    extern const char kParamVisible[];
  } // screencastVisibilityChanged

  namespace setColorPickerEnabled {
    extern const char kName[];
    extern const char kParamEnabled[];
  } // setColorPickerEnabled

  namespace setControlNavigations {
    extern const char kName[];
    extern const char kParamEnabled[];
  } // setControlNavigations

  namespace setDeviceMetricsOverride {
    extern const char kName[];
    extern const char kParamDeviceScaleFactor[];
    extern const char kParamFitWindow[];
    extern const char kParamHeight[];
    extern const char kParamMobile[];
    extern const char kParamOffsetX[];
    extern const char kParamOffsetY[];
    extern const char kParamPositionX[];
    extern const char kParamPositionY[];
    extern const char kParamScale[];
    extern const char kParamScreenHeight[];
    extern const char kParamScreenOrientation[];
    extern const char kParamScreenWidth[];
    extern const char kParamWidth[];
  } // setDeviceMetricsOverride

  namespace setGeolocationOverride {
    extern const char kName[];
    extern const char kParamAccuracy[];
    extern const char kParamLatitude[];
    extern const char kParamLongitude[];
  } // setGeolocationOverride

  namespace setTouchEmulationEnabled {
    extern const char kName[];
    extern const char kParamConfiguration[];
    extern const char kParamEnabled[];

    namespace Configuration {
      extern const char kEnumDesktop[];
      extern const char kEnumMobile[];
    } // Configuration
  } // setTouchEmulationEnabled

  namespace startScreencast {
    extern const char kName[];
    extern const char kParamEveryNthFrame[];
    extern const char kParamFormat[];
    extern const char kParamMaxHeight[];
    extern const char kParamMaxWidth[];
    extern const char kParamQuality[];

    namespace Format {
      extern const char kEnumJpeg[];
      extern const char kEnumPng[];
    } // Format
  } // startScreencast

  namespace stopScreencast {
    extern const char kName[];
  } // stopScreencast
} // Page

namespace Schema {
  extern const char kName[];

  namespace Domain {
    extern const char kParamName[];
    extern const char kParamVersion[];
  } // Domain

  namespace getDomains {
    extern const char kName[];
    extern const char kResponseDomains[];
  } // getDomains
} // Schema

namespace Security {
  extern const char kName[];

  namespace MixedContentStatus {
    extern const char kParamDisplayedInsecureContent[];
    extern const char kParamDisplayedInsecureContentStyle[];
    extern const char kParamRanInsecureContent[];
    extern const char kParamRanInsecureContentStyle[];
  } // MixedContentStatus

  namespace SecurityStateExplanation {
    extern const char kParamCertificateId[];
    extern const char kParamDescription[];
    extern const char kParamSecurityState[];
    extern const char kParamSummary[];
  } // SecurityStateExplanation

  namespace disable {
    extern const char kName[];
  } // disable

  namespace enable {
    extern const char kName[];
  } // enable

  namespace securityStateChanged {
    extern const char kName[];
    extern const char kParamExplanations[];
    extern const char kParamMixedContentStatus[];
    extern const char kParamSchemeIsCryptographic[];
    extern const char kParamSecurityState[];
  } // securityStateChanged
} // Security

namespace ServiceWorker {
  extern const char kName[];

  namespace ServiceWorkerErrorMessage {
    extern const char kParamColumnNumber[];
    extern const char kParamErrorMessage[];
    extern const char kParamLineNumber[];
    extern const char kParamRegistrationId[];
    extern const char kParamSourceURL[];
    extern const char kParamVersionId[];
  } // ServiceWorkerErrorMessage

  namespace ServiceWorkerRegistration {
    extern const char kParamIsDeleted[];
    extern const char kParamRegistrationId[];
    extern const char kParamScopeURL[];
  } // ServiceWorkerRegistration

  namespace ServiceWorkerVersion {
    extern const char kParamControlledClients[];
    extern const char kParamRegistrationId[];
    extern const char kParamRunningStatus[];
    extern const char kParamScriptLastModified[];
    extern const char kParamScriptResponseTime[];
    extern const char kParamScriptURL[];
    extern const char kParamStatus[];
    extern const char kParamVersionId[];
  } // ServiceWorkerVersion

  namespace TargetInfo {
    extern const char kParamId[];
    extern const char kParamTitle[];
    extern const char kParamType[];
    extern const char kParamUrl[];
  } // TargetInfo

  namespace activateTarget {
    extern const char kName[];
    extern const char kParamTargetId[];
  } // activateTarget

  namespace deliverPushMessage {
    extern const char kName[];
    extern const char kParamData[];
    extern const char kParamOrigin[];
    extern const char kParamRegistrationId[];
  } // deliverPushMessage

  namespace disable {
    extern const char kName[];
  } // disable

  namespace dispatchMessage {
    extern const char kName[];
    extern const char kParamMessage[];
    extern const char kParamWorkerId[];
  } // dispatchMessage

  namespace dispatchSyncEvent {
    extern const char kName[];
    extern const char kParamLastChance[];
    extern const char kParamOrigin[];
    extern const char kParamRegistrationId[];
    extern const char kParamTag[];
  } // dispatchSyncEvent

  namespace enable {
    extern const char kName[];
  } // enable

  namespace getTargetInfo {
    extern const char kName[];
    extern const char kParamTargetId[];
    extern const char kResponseTargetInfo[];
  } // getTargetInfo

  namespace inspectWorker {
    extern const char kName[];
    extern const char kParamVersionId[];
  } // inspectWorker

  namespace sendMessage {
    extern const char kName[];
    extern const char kParamMessage[];
    extern const char kParamWorkerId[];
  } // sendMessage

  namespace setForceUpdateOnPageLoad {
    extern const char kName[];
    extern const char kParamForceUpdateOnPageLoad[];
  } // setForceUpdateOnPageLoad

  namespace skipWaiting {
    extern const char kName[];
    extern const char kParamScopeURL[];
  } // skipWaiting

  namespace startWorker {
    extern const char kName[];
    extern const char kParamScopeURL[];
  } // startWorker

  namespace stop {
    extern const char kName[];
    extern const char kParamWorkerId[];
  } // stop

  namespace stopWorker {
    extern const char kName[];
    extern const char kParamVersionId[];
  } // stopWorker

  namespace unregister {
    extern const char kName[];
    extern const char kParamScopeURL[];
  } // unregister

  namespace updateRegistration {
    extern const char kName[];
    extern const char kParamScopeURL[];
  } // updateRegistration

  namespace workerCreated {
    extern const char kName[];
    extern const char kParamUrl[];
    extern const char kParamVersionId[];
    extern const char kParamWorkerId[];
  } // workerCreated

  namespace workerErrorReported {
    extern const char kName[];
    extern const char kParamErrorMessage[];
  } // workerErrorReported

  namespace workerRegistrationUpdated {
    extern const char kName[];
    extern const char kParamRegistrations[];
  } // workerRegistrationUpdated

  namespace workerTerminated {
    extern const char kName[];
    extern const char kParamWorkerId[];
  } // workerTerminated

  namespace workerVersionUpdated {
    extern const char kName[];
    extern const char kParamVersions[];
  } // workerVersionUpdated
} // ServiceWorker

namespace Storage {
  extern const char kName[];

  namespace clearDataForOrigin {
    extern const char kName[];
    extern const char kParamOrigin[];
    extern const char kParamStorageTypes[];
  } // clearDataForOrigin
} // Storage

namespace SystemInfo {
  extern const char kName[];

  namespace GPUDevice {
    extern const char kParamDeviceId[];
    extern const char kParamDeviceString[];
    extern const char kParamVendorId[];
    extern const char kParamVendorString[];
  } // GPUDevice

  namespace GPUInfo {
    extern const char kParamAuxAttributes[];
    extern const char kParamDevices[];
    extern const char kParamDriverBugWorkarounds[];
    extern const char kParamFeatureStatus[];
  } // GPUInfo

  namespace getInfo {
    extern const char kName[];
    extern const char kResponseGpu[];
    extern const char kResponseModelName[];
    extern const char kResponseModelVersion[];
  } // getInfo
} // SystemInfo

namespace Tethering {
  extern const char kName[];

  namespace accepted {
    extern const char kName[];
    extern const char kParamConnectionId[];
    extern const char kParamPort[];
  } // accepted

  namespace bind {
    extern const char kName[];
    extern const char kParamPort[];
  } // bind

  namespace unbind {
    extern const char kName[];
    extern const char kParamPort[];
  } // unbind
} // Tethering

namespace Tracing {
  extern const char kName[];

  namespace TraceConfig {
    extern const char kParamEnableArgumentFilter[];
    extern const char kParamEnableSampling[];
    extern const char kParamEnableSystrace[];
    extern const char kParamExcludedCategories[];
    extern const char kParamIncludedCategories[];
    extern const char kParamMemoryDumpConfig[];
    extern const char kParamRecordMode[];
    extern const char kParamSyntheticDelays[];

    namespace RecordMode {
      extern const char kEnumEchoToConsole[];
      extern const char kEnumRecordAsMuchAsPossible[];
      extern const char kEnumRecordContinuously[];
      extern const char kEnumRecordUntilFull[];
    } // RecordMode
  } // TraceConfig

  namespace bufferUsage {
    extern const char kName[];
    extern const char kParamEventCount[];
    extern const char kParamPercentFull[];
    extern const char kParamValue[];
  } // bufferUsage

  namespace dataCollected {
    extern const char kName[];
    extern const char kParamValue[];
  } // dataCollected

  namespace end {
    extern const char kName[];
  } // end

  namespace getCategories {
    extern const char kName[];
    extern const char kResponseCategories[];
  } // getCategories

  namespace recordClockSyncMarker {
    extern const char kName[];
    extern const char kParamSyncId[];
  } // recordClockSyncMarker

  namespace requestMemoryDump {
    extern const char kName[];
    extern const char kResponseDumpGuid[];
    extern const char kResponseSuccess[];
  } // requestMemoryDump

  namespace start {
    extern const char kName[];
    extern const char kParamBufferUsageReportingInterval[];
    extern const char kParamCategories[];
    extern const char kParamOptions[];
    extern const char kParamTraceConfig[];
    extern const char kParamTransferMode[];

    namespace TransferMode {
      extern const char kEnumReportEvents[];
      extern const char kEnumReturnAsStream[];
    } // TransferMode
  } // start

  namespace tracingComplete {
    extern const char kName[];
    extern const char kParamStream[];
  } // tracingComplete
} // Tracing


}  // devtools
}  // chrome

#endif  // CHROME_BROWSER_DEVTOOLS_DEVTOOLS_PROTOCOL_CONSTANTS_H_
