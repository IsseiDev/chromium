// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resource_prefetch_predictor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "resource_prefetch_predictor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace chrome_browser_predictors {

void protobuf_ShutdownFile_resource_5fprefetch_5fpredictor_2eproto() {
  delete Metadata::default_instance_;
  delete ResourceData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Metadata::default_instance_ = new Metadata();
  ResourceData::default_instance_ = new ResourceData();
  Metadata::default_instance_->InitAsDefaultInstance();
  ResourceData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_resource_5fprefetch_5fpredictor_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto_once_);
void protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto_once_,
                 &protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_resource_5fprefetch_5fpredictor_2eproto {
  StaticDescriptorInitializer_resource_5fprefetch_5fpredictor_2eproto() {
    protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto();
  }
} static_descriptor_initializer_resource_5fprefetch_5fpredictor_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForMetadata(
    Metadata* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metadata::kMainPageUrlFieldNumber;
const int Metadata::kLastVisitTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metadata::Metadata()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_predictors.Metadata)
}

void Metadata::InitAsDefaultInstance() {
}

Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chrome_browser_predictors.Metadata)
}

void Metadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  main_page_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_visit_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:chrome_browser_predictors.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  main_page_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Metadata& Metadata::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto();
#endif
  return *default_instance_;
}

Metadata* Metadata::default_instance_ = NULL;

Metadata* Metadata::New(::google::protobuf::Arena* arena) const {
  Metadata* n = new Metadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_predictors.Metadata)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_main_page_url()) {
      main_page_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    last_visit_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForMetadata, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_predictors.Metadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string main_page_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_main_page_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_visit_time;
        break;
      }

      // optional uint64 last_visit_time = 2;
      case 2: {
        if (tag == 16) {
         parse_last_visit_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_visit_time_)));
          set_has_last_visit_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_predictors.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_predictors.Metadata)
  return false;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_predictors.Metadata)
  // optional string main_page_url = 1;
  if (has_main_page_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->main_page_url(), output);
  }

  // optional uint64 last_visit_time = 2;
  if (has_last_visit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_visit_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_predictors.Metadata)
}

int Metadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_predictors.Metadata)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string main_page_url = 1;
    if (has_main_page_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->main_page_url());
    }

    // optional uint64 last_visit_time = 2;
    if (has_last_visit_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_visit_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Metadata*>(&from));
}

void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_predictors.Metadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_main_page_url()) {
      set_has_main_page_url();
      main_page_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_page_url_);
    }
    if (from.has_last_visit_time()) {
      set_last_visit_time(from.last_visit_time());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_predictors.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {

  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metadata::InternalSwap(Metadata* other) {
  main_page_url_.Swap(&other->main_page_url_);
  std::swap(last_visit_time_, other->last_visit_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Metadata::GetTypeName() const {
  return "chrome_browser_predictors.Metadata";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metadata

// optional string main_page_url = 1;
bool Metadata::has_main_page_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Metadata::set_has_main_page_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Metadata::clear_has_main_page_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Metadata::clear_main_page_url() {
  main_page_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_main_page_url();
}
 const ::std::string& Metadata::main_page_url() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.Metadata.main_page_url)
  return main_page_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadata::set_main_page_url(const ::std::string& value) {
  set_has_main_page_url();
  main_page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.Metadata.main_page_url)
}
 void Metadata::set_main_page_url(const char* value) {
  set_has_main_page_url();
  main_page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_predictors.Metadata.main_page_url)
}
 void Metadata::set_main_page_url(const char* value, size_t size) {
  set_has_main_page_url();
  main_page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_predictors.Metadata.main_page_url)
}
 ::std::string* Metadata::mutable_main_page_url() {
  set_has_main_page_url();
  // @@protoc_insertion_point(field_mutable:chrome_browser_predictors.Metadata.main_page_url)
  return main_page_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Metadata::release_main_page_url() {
  // @@protoc_insertion_point(field_release:chrome_browser_predictors.Metadata.main_page_url)
  clear_has_main_page_url();
  return main_page_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadata::set_allocated_main_page_url(::std::string* main_page_url) {
  if (main_page_url != NULL) {
    set_has_main_page_url();
  } else {
    clear_has_main_page_url();
  }
  main_page_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main_page_url);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_predictors.Metadata.main_page_url)
}

// optional uint64 last_visit_time = 2;
bool Metadata::has_last_visit_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Metadata::set_has_last_visit_time() {
  _has_bits_[0] |= 0x00000002u;
}
void Metadata::clear_has_last_visit_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void Metadata::clear_last_visit_time() {
  last_visit_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_visit_time();
}
 ::google::protobuf::uint64 Metadata::last_visit_time() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.Metadata.last_visit_time)
  return last_visit_time_;
}
 void Metadata::set_last_visit_time(::google::protobuf::uint64 value) {
  set_has_last_visit_time();
  last_visit_time_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.Metadata.last_visit_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForResourceData(
    ResourceData* ptr) {
  return ptr->mutable_unknown_fields();
}

bool ResourceData_ResourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_MAIN_FRAME;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_SUB_FRAME;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_STYLESHEET;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_SCRIPT;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_IMAGE;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_FONT_RESOURCE;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_SUB_RESOURCE;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_OBJECT;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_MEDIA;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_WORKER;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_SHARED_WORKER;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_PREFETCH;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_FAVICON;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_XHR;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_PING;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_SERVICE_WORKER;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_CSP_REPORT;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_PLUGIN_RESOURCE;
const ResourceData_ResourceType ResourceData::RESOURCE_TYPE_LAST_TYPE;
const ResourceData_ResourceType ResourceData::ResourceType_MIN;
const ResourceData_ResourceType ResourceData::ResourceType_MAX;
const int ResourceData::ResourceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ResourceData_Priority_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResourceData_Priority ResourceData::REQUEST_PRIORITY_IDLE;
const ResourceData_Priority ResourceData::REQUEST_PRIORITY_LOWEST;
const ResourceData_Priority ResourceData::REQUEST_PRIORITY_LOW;
const ResourceData_Priority ResourceData::REQUEST_PRIORITY_MEDIUM;
const ResourceData_Priority ResourceData::REQUEST_PRIORITY_HIGHEST;
const ResourceData_Priority ResourceData::Priority_MIN;
const ResourceData_Priority ResourceData::Priority_MAX;
const int ResourceData::Priority_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceData::kPrimaryKeyFieldNumber;
const int ResourceData::kResourceUrlFieldNumber;
const int ResourceData::kResourceTypeFieldNumber;
const int ResourceData::kNumberOfHitsFieldNumber;
const int ResourceData::kNumberOfMissesFieldNumber;
const int ResourceData::kConsecutiveMissesFieldNumber;
const int ResourceData::kAveragePositionFieldNumber;
const int ResourceData::kPriorityFieldNumber;
const int ResourceData::kHasValidatorsFieldNumber;
const int ResourceData::kAlwaysRevalidateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceData::ResourceData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_predictors.ResourceData)
}

void ResourceData::InitAsDefaultInstance() {
}

ResourceData::ResourceData(const ResourceData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chrome_browser_predictors.ResourceData)
}

void ResourceData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_type_ = 0;
  number_of_hits_ = 0u;
  number_of_misses_ = 0u;
  consecutive_misses_ = 0u;
  average_position_ = 0;
  priority_ = 0;
  has_validators_ = false;
  always_revalidate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceData::~ResourceData() {
  // @@protoc_insertion_point(destructor:chrome_browser_predictors.ResourceData)
  SharedDtor();
}

void ResourceData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResourceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResourceData& ResourceData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto();
#endif
  return *default_instance_;
}

ResourceData* ResourceData::default_instance_ = NULL;

ResourceData* ResourceData::New(::google::protobuf::Arena* arena) const {
  ResourceData* n = new ResourceData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceData::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_predictors.ResourceData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResourceData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResourceData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(resource_type_, priority_);
    if (has_primary_key()) {
      primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_resource_url()) {
      resource_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(has_validators_, always_revalidate_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResourceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForResourceData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_predictors.ResourceData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string primary_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resource_url;
        break;
      }

      // optional string resource_url = 2;
      case 2: {
        if (tag == 18) {
         parse_resource_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_resource_type;
        break;
      }

      // optional .chrome_browser_predictors.ResourceData.ResourceType resource_type = 3;
      case 3: {
        if (tag == 24) {
         parse_resource_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_predictors::ResourceData_ResourceType_IsValid(value)) {
            set_resource_type(static_cast< ::chrome_browser_predictors::ResourceData_ResourceType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_number_of_hits;
        break;
      }

      // optional uint32 number_of_hits = 4;
      case 4: {
        if (tag == 32) {
         parse_number_of_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_hits_)));
          set_has_number_of_hits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_number_of_misses;
        break;
      }

      // optional uint32 number_of_misses = 5;
      case 5: {
        if (tag == 40) {
         parse_number_of_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_misses_)));
          set_has_number_of_misses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_consecutive_misses;
        break;
      }

      // optional uint32 consecutive_misses = 6;
      case 6: {
        if (tag == 48) {
         parse_consecutive_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consecutive_misses_)));
          set_has_consecutive_misses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_average_position;
        break;
      }

      // optional double average_position = 7;
      case 7: {
        if (tag == 57) {
         parse_average_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_position_)));
          set_has_average_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_priority;
        break;
      }

      // optional .chrome_browser_predictors.ResourceData.Priority priority = 8;
      case 8: {
        if (tag == 64) {
         parse_priority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_predictors::ResourceData_Priority_IsValid(value)) {
            set_priority(static_cast< ::chrome_browser_predictors::ResourceData_Priority >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_has_validators;
        break;
      }

      // optional bool has_validators = 9;
      case 9: {
        if (tag == 72) {
         parse_has_validators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_validators_)));
          set_has_has_validators();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_always_revalidate;
        break;
      }

      // optional bool always_revalidate = 10;
      case 10: {
        if (tag == 80) {
         parse_always_revalidate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &always_revalidate_)));
          set_has_always_revalidate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_predictors.ResourceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_predictors.ResourceData)
  return false;
#undef DO_
}

void ResourceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_predictors.ResourceData)
  // optional string primary_key = 1;
  if (has_primary_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->primary_key(), output);
  }

  // optional string resource_url = 2;
  if (has_resource_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resource_url(), output);
  }

  // optional .chrome_browser_predictors.ResourceData.ResourceType resource_type = 3;
  if (has_resource_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->resource_type(), output);
  }

  // optional uint32 number_of_hits = 4;
  if (has_number_of_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->number_of_hits(), output);
  }

  // optional uint32 number_of_misses = 5;
  if (has_number_of_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->number_of_misses(), output);
  }

  // optional uint32 consecutive_misses = 6;
  if (has_consecutive_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->consecutive_misses(), output);
  }

  // optional double average_position = 7;
  if (has_average_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->average_position(), output);
  }

  // optional .chrome_browser_predictors.ResourceData.Priority priority = 8;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->priority(), output);
  }

  // optional bool has_validators = 9;
  if (has_has_validators()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_validators(), output);
  }

  // optional bool always_revalidate = 10;
  if (has_always_revalidate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->always_revalidate(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_predictors.ResourceData)
}

int ResourceData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_predictors.ResourceData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string primary_key = 1;
    if (has_primary_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primary_key());
    }

    // optional string resource_url = 2;
    if (has_resource_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource_url());
    }

    // optional .chrome_browser_predictors.ResourceData.ResourceType resource_type = 3;
    if (has_resource_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource_type());
    }

    // optional uint32 number_of_hits = 4;
    if (has_number_of_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_hits());
    }

    // optional uint32 number_of_misses = 5;
    if (has_number_of_misses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_misses());
    }

    // optional uint32 consecutive_misses = 6;
    if (has_consecutive_misses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consecutive_misses());
    }

    // optional double average_position = 7;
    if (has_average_position()) {
      total_size += 1 + 8;
    }

    // optional .chrome_browser_predictors.ResourceData.Priority priority = 8;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool has_validators = 9;
    if (has_has_validators()) {
      total_size += 1 + 1;
    }

    // optional bool always_revalidate = 10;
    if (has_always_revalidate()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResourceData*>(&from));
}

void ResourceData::MergeFrom(const ResourceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_predictors.ResourceData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_primary_key()) {
      set_has_primary_key();
      primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
    }
    if (from.has_resource_url()) {
      set_has_resource_url();
      resource_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_url_);
    }
    if (from.has_resource_type()) {
      set_resource_type(from.resource_type());
    }
    if (from.has_number_of_hits()) {
      set_number_of_hits(from.number_of_hits());
    }
    if (from.has_number_of_misses()) {
      set_number_of_misses(from.number_of_misses());
    }
    if (from.has_consecutive_misses()) {
      set_consecutive_misses(from.consecutive_misses());
    }
    if (from.has_average_position()) {
      set_average_position(from.average_position());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_has_validators()) {
      set_has_validators(from.has_validators());
    }
    if (from.has_always_revalidate()) {
      set_always_revalidate(from.always_revalidate());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ResourceData::CopyFrom(const ResourceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_predictors.ResourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceData::IsInitialized() const {

  return true;
}

void ResourceData::Swap(ResourceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceData::InternalSwap(ResourceData* other) {
  primary_key_.Swap(&other->primary_key_);
  resource_url_.Swap(&other->resource_url_);
  std::swap(resource_type_, other->resource_type_);
  std::swap(number_of_hits_, other->number_of_hits_);
  std::swap(number_of_misses_, other->number_of_misses_);
  std::swap(consecutive_misses_, other->consecutive_misses_);
  std::swap(average_position_, other->average_position_);
  std::swap(priority_, other->priority_);
  std::swap(has_validators_, other->has_validators_);
  std::swap(always_revalidate_, other->always_revalidate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ResourceData::GetTypeName() const {
  return "chrome_browser_predictors.ResourceData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceData

// optional string primary_key = 1;
bool ResourceData::has_primary_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResourceData::set_has_primary_key() {
  _has_bits_[0] |= 0x00000001u;
}
void ResourceData::clear_has_primary_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResourceData::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_primary_key();
}
 const ::std::string& ResourceData::primary_key() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.primary_key)
  return primary_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceData::set_primary_key(const ::std::string& value) {
  set_has_primary_key();
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.primary_key)
}
 void ResourceData::set_primary_key(const char* value) {
  set_has_primary_key();
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_predictors.ResourceData.primary_key)
}
 void ResourceData::set_primary_key(const char* value, size_t size) {
  set_has_primary_key();
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_predictors.ResourceData.primary_key)
}
 ::std::string* ResourceData::mutable_primary_key() {
  set_has_primary_key();
  // @@protoc_insertion_point(field_mutable:chrome_browser_predictors.ResourceData.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResourceData::release_primary_key() {
  // @@protoc_insertion_point(field_release:chrome_browser_predictors.ResourceData.primary_key)
  clear_has_primary_key();
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceData::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    set_has_primary_key();
  } else {
    clear_has_primary_key();
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_predictors.ResourceData.primary_key)
}

// optional string resource_url = 2;
bool ResourceData::has_resource_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResourceData::set_has_resource_url() {
  _has_bits_[0] |= 0x00000002u;
}
void ResourceData::clear_has_resource_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResourceData::clear_resource_url() {
  resource_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resource_url();
}
 const ::std::string& ResourceData::resource_url() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.resource_url)
  return resource_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceData::set_resource_url(const ::std::string& value) {
  set_has_resource_url();
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.resource_url)
}
 void ResourceData::set_resource_url(const char* value) {
  set_has_resource_url();
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_predictors.ResourceData.resource_url)
}
 void ResourceData::set_resource_url(const char* value, size_t size) {
  set_has_resource_url();
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_predictors.ResourceData.resource_url)
}
 ::std::string* ResourceData::mutable_resource_url() {
  set_has_resource_url();
  // @@protoc_insertion_point(field_mutable:chrome_browser_predictors.ResourceData.resource_url)
  return resource_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResourceData::release_resource_url() {
  // @@protoc_insertion_point(field_release:chrome_browser_predictors.ResourceData.resource_url)
  clear_has_resource_url();
  return resource_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceData::set_allocated_resource_url(::std::string* resource_url) {
  if (resource_url != NULL) {
    set_has_resource_url();
  } else {
    clear_has_resource_url();
  }
  resource_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_url);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_predictors.ResourceData.resource_url)
}

// optional .chrome_browser_predictors.ResourceData.ResourceType resource_type = 3;
bool ResourceData::has_resource_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResourceData::set_has_resource_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ResourceData::clear_has_resource_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResourceData::clear_resource_type() {
  resource_type_ = 0;
  clear_has_resource_type();
}
 ::chrome_browser_predictors::ResourceData_ResourceType ResourceData::resource_type() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.resource_type)
  return static_cast< ::chrome_browser_predictors::ResourceData_ResourceType >(resource_type_);
}
 void ResourceData::set_resource_type(::chrome_browser_predictors::ResourceData_ResourceType value) {
  assert(::chrome_browser_predictors::ResourceData_ResourceType_IsValid(value));
  set_has_resource_type();
  resource_type_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.resource_type)
}

// optional uint32 number_of_hits = 4;
bool ResourceData::has_number_of_hits() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ResourceData::set_has_number_of_hits() {
  _has_bits_[0] |= 0x00000008u;
}
void ResourceData::clear_has_number_of_hits() {
  _has_bits_[0] &= ~0x00000008u;
}
void ResourceData::clear_number_of_hits() {
  number_of_hits_ = 0u;
  clear_has_number_of_hits();
}
 ::google::protobuf::uint32 ResourceData::number_of_hits() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.number_of_hits)
  return number_of_hits_;
}
 void ResourceData::set_number_of_hits(::google::protobuf::uint32 value) {
  set_has_number_of_hits();
  number_of_hits_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.number_of_hits)
}

// optional uint32 number_of_misses = 5;
bool ResourceData::has_number_of_misses() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ResourceData::set_has_number_of_misses() {
  _has_bits_[0] |= 0x00000010u;
}
void ResourceData::clear_has_number_of_misses() {
  _has_bits_[0] &= ~0x00000010u;
}
void ResourceData::clear_number_of_misses() {
  number_of_misses_ = 0u;
  clear_has_number_of_misses();
}
 ::google::protobuf::uint32 ResourceData::number_of_misses() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.number_of_misses)
  return number_of_misses_;
}
 void ResourceData::set_number_of_misses(::google::protobuf::uint32 value) {
  set_has_number_of_misses();
  number_of_misses_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.number_of_misses)
}

// optional uint32 consecutive_misses = 6;
bool ResourceData::has_consecutive_misses() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ResourceData::set_has_consecutive_misses() {
  _has_bits_[0] |= 0x00000020u;
}
void ResourceData::clear_has_consecutive_misses() {
  _has_bits_[0] &= ~0x00000020u;
}
void ResourceData::clear_consecutive_misses() {
  consecutive_misses_ = 0u;
  clear_has_consecutive_misses();
}
 ::google::protobuf::uint32 ResourceData::consecutive_misses() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.consecutive_misses)
  return consecutive_misses_;
}
 void ResourceData::set_consecutive_misses(::google::protobuf::uint32 value) {
  set_has_consecutive_misses();
  consecutive_misses_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.consecutive_misses)
}

// optional double average_position = 7;
bool ResourceData::has_average_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ResourceData::set_has_average_position() {
  _has_bits_[0] |= 0x00000040u;
}
void ResourceData::clear_has_average_position() {
  _has_bits_[0] &= ~0x00000040u;
}
void ResourceData::clear_average_position() {
  average_position_ = 0;
  clear_has_average_position();
}
 double ResourceData::average_position() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.average_position)
  return average_position_;
}
 void ResourceData::set_average_position(double value) {
  set_has_average_position();
  average_position_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.average_position)
}

// optional .chrome_browser_predictors.ResourceData.Priority priority = 8;
bool ResourceData::has_priority() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ResourceData::set_has_priority() {
  _has_bits_[0] |= 0x00000080u;
}
void ResourceData::clear_has_priority() {
  _has_bits_[0] &= ~0x00000080u;
}
void ResourceData::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
 ::chrome_browser_predictors::ResourceData_Priority ResourceData::priority() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.priority)
  return static_cast< ::chrome_browser_predictors::ResourceData_Priority >(priority_);
}
 void ResourceData::set_priority(::chrome_browser_predictors::ResourceData_Priority value) {
  assert(::chrome_browser_predictors::ResourceData_Priority_IsValid(value));
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.priority)
}

// optional bool has_validators = 9;
bool ResourceData::has_has_validators() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ResourceData::set_has_has_validators() {
  _has_bits_[0] |= 0x00000100u;
}
void ResourceData::clear_has_has_validators() {
  _has_bits_[0] &= ~0x00000100u;
}
void ResourceData::clear_has_validators() {
  has_validators_ = false;
  clear_has_has_validators();
}
 bool ResourceData::has_validators() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.has_validators)
  return has_validators_;
}
 void ResourceData::set_has_validators(bool value) {
  set_has_has_validators();
  has_validators_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.has_validators)
}

// optional bool always_revalidate = 10;
bool ResourceData::has_always_revalidate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ResourceData::set_has_always_revalidate() {
  _has_bits_[0] |= 0x00000200u;
}
void ResourceData::clear_has_always_revalidate() {
  _has_bits_[0] &= ~0x00000200u;
}
void ResourceData::clear_always_revalidate() {
  always_revalidate_ = false;
  clear_has_always_revalidate();
}
 bool ResourceData::always_revalidate() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.always_revalidate)
  return always_revalidate_;
}
 void ResourceData::set_always_revalidate(bool value) {
  set_has_always_revalidate();
  always_revalidate_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.always_revalidate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_predictors

// @@protoc_insertion_point(global_scope)
