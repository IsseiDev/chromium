// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resource_prefetch_predictor.proto

#ifndef PROTOBUF_resource_5fprefetch_5fpredictor_2eproto__INCLUDED
#define PROTOBUF_resource_5fprefetch_5fpredictor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace chrome_browser_predictors {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto();
void protobuf_AssignDesc_resource_5fprefetch_5fpredictor_2eproto();
void protobuf_ShutdownFile_resource_5fprefetch_5fpredictor_2eproto();

class Metadata;
class ResourceData;

enum ResourceData_ResourceType {
  ResourceData_ResourceType_RESOURCE_TYPE_MAIN_FRAME = 0,
  ResourceData_ResourceType_RESOURCE_TYPE_SUB_FRAME = 1,
  ResourceData_ResourceType_RESOURCE_TYPE_STYLESHEET = 2,
  ResourceData_ResourceType_RESOURCE_TYPE_SCRIPT = 3,
  ResourceData_ResourceType_RESOURCE_TYPE_IMAGE = 4,
  ResourceData_ResourceType_RESOURCE_TYPE_FONT_RESOURCE = 5,
  ResourceData_ResourceType_RESOURCE_TYPE_SUB_RESOURCE = 6,
  ResourceData_ResourceType_RESOURCE_TYPE_OBJECT = 7,
  ResourceData_ResourceType_RESOURCE_TYPE_MEDIA = 8,
  ResourceData_ResourceType_RESOURCE_TYPE_WORKER = 9,
  ResourceData_ResourceType_RESOURCE_TYPE_SHARED_WORKER = 10,
  ResourceData_ResourceType_RESOURCE_TYPE_PREFETCH = 11,
  ResourceData_ResourceType_RESOURCE_TYPE_FAVICON = 12,
  ResourceData_ResourceType_RESOURCE_TYPE_XHR = 13,
  ResourceData_ResourceType_RESOURCE_TYPE_PING = 14,
  ResourceData_ResourceType_RESOURCE_TYPE_SERVICE_WORKER = 15,
  ResourceData_ResourceType_RESOURCE_TYPE_CSP_REPORT = 16,
  ResourceData_ResourceType_RESOURCE_TYPE_PLUGIN_RESOURCE = 17,
  ResourceData_ResourceType_RESOURCE_TYPE_LAST_TYPE = 18
};
bool ResourceData_ResourceType_IsValid(int value);
const ResourceData_ResourceType ResourceData_ResourceType_ResourceType_MIN = ResourceData_ResourceType_RESOURCE_TYPE_MAIN_FRAME;
const ResourceData_ResourceType ResourceData_ResourceType_ResourceType_MAX = ResourceData_ResourceType_RESOURCE_TYPE_LAST_TYPE;
const int ResourceData_ResourceType_ResourceType_ARRAYSIZE = ResourceData_ResourceType_ResourceType_MAX + 1;

enum ResourceData_Priority {
  ResourceData_Priority_REQUEST_PRIORITY_IDLE = 0,
  ResourceData_Priority_REQUEST_PRIORITY_LOWEST = 1,
  ResourceData_Priority_REQUEST_PRIORITY_LOW = 2,
  ResourceData_Priority_REQUEST_PRIORITY_MEDIUM = 3,
  ResourceData_Priority_REQUEST_PRIORITY_HIGHEST = 4
};
bool ResourceData_Priority_IsValid(int value);
const ResourceData_Priority ResourceData_Priority_Priority_MIN = ResourceData_Priority_REQUEST_PRIORITY_IDLE;
const ResourceData_Priority ResourceData_Priority_Priority_MAX = ResourceData_Priority_REQUEST_PRIORITY_HIGHEST;
const int ResourceData_Priority_Priority_ARRAYSIZE = ResourceData_Priority_Priority_MAX + 1;

// ===================================================================

class Metadata : public ::google::protobuf::MessageLite {
 public:
  Metadata();
  virtual ~Metadata();

  Metadata(const Metadata& from);

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Metadata& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Metadata* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Metadata* other);

  // implements Message ----------------------------------------------

  inline Metadata* New() const { return New(NULL); }

  Metadata* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Metadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string main_page_url = 1;
  bool has_main_page_url() const;
  void clear_main_page_url();
  static const int kMainPageUrlFieldNumber = 1;
  const ::std::string& main_page_url() const;
  void set_main_page_url(const ::std::string& value);
  void set_main_page_url(const char* value);
  void set_main_page_url(const char* value, size_t size);
  ::std::string* mutable_main_page_url();
  ::std::string* release_main_page_url();
  void set_allocated_main_page_url(::std::string* main_page_url);

  // optional uint64 last_visit_time = 2;
  bool has_last_visit_time() const;
  void clear_last_visit_time();
  static const int kLastVisitTimeFieldNumber = 2;
  ::google::protobuf::uint64 last_visit_time() const;
  void set_last_visit_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chrome_browser_predictors.Metadata)
 private:
  inline void set_has_main_page_url();
  inline void clear_has_main_page_url();
  inline void set_has_last_visit_time();
  inline void clear_has_last_visit_time();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr main_page_url_;
  ::google::protobuf::uint64 last_visit_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto();
  #endif
  friend void protobuf_AssignDesc_resource_5fprefetch_5fpredictor_2eproto();
  friend void protobuf_ShutdownFile_resource_5fprefetch_5fpredictor_2eproto();

  void InitAsDefaultInstance();
  static Metadata* default_instance_;
};
// -------------------------------------------------------------------

class ResourceData : public ::google::protobuf::MessageLite {
 public:
  ResourceData();
  virtual ~ResourceData();

  ResourceData(const ResourceData& from);

  inline ResourceData& operator=(const ResourceData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const ResourceData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResourceData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ResourceData* other);

  // implements Message ----------------------------------------------

  inline ResourceData* New() const { return New(NULL); }

  ResourceData* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResourceData& from);
  void MergeFrom(const ResourceData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResourceData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ResourceData_ResourceType ResourceType;
  static const ResourceType RESOURCE_TYPE_MAIN_FRAME =
    ResourceData_ResourceType_RESOURCE_TYPE_MAIN_FRAME;
  static const ResourceType RESOURCE_TYPE_SUB_FRAME =
    ResourceData_ResourceType_RESOURCE_TYPE_SUB_FRAME;
  static const ResourceType RESOURCE_TYPE_STYLESHEET =
    ResourceData_ResourceType_RESOURCE_TYPE_STYLESHEET;
  static const ResourceType RESOURCE_TYPE_SCRIPT =
    ResourceData_ResourceType_RESOURCE_TYPE_SCRIPT;
  static const ResourceType RESOURCE_TYPE_IMAGE =
    ResourceData_ResourceType_RESOURCE_TYPE_IMAGE;
  static const ResourceType RESOURCE_TYPE_FONT_RESOURCE =
    ResourceData_ResourceType_RESOURCE_TYPE_FONT_RESOURCE;
  static const ResourceType RESOURCE_TYPE_SUB_RESOURCE =
    ResourceData_ResourceType_RESOURCE_TYPE_SUB_RESOURCE;
  static const ResourceType RESOURCE_TYPE_OBJECT =
    ResourceData_ResourceType_RESOURCE_TYPE_OBJECT;
  static const ResourceType RESOURCE_TYPE_MEDIA =
    ResourceData_ResourceType_RESOURCE_TYPE_MEDIA;
  static const ResourceType RESOURCE_TYPE_WORKER =
    ResourceData_ResourceType_RESOURCE_TYPE_WORKER;
  static const ResourceType RESOURCE_TYPE_SHARED_WORKER =
    ResourceData_ResourceType_RESOURCE_TYPE_SHARED_WORKER;
  static const ResourceType RESOURCE_TYPE_PREFETCH =
    ResourceData_ResourceType_RESOURCE_TYPE_PREFETCH;
  static const ResourceType RESOURCE_TYPE_FAVICON =
    ResourceData_ResourceType_RESOURCE_TYPE_FAVICON;
  static const ResourceType RESOURCE_TYPE_XHR =
    ResourceData_ResourceType_RESOURCE_TYPE_XHR;
  static const ResourceType RESOURCE_TYPE_PING =
    ResourceData_ResourceType_RESOURCE_TYPE_PING;
  static const ResourceType RESOURCE_TYPE_SERVICE_WORKER =
    ResourceData_ResourceType_RESOURCE_TYPE_SERVICE_WORKER;
  static const ResourceType RESOURCE_TYPE_CSP_REPORT =
    ResourceData_ResourceType_RESOURCE_TYPE_CSP_REPORT;
  static const ResourceType RESOURCE_TYPE_PLUGIN_RESOURCE =
    ResourceData_ResourceType_RESOURCE_TYPE_PLUGIN_RESOURCE;
  static const ResourceType RESOURCE_TYPE_LAST_TYPE =
    ResourceData_ResourceType_RESOURCE_TYPE_LAST_TYPE;
  static inline bool ResourceType_IsValid(int value) {
    return ResourceData_ResourceType_IsValid(value);
  }
  static const ResourceType ResourceType_MIN =
    ResourceData_ResourceType_ResourceType_MIN;
  static const ResourceType ResourceType_MAX =
    ResourceData_ResourceType_ResourceType_MAX;
  static const int ResourceType_ARRAYSIZE =
    ResourceData_ResourceType_ResourceType_ARRAYSIZE;

  typedef ResourceData_Priority Priority;
  static const Priority REQUEST_PRIORITY_IDLE =
    ResourceData_Priority_REQUEST_PRIORITY_IDLE;
  static const Priority REQUEST_PRIORITY_LOWEST =
    ResourceData_Priority_REQUEST_PRIORITY_LOWEST;
  static const Priority REQUEST_PRIORITY_LOW =
    ResourceData_Priority_REQUEST_PRIORITY_LOW;
  static const Priority REQUEST_PRIORITY_MEDIUM =
    ResourceData_Priority_REQUEST_PRIORITY_MEDIUM;
  static const Priority REQUEST_PRIORITY_HIGHEST =
    ResourceData_Priority_REQUEST_PRIORITY_HIGHEST;
  static inline bool Priority_IsValid(int value) {
    return ResourceData_Priority_IsValid(value);
  }
  static const Priority Priority_MIN =
    ResourceData_Priority_Priority_MIN;
  static const Priority Priority_MAX =
    ResourceData_Priority_Priority_MAX;
  static const int Priority_ARRAYSIZE =
    ResourceData_Priority_Priority_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string primary_key = 1;
  bool has_primary_key() const;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 1;
  const ::std::string& primary_key() const;
  void set_primary_key(const ::std::string& value);
  void set_primary_key(const char* value);
  void set_primary_key(const char* value, size_t size);
  ::std::string* mutable_primary_key();
  ::std::string* release_primary_key();
  void set_allocated_primary_key(::std::string* primary_key);

  // optional string resource_url = 2;
  bool has_resource_url() const;
  void clear_resource_url();
  static const int kResourceUrlFieldNumber = 2;
  const ::std::string& resource_url() const;
  void set_resource_url(const ::std::string& value);
  void set_resource_url(const char* value);
  void set_resource_url(const char* value, size_t size);
  ::std::string* mutable_resource_url();
  ::std::string* release_resource_url();
  void set_allocated_resource_url(::std::string* resource_url);

  // optional .chrome_browser_predictors.ResourceData.ResourceType resource_type = 3;
  bool has_resource_type() const;
  void clear_resource_type();
  static const int kResourceTypeFieldNumber = 3;
  ::chrome_browser_predictors::ResourceData_ResourceType resource_type() const;
  void set_resource_type(::chrome_browser_predictors::ResourceData_ResourceType value);

  // optional uint32 number_of_hits = 4;
  bool has_number_of_hits() const;
  void clear_number_of_hits();
  static const int kNumberOfHitsFieldNumber = 4;
  ::google::protobuf::uint32 number_of_hits() const;
  void set_number_of_hits(::google::protobuf::uint32 value);

  // optional uint32 number_of_misses = 5;
  bool has_number_of_misses() const;
  void clear_number_of_misses();
  static const int kNumberOfMissesFieldNumber = 5;
  ::google::protobuf::uint32 number_of_misses() const;
  void set_number_of_misses(::google::protobuf::uint32 value);

  // optional uint32 consecutive_misses = 6;
  bool has_consecutive_misses() const;
  void clear_consecutive_misses();
  static const int kConsecutiveMissesFieldNumber = 6;
  ::google::protobuf::uint32 consecutive_misses() const;
  void set_consecutive_misses(::google::protobuf::uint32 value);

  // optional double average_position = 7;
  bool has_average_position() const;
  void clear_average_position();
  static const int kAveragePositionFieldNumber = 7;
  double average_position() const;
  void set_average_position(double value);

  // optional .chrome_browser_predictors.ResourceData.Priority priority = 8;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 8;
  ::chrome_browser_predictors::ResourceData_Priority priority() const;
  void set_priority(::chrome_browser_predictors::ResourceData_Priority value);

  // optional bool has_validators = 9;
  bool has_has_validators() const;
  void clear_has_validators();
  static const int kHasValidatorsFieldNumber = 9;
  bool has_validators() const;
  void set_has_validators(bool value);

  // optional bool always_revalidate = 10;
  bool has_always_revalidate() const;
  void clear_always_revalidate();
  static const int kAlwaysRevalidateFieldNumber = 10;
  bool always_revalidate() const;
  void set_always_revalidate(bool value);

  // @@protoc_insertion_point(class_scope:chrome_browser_predictors.ResourceData)
 private:
  inline void set_has_primary_key();
  inline void clear_has_primary_key();
  inline void set_has_resource_url();
  inline void clear_has_resource_url();
  inline void set_has_resource_type();
  inline void clear_has_resource_type();
  inline void set_has_number_of_hits();
  inline void clear_has_number_of_hits();
  inline void set_has_number_of_misses();
  inline void clear_has_number_of_misses();
  inline void set_has_consecutive_misses();
  inline void clear_has_consecutive_misses();
  inline void set_has_average_position();
  inline void clear_has_average_position();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_has_validators();
  inline void clear_has_has_validators();
  inline void set_has_always_revalidate();
  inline void clear_has_always_revalidate();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr primary_key_;
  ::google::protobuf::internal::ArenaStringPtr resource_url_;
  int resource_type_;
  ::google::protobuf::uint32 number_of_hits_;
  ::google::protobuf::uint32 number_of_misses_;
  ::google::protobuf::uint32 consecutive_misses_;
  double average_position_;
  int priority_;
  bool has_validators_;
  bool always_revalidate_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_resource_5fprefetch_5fpredictor_2eproto();
  #endif
  friend void protobuf_AssignDesc_resource_5fprefetch_5fpredictor_2eproto();
  friend void protobuf_ShutdownFile_resource_5fprefetch_5fpredictor_2eproto();

  void InitAsDefaultInstance();
  static ResourceData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Metadata

// optional string main_page_url = 1;
inline bool Metadata::has_main_page_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Metadata::set_has_main_page_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Metadata::clear_has_main_page_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Metadata::clear_main_page_url() {
  main_page_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_main_page_url();
}
inline const ::std::string& Metadata::main_page_url() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.Metadata.main_page_url)
  return main_page_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_main_page_url(const ::std::string& value) {
  set_has_main_page_url();
  main_page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.Metadata.main_page_url)
}
inline void Metadata::set_main_page_url(const char* value) {
  set_has_main_page_url();
  main_page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_predictors.Metadata.main_page_url)
}
inline void Metadata::set_main_page_url(const char* value, size_t size) {
  set_has_main_page_url();
  main_page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_predictors.Metadata.main_page_url)
}
inline ::std::string* Metadata::mutable_main_page_url() {
  set_has_main_page_url();
  // @@protoc_insertion_point(field_mutable:chrome_browser_predictors.Metadata.main_page_url)
  return main_page_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metadata::release_main_page_url() {
  // @@protoc_insertion_point(field_release:chrome_browser_predictors.Metadata.main_page_url)
  clear_has_main_page_url();
  return main_page_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_allocated_main_page_url(::std::string* main_page_url) {
  if (main_page_url != NULL) {
    set_has_main_page_url();
  } else {
    clear_has_main_page_url();
  }
  main_page_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main_page_url);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_predictors.Metadata.main_page_url)
}

// optional uint64 last_visit_time = 2;
inline bool Metadata::has_last_visit_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Metadata::set_has_last_visit_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Metadata::clear_has_last_visit_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Metadata::clear_last_visit_time() {
  last_visit_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_visit_time();
}
inline ::google::protobuf::uint64 Metadata::last_visit_time() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.Metadata.last_visit_time)
  return last_visit_time_;
}
inline void Metadata::set_last_visit_time(::google::protobuf::uint64 value) {
  set_has_last_visit_time();
  last_visit_time_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.Metadata.last_visit_time)
}

// -------------------------------------------------------------------

// ResourceData

// optional string primary_key = 1;
inline bool ResourceData::has_primary_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceData::set_has_primary_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceData::clear_has_primary_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceData::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_primary_key();
}
inline const ::std::string& ResourceData::primary_key() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.primary_key)
  return primary_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceData::set_primary_key(const ::std::string& value) {
  set_has_primary_key();
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.primary_key)
}
inline void ResourceData::set_primary_key(const char* value) {
  set_has_primary_key();
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_predictors.ResourceData.primary_key)
}
inline void ResourceData::set_primary_key(const char* value, size_t size) {
  set_has_primary_key();
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_predictors.ResourceData.primary_key)
}
inline ::std::string* ResourceData::mutable_primary_key() {
  set_has_primary_key();
  // @@protoc_insertion_point(field_mutable:chrome_browser_predictors.ResourceData.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceData::release_primary_key() {
  // @@protoc_insertion_point(field_release:chrome_browser_predictors.ResourceData.primary_key)
  clear_has_primary_key();
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceData::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    set_has_primary_key();
  } else {
    clear_has_primary_key();
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_predictors.ResourceData.primary_key)
}

// optional string resource_url = 2;
inline bool ResourceData::has_resource_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceData::set_has_resource_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceData::clear_has_resource_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceData::clear_resource_url() {
  resource_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resource_url();
}
inline const ::std::string& ResourceData::resource_url() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.resource_url)
  return resource_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceData::set_resource_url(const ::std::string& value) {
  set_has_resource_url();
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.resource_url)
}
inline void ResourceData::set_resource_url(const char* value) {
  set_has_resource_url();
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_predictors.ResourceData.resource_url)
}
inline void ResourceData::set_resource_url(const char* value, size_t size) {
  set_has_resource_url();
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_predictors.ResourceData.resource_url)
}
inline ::std::string* ResourceData::mutable_resource_url() {
  set_has_resource_url();
  // @@protoc_insertion_point(field_mutable:chrome_browser_predictors.ResourceData.resource_url)
  return resource_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceData::release_resource_url() {
  // @@protoc_insertion_point(field_release:chrome_browser_predictors.ResourceData.resource_url)
  clear_has_resource_url();
  return resource_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceData::set_allocated_resource_url(::std::string* resource_url) {
  if (resource_url != NULL) {
    set_has_resource_url();
  } else {
    clear_has_resource_url();
  }
  resource_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_url);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_predictors.ResourceData.resource_url)
}

// optional .chrome_browser_predictors.ResourceData.ResourceType resource_type = 3;
inline bool ResourceData::has_resource_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceData::set_has_resource_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResourceData::clear_has_resource_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResourceData::clear_resource_type() {
  resource_type_ = 0;
  clear_has_resource_type();
}
inline ::chrome_browser_predictors::ResourceData_ResourceType ResourceData::resource_type() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.resource_type)
  return static_cast< ::chrome_browser_predictors::ResourceData_ResourceType >(resource_type_);
}
inline void ResourceData::set_resource_type(::chrome_browser_predictors::ResourceData_ResourceType value) {
  assert(::chrome_browser_predictors::ResourceData_ResourceType_IsValid(value));
  set_has_resource_type();
  resource_type_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.resource_type)
}

// optional uint32 number_of_hits = 4;
inline bool ResourceData::has_number_of_hits() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResourceData::set_has_number_of_hits() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResourceData::clear_has_number_of_hits() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResourceData::clear_number_of_hits() {
  number_of_hits_ = 0u;
  clear_has_number_of_hits();
}
inline ::google::protobuf::uint32 ResourceData::number_of_hits() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.number_of_hits)
  return number_of_hits_;
}
inline void ResourceData::set_number_of_hits(::google::protobuf::uint32 value) {
  set_has_number_of_hits();
  number_of_hits_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.number_of_hits)
}

// optional uint32 number_of_misses = 5;
inline bool ResourceData::has_number_of_misses() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResourceData::set_has_number_of_misses() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResourceData::clear_has_number_of_misses() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResourceData::clear_number_of_misses() {
  number_of_misses_ = 0u;
  clear_has_number_of_misses();
}
inline ::google::protobuf::uint32 ResourceData::number_of_misses() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.number_of_misses)
  return number_of_misses_;
}
inline void ResourceData::set_number_of_misses(::google::protobuf::uint32 value) {
  set_has_number_of_misses();
  number_of_misses_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.number_of_misses)
}

// optional uint32 consecutive_misses = 6;
inline bool ResourceData::has_consecutive_misses() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResourceData::set_has_consecutive_misses() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResourceData::clear_has_consecutive_misses() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResourceData::clear_consecutive_misses() {
  consecutive_misses_ = 0u;
  clear_has_consecutive_misses();
}
inline ::google::protobuf::uint32 ResourceData::consecutive_misses() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.consecutive_misses)
  return consecutive_misses_;
}
inline void ResourceData::set_consecutive_misses(::google::protobuf::uint32 value) {
  set_has_consecutive_misses();
  consecutive_misses_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.consecutive_misses)
}

// optional double average_position = 7;
inline bool ResourceData::has_average_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResourceData::set_has_average_position() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResourceData::clear_has_average_position() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResourceData::clear_average_position() {
  average_position_ = 0;
  clear_has_average_position();
}
inline double ResourceData::average_position() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.average_position)
  return average_position_;
}
inline void ResourceData::set_average_position(double value) {
  set_has_average_position();
  average_position_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.average_position)
}

// optional .chrome_browser_predictors.ResourceData.Priority priority = 8;
inline bool ResourceData::has_priority() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResourceData::set_has_priority() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ResourceData::clear_has_priority() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ResourceData::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::chrome_browser_predictors::ResourceData_Priority ResourceData::priority() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.priority)
  return static_cast< ::chrome_browser_predictors::ResourceData_Priority >(priority_);
}
inline void ResourceData::set_priority(::chrome_browser_predictors::ResourceData_Priority value) {
  assert(::chrome_browser_predictors::ResourceData_Priority_IsValid(value));
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.priority)
}

// optional bool has_validators = 9;
inline bool ResourceData::has_has_validators() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ResourceData::set_has_has_validators() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ResourceData::clear_has_has_validators() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ResourceData::clear_has_validators() {
  has_validators_ = false;
  clear_has_has_validators();
}
inline bool ResourceData::has_validators() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.has_validators)
  return has_validators_;
}
inline void ResourceData::set_has_validators(bool value) {
  set_has_has_validators();
  has_validators_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.has_validators)
}

// optional bool always_revalidate = 10;
inline bool ResourceData::has_always_revalidate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ResourceData::set_has_always_revalidate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ResourceData::clear_has_always_revalidate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ResourceData::clear_always_revalidate() {
  always_revalidate_ = false;
  clear_has_always_revalidate();
}
inline bool ResourceData::always_revalidate() const {
  // @@protoc_insertion_point(field_get:chrome_browser_predictors.ResourceData.always_revalidate)
  return always_revalidate_;
}
inline void ResourceData::set_always_revalidate(bool value) {
  set_has_always_revalidate();
  always_revalidate_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_predictors.ResourceData.always_revalidate)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_predictors

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chrome_browser_predictors::ResourceData_ResourceType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::chrome_browser_predictors::ResourceData_Priority> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_resource_5fprefetch_5fpredictor_2eproto__INCLUDED
