// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: delta_file.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "delta_file.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace history_report {

void protobuf_ShutdownFile_delta_5ffile_2eproto() {
  delete DeltaFileEntry::default_instance_;
  delete UsageReport::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_delta_5ffile_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_delta_5ffile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DeltaFileEntry::default_instance_ = new DeltaFileEntry();
  UsageReport::default_instance_ = new UsageReport();
  DeltaFileEntry::default_instance_->InitAsDefaultInstance();
  UsageReport::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_delta_5ffile_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_delta_5ffile_2eproto_once_);
void protobuf_AddDesc_delta_5ffile_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_delta_5ffile_2eproto_once_,
                 &protobuf_AddDesc_delta_5ffile_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_delta_5ffile_2eproto {
  StaticDescriptorInitializer_delta_5ffile_2eproto() {
    protobuf_AddDesc_delta_5ffile_2eproto();
  }
} static_descriptor_initializer_delta_5ffile_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForDeltaFileEntry(
    DeltaFileEntry* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeltaFileEntry::kSeqNoFieldNumber;
const int DeltaFileEntry::kTypeFieldNumber;
const int DeltaFileEntry::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeltaFileEntry::DeltaFileEntry()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:history_report.DeltaFileEntry)
}

void DeltaFileEntry::InitAsDefaultInstance() {
}

DeltaFileEntry::DeltaFileEntry(const DeltaFileEntry& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:history_report.DeltaFileEntry)
}

void DeltaFileEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_no_ = GOOGLE_LONGLONG(0);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeltaFileEntry::~DeltaFileEntry() {
  // @@protoc_insertion_point(destructor:history_report.DeltaFileEntry)
  SharedDtor();
}

void DeltaFileEntry::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeltaFileEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeltaFileEntry& DeltaFileEntry::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_delta_5ffile_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_delta_5ffile_2eproto();
#endif
  return *default_instance_;
}

DeltaFileEntry* DeltaFileEntry::default_instance_ = NULL;

DeltaFileEntry* DeltaFileEntry::New(::google::protobuf::Arena* arena) const {
  DeltaFileEntry* n = new DeltaFileEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeltaFileEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:history_report.DeltaFileEntry)
  if (_has_bits_[0 / 32] & 7u) {
    seq_no_ = GOOGLE_LONGLONG(0);
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeltaFileEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForDeltaFileEntry, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:history_report.DeltaFileEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 seq_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_no_)));
          set_has_seq_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (tag == 26) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:history_report.DeltaFileEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:history_report.DeltaFileEntry)
  return false;
#undef DO_
}

void DeltaFileEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:history_report.DeltaFileEntry)
  // optional int64 seq_no = 1;
  if (has_seq_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->seq_no(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:history_report.DeltaFileEntry)
}

int DeltaFileEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:history_report.DeltaFileEntry)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 seq_no = 1;
    if (has_seq_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seq_no());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeltaFileEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeltaFileEntry*>(&from));
}

void DeltaFileEntry::MergeFrom(const DeltaFileEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:history_report.DeltaFileEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq_no()) {
      set_seq_no(from.seq_no());
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DeltaFileEntry::CopyFrom(const DeltaFileEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:history_report.DeltaFileEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaFileEntry::IsInitialized() const {

  return true;
}

void DeltaFileEntry::Swap(DeltaFileEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeltaFileEntry::InternalSwap(DeltaFileEntry* other) {
  std::swap(seq_no_, other->seq_no_);
  type_.Swap(&other->type_);
  url_.Swap(&other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeltaFileEntry::GetTypeName() const {
  return "history_report.DeltaFileEntry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeltaFileEntry

// optional int64 seq_no = 1;
bool DeltaFileEntry::has_seq_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeltaFileEntry::set_has_seq_no() {
  _has_bits_[0] |= 0x00000001u;
}
void DeltaFileEntry::clear_has_seq_no() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeltaFileEntry::clear_seq_no() {
  seq_no_ = GOOGLE_LONGLONG(0);
  clear_has_seq_no();
}
 ::google::protobuf::int64 DeltaFileEntry::seq_no() const {
  // @@protoc_insertion_point(field_get:history_report.DeltaFileEntry.seq_no)
  return seq_no_;
}
 void DeltaFileEntry::set_seq_no(::google::protobuf::int64 value) {
  set_has_seq_no();
  seq_no_ = value;
  // @@protoc_insertion_point(field_set:history_report.DeltaFileEntry.seq_no)
}

// optional string type = 2;
bool DeltaFileEntry::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeltaFileEntry::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void DeltaFileEntry::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeltaFileEntry::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& DeltaFileEntry::type() const {
  // @@protoc_insertion_point(field_get:history_report.DeltaFileEntry.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeltaFileEntry::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:history_report.DeltaFileEntry.type)
}
 void DeltaFileEntry::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:history_report.DeltaFileEntry.type)
}
 void DeltaFileEntry::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:history_report.DeltaFileEntry.type)
}
 ::std::string* DeltaFileEntry::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:history_report.DeltaFileEntry.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeltaFileEntry::release_type() {
  // @@protoc_insertion_point(field_release:history_report.DeltaFileEntry.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeltaFileEntry::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:history_report.DeltaFileEntry.type)
}

// optional string url = 3;
bool DeltaFileEntry::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeltaFileEntry::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
void DeltaFileEntry::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeltaFileEntry::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& DeltaFileEntry::url() const {
  // @@protoc_insertion_point(field_get:history_report.DeltaFileEntry.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeltaFileEntry::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:history_report.DeltaFileEntry.url)
}
 void DeltaFileEntry::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:history_report.DeltaFileEntry.url)
}
 void DeltaFileEntry::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:history_report.DeltaFileEntry.url)
}
 ::std::string* DeltaFileEntry::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:history_report.DeltaFileEntry.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeltaFileEntry::release_url() {
  // @@protoc_insertion_point(field_release:history_report.DeltaFileEntry.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeltaFileEntry::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:history_report.DeltaFileEntry.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForUsageReport(
    UsageReport* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UsageReport::kIdFieldNumber;
const int UsageReport::kTimestampMsFieldNumber;
const int UsageReport::kTypedVisitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UsageReport::UsageReport()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:history_report.UsageReport)
}

void UsageReport::InitAsDefaultInstance() {
}

UsageReport::UsageReport(const UsageReport& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:history_report.UsageReport)
}

void UsageReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  typed_visit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsageReport::~UsageReport() {
  // @@protoc_insertion_point(destructor:history_report.UsageReport)
  SharedDtor();
}

void UsageReport::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UsageReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UsageReport& UsageReport::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_delta_5ffile_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_delta_5ffile_2eproto();
#endif
  return *default_instance_;
}

UsageReport* UsageReport::default_instance_ = NULL;

UsageReport* UsageReport::New(::google::protobuf::Arena* arena) const {
  UsageReport* n = new UsageReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UsageReport::Clear() {
// @@protoc_insertion_point(message_clear_start:history_report.UsageReport)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UsageReport, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UsageReport*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(timestamp_ms_, typed_visit_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UsageReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForUsageReport, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:history_report.UsageReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp_ms;
        break;
      }

      // optional int64 timestamp_ms = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
          set_has_timestamp_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_typed_visit;
        break;
      }

      // optional bool typed_visit = 3;
      case 3: {
        if (tag == 24) {
         parse_typed_visit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &typed_visit_)));
          set_has_typed_visit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:history_report.UsageReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:history_report.UsageReport)
  return false;
#undef DO_
}

void UsageReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:history_report.UsageReport)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int64 timestamp_ms = 2;
  if (has_timestamp_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp_ms(), output);
  }

  // optional bool typed_visit = 3;
  if (has_typed_visit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->typed_visit(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:history_report.UsageReport)
}

int UsageReport::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:history_report.UsageReport)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int64 timestamp_ms = 2;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional bool typed_visit = 3;
    if (has_typed_visit()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsageReport::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UsageReport*>(&from));
}

void UsageReport::MergeFrom(const UsageReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:history_report.UsageReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_timestamp_ms()) {
      set_timestamp_ms(from.timestamp_ms());
    }
    if (from.has_typed_visit()) {
      set_typed_visit(from.typed_visit());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void UsageReport::CopyFrom(const UsageReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:history_report.UsageReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsageReport::IsInitialized() const {

  return true;
}

void UsageReport::Swap(UsageReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UsageReport::InternalSwap(UsageReport* other) {
  id_.Swap(&other->id_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(typed_visit_, other->typed_visit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UsageReport::GetTypeName() const {
  return "history_report.UsageReport";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UsageReport

// optional string id = 1;
bool UsageReport::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UsageReport::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UsageReport::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UsageReport::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& UsageReport::id() const {
  // @@protoc_insertion_point(field_get:history_report.UsageReport.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UsageReport::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:history_report.UsageReport.id)
}
 void UsageReport::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:history_report.UsageReport.id)
}
 void UsageReport::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:history_report.UsageReport.id)
}
 ::std::string* UsageReport::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:history_report.UsageReport.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UsageReport::release_id() {
  // @@protoc_insertion_point(field_release:history_report.UsageReport.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UsageReport::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:history_report.UsageReport.id)
}

// optional int64 timestamp_ms = 2;
bool UsageReport::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UsageReport::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void UsageReport::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void UsageReport::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
 ::google::protobuf::int64 UsageReport::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:history_report.UsageReport.timestamp_ms)
  return timestamp_ms_;
}
 void UsageReport::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:history_report.UsageReport.timestamp_ms)
}

// optional bool typed_visit = 3;
bool UsageReport::has_typed_visit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UsageReport::set_has_typed_visit() {
  _has_bits_[0] |= 0x00000004u;
}
void UsageReport::clear_has_typed_visit() {
  _has_bits_[0] &= ~0x00000004u;
}
void UsageReport::clear_typed_visit() {
  typed_visit_ = false;
  clear_has_typed_visit();
}
 bool UsageReport::typed_visit() const {
  // @@protoc_insertion_point(field_get:history_report.UsageReport.typed_visit)
  return typed_visit_;
}
 void UsageReport::set_typed_visit(bool value) {
  set_has_typed_visit();
  typed_visit_ = value;
  // @@protoc_insertion_point(field_set:history_report.UsageReport.typed_visit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace history_report

// @@protoc_insertion_point(global_scope)
