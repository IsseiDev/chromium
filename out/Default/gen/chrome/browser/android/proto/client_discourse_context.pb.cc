// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_discourse_context.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_discourse_context.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace discourse_context {

void protobuf_ShutdownFile_client_5fdiscourse_5fcontext_2eproto() {
  delete ClientDiscourseContext::default_instance_;
  delete Display::default_instance_;
  delete Selection::default_instance_;
  delete Media::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ClientDiscourseContext::default_instance_ = new ClientDiscourseContext();
  Display::default_instance_ = new Display();
  Selection::default_instance_ = new Selection();
  Media::default_instance_ = new Media();
  ClientDiscourseContext::default_instance_->InitAsDefaultInstance();
  Display::default_instance_->InitAsDefaultInstance();
  Selection::default_instance_->InitAsDefaultInstance();
  Media::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_5fdiscourse_5fcontext_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto_once_);
void protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto_once_,
                 &protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_5fdiscourse_5fcontext_2eproto {
  StaticDescriptorInitializer_client_5fdiscourse_5fcontext_2eproto() {
    protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto();
  }
} static_descriptor_initializer_client_5fdiscourse_5fcontext_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForClientDiscourseContext(
    ClientDiscourseContext* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientDiscourseContext::kDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientDiscourseContext::ClientDiscourseContext()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:discourse_context.ClientDiscourseContext)
}

void ClientDiscourseContext::InitAsDefaultInstance() {
}

ClientDiscourseContext::ClientDiscourseContext(const ClientDiscourseContext& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:discourse_context.ClientDiscourseContext)
}

void ClientDiscourseContext::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientDiscourseContext::~ClientDiscourseContext() {
  // @@protoc_insertion_point(destructor:discourse_context.ClientDiscourseContext)
  SharedDtor();
}

void ClientDiscourseContext::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientDiscourseContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientDiscourseContext& ClientDiscourseContext::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto();
#endif
  return *default_instance_;
}

ClientDiscourseContext* ClientDiscourseContext::default_instance_ = NULL;

ClientDiscourseContext* ClientDiscourseContext::New(::google::protobuf::Arena* arena) const {
  ClientDiscourseContext* n = new ClientDiscourseContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientDiscourseContext::Clear() {
// @@protoc_insertion_point(message_clear_start:discourse_context.ClientDiscourseContext)
  display_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClientDiscourseContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForClientDiscourseContext, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:discourse_context.ClientDiscourseContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .discourse_context.Display display = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_display()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_display;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:discourse_context.ClientDiscourseContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:discourse_context.ClientDiscourseContext)
  return false;
#undef DO_
}

void ClientDiscourseContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:discourse_context.ClientDiscourseContext)
  // repeated .discourse_context.Display display = 4;
  for (unsigned int i = 0, n = this->display_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->display(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:discourse_context.ClientDiscourseContext)
}

int ClientDiscourseContext::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:discourse_context.ClientDiscourseContext)
  int total_size = 0;

  // repeated .discourse_context.Display display = 4;
  total_size += 1 * this->display_size();
  for (int i = 0; i < this->display_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->display(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientDiscourseContext::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientDiscourseContext*>(&from));
}

void ClientDiscourseContext::MergeFrom(const ClientDiscourseContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:discourse_context.ClientDiscourseContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  display_.MergeFrom(from.display_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ClientDiscourseContext::CopyFrom(const ClientDiscourseContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:discourse_context.ClientDiscourseContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDiscourseContext::IsInitialized() const {

  return true;
}

void ClientDiscourseContext::Swap(ClientDiscourseContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientDiscourseContext::InternalSwap(ClientDiscourseContext* other) {
  display_.UnsafeArenaSwap(&other->display_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientDiscourseContext::GetTypeName() const {
  return "discourse_context.ClientDiscourseContext";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientDiscourseContext

// repeated .discourse_context.Display display = 4;
int ClientDiscourseContext::display_size() const {
  return display_.size();
}
void ClientDiscourseContext::clear_display() {
  display_.Clear();
}
const ::discourse_context::Display& ClientDiscourseContext::display(int index) const {
  // @@protoc_insertion_point(field_get:discourse_context.ClientDiscourseContext.display)
  return display_.Get(index);
}
::discourse_context::Display* ClientDiscourseContext::mutable_display(int index) {
  // @@protoc_insertion_point(field_mutable:discourse_context.ClientDiscourseContext.display)
  return display_.Mutable(index);
}
::discourse_context::Display* ClientDiscourseContext::add_display() {
  // @@protoc_insertion_point(field_add:discourse_context.ClientDiscourseContext.display)
  return display_.Add();
}
::google::protobuf::RepeatedPtrField< ::discourse_context::Display >*
ClientDiscourseContext::mutable_display() {
  // @@protoc_insertion_point(field_mutable_list:discourse_context.ClientDiscourseContext.display)
  return &display_;
}
const ::google::protobuf::RepeatedPtrField< ::discourse_context::Display >&
ClientDiscourseContext::display() const {
  // @@protoc_insertion_point(field_list:discourse_context.ClientDiscourseContext.display)
  return display_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDisplay(
    Display* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Display::kMediaFieldNumber;
const int Display::kUriFieldNumber;
const int Display::kSelectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Display::Display()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:discourse_context.Display)
}

void Display::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  media_ = const_cast< ::discourse_context::Media*>(
      ::discourse_context::Media::internal_default_instance());
#else
  media_ = const_cast< ::discourse_context::Media*>(&::discourse_context::Media::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  selection_ = const_cast< ::discourse_context::Selection*>(
      ::discourse_context::Selection::internal_default_instance());
#else
  selection_ = const_cast< ::discourse_context::Selection*>(&::discourse_context::Selection::default_instance());
#endif
}

Display::Display(const Display& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:discourse_context.Display)
}

void Display::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_ = NULL;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  selection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Display::~Display() {
  // @@protoc_insertion_point(destructor:discourse_context.Display)
  SharedDtor();
}

void Display::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete media_;
    delete selection_;
  }
}

void Display::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Display& Display::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto();
#endif
  return *default_instance_;
}

Display* Display::default_instance_ = NULL;

Display* Display::New(::google::protobuf::Arena* arena) const {
  Display* n = new Display;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Display::Clear() {
// @@protoc_insertion_point(message_clear_start:discourse_context.Display)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_media()) {
      if (media_ != NULL) media_->::discourse_context::Media::Clear();
    }
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_selection()) {
      if (selection_ != NULL) selection_->::discourse_context::Selection::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Display::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForDisplay, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:discourse_context.Display)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .discourse_context.Media media = 9;
      case 9: {
        if (tag == 74) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_media()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_uri;
        break;
      }

      // optional string uri = 10;
      case 10: {
        if (tag == 82) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_selection;
        break;
      }

      // optional .discourse_context.Selection selection = 13;
      case 13: {
        if (tag == 106) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:discourse_context.Display)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:discourse_context.Display)
  return false;
#undef DO_
}

void Display::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:discourse_context.Display)
  // optional .discourse_context.Media media = 9;
  if (has_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->media_, output);
  }

  // optional string uri = 10;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->uri(), output);
  }

  // optional .discourse_context.Selection selection = 13;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->selection_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:discourse_context.Display)
}

int Display::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:discourse_context.Display)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .discourse_context.Media media = 9;
    if (has_media()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->media_);
    }

    // optional string uri = 10;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional .discourse_context.Selection selection = 13;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->selection_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Display::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Display*>(&from));
}

void Display::MergeFrom(const Display& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:discourse_context.Display)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_media()) {
      mutable_media()->::discourse_context::Media::MergeFrom(from.media());
    }
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_selection()) {
      mutable_selection()->::discourse_context::Selection::MergeFrom(from.selection());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Display::CopyFrom(const Display& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:discourse_context.Display)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Display::IsInitialized() const {

  return true;
}

void Display::Swap(Display* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Display::InternalSwap(Display* other) {
  std::swap(media_, other->media_);
  uri_.Swap(&other->uri_);
  std::swap(selection_, other->selection_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Display::GetTypeName() const {
  return "discourse_context.Display";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Display

// optional .discourse_context.Media media = 9;
bool Display::has_media() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Display::set_has_media() {
  _has_bits_[0] |= 0x00000001u;
}
void Display::clear_has_media() {
  _has_bits_[0] &= ~0x00000001u;
}
void Display::clear_media() {
  if (media_ != NULL) media_->::discourse_context::Media::Clear();
  clear_has_media();
}
const ::discourse_context::Media& Display::media() const {
  // @@protoc_insertion_point(field_get:discourse_context.Display.media)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return media_ != NULL ? *media_ : *default_instance().media_;
#else
  return media_ != NULL ? *media_ : *default_instance_->media_;
#endif
}
::discourse_context::Media* Display::mutable_media() {
  set_has_media();
  if (media_ == NULL) {
    media_ = new ::discourse_context::Media;
  }
  // @@protoc_insertion_point(field_mutable:discourse_context.Display.media)
  return media_;
}
::discourse_context::Media* Display::release_media() {
  // @@protoc_insertion_point(field_release:discourse_context.Display.media)
  clear_has_media();
  ::discourse_context::Media* temp = media_;
  media_ = NULL;
  return temp;
}
void Display::set_allocated_media(::discourse_context::Media* media) {
  delete media_;
  media_ = media;
  if (media) {
    set_has_media();
  } else {
    clear_has_media();
  }
  // @@protoc_insertion_point(field_set_allocated:discourse_context.Display.media)
}

// optional string uri = 10;
bool Display::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Display::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
void Display::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
void Display::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Display::uri() const {
  // @@protoc_insertion_point(field_get:discourse_context.Display.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Display::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:discourse_context.Display.uri)
}
 void Display::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:discourse_context.Display.uri)
}
 void Display::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:discourse_context.Display.uri)
}
 ::std::string* Display::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:discourse_context.Display.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Display::release_uri() {
  // @@protoc_insertion_point(field_release:discourse_context.Display.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Display::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:discourse_context.Display.uri)
}

// optional .discourse_context.Selection selection = 13;
bool Display::has_selection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Display::set_has_selection() {
  _has_bits_[0] |= 0x00000004u;
}
void Display::clear_has_selection() {
  _has_bits_[0] &= ~0x00000004u;
}
void Display::clear_selection() {
  if (selection_ != NULL) selection_->::discourse_context::Selection::Clear();
  clear_has_selection();
}
const ::discourse_context::Selection& Display::selection() const {
  // @@protoc_insertion_point(field_get:discourse_context.Display.selection)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return selection_ != NULL ? *selection_ : *default_instance().selection_;
#else
  return selection_ != NULL ? *selection_ : *default_instance_->selection_;
#endif
}
::discourse_context::Selection* Display::mutable_selection() {
  set_has_selection();
  if (selection_ == NULL) {
    selection_ = new ::discourse_context::Selection;
  }
  // @@protoc_insertion_point(field_mutable:discourse_context.Display.selection)
  return selection_;
}
::discourse_context::Selection* Display::release_selection() {
  // @@protoc_insertion_point(field_release:discourse_context.Display.selection)
  clear_has_selection();
  ::discourse_context::Selection* temp = selection_;
  selection_ = NULL;
  return temp;
}
void Display::set_allocated_selection(::discourse_context::Selection* selection) {
  delete selection_;
  selection_ = selection;
  if (selection) {
    set_has_selection();
  } else {
    clear_has_selection();
  }
  // @@protoc_insertion_point(field_set_allocated:discourse_context.Display.selection)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSelection(
    Selection* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Selection::kContentFieldNumber;
const int Selection::kStartFieldNumber;
const int Selection::kEndFieldNumber;
const int Selection::kIsUriEncodedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Selection::Selection()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:discourse_context.Selection)
}

void Selection::InitAsDefaultInstance() {
}

Selection::Selection(const Selection& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:discourse_context.Selection)
}

void Selection::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_ = 0;
  end_ = 0;
  is_uri_encoded_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Selection::~Selection() {
  // @@protoc_insertion_point(destructor:discourse_context.Selection)
  SharedDtor();
}

void Selection::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Selection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Selection& Selection::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto();
#endif
  return *default_instance_;
}

Selection* Selection::default_instance_ = NULL;

Selection* Selection::New(::google::protobuf::Arena* arena) const {
  Selection* n = new Selection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Selection::Clear() {
// @@protoc_insertion_point(message_clear_start:discourse_context.Selection)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Selection, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Selection*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(start_, end_);
    if (has_content()) {
      content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    is_uri_encoded_ = true;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Selection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSelection, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:discourse_context.Selection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }

      // optional int32 start = 2;
      case 2: {
        if (tag == 16) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }

      // optional int32 end = 3;
      case 3: {
        if (tag == 24) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_uri_encoded;
        break;
      }

      // optional bool is_uri_encoded = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_is_uri_encoded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_uri_encoded_)));
          set_has_is_uri_encoded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:discourse_context.Selection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:discourse_context.Selection)
  return false;
#undef DO_
}

void Selection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:discourse_context.Selection)
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  // optional int32 start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // optional int32 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end(), output);
  }

  // optional bool is_uri_encoded = 4 [default = true];
  if (has_is_uri_encoded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_uri_encoded(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:discourse_context.Selection)
}

int Selection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:discourse_context.Selection)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // optional int32 end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

    // optional bool is_uri_encoded = 4 [default = true];
    if (has_is_uri_encoded()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Selection::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Selection*>(&from));
}

void Selection::MergeFrom(const Selection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:discourse_context.Selection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_is_uri_encoded()) {
      set_is_uri_encoded(from.is_uri_encoded());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Selection::CopyFrom(const Selection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:discourse_context.Selection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Selection::IsInitialized() const {

  return true;
}

void Selection::Swap(Selection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Selection::InternalSwap(Selection* other) {
  content_.Swap(&other->content_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(is_uri_encoded_, other->is_uri_encoded_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Selection::GetTypeName() const {
  return "discourse_context.Selection";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Selection

// optional string content = 1;
bool Selection::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Selection::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
void Selection::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
void Selection::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
 const ::std::string& Selection::content() const {
  // @@protoc_insertion_point(field_get:discourse_context.Selection.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Selection::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:discourse_context.Selection.content)
}
 void Selection::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:discourse_context.Selection.content)
}
 void Selection::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:discourse_context.Selection.content)
}
 ::std::string* Selection::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:discourse_context.Selection.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Selection::release_content() {
  // @@protoc_insertion_point(field_release:discourse_context.Selection.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Selection::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:discourse_context.Selection.content)
}

// optional int32 start = 2;
bool Selection::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Selection::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
void Selection::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
void Selection::clear_start() {
  start_ = 0;
  clear_has_start();
}
 ::google::protobuf::int32 Selection::start() const {
  // @@protoc_insertion_point(field_get:discourse_context.Selection.start)
  return start_;
}
 void Selection::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:discourse_context.Selection.start)
}

// optional int32 end = 3;
bool Selection::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Selection::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
void Selection::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
void Selection::clear_end() {
  end_ = 0;
  clear_has_end();
}
 ::google::protobuf::int32 Selection::end() const {
  // @@protoc_insertion_point(field_get:discourse_context.Selection.end)
  return end_;
}
 void Selection::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:discourse_context.Selection.end)
}

// optional bool is_uri_encoded = 4 [default = true];
bool Selection::has_is_uri_encoded() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Selection::set_has_is_uri_encoded() {
  _has_bits_[0] |= 0x00000008u;
}
void Selection::clear_has_is_uri_encoded() {
  _has_bits_[0] &= ~0x00000008u;
}
void Selection::clear_is_uri_encoded() {
  is_uri_encoded_ = true;
  clear_has_is_uri_encoded();
}
 bool Selection::is_uri_encoded() const {
  // @@protoc_insertion_point(field_get:discourse_context.Selection.is_uri_encoded)
  return is_uri_encoded_;
}
 void Selection::set_is_uri_encoded(bool value) {
  set_has_is_uri_encoded();
  is_uri_encoded_ = value;
  // @@protoc_insertion_point(field_set:discourse_context.Selection.is_uri_encoded)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForMedia(
    Media* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Media::kMimeTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Media::Media()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:discourse_context.Media)
}

void Media::InitAsDefaultInstance() {
}

Media::Media(const Media& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:discourse_context.Media)
}

void Media::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Media::~Media() {
  // @@protoc_insertion_point(destructor:discourse_context.Media)
  SharedDtor();
}

void Media::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mime_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Media::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Media& Media::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fdiscourse_5fcontext_2eproto();
#endif
  return *default_instance_;
}

Media* Media::default_instance_ = NULL;

Media* Media::New(::google::protobuf::Arena* arena) const {
  Media* n = new Media;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Media::Clear() {
// @@protoc_insertion_point(message_clear_start:discourse_context.Media)
  if (has_mime_type()) {
    mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Media::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForMedia, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:discourse_context.Media)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mime_type = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:discourse_context.Media)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:discourse_context.Media)
  return false;
#undef DO_
}

void Media::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:discourse_context.Media)
  // optional string mime_type = 3;
  if (has_mime_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mime_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:discourse_context.Media)
}

int Media::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:discourse_context.Media)
  int total_size = 0;

  // optional string mime_type = 3;
  if (has_mime_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mime_type());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Media::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Media*>(&from));
}

void Media::MergeFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:discourse_context.Media)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mime_type()) {
      set_has_mime_type();
      mime_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Media::CopyFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:discourse_context.Media)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media::IsInitialized() const {

  return true;
}

void Media::Swap(Media* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Media::InternalSwap(Media* other) {
  mime_type_.Swap(&other->mime_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Media::GetTypeName() const {
  return "discourse_context.Media";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Media

// optional string mime_type = 3;
bool Media::has_mime_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Media::set_has_mime_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Media::clear_has_mime_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Media::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mime_type();
}
 const ::std::string& Media::mime_type() const {
  // @@protoc_insertion_point(field_get:discourse_context.Media.mime_type)
  return mime_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Media::set_mime_type(const ::std::string& value) {
  set_has_mime_type();
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:discourse_context.Media.mime_type)
}
 void Media::set_mime_type(const char* value) {
  set_has_mime_type();
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:discourse_context.Media.mime_type)
}
 void Media::set_mime_type(const char* value, size_t size) {
  set_has_mime_type();
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:discourse_context.Media.mime_type)
}
 ::std::string* Media::mutable_mime_type() {
  set_has_mime_type();
  // @@protoc_insertion_point(field_mutable:discourse_context.Media.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Media::release_mime_type() {
  // @@protoc_insertion_point(field_release:discourse_context.Media.mime_type)
  clear_has_mime_type();
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Media::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    set_has_mime_type();
  } else {
    clear_has_mime_type();
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:discourse_context.Media.mime_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace discourse_context

// @@protoc_insertion_point(global_scope)
