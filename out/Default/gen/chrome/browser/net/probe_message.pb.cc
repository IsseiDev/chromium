// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: probe_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "probe_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace chrome_browser_net {

void protobuf_ShutdownFile_probe_5fmessage_2eproto() {
  delete ProbePacket::default_instance_;
  delete ProbePacket_Header::default_instance_;
  delete ProbePacket_Token::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_probe_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_probe_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ProbePacket::default_instance_ = new ProbePacket();
  ProbePacket_Header::default_instance_ = new ProbePacket_Header();
  ProbePacket_Token::default_instance_ = new ProbePacket_Token();
  ProbePacket::default_instance_->InitAsDefaultInstance();
  ProbePacket_Header::default_instance_->InitAsDefaultInstance();
  ProbePacket_Token::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_probe_5fmessage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_probe_5fmessage_2eproto_once_);
void protobuf_AddDesc_probe_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_probe_5fmessage_2eproto_once_,
                 &protobuf_AddDesc_probe_5fmessage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_probe_5fmessage_2eproto {
  StaticDescriptorInitializer_probe_5fmessage_2eproto() {
    protobuf_AddDesc_probe_5fmessage_2eproto();
  }
} static_descriptor_initializer_probe_5fmessage_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForProbePacket(
    ProbePacket* ptr) {
  return ptr->mutable_unknown_fields();
}

bool ProbePacket_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProbePacket_Type ProbePacket::UNKNOWN;
const ProbePacket_Type ProbePacket::HELLO_REQUEST;
const ProbePacket_Type ProbePacket::HELLO_REPLY;
const ProbePacket_Type ProbePacket::PROBE_REQUEST;
const ProbePacket_Type ProbePacket::PROBE_REPLY;
const ProbePacket_Type ProbePacket::Type_MIN;
const ProbePacket_Type ProbePacket::Type_MAX;
const int ProbePacket::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
static ::std::string* MutableUnknownFieldsForProbePacket_Header(
    ProbePacket_Header* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProbePacket_Header::kVersionFieldNumber;
const int ProbePacket_Header::kChecksumFieldNumber;
const int ProbePacket_Header::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProbePacket_Header::ProbePacket_Header()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_net.ProbePacket.Header)
}

void ProbePacket_Header::InitAsDefaultInstance() {
}

ProbePacket_Header::ProbePacket_Header(const ProbePacket_Header& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chrome_browser_net.ProbePacket.Header)
}

void ProbePacket_Header::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  checksum_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProbePacket_Header::~ProbePacket_Header() {
  // @@protoc_insertion_point(destructor:chrome_browser_net.ProbePacket.Header)
  SharedDtor();
}

void ProbePacket_Header::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ProbePacket_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProbePacket_Header& ProbePacket_Header::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_probe_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_probe_5fmessage_2eproto();
#endif
  return *default_instance_;
}

ProbePacket_Header* ProbePacket_Header::default_instance_ = NULL;

ProbePacket_Header* ProbePacket_Header::New(::google::protobuf::Arena* arena) const {
  ProbePacket_Header* n = new ProbePacket_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProbePacket_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_net.ProbePacket.Header)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ProbePacket_Header, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProbePacket_Header*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, type_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProbePacket_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForProbePacket_Header, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_net.ProbePacket.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_checksum;
        break;
      }

      // optional uint32 checksum = 2;
      case 2: {
        if (tag == 16) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .chrome_browser_net.ProbePacket.Type type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_net::ProbePacket_Type_IsValid(value)) {
            set_type(static_cast< ::chrome_browser_net::ProbePacket_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_net.ProbePacket.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_net.ProbePacket.Header)
  return false;
#undef DO_
}

void ProbePacket_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_net.ProbePacket.Header)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 checksum = 2;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->checksum(), output);
  }

  // optional .chrome_browser_net.ProbePacket.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_net.ProbePacket.Header)
}

int ProbePacket_Header::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_net.ProbePacket.Header)
  int total_size = 0;

  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional uint32 checksum = 2;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checksum());
    }

    // optional .chrome_browser_net.ProbePacket.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProbePacket_Header::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProbePacket_Header*>(&from));
}

void ProbePacket_Header::MergeFrom(const ProbePacket_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_net.ProbePacket.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ProbePacket_Header::CopyFrom(const ProbePacket_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_net.ProbePacket.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbePacket_Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProbePacket_Header::Swap(ProbePacket_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProbePacket_Header::InternalSwap(ProbePacket_Header* other) {
  std::swap(version_, other->version_);
  std::swap(checksum_, other->checksum_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProbePacket_Header::GetTypeName() const {
  return "chrome_browser_net.ProbePacket.Header";
}


// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForProbePacket_Token(
    ProbePacket_Token* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProbePacket_Token::kTimestampMicrosFieldNumber;
const int ProbePacket_Token::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProbePacket_Token::ProbePacket_Token()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_net.ProbePacket.Token)
}

void ProbePacket_Token::InitAsDefaultInstance() {
}

ProbePacket_Token::ProbePacket_Token(const ProbePacket_Token& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chrome_browser_net.ProbePacket.Token)
}

void ProbePacket_Token::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_micros_ = GOOGLE_ULONGLONG(0);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProbePacket_Token::~ProbePacket_Token() {
  // @@protoc_insertion_point(destructor:chrome_browser_net.ProbePacket.Token)
  SharedDtor();
}

void ProbePacket_Token::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ProbePacket_Token::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProbePacket_Token& ProbePacket_Token::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_probe_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_probe_5fmessage_2eproto();
#endif
  return *default_instance_;
}

ProbePacket_Token* ProbePacket_Token::default_instance_ = NULL;

ProbePacket_Token* ProbePacket_Token::New(::google::protobuf::Arena* arena) const {
  ProbePacket_Token* n = new ProbePacket_Token;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProbePacket_Token::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_net.ProbePacket.Token)
  if (_has_bits_[0 / 32] & 3u) {
    timestamp_micros_ = GOOGLE_ULONGLONG(0);
    if (has_hash()) {
      hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProbePacket_Token::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForProbePacket_Token, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_net.ProbePacket.Token)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp_micros = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_micros_)));
          set_has_timestamp_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // required bytes hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_net.ProbePacket.Token)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_net.ProbePacket.Token)
  return false;
#undef DO_
}

void ProbePacket_Token::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_net.ProbePacket.Token)
  // required uint64 timestamp_micros = 1;
  if (has_timestamp_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_micros(), output);
  }

  // required bytes hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_net.ProbePacket.Token)
}

int ProbePacket_Token::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chrome_browser_net.ProbePacket.Token)
  int total_size = 0;

  if (has_timestamp_micros()) {
    // required uint64 timestamp_micros = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_micros());
  }

  if (has_hash()) {
    // required bytes hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  return total_size;
}
int ProbePacket_Token::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_net.ProbePacket.Token)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 timestamp_micros = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_micros());

    // required bytes hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProbePacket_Token::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProbePacket_Token*>(&from));
}

void ProbePacket_Token::MergeFrom(const ProbePacket_Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_net.ProbePacket.Token)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_micros()) {
      set_timestamp_micros(from.timestamp_micros());
    }
    if (from.has_hash()) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ProbePacket_Token::CopyFrom(const ProbePacket_Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_net.ProbePacket.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbePacket_Token::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProbePacket_Token::Swap(ProbePacket_Token* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProbePacket_Token::InternalSwap(ProbePacket_Token* other) {
  std::swap(timestamp_micros_, other->timestamp_micros_);
  hash_.Swap(&other->hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProbePacket_Token::GetTypeName() const {
  return "chrome_browser_net.ProbePacket.Token";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProbePacket::kHeaderFieldNumber;
const int ProbePacket::kTokenFieldNumber;
const int ProbePacket::kGroupIdFieldNumber;
const int ProbePacket::kPacketIndexFieldNumber;
const int ProbePacket::kProbeSizeBytesFieldNumber;
const int ProbePacket::kPacingIntervalMicrosFieldNumber;
const int ProbePacket::kNumberProbePacketsFieldNumber;
const int ProbePacket::kServerProcessingMicrosFieldNumber;
const int ProbePacket::kPaddingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProbePacket::ProbePacket()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_net.ProbePacket)
}

void ProbePacket::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  header_ = const_cast< ::chrome_browser_net::ProbePacket_Header*>(
      ::chrome_browser_net::ProbePacket_Header::internal_default_instance());
#else
  header_ = const_cast< ::chrome_browser_net::ProbePacket_Header*>(&::chrome_browser_net::ProbePacket_Header::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  token_ = const_cast< ::chrome_browser_net::ProbePacket_Token*>(
      ::chrome_browser_net::ProbePacket_Token::internal_default_instance());
#else
  token_ = const_cast< ::chrome_browser_net::ProbePacket_Token*>(&::chrome_browser_net::ProbePacket_Token::default_instance());
#endif
}

ProbePacket::ProbePacket(const ProbePacket& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chrome_browser_net.ProbePacket)
}

void ProbePacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  token_ = NULL;
  group_id_ = 0u;
  packet_index_ = 0u;
  probe_size_bytes_ = 0u;
  pacing_interval_micros_ = 0u;
  number_probe_packets_ = 0u;
  server_processing_micros_ = GOOGLE_LONGLONG(0);
  padding_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProbePacket::~ProbePacket() {
  // @@protoc_insertion_point(destructor:chrome_browser_net.ProbePacket)
  SharedDtor();
}

void ProbePacket::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  padding_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete header_;
    delete token_;
  }
}

void ProbePacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProbePacket& ProbePacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_probe_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_probe_5fmessage_2eproto();
#endif
  return *default_instance_;
}

ProbePacket* ProbePacket::default_instance_ = NULL;

ProbePacket* ProbePacket::New(::google::protobuf::Arena* arena) const {
  ProbePacket* n = new ProbePacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProbePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_net.ProbePacket)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ProbePacket, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProbePacket*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(group_id_, server_processing_micros_);
    if (has_header()) {
      if (header_ != NULL) header_->::chrome_browser_net::ProbePacket_Header::Clear();
    }
    if (has_token()) {
      if (token_ != NULL) token_->::chrome_browser_net::ProbePacket_Token::Clear();
    }
    number_probe_packets_ = 0u;
  }
  if (has_padding()) {
    padding_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProbePacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForProbePacket, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_net.ProbePacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chrome_browser_net.ProbePacket.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional .chrome_browser_net.ProbePacket.Token token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_packet_index;
        break;
      }

      // optional uint32 packet_index = 4;
      case 4: {
        if (tag == 32) {
         parse_packet_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_index_)));
          set_has_packet_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_probe_size_bytes;
        break;
      }

      // optional uint32 probe_size_bytes = 5;
      case 5: {
        if (tag == 40) {
         parse_probe_size_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &probe_size_bytes_)));
          set_has_probe_size_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pacing_interval_micros;
        break;
      }

      // optional uint32 pacing_interval_micros = 6;
      case 6: {
        if (tag == 48) {
         parse_pacing_interval_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pacing_interval_micros_)));
          set_has_pacing_interval_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_number_probe_packets;
        break;
      }

      // optional uint32 number_probe_packets = 7;
      case 7: {
        if (tag == 56) {
         parse_number_probe_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_probe_packets_)));
          set_has_number_probe_packets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_padding;
        break;
      }

      // optional bytes padding = 8;
      case 8: {
        if (tag == 66) {
         parse_padding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_padding()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_server_processing_micros;
        break;
      }

      // optional int64 server_processing_micros = 9;
      case 9: {
        if (tag == 72) {
         parse_server_processing_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_processing_micros_)));
          set_has_server_processing_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_net.ProbePacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_net.ProbePacket)
  return false;
#undef DO_
}

void ProbePacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_net.ProbePacket)
  // optional .chrome_browser_net.ProbePacket.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .chrome_browser_net.ProbePacket.Token token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->token_, output);
  }

  // optional uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // optional uint32 packet_index = 4;
  if (has_packet_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->packet_index(), output);
  }

  // optional uint32 probe_size_bytes = 5;
  if (has_probe_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->probe_size_bytes(), output);
  }

  // optional uint32 pacing_interval_micros = 6;
  if (has_pacing_interval_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pacing_interval_micros(), output);
  }

  // optional uint32 number_probe_packets = 7;
  if (has_number_probe_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->number_probe_packets(), output);
  }

  // optional bytes padding = 8;
  if (has_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->padding(), output);
  }

  // optional int64 server_processing_micros = 9;
  if (has_server_processing_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->server_processing_micros(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_net.ProbePacket)
}

int ProbePacket::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_net.ProbePacket)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .chrome_browser_net.ProbePacket.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .chrome_browser_net.ProbePacket.Token token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->token_);
    }

    // optional uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional uint32 packet_index = 4;
    if (has_packet_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_index());
    }

    // optional uint32 probe_size_bytes = 5;
    if (has_probe_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->probe_size_bytes());
    }

    // optional uint32 pacing_interval_micros = 6;
    if (has_pacing_interval_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pacing_interval_micros());
    }

    // optional uint32 number_probe_packets = 7;
    if (has_number_probe_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_probe_packets());
    }

    // optional int64 server_processing_micros = 9;
    if (has_server_processing_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->server_processing_micros());
    }

  }
  // optional bytes padding = 8;
  if (has_padding()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->padding());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProbePacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProbePacket*>(&from));
}

void ProbePacket::MergeFrom(const ProbePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_net.ProbePacket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::chrome_browser_net::ProbePacket_Header::MergeFrom(from.header());
    }
    if (from.has_token()) {
      mutable_token()->::chrome_browser_net::ProbePacket_Token::MergeFrom(from.token());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_packet_index()) {
      set_packet_index(from.packet_index());
    }
    if (from.has_probe_size_bytes()) {
      set_probe_size_bytes(from.probe_size_bytes());
    }
    if (from.has_pacing_interval_micros()) {
      set_pacing_interval_micros(from.pacing_interval_micros());
    }
    if (from.has_number_probe_packets()) {
      set_number_probe_packets(from.number_probe_packets());
    }
    if (from.has_server_processing_micros()) {
      set_server_processing_micros(from.server_processing_micros());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_padding()) {
      set_has_padding();
      padding_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.padding_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ProbePacket::CopyFrom(const ProbePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_net.ProbePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbePacket::IsInitialized() const {

  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  if (has_token()) {
    if (!this->token_->IsInitialized()) return false;
  }
  return true;
}

void ProbePacket::Swap(ProbePacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProbePacket::InternalSwap(ProbePacket* other) {
  std::swap(header_, other->header_);
  std::swap(token_, other->token_);
  std::swap(group_id_, other->group_id_);
  std::swap(packet_index_, other->packet_index_);
  std::swap(probe_size_bytes_, other->probe_size_bytes_);
  std::swap(pacing_interval_micros_, other->pacing_interval_micros_);
  std::swap(number_probe_packets_, other->number_probe_packets_);
  std::swap(server_processing_micros_, other->server_processing_micros_);
  padding_.Swap(&other->padding_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProbePacket::GetTypeName() const {
  return "chrome_browser_net.ProbePacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProbePacket_Header

// required uint32 version = 1;
bool ProbePacket_Header::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProbePacket_Header::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void ProbePacket_Header::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProbePacket_Header::clear_version() {
  version_ = 0u;
  clear_has_version();
}
 ::google::protobuf::uint32 ProbePacket_Header::version() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.Header.version)
  return version_;
}
 void ProbePacket_Header::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.Header.version)
}

// optional uint32 checksum = 2;
bool ProbePacket_Header::has_checksum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProbePacket_Header::set_has_checksum() {
  _has_bits_[0] |= 0x00000002u;
}
void ProbePacket_Header::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProbePacket_Header::clear_checksum() {
  checksum_ = 0u;
  clear_has_checksum();
}
 ::google::protobuf::uint32 ProbePacket_Header::checksum() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.Header.checksum)
  return checksum_;
}
 void ProbePacket_Header::set_checksum(::google::protobuf::uint32 value) {
  set_has_checksum();
  checksum_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.Header.checksum)
}

// optional .chrome_browser_net.ProbePacket.Type type = 3;
bool ProbePacket_Header::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProbePacket_Header::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ProbePacket_Header::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProbePacket_Header::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::chrome_browser_net::ProbePacket_Type ProbePacket_Header::type() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.Header.type)
  return static_cast< ::chrome_browser_net::ProbePacket_Type >(type_);
}
 void ProbePacket_Header::set_type(::chrome_browser_net::ProbePacket_Type value) {
  assert(::chrome_browser_net::ProbePacket_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.Header.type)
}

// -------------------------------------------------------------------

// ProbePacket_Token

// required uint64 timestamp_micros = 1;
bool ProbePacket_Token::has_timestamp_micros() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProbePacket_Token::set_has_timestamp_micros() {
  _has_bits_[0] |= 0x00000001u;
}
void ProbePacket_Token::clear_has_timestamp_micros() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProbePacket_Token::clear_timestamp_micros() {
  timestamp_micros_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_micros();
}
 ::google::protobuf::uint64 ProbePacket_Token::timestamp_micros() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.Token.timestamp_micros)
  return timestamp_micros_;
}
 void ProbePacket_Token::set_timestamp_micros(::google::protobuf::uint64 value) {
  set_has_timestamp_micros();
  timestamp_micros_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.Token.timestamp_micros)
}

// required bytes hash = 2;
bool ProbePacket_Token::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProbePacket_Token::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void ProbePacket_Token::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProbePacket_Token::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
 const ::std::string& ProbePacket_Token::hash() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.Token.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProbePacket_Token::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.Token.hash)
}
 void ProbePacket_Token::set_hash(const char* value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_net.ProbePacket.Token.hash)
}
 void ProbePacket_Token::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_net.ProbePacket.Token.hash)
}
 ::std::string* ProbePacket_Token::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:chrome_browser_net.ProbePacket.Token.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProbePacket_Token::release_hash() {
  // @@protoc_insertion_point(field_release:chrome_browser_net.ProbePacket.Token.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProbePacket_Token::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_net.ProbePacket.Token.hash)
}

// -------------------------------------------------------------------

// ProbePacket

// optional .chrome_browser_net.ProbePacket.Header header = 1;
bool ProbePacket::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProbePacket::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void ProbePacket::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProbePacket::clear_header() {
  if (header_ != NULL) header_->::chrome_browser_net::ProbePacket_Header::Clear();
  clear_has_header();
}
const ::chrome_browser_net::ProbePacket_Header& ProbePacket::header() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.header)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return header_ != NULL ? *header_ : *default_instance().header_;
#else
  return header_ != NULL ? *header_ : *default_instance_->header_;
#endif
}
::chrome_browser_net::ProbePacket_Header* ProbePacket::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::chrome_browser_net::ProbePacket_Header;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_net.ProbePacket.header)
  return header_;
}
::chrome_browser_net::ProbePacket_Header* ProbePacket::release_header() {
  // @@protoc_insertion_point(field_release:chrome_browser_net.ProbePacket.header)
  clear_has_header();
  ::chrome_browser_net::ProbePacket_Header* temp = header_;
  header_ = NULL;
  return temp;
}
void ProbePacket::set_allocated_header(::chrome_browser_net::ProbePacket_Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_net.ProbePacket.header)
}

// optional .chrome_browser_net.ProbePacket.Token token = 2;
bool ProbePacket::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProbePacket::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void ProbePacket::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProbePacket::clear_token() {
  if (token_ != NULL) token_->::chrome_browser_net::ProbePacket_Token::Clear();
  clear_has_token();
}
const ::chrome_browser_net::ProbePacket_Token& ProbePacket::token() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.token)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return token_ != NULL ? *token_ : *default_instance().token_;
#else
  return token_ != NULL ? *token_ : *default_instance_->token_;
#endif
}
::chrome_browser_net::ProbePacket_Token* ProbePacket::mutable_token() {
  set_has_token();
  if (token_ == NULL) {
    token_ = new ::chrome_browser_net::ProbePacket_Token;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_net.ProbePacket.token)
  return token_;
}
::chrome_browser_net::ProbePacket_Token* ProbePacket::release_token() {
  // @@protoc_insertion_point(field_release:chrome_browser_net.ProbePacket.token)
  clear_has_token();
  ::chrome_browser_net::ProbePacket_Token* temp = token_;
  token_ = NULL;
  return temp;
}
void ProbePacket::set_allocated_token(::chrome_browser_net::ProbePacket_Token* token) {
  delete token_;
  token_ = token;
  if (token) {
    set_has_token();
  } else {
    clear_has_token();
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_net.ProbePacket.token)
}

// optional uint32 group_id = 3;
bool ProbePacket::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProbePacket::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ProbePacket::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProbePacket::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
 ::google::protobuf::uint32 ProbePacket::group_id() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.group_id)
  return group_id_;
}
 void ProbePacket::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.group_id)
}

// optional uint32 packet_index = 4;
bool ProbePacket::has_packet_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProbePacket::set_has_packet_index() {
  _has_bits_[0] |= 0x00000008u;
}
void ProbePacket::clear_has_packet_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProbePacket::clear_packet_index() {
  packet_index_ = 0u;
  clear_has_packet_index();
}
 ::google::protobuf::uint32 ProbePacket::packet_index() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.packet_index)
  return packet_index_;
}
 void ProbePacket::set_packet_index(::google::protobuf::uint32 value) {
  set_has_packet_index();
  packet_index_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.packet_index)
}

// optional uint32 probe_size_bytes = 5;
bool ProbePacket::has_probe_size_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ProbePacket::set_has_probe_size_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
void ProbePacket::clear_has_probe_size_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
void ProbePacket::clear_probe_size_bytes() {
  probe_size_bytes_ = 0u;
  clear_has_probe_size_bytes();
}
 ::google::protobuf::uint32 ProbePacket::probe_size_bytes() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.probe_size_bytes)
  return probe_size_bytes_;
}
 void ProbePacket::set_probe_size_bytes(::google::protobuf::uint32 value) {
  set_has_probe_size_bytes();
  probe_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.probe_size_bytes)
}

// optional uint32 pacing_interval_micros = 6;
bool ProbePacket::has_pacing_interval_micros() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ProbePacket::set_has_pacing_interval_micros() {
  _has_bits_[0] |= 0x00000020u;
}
void ProbePacket::clear_has_pacing_interval_micros() {
  _has_bits_[0] &= ~0x00000020u;
}
void ProbePacket::clear_pacing_interval_micros() {
  pacing_interval_micros_ = 0u;
  clear_has_pacing_interval_micros();
}
 ::google::protobuf::uint32 ProbePacket::pacing_interval_micros() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.pacing_interval_micros)
  return pacing_interval_micros_;
}
 void ProbePacket::set_pacing_interval_micros(::google::protobuf::uint32 value) {
  set_has_pacing_interval_micros();
  pacing_interval_micros_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.pacing_interval_micros)
}

// optional uint32 number_probe_packets = 7;
bool ProbePacket::has_number_probe_packets() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ProbePacket::set_has_number_probe_packets() {
  _has_bits_[0] |= 0x00000040u;
}
void ProbePacket::clear_has_number_probe_packets() {
  _has_bits_[0] &= ~0x00000040u;
}
void ProbePacket::clear_number_probe_packets() {
  number_probe_packets_ = 0u;
  clear_has_number_probe_packets();
}
 ::google::protobuf::uint32 ProbePacket::number_probe_packets() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.number_probe_packets)
  return number_probe_packets_;
}
 void ProbePacket::set_number_probe_packets(::google::protobuf::uint32 value) {
  set_has_number_probe_packets();
  number_probe_packets_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.number_probe_packets)
}

// optional int64 server_processing_micros = 9;
bool ProbePacket::has_server_processing_micros() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ProbePacket::set_has_server_processing_micros() {
  _has_bits_[0] |= 0x00000080u;
}
void ProbePacket::clear_has_server_processing_micros() {
  _has_bits_[0] &= ~0x00000080u;
}
void ProbePacket::clear_server_processing_micros() {
  server_processing_micros_ = GOOGLE_LONGLONG(0);
  clear_has_server_processing_micros();
}
 ::google::protobuf::int64 ProbePacket::server_processing_micros() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.server_processing_micros)
  return server_processing_micros_;
}
 void ProbePacket::set_server_processing_micros(::google::protobuf::int64 value) {
  set_has_server_processing_micros();
  server_processing_micros_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.server_processing_micros)
}

// optional bytes padding = 8;
bool ProbePacket::has_padding() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ProbePacket::set_has_padding() {
  _has_bits_[0] |= 0x00000100u;
}
void ProbePacket::clear_has_padding() {
  _has_bits_[0] &= ~0x00000100u;
}
void ProbePacket::clear_padding() {
  padding_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_padding();
}
 const ::std::string& ProbePacket::padding() const {
  // @@protoc_insertion_point(field_get:chrome_browser_net.ProbePacket.padding)
  return padding_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProbePacket::set_padding(const ::std::string& value) {
  set_has_padding();
  padding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_net.ProbePacket.padding)
}
 void ProbePacket::set_padding(const char* value) {
  set_has_padding();
  padding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_net.ProbePacket.padding)
}
 void ProbePacket::set_padding(const void* value, size_t size) {
  set_has_padding();
  padding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_net.ProbePacket.padding)
}
 ::std::string* ProbePacket::mutable_padding() {
  set_has_padding();
  // @@protoc_insertion_point(field_mutable:chrome_browser_net.ProbePacket.padding)
  return padding_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProbePacket::release_padding() {
  // @@protoc_insertion_point(field_release:chrome_browser_net.ProbePacket.padding)
  clear_has_padding();
  return padding_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProbePacket::set_allocated_padding(::std::string* padding) {
  if (padding != NULL) {
    set_has_padding();
  } else {
    clear_has_padding();
  }
  padding_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), padding);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_net.ProbePacket.padding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_net

// @@protoc_insertion_point(global_scope)
