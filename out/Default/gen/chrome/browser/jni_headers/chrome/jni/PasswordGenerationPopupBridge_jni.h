// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/autofill/PasswordGenerationPopupBridge

#ifndef org_chromium_chrome_browser_autofill_PasswordGenerationPopupBridge_JNI
#define org_chromium_chrome_browser_autofill_PasswordGenerationPopupBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kPasswordGenerationPopupBridgeClassPath[] =
    "org/chromium/chrome/browser/autofill/PasswordGenerationPopupBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_PasswordGenerationPopupBridge_clazz
    __attribute__((unused)) = 0;
#define PasswordGenerationPopupBridge_clazz(env) base::android::LazyGetClass(env, kPasswordGenerationPopupBridgeClassPath, &g_PasswordGenerationPopupBridge_clazz)

}  // namespace

namespace autofill {

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_autofill_PasswordGenerationPopupBridge_nativePasswordSelected(JNIEnv*
    env,
    jobject jcaller,
    jlong nativePasswordGenerationPopupViewAndroid) {
  PasswordGenerationPopupViewAndroid* native =
      reinterpret_cast<PasswordGenerationPopupViewAndroid*>(nativePasswordGenerationPopupViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PasswordSelected");
  return native->PasswordSelected(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_autofill_PasswordGenerationPopupBridge_nativeDismissed(JNIEnv*
    env,
    jobject jcaller,
    jlong nativePasswordGenerationPopupViewAndroid) {
  PasswordGenerationPopupViewAndroid* native =
      reinterpret_cast<PasswordGenerationPopupViewAndroid*>(nativePasswordGenerationPopupViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Dismissed");
  return native->Dismissed(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_autofill_PasswordGenerationPopupBridge_nativeSavedPasswordsLinkClicked(JNIEnv*
    env,
    jobject jcaller,
    jlong nativePasswordGenerationPopupViewAndroid) {
  PasswordGenerationPopupViewAndroid* native =
      reinterpret_cast<PasswordGenerationPopupViewAndroid*>(nativePasswordGenerationPopupViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SavedPasswordsLinkClicked");
  return native->SavedPasswordsLinkClicked(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_PasswordGenerationPopupBridge_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_PasswordGenerationPopupBridge_create(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& anchorView,
    jlong nativePopup,
    const base::android::JavaRefOrBare<jobject>& windowAndroid) {
  CHECK_CLAZZ(env, PasswordGenerationPopupBridge_clazz(env),
      PasswordGenerationPopupBridge_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, PasswordGenerationPopupBridge_clazz(env),
      "create",

"("
"Landroid/view/View;"
"J"
"Lorg/chromium/ui/base/WindowAndroid;"
")"
"Lorg/chromium/chrome/browser/autofill/PasswordGenerationPopupBridge;",
      &g_PasswordGenerationPopupBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(PasswordGenerationPopupBridge_clazz(env),
          method_id, anchorView.obj(), nativePopup, windowAndroid.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_PasswordGenerationPopupBridge_show = 0;
static void Java_PasswordGenerationPopupBridge_show(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jboolean isRtl,
    jboolean passwordDisplayed,
    const base::android::JavaRefOrBare<jstring>& password,
    const base::android::JavaRefOrBare<jstring>& suggestionTitle,
    const base::android::JavaRefOrBare<jstring>& explanationText,
    JniIntWrapper explanationTextLinkRangeStart,
    JniIntWrapper explanationTextLinkRangeEnd) {
  CHECK_CLAZZ(env, obj.obj(),
      PasswordGenerationPopupBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PasswordGenerationPopupBridge_clazz(env),
      "show",

"("
"Z"
"Z"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"I"
"I"
")"
"V",
      &g_PasswordGenerationPopupBridge_show);

     env->CallVoidMethod(obj.obj(),
          method_id, isRtl, passwordDisplayed, password.obj(),
              suggestionTitle.obj(), explanationText.obj(),
              as_jint(explanationTextLinkRangeStart),
              as_jint(explanationTextLinkRangeEnd));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_PasswordGenerationPopupBridge_hide = 0;
static void Java_PasswordGenerationPopupBridge_hide(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      PasswordGenerationPopupBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PasswordGenerationPopupBridge_clazz(env),
      "hide",

"("
")"
"V",
      &g_PasswordGenerationPopupBridge_hide);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsPasswordGenerationPopupBridge[] = {
    { "nativePasswordSelected",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_autofill_PasswordGenerationPopupBridge_nativePasswordSelected)
    },
    { "nativeDismissed",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_autofill_PasswordGenerationPopupBridge_nativeDismissed)
    },
    { "nativeSavedPasswordsLinkClicked",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_autofill_PasswordGenerationPopupBridge_nativeSavedPasswordsLinkClicked)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsPasswordGenerationPopupBridgeSize =
      arraysize(kMethodsPasswordGenerationPopupBridge);

  if (env->RegisterNatives(PasswordGenerationPopupBridge_clazz(env),
                           kMethodsPasswordGenerationPopupBridge,
                           kMethodsPasswordGenerationPopupBridgeSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, PasswordGenerationPopupBridge_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace autofill

#endif  // org_chromium_chrome_browser_autofill_PasswordGenerationPopupBridge_JNI
