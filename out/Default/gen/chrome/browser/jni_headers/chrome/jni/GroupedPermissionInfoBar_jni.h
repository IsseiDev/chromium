// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/infobar/GroupedPermissionInfoBar

#ifndef org_chromium_chrome_browser_infobar_GroupedPermissionInfoBar_JNI
#define org_chromium_chrome_browser_infobar_GroupedPermissionInfoBar_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kGroupedPermissionInfoBarClassPath[] =
    "org/chromium/chrome/browser/infobar/GroupedPermissionInfoBar";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_GroupedPermissionInfoBar_clazz
    __attribute__((unused)) = 0;
#define GroupedPermissionInfoBar_clazz(env) base::android::LazyGetClass(env, kGroupedPermissionInfoBarClassPath, &g_GroupedPermissionInfoBar_clazz)

}  // namespace

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_infobar_GroupedPermissionInfoBar_nativeSetPermissionState(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeGroupedPermissionInfoBar,
    jbooleanArray permissions) {
  GroupedPermissionInfoBar* native =
      reinterpret_cast<GroupedPermissionInfoBar*>(nativeGroupedPermissionInfoBar);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetPermissionState");
  return native->SetPermissionState(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jbooleanArray>(env, permissions));
}

static base::subtle::AtomicWord g_GroupedPermissionInfoBar_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_GroupedPermissionInfoBar_create(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& message,
    const base::android::JavaRefOrBare<jstring>& buttonOk,
    const base::android::JavaRefOrBare<jstring>& buttonCancel,
    const base::android::JavaRefOrBare<jintArray>& permissionIcons,
    const base::android::JavaRefOrBare<jobjectArray>& permissionText,
    const base::android::JavaRefOrBare<jobject>& windowAndroid,
    const base::android::JavaRefOrBare<jintArray>& contentSettings) {
  CHECK_CLAZZ(env, GroupedPermissionInfoBar_clazz(env),
      GroupedPermissionInfoBar_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, GroupedPermissionInfoBar_clazz(env),
      "create",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"[I"
"[Ljava/lang/String;"
"Lorg/chromium/ui/base/WindowAndroid;"
"[I"
")"
"Lorg/chromium/chrome/browser/infobar/InfoBar;",
      &g_GroupedPermissionInfoBar_create);

  jobject ret =
      env->CallStaticObjectMethod(GroupedPermissionInfoBar_clazz(env),
          method_id, message.obj(), buttonOk.obj(), buttonCancel.obj(),
              permissionIcons.obj(), permissionText.obj(), windowAndroid.obj(),
              contentSettings.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_GroupedPermissionInfoBar_setNativePtr = 0;
static void Java_GroupedPermissionInfoBar_setNativePtr(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jlong nativePtr) {
  CHECK_CLAZZ(env, obj.obj(),
      GroupedPermissionInfoBar_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, GroupedPermissionInfoBar_clazz(env),
      "setNativePtr",

"("
"J"
")"
"V",
      &g_GroupedPermissionInfoBar_setNativePtr);

     env->CallVoidMethod(obj.obj(),
          method_id, nativePtr);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsGroupedPermissionInfoBar[] = {
    { "nativeSetPermissionState",
"("
"J"
"[Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_infobar_GroupedPermissionInfoBar_nativeSetPermissionState)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsGroupedPermissionInfoBarSize =
      arraysize(kMethodsGroupedPermissionInfoBar);

  if (env->RegisterNatives(GroupedPermissionInfoBar_clazz(env),
                           kMethodsGroupedPermissionInfoBar,
                           kMethodsGroupedPermissionInfoBarSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, GroupedPermissionInfoBar_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_infobar_GroupedPermissionInfoBar_JNI
