// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/toolbar/ToolbarModel

#ifndef org_chromium_chrome_browser_toolbar_ToolbarModel_JNI
#define org_chromium_chrome_browser_toolbar_ToolbarModel_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kToolbarModelDelegateClassPath[] =
    "org/chromium/chrome/browser/toolbar/ToolbarModel$ToolbarModelDelegate";
const char kToolbarModelClassPath[] =
    "org/chromium/chrome/browser/toolbar/ToolbarModel";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ToolbarModelDelegate_clazz __attribute__((unused)) =
    0;
#define ToolbarModelDelegate_clazz(env) base::android::LazyGetClass(env, kToolbarModelDelegateClassPath, &g_ToolbarModelDelegate_clazz)
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ToolbarModel_clazz __attribute__((unused)) = 0;
#define ToolbarModel_clazz(env) base::android::LazyGetClass(env, kToolbarModelClassPath, &g_ToolbarModel_clazz)

}  // namespace

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    const base::android::JavaParamRef<jobject>& delegate);

extern "C" __attribute__((visibility("default")))
jlong Java_org_chromium_chrome_browser_toolbar_ToolbarModel_nativeInit(JNIEnv*
    env, jobject jcaller,
    jobject delegate) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, delegate));
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_chrome_browser_toolbar_ToolbarModel_nativeDestroy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeToolbarModelAndroid) {
  ToolbarModelAndroid* native =
      reinterpret_cast<ToolbarModelAndroid*>(nativeToolbarModelAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_toolbar_ToolbarModel_nativeGetText(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeToolbarModelAndroid) {
  ToolbarModelAndroid* native =
      reinterpret_cast<ToolbarModelAndroid*>(nativeToolbarModelAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetText", NULL);
  return native->GetText(env, base::android::JavaParamRef<jobject>(env,
      jcaller)).Release();
}

static base::subtle::AtomicWord g_ToolbarModelDelegate_getActiveWebContents = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ToolbarModelDelegate_getActiveWebContents(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ToolbarModelDelegate_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ToolbarModelDelegate_clazz(env),
      "getActiveWebContents",

"("
")"
"Lorg/chromium/content_public/browser/WebContents;",
      &g_ToolbarModelDelegate_getActiveWebContents);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsToolbarModel[] = {
    { "nativeInit",
"("
"Lorg/chromium/chrome/browser/toolbar/ToolbarModel$ToolbarModelDelegate;"
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_toolbar_ToolbarModel_nativeInit)
    },
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_toolbar_ToolbarModel_nativeDestroy)
    },
    { "nativeGetText",
"("
"J"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_toolbar_ToolbarModel_nativeGetText)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsToolbarModelSize = arraysize(kMethodsToolbarModel);

  if (env->RegisterNatives(ToolbarModel_clazz(env),
                           kMethodsToolbarModel,
                           kMethodsToolbarModelSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ToolbarModel_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_toolbar_ToolbarModel_JNI
