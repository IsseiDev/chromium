// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/download/ChromeDownloadDelegate

#ifndef org_chromium_chrome_browser_download_ChromeDownloadDelegate_JNI
#define org_chromium_chrome_browser_download_ChromeDownloadDelegate_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kChromeDownloadDelegateClassPath[] =
    "org/chromium/chrome/browser/download/ChromeDownloadDelegate";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ChromeDownloadDelegate_clazz __attribute__((unused))
    = 0;
#define ChromeDownloadDelegate_clazz(env) base::android::LazyGetClass(env, kChromeDownloadDelegateClassPath, &g_ChromeDownloadDelegate_clazz)

}  // namespace

// Step 2: method stubs.

static void Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_download_ChromeDownloadDelegate_nativeInit(JNIEnv*
    env, jobject jcaller,
    jobject webContents) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

static base::android::ScopedJavaLocalRef<jstring> GetDownloadWarningText(JNIEnv*
    env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& filename);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_download_ChromeDownloadDelegate_nativeGetDownloadWarningText(JNIEnv*
    env, jclass jcaller,
    jstring filename) {
  return GetDownloadWarningText(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, filename)).Release();
}

static jboolean IsDownloadDangerous(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& filename);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_download_ChromeDownloadDelegate_nativeIsDownloadDangerous(JNIEnv*
    env, jclass jcaller,
    jstring filename) {
  return IsDownloadDangerous(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, filename));
}

static void DangerousDownloadValidated(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& tab,
    const base::android::JavaParamRef<jstring>& downloadGuid,
    jboolean accept);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_download_ChromeDownloadDelegate_nativeDangerousDownloadValidated(JNIEnv*
    env, jclass jcaller,
    jobject tab,
    jstring downloadGuid,
    jboolean accept) {
  return DangerousDownloadValidated(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, tab),
      base::android::JavaParamRef<jstring>(env, downloadGuid), accept);
}

static void LaunchDownloadOverwriteInfoBar(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& delegate,
    const base::android::JavaParamRef<jobject>& tab,
    const base::android::JavaParamRef<jobject>& downloadInfo,
    const base::android::JavaParamRef<jstring>& fileName,
    const base::android::JavaParamRef<jstring>& dirName,
    const base::android::JavaParamRef<jstring>& dirFullPath);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_download_ChromeDownloadDelegate_nativeLaunchDownloadOverwriteInfoBar(JNIEnv*
    env, jclass jcaller,
    jobject delegate,
    jobject tab,
    jobject downloadInfo,
    jstring fileName,
    jstring dirName,
    jstring dirFullPath) {
  return LaunchDownloadOverwriteInfoBar(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, delegate),
      base::android::JavaParamRef<jobject>(env, tab),
      base::android::JavaParamRef<jobject>(env, downloadInfo),
      base::android::JavaParamRef<jstring>(env, fileName),
      base::android::JavaParamRef<jstring>(env, dirName),
      base::android::JavaParamRef<jstring>(env, dirFullPath));
}

static void LaunchPermissionUpdateInfoBar(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& tab,
    const base::android::JavaParamRef<jstring>& permission,
    jlong callbackId);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_download_ChromeDownloadDelegate_nativeLaunchPermissionUpdateInfoBar(JNIEnv*
    env, jclass jcaller,
    jobject tab,
    jstring permission,
    jlong callbackId) {
  return LaunchPermissionUpdateInfoBar(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, tab),
      base::android::JavaParamRef<jstring>(env, permission), callbackId);
}

static base::subtle::AtomicWord g_ChromeDownloadDelegate_requestHttpGetDownload
    = 0;
static void Java_ChromeDownloadDelegate_requestHttpGetDownload(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& userAgent,
    const base::android::JavaRefOrBare<jstring>& contentDisposition,
    const base::android::JavaRefOrBare<jstring>& mimeType,
    const base::android::JavaRefOrBare<jstring>& cookie,
    const base::android::JavaRefOrBare<jstring>& referer,
    jboolean hasUserGesture,
    const base::android::JavaRefOrBare<jstring>& filename,
    jlong contentLength,
    jboolean mustDownload) {
  CHECK_CLAZZ(env, obj.obj(),
      ChromeDownloadDelegate_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ChromeDownloadDelegate_clazz(env),
      "requestHttpGetDownload",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
"Ljava/lang/String;"
"J"
"Z"
")"
"V",
      &g_ChromeDownloadDelegate_requestHttpGetDownload);

     env->CallVoidMethod(obj.obj(),
          method_id, url.obj(), userAgent.obj(), contentDisposition.obj(),
              mimeType.obj(), cookie.obj(), referer.obj(), hasUserGesture,
              filename.obj(), contentLength, mustDownload);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ChromeDownloadDelegate_onDangerousDownload =
    0;
static void Java_ChromeDownloadDelegate_onDangerousDownload(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& filename,
    const base::android::JavaRefOrBare<jstring>& downloadGuid) {
  CHECK_CLAZZ(env, obj.obj(),
      ChromeDownloadDelegate_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ChromeDownloadDelegate_clazz(env),
      "onDangerousDownload",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_ChromeDownloadDelegate_onDangerousDownload);

     env->CallVoidMethod(obj.obj(),
          method_id, filename.obj(), downloadGuid.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ChromeDownloadDelegate_requestFileAccess = 0;
static void Java_ChromeDownloadDelegate_requestFileAccess(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jlong callbackId) {
  CHECK_CLAZZ(env, obj.obj(),
      ChromeDownloadDelegate_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ChromeDownloadDelegate_clazz(env),
      "requestFileAccess",

"("
"J"
")"
"V",
      &g_ChromeDownloadDelegate_requestFileAccess);

     env->CallVoidMethod(obj.obj(),
          method_id, callbackId);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_ChromeDownloadDelegate_enqueueDownloadManagerRequestFromNative = 0;
static jboolean
    Java_ChromeDownloadDelegate_enqueueDownloadManagerRequestFromNative(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj, jboolean overwrite,
    const base::android::JavaRefOrBare<jobject>& downloadInfo) {
  CHECK_CLAZZ(env, obj.obj(),
      ChromeDownloadDelegate_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ChromeDownloadDelegate_clazz(env),
      "enqueueDownloadManagerRequestFromNative",

"("
"Z"
"Lorg/chromium/chrome/browser/download/DownloadInfo;"
")"
"Z",
      &g_ChromeDownloadDelegate_enqueueDownloadManagerRequestFromNative);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, overwrite, downloadInfo.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ChromeDownloadDelegate_onDownloadStarted = 0;
static void Java_ChromeDownloadDelegate_onDownloadStarted(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& filename,
    const base::android::JavaRefOrBare<jstring>& mimeType) {
  CHECK_CLAZZ(env, obj.obj(),
      ChromeDownloadDelegate_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ChromeDownloadDelegate_clazz(env),
      "onDownloadStarted",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_ChromeDownloadDelegate_onDownloadStarted);

     env->CallVoidMethod(obj.obj(),
          method_id, filename.obj(), mimeType.obj());
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsChromeDownloadDelegate[] = {
    { "nativeInit",
"("
"Lorg/chromium/content_public/browser/WebContents;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_ChromeDownloadDelegate_nativeInit)
    },
    { "nativeGetDownloadWarningText",
"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_ChromeDownloadDelegate_nativeGetDownloadWarningText)
    },
    { "nativeIsDownloadDangerous",
"("
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_ChromeDownloadDelegate_nativeIsDownloadDangerous)
    },
    { "nativeDangerousDownloadValidated",
"("
"Ljava/lang/Object;"
"Ljava/lang/String;"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_ChromeDownloadDelegate_nativeDangerousDownloadValidated)
    },
    { "nativeLaunchDownloadOverwriteInfoBar",
"("
"Lorg/chromium/chrome/browser/download/ChromeDownloadDelegate;"
"Lorg/chromium/chrome/browser/tab/Tab;"
"Lorg/chromium/chrome/browser/download/DownloadInfo;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_ChromeDownloadDelegate_nativeLaunchDownloadOverwriteInfoBar)
    },
    { "nativeLaunchPermissionUpdateInfoBar",
"("
"Lorg/chromium/chrome/browser/tab/Tab;"
"Ljava/lang/String;"
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_ChromeDownloadDelegate_nativeLaunchPermissionUpdateInfoBar)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsChromeDownloadDelegateSize =
      arraysize(kMethodsChromeDownloadDelegate);

  if (env->RegisterNatives(ChromeDownloadDelegate_clazz(env),
                           kMethodsChromeDownloadDelegate,
                           kMethodsChromeDownloadDelegateSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ChromeDownloadDelegate_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_download_ChromeDownloadDelegate_JNI
