// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/JavaExceptionReporter

#ifndef org_chromium_chrome_browser_JavaExceptionReporter_JNI
#define org_chromium_chrome_browser_JavaExceptionReporter_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kJavaExceptionReporterClassPath[] =
    "org/chromium/chrome/browser/JavaExceptionReporter";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_JavaExceptionReporter_clazz __attribute__((unused)) =
    0;
#define JavaExceptionReporter_clazz(env) base::android::LazyGetClass(env, kJavaExceptionReporterClassPath, &g_JavaExceptionReporter_clazz)

}  // namespace

namespace chrome {
namespace android {

// Step 2: method stubs.

static void ReportJavaException(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jthrowable>& e);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_JavaExceptionReporter_nativeReportJavaException(JNIEnv*
    env, jclass jcaller,
    jthrowable e) {
  return ReportJavaException(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jthrowable>(env, e));
}

static void ReportJavaStackTrace(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& stackTrace);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_JavaExceptionReporter_nativeReportJavaStackTrace(JNIEnv*
    env, jclass jcaller,
    jstring stackTrace) {
  return ReportJavaStackTrace(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, stackTrace));
}

static base::subtle::AtomicWord g_JavaExceptionReporter_installHandler = 0;
static void Java_JavaExceptionReporter_installHandler(JNIEnv* env) {
  CHECK_CLAZZ(env, JavaExceptionReporter_clazz(env),
      JavaExceptionReporter_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, JavaExceptionReporter_clazz(env),
      "installHandler",

"("
")"
"V",
      &g_JavaExceptionReporter_installHandler);

     env->CallStaticVoidMethod(JavaExceptionReporter_clazz(env),
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsJavaExceptionReporter[] = {
    { "nativeReportJavaException",
"("
"Ljava/lang/Throwable;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_JavaExceptionReporter_nativeReportJavaException)
    },
    { "nativeReportJavaStackTrace",
"("
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_JavaExceptionReporter_nativeReportJavaStackTrace)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsJavaExceptionReporterSize =
      arraysize(kMethodsJavaExceptionReporter);

  if (env->RegisterNatives(JavaExceptionReporter_clazz(env),
                           kMethodsJavaExceptionReporter,
                           kMethodsJavaExceptionReporterSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, JavaExceptionReporter_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_JavaExceptionReporter_JNI
