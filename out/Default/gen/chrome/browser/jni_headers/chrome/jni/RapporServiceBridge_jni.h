// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/rappor/RapporServiceBridge

#ifndef org_chromium_chrome_browser_rappor_RapporServiceBridge_JNI
#define org_chromium_chrome_browser_rappor_RapporServiceBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kRapporServiceBridgeClassPath[] =
    "org/chromium/chrome/browser/rappor/RapporServiceBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_RapporServiceBridge_clazz __attribute__((unused)) =
    0;
#define RapporServiceBridge_clazz(env) base::android::LazyGetClass(env, kRapporServiceBridgeClassPath, &g_RapporServiceBridge_clazz)

}  // namespace

namespace rappor {

// Step 2: method stubs.

static void SampleDomainAndRegistryFromURL(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& metric,
    const base::android::JavaParamRef<jstring>& url);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_rappor_RapporServiceBridge_nativeSampleDomainAndRegistryFromURL(JNIEnv*
    env, jclass jcaller,
    jstring metric,
    jstring url) {
  return SampleDomainAndRegistryFromURL(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, metric),
      base::android::JavaParamRef<jstring>(env, url));
}

static void SampleString(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    const base::android::JavaParamRef<jstring>& metric,
    const base::android::JavaParamRef<jstring>& sampleValue);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_rappor_RapporServiceBridge_nativeSampleString(JNIEnv*
    env, jclass jcaller,
    jstring metric,
    jstring sampleValue) {
  return SampleString(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, metric),
      base::android::JavaParamRef<jstring>(env, sampleValue));
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsRapporServiceBridge[] = {
    { "nativeSampleDomainAndRegistryFromURL",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_rappor_RapporServiceBridge_nativeSampleDomainAndRegistryFromURL)
    },
    { "nativeSampleString",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_rappor_RapporServiceBridge_nativeSampleString)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsRapporServiceBridgeSize =
      arraysize(kMethodsRapporServiceBridge);

  if (env->RegisterNatives(RapporServiceBridge_clazz(env),
                           kMethodsRapporServiceBridge,
                           kMethodsRapporServiceBridgeSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, RapporServiceBridge_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace rappor

#endif  // org_chromium_chrome_browser_rappor_RapporServiceBridge_JNI
