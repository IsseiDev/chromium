// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/invalidation/InvalidationServiceFactory

#ifndef org_chromium_chrome_browser_invalidation_InvalidationServiceFactory_JNI
#define org_chromium_chrome_browser_invalidation_InvalidationServiceFactory_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kInvalidationServiceFactoryClassPath[] =
    "org/chromium/chrome/browser/invalidation/InvalidationServiceFactory";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_InvalidationServiceFactory_clazz
    __attribute__((unused)) = 0;
#define InvalidationServiceFactory_clazz(env) base::android::LazyGetClass(env, kInvalidationServiceFactoryClassPath, &g_InvalidationServiceFactory_clazz)

}  // namespace

namespace invalidation {

// Step 2: method stubs.

static base::android::ScopedJavaLocalRef<jobject> GetForProfile(JNIEnv* env,
    const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& profile);

extern "C" __attribute__((visibility("default")))
jobject
    Java_org_chromium_chrome_browser_invalidation_InvalidationServiceFactory_nativeGetForProfile(JNIEnv*
    env, jclass jcaller,
    jobject profile) {
  return GetForProfile(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile)).Release();
}

static base::android::ScopedJavaLocalRef<jobject> GetForTest(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& context);

extern "C" __attribute__((visibility("default")))
jobject
    Java_org_chromium_chrome_browser_invalidation_InvalidationServiceFactory_nativeGetForTest(JNIEnv*
    env, jclass jcaller,
    jobject context) {
  return GetForTest(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, context)).Release();
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsInvalidationServiceFactory[] = {
    { "nativeGetForProfile",
"("
"Lorg/chromium/chrome/browser/profiles/Profile;"
")"
"Lorg/chromium/components/invalidation/InvalidationService;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_invalidation_InvalidationServiceFactory_nativeGetForProfile)
    },
    { "nativeGetForTest",
"("
"Landroid/content/Context;"
")"
"Lorg/chromium/components/invalidation/InvalidationService;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_invalidation_InvalidationServiceFactory_nativeGetForTest)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsInvalidationServiceFactorySize =
      arraysize(kMethodsInvalidationServiceFactory);

  if (env->RegisterNatives(InvalidationServiceFactory_clazz(env),
                           kMethodsInvalidationServiceFactory,
                           kMethodsInvalidationServiceFactorySize) < 0) {
    jni_generator::HandleRegistrationError(
        env, InvalidationServiceFactory_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace invalidation

#endif  // org_chromium_chrome_browser_invalidation_InvalidationServiceFactory_JNI
