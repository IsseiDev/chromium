// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/signin/AccountManagementScreenHelper

#ifndef org_chromium_chrome_browser_signin_AccountManagementScreenHelper_JNI
#define org_chromium_chrome_browser_signin_AccountManagementScreenHelper_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAccountManagementScreenHelperClassPath[] =
    "org/chromium/chrome/browser/signin/AccountManagementScreenHelper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AccountManagementScreenHelper_clazz
    __attribute__((unused)) = 0;
#define AccountManagementScreenHelper_clazz(env) base::android::LazyGetClass(env, kAccountManagementScreenHelperClassPath, &g_AccountManagementScreenHelper_clazz)

}  // namespace

// Step 2: method stubs.

static void LogEvent(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    jint metric,
    jint gaiaServiceType);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_signin_AccountManagementScreenHelper_nativeLogEvent(JNIEnv*
    env, jclass jcaller,
    jint metric,
    jint gaiaServiceType) {
  return LogEvent(env, base::android::JavaParamRef<jclass>(env, jcaller),
      metric, gaiaServiceType);
}

static base::subtle::AtomicWord
    g_AccountManagementScreenHelper_openAccountManagementScreen = 0;
static void
    Java_AccountManagementScreenHelper_openAccountManagementScreen(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& applicationContext,
    const base::android::JavaRefOrBare<jobject>& profile,
    JniIntWrapper gaiaServiceType) {
  CHECK_CLAZZ(env, AccountManagementScreenHelper_clazz(env),
      AccountManagementScreenHelper_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, AccountManagementScreenHelper_clazz(env),
      "openAccountManagementScreen",

"("
"Landroid/content/Context;"
"Lorg/chromium/chrome/browser/profiles/Profile;"
"I"
")"
"V",
      &g_AccountManagementScreenHelper_openAccountManagementScreen);

     env->CallStaticVoidMethod(AccountManagementScreenHelper_clazz(env),
          method_id, applicationContext.obj(), profile.obj(),
              as_jint(gaiaServiceType));
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAccountManagementScreenHelper[] = {
    { "nativeLogEvent",
"("
"I"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_AccountManagementScreenHelper_nativeLogEvent)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsAccountManagementScreenHelperSize =
      arraysize(kMethodsAccountManagementScreenHelper);

  if (env->RegisterNatives(AccountManagementScreenHelper_clazz(env),
                           kMethodsAccountManagementScreenHelper,
                           kMethodsAccountManagementScreenHelperSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, AccountManagementScreenHelper_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_signin_AccountManagementScreenHelper_JNI
