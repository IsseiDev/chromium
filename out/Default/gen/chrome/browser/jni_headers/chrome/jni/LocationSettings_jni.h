// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/preferences/LocationSettings

#ifndef org_chromium_chrome_browser_preferences_LocationSettings_JNI
#define org_chromium_chrome_browser_preferences_LocationSettings_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kLocationSettingsClassPath[] =
    "org/chromium/chrome/browser/preferences/LocationSettings";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_LocationSettings_clazz __attribute__((unused)) = 0;
#define LocationSettings_clazz(env) base::android::LazyGetClass(env, kLocationSettingsClassPath, &g_LocationSettings_clazz)

}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_LocationSettings_canSitesRequestLocationPermission = 0;
static jboolean Java_LocationSettings_canSitesRequestLocationPermission(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& webContents) {
  CHECK_CLAZZ(env, LocationSettings_clazz(env),
      LocationSettings_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, LocationSettings_clazz(env),
      "canSitesRequestLocationPermission",

"("
"Lorg/chromium/content_public/browser/WebContents;"
")"
"Z",
      &g_LocationSettings_canSitesRequestLocationPermission);

  jboolean ret =
      env->CallStaticBooleanMethod(LocationSettings_clazz(env),
          method_id, webContents.obj());
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

#endif  // org_chromium_chrome_browser_preferences_LocationSettings_JNI
