// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/DevToolsServer

#ifndef org_chromium_chrome_browser_DevToolsServer_JNI
#define org_chromium_chrome_browser_DevToolsServer_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDevToolsServerClassPath[] =
    "org/chromium/chrome/browser/DevToolsServer";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DevToolsServer_clazz __attribute__((unused)) = 0;
#define DevToolsServer_clazz(env) base::android::LazyGetClass(env, kDevToolsServerClassPath, &g_DevToolsServer_clazz)

}  // namespace

// Step 2: method stubs.

static jlong InitRemoteDebugging(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jstring>& socketNamePrefix);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_DevToolsServer_nativeInitRemoteDebugging(JNIEnv*
    env, jobject jcaller,
    jstring socketNamePrefix) {
  return InitRemoteDebugging(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, socketNamePrefix));
}

static void DestroyRemoteDebugging(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jlong devToolsServer);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_DevToolsServer_nativeDestroyRemoteDebugging(JNIEnv*
    env, jobject jcaller,
    jlong devToolsServer) {
  return DestroyRemoteDebugging(env, base::android::JavaParamRef<jobject>(env,
      jcaller), devToolsServer);
}

static jboolean IsRemoteDebuggingEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jlong devToolsServer);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_DevToolsServer_nativeIsRemoteDebuggingEnabled(JNIEnv*
    env, jobject jcaller,
    jlong devToolsServer) {
  return IsRemoteDebuggingEnabled(env, base::android::JavaParamRef<jobject>(env,
      jcaller), devToolsServer);
}

static void SetRemoteDebuggingEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jlong devToolsServer,
    jboolean enabled,
    jboolean allowDebugPermission);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_DevToolsServer_nativeSetRemoteDebuggingEnabled(JNIEnv*
    env, jobject jcaller,
    jlong devToolsServer,
    jboolean enabled,
    jboolean allowDebugPermission) {
  return SetRemoteDebuggingEnabled(env,
      base::android::JavaParamRef<jobject>(env, jcaller), devToolsServer,
      enabled, allowDebugPermission);
}

static base::subtle::AtomicWord g_DevToolsServer_checkDebugPermission = 0;
static jboolean Java_DevToolsServer_checkDebugPermission(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context,
    JniIntWrapper pid,
    JniIntWrapper uid) {
  CHECK_CLAZZ(env, DevToolsServer_clazz(env),
      DevToolsServer_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, DevToolsServer_clazz(env),
      "checkDebugPermission",

"("
"Landroid/content/Context;"
"I"
"I"
")"
"Z",
      &g_DevToolsServer_checkDebugPermission);

  jboolean ret =
      env->CallStaticBooleanMethod(DevToolsServer_clazz(env),
          method_id, context.obj(), as_jint(pid), as_jint(uid));
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsDevToolsServer[] = {
    { "nativeInitRemoteDebugging",
"("
"Ljava/lang/String;"
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_DevToolsServer_nativeInitRemoteDebugging)
    },
    { "nativeDestroyRemoteDebugging",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_DevToolsServer_nativeDestroyRemoteDebugging)
    },
    { "nativeIsRemoteDebuggingEnabled",
"("
"J"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_DevToolsServer_nativeIsRemoteDebuggingEnabled)
    },
    { "nativeSetRemoteDebuggingEnabled",
"("
"J"
"Z"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_DevToolsServer_nativeSetRemoteDebuggingEnabled)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsDevToolsServerSize = arraysize(kMethodsDevToolsServer);

  if (env->RegisterNatives(DevToolsServer_clazz(env),
                           kMethodsDevToolsServer,
                           kMethodsDevToolsServerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, DevToolsServer_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_DevToolsServer_JNI
