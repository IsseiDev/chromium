// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/dom_distiller/DomDistillerTabUtils

#ifndef org_chromium_chrome_browser_dom_distiller_DomDistillerTabUtils_JNI
#define org_chromium_chrome_browser_dom_distiller_DomDistillerTabUtils_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDomDistillerTabUtilsClassPath[] =
    "org/chromium/chrome/browser/dom_distiller/DomDistillerTabUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DomDistillerTabUtils_clazz __attribute__((unused)) =
    0;
#define DomDistillerTabUtils_clazz(env) base::android::LazyGetClass(env, kDomDistillerTabUtilsClassPath, &g_DomDistillerTabUtils_clazz)

}  // namespace

namespace android {

// Step 2: method stubs.

static void DistillCurrentPageAndView(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_dom_1distiller_DomDistillerTabUtils_nativeDistillCurrentPageAndView(JNIEnv*
    env, jclass jcaller,
    jobject webContents) {
  return DistillCurrentPageAndView(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, webContents));
}

static void DistillAndView(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& sourceWebContents,
    const base::android::JavaParamRef<jobject>& destinationWebContents);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_dom_1distiller_DomDistillerTabUtils_nativeDistillAndView(JNIEnv*
    env, jclass jcaller,
    jobject sourceWebContents,
    jobject destinationWebContents) {
  return DistillAndView(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, sourceWebContents),
      base::android::JavaParamRef<jobject>(env, destinationWebContents));
}

static base::android::ScopedJavaLocalRef<jstring>
    GetFormattedUrlFromOriginalDistillerUrl(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_dom_1distiller_DomDistillerTabUtils_nativeGetFormattedUrlFromOriginalDistillerUrl(JNIEnv*
    env, jclass jcaller,
    jstring url) {
  return GetFormattedUrlFromOriginalDistillerUrl(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, url)).Release();
}

static jboolean IsDistillerHeuristicsEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_dom_1distiller_DomDistillerTabUtils_nativeIsDistillerHeuristicsEnabled(JNIEnv*
    env, jclass jcaller) {
  return IsDistillerHeuristicsEnabled(env,
      base::android::JavaParamRef<jclass>(env, jcaller));
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsDomDistillerTabUtils[] = {
    { "nativeDistillCurrentPageAndView",
"("
"Lorg/chromium/content_public/browser/WebContents;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_dom_1distiller_DomDistillerTabUtils_nativeDistillCurrentPageAndView)
    },
    { "nativeDistillAndView",
"("
"Lorg/chromium/content_public/browser/WebContents;"
"Lorg/chromium/content_public/browser/WebContents;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_dom_1distiller_DomDistillerTabUtils_nativeDistillAndView)
    },
    { "nativeGetFormattedUrlFromOriginalDistillerUrl",
"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_dom_1distiller_DomDistillerTabUtils_nativeGetFormattedUrlFromOriginalDistillerUrl)
    },
    { "nativeIsDistillerHeuristicsEnabled",
"("
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_dom_1distiller_DomDistillerTabUtils_nativeIsDistillerHeuristicsEnabled)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsDomDistillerTabUtilsSize =
      arraysize(kMethodsDomDistillerTabUtils);

  if (env->RegisterNatives(DomDistillerTabUtils_clazz(env),
                           kMethodsDomDistillerTabUtils,
                           kMethodsDomDistillerTabUtilsSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, DomDistillerTabUtils_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android

#endif  // org_chromium_chrome_browser_dom_distiller_DomDistillerTabUtils_JNI
