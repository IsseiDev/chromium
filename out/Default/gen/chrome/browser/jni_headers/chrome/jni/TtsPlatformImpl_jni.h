// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/TtsPlatformImpl

#ifndef org_chromium_chrome_browser_TtsPlatformImpl_JNI
#define org_chromium_chrome_browser_TtsPlatformImpl_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kTtsPlatformImplClassPath[] =
    "org/chromium/chrome/browser/TtsPlatformImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_TtsPlatformImpl_clazz __attribute__((unused)) = 0;
#define TtsPlatformImpl_clazz(env) base::android::LazyGetClass(env, kTtsPlatformImplClassPath, &g_TtsPlatformImpl_clazz)

}  // namespace

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_TtsPlatformImpl_nativeVoicesChanged(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTtsPlatformImplAndroid) {
  TtsPlatformImplAndroid* native =
      reinterpret_cast<TtsPlatformImplAndroid*>(nativeTtsPlatformImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "VoicesChanged");
  return native->VoicesChanged(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_chrome_browser_TtsPlatformImpl_nativeOnEndEvent(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTtsPlatformImplAndroid,
    jint utteranceId) {
  TtsPlatformImplAndroid* native =
      reinterpret_cast<TtsPlatformImplAndroid*>(nativeTtsPlatformImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnEndEvent");
  return native->OnEndEvent(env, base::android::JavaParamRef<jobject>(env,
      jcaller), utteranceId);
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_chrome_browser_TtsPlatformImpl_nativeOnStartEvent(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTtsPlatformImplAndroid,
    jint utteranceId) {
  TtsPlatformImplAndroid* native =
      reinterpret_cast<TtsPlatformImplAndroid*>(nativeTtsPlatformImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnStartEvent");
  return native->OnStartEvent(env, base::android::JavaParamRef<jobject>(env,
      jcaller), utteranceId);
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_chrome_browser_TtsPlatformImpl_nativeOnErrorEvent(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTtsPlatformImplAndroid,
    jint utteranceId) {
  TtsPlatformImplAndroid* native =
      reinterpret_cast<TtsPlatformImplAndroid*>(nativeTtsPlatformImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnErrorEvent");
  return native->OnErrorEvent(env, base::android::JavaParamRef<jobject>(env,
      jcaller), utteranceId);
}

static base::subtle::AtomicWord g_TtsPlatformImpl_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_TtsPlatformImpl_create(JNIEnv* env, jlong nativeTtsPlatformImplAndroid,
    const base::android::JavaRefOrBare<jobject>& context) {
  CHECK_CLAZZ(env, TtsPlatformImpl_clazz(env),
      TtsPlatformImpl_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, TtsPlatformImpl_clazz(env),
      "create",

"("
"J"
"Landroid/content/Context;"
")"
"Lorg/chromium/chrome/browser/TtsPlatformImpl;",
      &g_TtsPlatformImpl_create);

  jobject ret =
      env->CallStaticObjectMethod(TtsPlatformImpl_clazz(env),
          method_id, nativeTtsPlatformImplAndroid, context.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_TtsPlatformImpl_destroy = 0;
static void Java_TtsPlatformImpl_destroy(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      TtsPlatformImpl_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TtsPlatformImpl_clazz(env),
      "destroy",

"("
")"
"V",
      &g_TtsPlatformImpl_destroy);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_TtsPlatformImpl_isInitialized = 0;
static jboolean Java_TtsPlatformImpl_isInitialized(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      TtsPlatformImpl_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TtsPlatformImpl_clazz(env),
      "isInitialized",

"("
")"
"Z",
      &g_TtsPlatformImpl_isInitialized);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TtsPlatformImpl_getVoiceCount = 0;
static jint Java_TtsPlatformImpl_getVoiceCount(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      TtsPlatformImpl_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TtsPlatformImpl_clazz(env),
      "getVoiceCount",

"("
")"
"I",
      &g_TtsPlatformImpl_getVoiceCount);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TtsPlatformImpl_getVoiceName = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_TtsPlatformImpl_getVoiceName(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper voiceIndex) {
  CHECK_CLAZZ(env, obj.obj(),
      TtsPlatformImpl_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TtsPlatformImpl_clazz(env),
      "getVoiceName",

"("
"I"
")"
"Ljava/lang/String;",
      &g_TtsPlatformImpl_getVoiceName);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id, as_jint(voiceIndex)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_TtsPlatformImpl_getVoiceLanguage = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_TtsPlatformImpl_getVoiceLanguage(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper voiceIndex) {
  CHECK_CLAZZ(env, obj.obj(),
      TtsPlatformImpl_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TtsPlatformImpl_clazz(env),
      "getVoiceLanguage",

"("
"I"
")"
"Ljava/lang/String;",
      &g_TtsPlatformImpl_getVoiceLanguage);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id, as_jint(voiceIndex)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_TtsPlatformImpl_speak = 0;
static jboolean Java_TtsPlatformImpl_speak(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper utteranceId,
    const base::android::JavaRefOrBare<jstring>& text,
    const base::android::JavaRefOrBare<jstring>& lang,
    jfloat rate,
    jfloat pitch,
    jfloat volume) {
  CHECK_CLAZZ(env, obj.obj(),
      TtsPlatformImpl_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TtsPlatformImpl_clazz(env),
      "speak",

"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"F"
"F"
"F"
")"
"Z",
      &g_TtsPlatformImpl_speak);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, as_jint(utteranceId), text.obj(), lang.obj(), rate, pitch,
              volume);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TtsPlatformImpl_stop = 0;
static void Java_TtsPlatformImpl_stop(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      TtsPlatformImpl_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TtsPlatformImpl_clazz(env),
      "stop",

"("
")"
"V",
      &g_TtsPlatformImpl_stop);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsTtsPlatformImpl[] = {
    { "nativeVoicesChanged",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_TtsPlatformImpl_nativeVoicesChanged)
    },
    { "nativeOnEndEvent",
"("
"J"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_TtsPlatformImpl_nativeOnEndEvent)
    },
    { "nativeOnStartEvent",
"("
"J"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_TtsPlatformImpl_nativeOnStartEvent)
    },
    { "nativeOnErrorEvent",
"("
"J"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_TtsPlatformImpl_nativeOnErrorEvent)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsTtsPlatformImplSize = arraysize(kMethodsTtsPlatformImpl);

  if (env->RegisterNatives(TtsPlatformImpl_clazz(env),
                           kMethodsTtsPlatformImpl,
                           kMethodsTtsPlatformImplSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, TtsPlatformImpl_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_TtsPlatformImpl_JNI
