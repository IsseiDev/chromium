// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/webapps/WebApkUpdateManager

#ifndef org_chromium_chrome_browser_webapps_WebApkUpdateManager_JNI
#define org_chromium_chrome_browser_webapps_WebApkUpdateManager_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kWebApkUpdateManagerClassPath[] =
    "org/chromium/chrome/browser/webapps/WebApkUpdateManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_WebApkUpdateManager_clazz __attribute__((unused)) =
    0;
#define WebApkUpdateManager_clazz(env) base::android::LazyGetClass(env, kWebApkUpdateManagerClassPath, &g_WebApkUpdateManager_clazz)

}  // namespace

// Step 2: method stubs.

static void UpdateAsync(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    const base::android::JavaParamRef<jstring>& startUrl,
    const base::android::JavaParamRef<jstring>& scope,
    const base::android::JavaParamRef<jstring>& name,
    const base::android::JavaParamRef<jstring>& shortName,
    const base::android::JavaParamRef<jstring>& iconUrl,
    const base::android::JavaParamRef<jobject>& icon,
    jint displayMode,
    jint orientation,
    jlong themeColor,
    jlong backgroundColor,
    const base::android::JavaParamRef<jstring>& manifestUrl,
    const base::android::JavaParamRef<jstring>& webApkPackage,
    jint webApkVersion);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_webapps_WebApkUpdateManager_nativeUpdateAsync(JNIEnv*
    env, jclass jcaller,
    jstring startUrl,
    jstring scope,
    jstring name,
    jstring shortName,
    jstring iconUrl,
    jobject icon,
    jint displayMode,
    jint orientation,
    jlong themeColor,
    jlong backgroundColor,
    jstring manifestUrl,
    jstring webApkPackage,
    jint webApkVersion) {
  return UpdateAsync(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, startUrl),
      base::android::JavaParamRef<jstring>(env, scope),
      base::android::JavaParamRef<jstring>(env, name),
      base::android::JavaParamRef<jstring>(env, shortName),
      base::android::JavaParamRef<jstring>(env, iconUrl),
      base::android::JavaParamRef<jobject>(env, icon), displayMode, orientation,
      themeColor, backgroundColor, base::android::JavaParamRef<jstring>(env,
      manifestUrl), base::android::JavaParamRef<jstring>(env, webApkPackage),
      webApkVersion);
}

static base::subtle::AtomicWord g_WebApkUpdateManager_onBuiltWebApk = 0;
static void Java_WebApkUpdateManager_onBuiltWebApk(JNIEnv* env, jboolean
    success,
    const base::android::JavaRefOrBare<jstring>& webapkPackage) {
  CHECK_CLAZZ(env, WebApkUpdateManager_clazz(env),
      WebApkUpdateManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, WebApkUpdateManager_clazz(env),
      "onBuiltWebApk",

"("
"Z"
"Ljava/lang/String;"
")"
"V",
      &g_WebApkUpdateManager_onBuiltWebApk);

     env->CallStaticVoidMethod(WebApkUpdateManager_clazz(env),
          method_id, success, webapkPackage.obj());
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsWebApkUpdateManager[] = {
    { "nativeUpdateAsync",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Landroid/graphics/Bitmap;"
"I"
"I"
"J"
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_webapps_WebApkUpdateManager_nativeUpdateAsync)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsWebApkUpdateManagerSize =
      arraysize(kMethodsWebApkUpdateManager);

  if (env->RegisterNatives(WebApkUpdateManager_clazz(env),
                           kMethodsWebApkUpdateManager,
                           kMethodsWebApkUpdateManagerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, WebApkUpdateManager_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_webapps_WebApkUpdateManager_JNI
