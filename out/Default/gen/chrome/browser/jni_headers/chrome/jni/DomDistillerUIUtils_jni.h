// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/dom_distiller/DomDistillerUIUtils

#ifndef org_chromium_chrome_browser_dom_distiller_DomDistillerUIUtils_JNI
#define org_chromium_chrome_browser_dom_distiller_DomDistillerUIUtils_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDomDistillerUIUtilsClassPath[] =
    "org/chromium/chrome/browser/dom_distiller/DomDistillerUIUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DomDistillerUIUtils_clazz __attribute__((unused)) =
    0;
#define DomDistillerUIUtils_clazz(env) base::android::LazyGetClass(env, kDomDistillerUIUtilsClassPath, &g_DomDistillerUIUtils_clazz)

}  // namespace

namespace dom_distiller {
namespace android {

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_DomDistillerUIUtils_reportFeedbackWithWebContents = 0;
static void Java_DomDistillerUIUtils_reportFeedbackWithWebContents(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& webContents,
    const base::android::JavaRefOrBare<jstring>& url,
    jboolean good) {
  CHECK_CLAZZ(env, DomDistillerUIUtils_clazz(env),
      DomDistillerUIUtils_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, DomDistillerUIUtils_clazz(env),
      "reportFeedbackWithWebContents",

"("
"Lorg/chromium/content_public/browser/WebContents;"
"Ljava/lang/String;"
"Z"
")"
"V",
      &g_DomDistillerUIUtils_reportFeedbackWithWebContents);

     env->CallStaticVoidMethod(DomDistillerUIUtils_clazz(env),
          method_id, webContents.obj(), url.obj(), good);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_DomDistillerUIUtils_openSettings = 0;
static void Java_DomDistillerUIUtils_openSettings(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& webContents) {
  CHECK_CLAZZ(env, DomDistillerUIUtils_clazz(env),
      DomDistillerUIUtils_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, DomDistillerUIUtils_clazz(env),
      "openSettings",

"("
"Lorg/chromium/content_public/browser/WebContents;"
")"
"V",
      &g_DomDistillerUIUtils_openSettings);

     env->CallStaticVoidMethod(DomDistillerUIUtils_clazz(env),
          method_id, webContents.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_DomDistillerUIUtils_closePanel = 0;
static void Java_DomDistillerUIUtils_closePanel(JNIEnv* env, jboolean animate) {
  CHECK_CLAZZ(env, DomDistillerUIUtils_clazz(env),
      DomDistillerUIUtils_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, DomDistillerUIUtils_clazz(env),
      "closePanel",

"("
"Z"
")"
"V",
      &g_DomDistillerUIUtils_closePanel);

     env->CallStaticVoidMethod(DomDistillerUIUtils_clazz(env),
          method_id, animate);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

}  // namespace android
}  // namespace dom_distiller

#endif  // org_chromium_chrome_browser_dom_distiller_DomDistillerUIUtils_JNI
