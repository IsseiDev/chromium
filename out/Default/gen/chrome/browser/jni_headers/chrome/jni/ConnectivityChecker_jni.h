// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/feedback/ConnectivityChecker

#ifndef org_chromium_chrome_browser_feedback_ConnectivityChecker_JNI
#define org_chromium_chrome_browser_feedback_ConnectivityChecker_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kConnectivityCheckerClassPath[] =
    "org/chromium/chrome/browser/feedback/ConnectivityChecker";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ConnectivityChecker_clazz __attribute__((unused)) =
    0;
#define ConnectivityChecker_clazz(env) base::android::LazyGetClass(env, kConnectivityCheckerClassPath, &g_ConnectivityChecker_clazz)

}  // namespace

namespace chrome {
namespace android {

// Step 2: method stubs.

static void CheckConnectivity(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& profile,
    const base::android::JavaParamRef<jstring>& url,
    jlong timeoutMs,
    const base::android::JavaParamRef<jobject>& callback);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_feedback_ConnectivityChecker_nativeCheckConnectivity(JNIEnv*
    env, jclass jcaller,
    jobject profile,
    jstring url,
    jlong timeoutMs,
    jobject callback) {
  return CheckConnectivity(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, profile),
      base::android::JavaParamRef<jstring>(env, url), timeoutMs,
      base::android::JavaParamRef<jobject>(env, callback));
}

static jboolean IsUrlValid(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_feedback_ConnectivityChecker_nativeIsUrlValid(JNIEnv*
    env, jclass jcaller,
    jstring url) {
  return IsUrlValid(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, url));
}

static base::subtle::AtomicWord g_ConnectivityChecker_executeCallback = 0;
static void Java_ConnectivityChecker_executeCallback(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& callback,
    JniIntWrapper result) {
  CHECK_CLAZZ(env, ConnectivityChecker_clazz(env),
      ConnectivityChecker_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ConnectivityChecker_clazz(env),
      "executeCallback",

"("
"Ljava/lang/Object;"
"I"
")"
"V",
      &g_ConnectivityChecker_executeCallback);

     env->CallStaticVoidMethod(ConnectivityChecker_clazz(env),
          method_id, callback.obj(), as_jint(result));
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsConnectivityChecker[] = {
    { "nativeCheckConnectivity",
"("
"Lorg/chromium/chrome/browser/profiles/Profile;"
"Ljava/lang/String;"
"J"
"Lorg/chromium/chrome/browser/feedback/ConnectivityChecker$ConnectivityCheckerCallback;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_feedback_ConnectivityChecker_nativeCheckConnectivity)
    },
    { "nativeIsUrlValid",
"("
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_feedback_ConnectivityChecker_nativeIsUrlValid)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsConnectivityCheckerSize =
      arraysize(kMethodsConnectivityChecker);

  if (env->RegisterNatives(ConnectivityChecker_clazz(env),
                           kMethodsConnectivityChecker,
                           kMethodsConnectivityCheckerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ConnectivityChecker_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_feedback_ConnectivityChecker_JNI
