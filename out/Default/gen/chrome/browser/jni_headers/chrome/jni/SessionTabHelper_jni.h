// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/sessions/SessionTabHelper

#ifndef org_chromium_chrome_browser_sessions_SessionTabHelper_JNI
#define org_chromium_chrome_browser_sessions_SessionTabHelper_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSessionTabHelperClassPath[] =
    "org/chromium/chrome/browser/sessions/SessionTabHelper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SessionTabHelper_clazz __attribute__((unused)) = 0;
#define SessionTabHelper_clazz(env) base::android::LazyGetClass(env, kSessionTabHelperClassPath, &g_SessionTabHelper_clazz)

}  // namespace

// Step 2: method stubs.

static jint IdForTab(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

extern "C" __attribute__((visibility("default")))
jint
    Java_org_chromium_chrome_browser_sessions_SessionTabHelper_nativeIdForTab(JNIEnv*
    env, jclass jcaller,
    jobject webContents) {
  return IdForTab(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSessionTabHelper[] = {
    { "nativeIdForTab",
"("
"Lorg/chromium/content_public/browser/WebContents;"
")"
"I",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_sessions_SessionTabHelper_nativeIdForTab)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsSessionTabHelperSize = arraysize(kMethodsSessionTabHelper);

  if (env->RegisterNatives(SessionTabHelper_clazz(env),
                           kMethodsSessionTabHelper,
                           kMethodsSessionTabHelperSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, SessionTabHelper_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_sessions_SessionTabHelper_JNI
