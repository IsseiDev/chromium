// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/tab/TabWebContentsDelegateAndroid

#ifndef org_chromium_chrome_browser_tab_TabWebContentsDelegateAndroid_JNI
#define org_chromium_chrome_browser_tab_TabWebContentsDelegateAndroid_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kTabWebContentsDelegateAndroidClassPath[] =
    "org/chromium/chrome/browser/tab/TabWebContentsDelegateAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_TabWebContentsDelegateAndroid_clazz
    __attribute__((unused)) = 0;
#define TabWebContentsDelegateAndroid_clazz(env) base::android::LazyGetClass(env, kTabWebContentsDelegateAndroidClassPath, &g_TabWebContentsDelegateAndroid_clazz)

}  // namespace

// Step 2: method stubs.

static void OnRendererUnresponsive(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_tab_TabWebContentsDelegateAndroid_nativeOnRendererUnresponsive(JNIEnv*
    env, jclass jcaller,
    jobject webContents) {
  return OnRendererUnresponsive(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, webContents));
}

static void OnRendererResponsive(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_tab_TabWebContentsDelegateAndroid_nativeOnRendererResponsive(JNIEnv*
    env, jclass jcaller,
    jobject webContents) {
  return OnRendererResponsive(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, webContents));
}

static jboolean IsCapturingAudio(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_tab_TabWebContentsDelegateAndroid_nativeIsCapturingAudio(JNIEnv*
    env, jclass jcaller,
    jobject webContents) {
  return IsCapturingAudio(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, webContents));
}

static jboolean IsCapturingVideo(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_tab_TabWebContentsDelegateAndroid_nativeIsCapturingVideo(JNIEnv*
    env, jclass jcaller,
    jobject webContents) {
  return IsCapturingVideo(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, webContents));
}

static base::subtle::AtomicWord g_TabWebContentsDelegateAndroid_getDisplayMode =
    0;
static jint Java_TabWebContentsDelegateAndroid_getDisplayMode(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      TabWebContentsDelegateAndroid_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabWebContentsDelegateAndroid_clazz(env),
      "getDisplayMode",

"("
")"
"I",
      &g_TabWebContentsDelegateAndroid_getDisplayMode);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_TabWebContentsDelegateAndroid_onFindResultAvailable = 0;
static void Java_TabWebContentsDelegateAndroid_onFindResultAvailable(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& result) {
  CHECK_CLAZZ(env, obj.obj(),
      TabWebContentsDelegateAndroid_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabWebContentsDelegateAndroid_clazz(env),
      "onFindResultAvailable",

"("
"Lorg/chromium/chrome/browser/findinpage/FindNotificationDetails;"
")"
"V",
      &g_TabWebContentsDelegateAndroid_onFindResultAvailable);

     env->CallVoidMethod(obj.obj(),
          method_id, result.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_TabWebContentsDelegateAndroid_onFindMatchRectsAvailable = 0;
static void Java_TabWebContentsDelegateAndroid_onFindMatchRectsAvailable(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& result) {
  CHECK_CLAZZ(env, obj.obj(),
      TabWebContentsDelegateAndroid_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabWebContentsDelegateAndroid_clazz(env),
      "onFindMatchRectsAvailable",

"("
"Lorg/chromium/chrome/browser/findinpage/FindMatchRectsDetails;"
")"
"V",
      &g_TabWebContentsDelegateAndroid_onFindMatchRectsAvailable);

     env->CallVoidMethod(obj.obj(),
          method_id, result.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_TabWebContentsDelegateAndroid_createRect = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_TabWebContentsDelegateAndroid_createRect(JNIEnv* env, JniIntWrapper x,
    JniIntWrapper y,
    JniIntWrapper right,
    JniIntWrapper bottom) {
  CHECK_CLAZZ(env, TabWebContentsDelegateAndroid_clazz(env),
      TabWebContentsDelegateAndroid_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, TabWebContentsDelegateAndroid_clazz(env),
      "createRect",

"("
"I"
"I"
"I"
"I"
")"
"Landroid/graphics/Rect;",
      &g_TabWebContentsDelegateAndroid_createRect);

  jobject ret =
      env->CallStaticObjectMethod(TabWebContentsDelegateAndroid_clazz(env),
          method_id, as_jint(x), as_jint(y), as_jint(right), as_jint(bottom));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_TabWebContentsDelegateAndroid_createRectF = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_TabWebContentsDelegateAndroid_createRectF(JNIEnv* env, jfloat x,
    jfloat y,
    jfloat right,
    jfloat bottom) {
  CHECK_CLAZZ(env, TabWebContentsDelegateAndroid_clazz(env),
      TabWebContentsDelegateAndroid_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, TabWebContentsDelegateAndroid_clazz(env),
      "createRectF",

"("
"F"
"F"
"F"
"F"
")"
"Landroid/graphics/RectF;",
      &g_TabWebContentsDelegateAndroid_createRectF);

  jobject ret =
      env->CallStaticObjectMethod(TabWebContentsDelegateAndroid_clazz(env),
          method_id, x, y, right, bottom);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_TabWebContentsDelegateAndroid_createFindNotificationDetails = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_TabWebContentsDelegateAndroid_createFindNotificationDetails(JNIEnv*
    env, JniIntWrapper numberOfMatches,
    const base::android::JavaRefOrBare<jobject>& rendererSelectionRect,
    JniIntWrapper activeMatchOrdinal,
    jboolean finalUpdate) {
  CHECK_CLAZZ(env, TabWebContentsDelegateAndroid_clazz(env),
      TabWebContentsDelegateAndroid_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, TabWebContentsDelegateAndroid_clazz(env),
      "createFindNotificationDetails",

"("
"I"
"Landroid/graphics/Rect;"
"I"
"Z"
")"
"Lorg/chromium/chrome/browser/findinpage/FindNotificationDetails;",
      &g_TabWebContentsDelegateAndroid_createFindNotificationDetails);

  jobject ret =
      env->CallStaticObjectMethod(TabWebContentsDelegateAndroid_clazz(env),
          method_id, as_jint(numberOfMatches), rendererSelectionRect.obj(),
              as_jint(activeMatchOrdinal), finalUpdate);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_TabWebContentsDelegateAndroid_createFindMatchRectsDetails = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_TabWebContentsDelegateAndroid_createFindMatchRectsDetails(JNIEnv* env,
    JniIntWrapper version,
    JniIntWrapper numRects,
    const base::android::JavaRefOrBare<jobject>& activeRect) {
  CHECK_CLAZZ(env, TabWebContentsDelegateAndroid_clazz(env),
      TabWebContentsDelegateAndroid_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, TabWebContentsDelegateAndroid_clazz(env),
      "createFindMatchRectsDetails",

"("
"I"
"I"
"Landroid/graphics/RectF;"
")"
"Lorg/chromium/chrome/browser/findinpage/FindMatchRectsDetails;",
      &g_TabWebContentsDelegateAndroid_createFindMatchRectsDetails);

  jobject ret =
      env->CallStaticObjectMethod(TabWebContentsDelegateAndroid_clazz(env),
          method_id, as_jint(version), as_jint(numRects), activeRect.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_TabWebContentsDelegateAndroid_setMatchRectByIndex = 0;
static void Java_TabWebContentsDelegateAndroid_setMatchRectByIndex(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& findMatchRectsDetails,
    JniIntWrapper index,
    const base::android::JavaRefOrBare<jobject>& rect) {
  CHECK_CLAZZ(env, TabWebContentsDelegateAndroid_clazz(env),
      TabWebContentsDelegateAndroid_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, TabWebContentsDelegateAndroid_clazz(env),
      "setMatchRectByIndex",

"("
"Lorg/chromium/chrome/browser/findinpage/FindMatchRectsDetails;"
"I"
"Landroid/graphics/RectF;"
")"
"V",
      &g_TabWebContentsDelegateAndroid_setMatchRectByIndex);

     env->CallStaticVoidMethod(TabWebContentsDelegateAndroid_clazz(env),
          method_id, findMatchRectsDetails.obj(), as_jint(index), rect.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_TabWebContentsDelegateAndroid_shouldResumeRequestsForCreatedWindow = 0;
static jboolean
    Java_TabWebContentsDelegateAndroid_shouldResumeRequestsForCreatedWindow(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      TabWebContentsDelegateAndroid_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabWebContentsDelegateAndroid_clazz(env),
      "shouldResumeRequestsForCreatedWindow",

"("
")"
"Z",
      &g_TabWebContentsDelegateAndroid_shouldResumeRequestsForCreatedWindow);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TabWebContentsDelegateAndroid_addNewContents =
    0;
static jboolean Java_TabWebContentsDelegateAndroid_addNewContents(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& sourceWebContents,
    const base::android::JavaRefOrBare<jobject>& webContents,
    JniIntWrapper disposition,
    const base::android::JavaRefOrBare<jobject>& initialPosition,
    jboolean userGesture) {
  CHECK_CLAZZ(env, obj.obj(),
      TabWebContentsDelegateAndroid_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabWebContentsDelegateAndroid_clazz(env),
      "addNewContents",

"("
"Lorg/chromium/content_public/browser/WebContents;"
"Lorg/chromium/content_public/browser/WebContents;"
"I"
"Landroid/graphics/Rect;"
"Z"
")"
"Z",
      &g_TabWebContentsDelegateAndroid_addNewContents);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, sourceWebContents.obj(), webContents.obj(),
              as_jint(disposition), initialPosition.obj(), userGesture);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsTabWebContentsDelegateAndroid[] = {
    { "nativeOnRendererUnresponsive",
"("
"Lorg/chromium/content_public/browser/WebContents;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_tab_TabWebContentsDelegateAndroid_nativeOnRendererUnresponsive)
    },
    { "nativeOnRendererResponsive",
"("
"Lorg/chromium/content_public/browser/WebContents;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_tab_TabWebContentsDelegateAndroid_nativeOnRendererResponsive)
    },
    { "nativeIsCapturingAudio",
"("
"Lorg/chromium/content_public/browser/WebContents;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_tab_TabWebContentsDelegateAndroid_nativeIsCapturingAudio)
    },
    { "nativeIsCapturingVideo",
"("
"Lorg/chromium/content_public/browser/WebContents;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_tab_TabWebContentsDelegateAndroid_nativeIsCapturingVideo)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsTabWebContentsDelegateAndroidSize =
      arraysize(kMethodsTabWebContentsDelegateAndroid);

  if (env->RegisterNatives(TabWebContentsDelegateAndroid_clazz(env),
                           kMethodsTabWebContentsDelegateAndroid,
                           kMethodsTabWebContentsDelegateAndroidSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, TabWebContentsDelegateAndroid_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_tab_TabWebContentsDelegateAndroid_JNI
