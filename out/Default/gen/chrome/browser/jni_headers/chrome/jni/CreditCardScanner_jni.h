// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/autofill/CreditCardScanner

#ifndef org_chromium_chrome_browser_autofill_CreditCardScanner_JNI
#define org_chromium_chrome_browser_autofill_CreditCardScanner_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kCreditCardScannerClassPath[] =
    "org/chromium/chrome/browser/autofill/CreditCardScanner";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_CreditCardScanner_clazz __attribute__((unused)) = 0;
#define CreditCardScanner_clazz(env) base::android::LazyGetClass(env, kCreditCardScannerClassPath, &g_CreditCardScanner_clazz)

}  // namespace

namespace autofill {

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_autofill_CreditCardScanner_nativeScanCancelled(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeCreditCardScannerViewAndroid) {
  CreditCardScannerViewAndroid* native =
      reinterpret_cast<CreditCardScannerViewAndroid*>(nativeCreditCardScannerViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScanCancelled");
  return native->ScanCancelled(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_autofill_CreditCardScanner_nativeScanCompleted(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeCreditCardScannerViewAndroid,
    jstring cardHolderName,
    jstring cardNumber,
    jint expirationMonth,
    jint expirationYear) {
  CreditCardScannerViewAndroid* native =
      reinterpret_cast<CreditCardScannerViewAndroid*>(nativeCreditCardScannerViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScanCompleted");
  return native->ScanCompleted(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, cardHolderName),
      base::android::JavaParamRef<jstring>(env, cardNumber), expirationMonth,
      expirationYear);
}

static base::subtle::AtomicWord g_CreditCardScanner_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_CreditCardScanner_create(JNIEnv* env, jlong nativeScanner,
    const base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jobject>& window) {
  CHECK_CLAZZ(env, CreditCardScanner_clazz(env),
      CreditCardScanner_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, CreditCardScanner_clazz(env),
      "create",

"("
"J"
"Landroid/content/Context;"
"Lorg/chromium/ui/base/WindowAndroid;"
")"
"Lorg/chromium/chrome/browser/autofill/CreditCardScanner;",
      &g_CreditCardScanner_create);

  jobject ret =
      env->CallStaticObjectMethod(CreditCardScanner_clazz(env),
          method_id, nativeScanner, context.obj(), window.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_CreditCardScanner_canScan = 0;
static jboolean Java_CreditCardScanner_canScan(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      CreditCardScanner_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, CreditCardScanner_clazz(env),
      "canScan",

"("
")"
"Z",
      &g_CreditCardScanner_canScan);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_CreditCardScanner_scan = 0;
static void Java_CreditCardScanner_scan(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      CreditCardScanner_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, CreditCardScanner_clazz(env),
      "scan",

"("
")"
"V",
      &g_CreditCardScanner_scan);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsCreditCardScanner[] = {
    { "nativeScanCancelled",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_autofill_CreditCardScanner_nativeScanCancelled)
    },
    { "nativeScanCompleted",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"I"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_autofill_CreditCardScanner_nativeScanCompleted)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsCreditCardScannerSize =
      arraysize(kMethodsCreditCardScanner);

  if (env->RegisterNatives(CreditCardScanner_clazz(env),
                           kMethodsCreditCardScanner,
                           kMethodsCreditCardScannerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, CreditCardScanner_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace autofill

#endif  // org_chromium_chrome_browser_autofill_CreditCardScanner_JNI
