// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/compositor/scene_layer/ToolbarSceneLayer

#ifndef org_chromium_chrome_browser_compositor_scene_layer_ToolbarSceneLayer_JNI
#define org_chromium_chrome_browser_compositor_scene_layer_ToolbarSceneLayer_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kToolbarSceneLayerClassPath[] =
    "org/chromium/chrome/browser/compositor/scene_layer/ToolbarSceneLayer";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ToolbarSceneLayer_clazz __attribute__((unused)) = 0;
#define ToolbarSceneLayer_clazz(env) base::android::LazyGetClass(env, kToolbarSceneLayerClassPath, &g_ToolbarSceneLayer_clazz)

}  // namespace

namespace chrome {
namespace android {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_compositor_scene_1layer_ToolbarSceneLayer_nativeInit(JNIEnv*
    env, jobject jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_scene_1layer_ToolbarSceneLayer_nativeSetContentTree(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeToolbarSceneLayer,
    jobject contentTree) {
  ToolbarSceneLayer* native =
      reinterpret_cast<ToolbarSceneLayer*>(nativeToolbarSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetContentTree");
  return native->SetContentTree(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, contentTree));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_scene_1layer_ToolbarSceneLayer_nativeUpdateToolbarLayer(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeToolbarSceneLayer,
    jobject resourceManager,
    jint resourceId,
    jint toolbarBackgroundColor,
    jint urlBarResourceId,
    jfloat urlBarAlpha,
    jfloat topOffset,
    jboolean visible,
    jboolean showShadow) {
  ToolbarSceneLayer* native =
      reinterpret_cast<ToolbarSceneLayer*>(nativeToolbarSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateToolbarLayer");
  return native->UpdateToolbarLayer(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, resourceManager), resourceId,
      toolbarBackgroundColor, urlBarResourceId, urlBarAlpha, topOffset, visible,
      showShadow);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_scene_1layer_ToolbarSceneLayer_nativeUpdateProgressBar(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeToolbarSceneLayer,
    jint progressBarX,
    jint progressBarY,
    jint progressBarWidth,
    jint progressBarHeight,
    jint progressBarColor,
    jint progressBarBackgroundX,
    jint progressBarBackgroundY,
    jint progressBarBackgroundWidth,
    jint progressBarBackgroundHeight,
    jint progressBarBackgroundColor) {
  ToolbarSceneLayer* native =
      reinterpret_cast<ToolbarSceneLayer*>(nativeToolbarSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateProgressBar");
  return native->UpdateProgressBar(env,
      base::android::JavaParamRef<jobject>(env, jcaller), progressBarX,
      progressBarY, progressBarWidth, progressBarHeight, progressBarColor,
      progressBarBackgroundX, progressBarBackgroundY,
      progressBarBackgroundWidth, progressBarBackgroundHeight,
      progressBarBackgroundColor);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsToolbarSceneLayer[] = {
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_scene_1layer_ToolbarSceneLayer_nativeInit)
    },
    { "nativeSetContentTree",
"("
"J"
"Lorg/chromium/chrome/browser/compositor/scene_layer/SceneLayer;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_scene_1layer_ToolbarSceneLayer_nativeSetContentTree)
    },
    { "nativeUpdateToolbarLayer",
"("
"J"
"Lorg/chromium/ui/resources/ResourceManager;"
"I"
"I"
"I"
"F"
"F"
"Z"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_scene_1layer_ToolbarSceneLayer_nativeUpdateToolbarLayer)
    },
    { "nativeUpdateProgressBar",
"("
"J"
"I"
"I"
"I"
"I"
"I"
"I"
"I"
"I"
"I"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_scene_1layer_ToolbarSceneLayer_nativeUpdateProgressBar)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsToolbarSceneLayerSize =
      arraysize(kMethodsToolbarSceneLayer);

  if (env->RegisterNatives(ToolbarSceneLayer_clazz(env),
                           kMethodsToolbarSceneLayer,
                           kMethodsToolbarSceneLayerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ToolbarSceneLayer_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_compositor_scene_layer_ToolbarSceneLayer_JNI
