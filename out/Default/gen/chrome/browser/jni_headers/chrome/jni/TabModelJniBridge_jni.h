// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/tabmodel/TabModelJniBridge

#ifndef org_chromium_chrome_browser_tabmodel_TabModelJniBridge_JNI
#define org_chromium_chrome_browser_tabmodel_TabModelJniBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kTabModelJniBridgeClassPath[] =
    "org/chromium/chrome/browser/tabmodel/TabModelJniBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_TabModelJniBridge_clazz __attribute__((unused)) = 0;
#define TabModelJniBridge_clazz(env) base::android::LazyGetClass(env, kTabModelJniBridgeClassPath, &g_TabModelJniBridge_clazz)

}  // namespace

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    jboolean isIncognito);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeInit(JNIEnv*
    env, jobject jcaller,
    jboolean isIncognito) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
      isIncognito);
}

extern "C" __attribute__((visibility("default")))
jobject
    Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeGetProfileAndroid(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTabModelJniBridge) {
  TabModelJniBridge* native =
      reinterpret_cast<TabModelJniBridge*>(nativeTabModelJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetProfileAndroid", NULL);
  return native->GetProfileAndroid(env,
      base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeBroadcastSessionRestoreComplete(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTabModelJniBridge) {
  TabModelJniBridge* native =
      reinterpret_cast<TabModelJniBridge*>(nativeTabModelJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "BroadcastSessionRestoreComplete");
  return native->BroadcastSessionRestoreComplete(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeDestroy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTabModelJniBridge) {
  TabModelJniBridge* native =
      reinterpret_cast<TabModelJniBridge*>(nativeTabModelJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeTabAddedToModel(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTabModelJniBridge,
    jobject tab) {
  TabModelJniBridge* native =
      reinterpret_cast<TabModelJniBridge*>(nativeTabModelJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "TabAddedToModel");
  return native->TabAddedToModel(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, tab));
}

static void LogFromCloseMetric(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong ms,
    jboolean perceived);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeLogFromCloseMetric(JNIEnv*
    env, jclass jcaller,
    jlong ms,
    jboolean perceived) {
  return LogFromCloseMetric(env, base::android::JavaParamRef<jclass>(env,
      jcaller), ms, perceived);
}

static void LogFromExitMetric(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong ms,
    jboolean perceived);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeLogFromExitMetric(JNIEnv*
    env, jclass jcaller,
    jlong ms,
    jboolean perceived) {
  return LogFromExitMetric(env, base::android::JavaParamRef<jclass>(env,
      jcaller), ms, perceived);
}

static void LogFromNewMetric(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong ms,
    jboolean perceived);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeLogFromNewMetric(JNIEnv*
    env, jclass jcaller,
    jlong ms,
    jboolean perceived) {
  return LogFromNewMetric(env, base::android::JavaParamRef<jclass>(env,
      jcaller), ms, perceived);
}

static void LogFromUserMetric(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong ms,
    jboolean perceived);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeLogFromUserMetric(JNIEnv*
    env, jclass jcaller,
    jlong ms,
    jboolean perceived) {
  return LogFromUserMetric(env, base::android::JavaParamRef<jclass>(env,
      jcaller), ms, perceived);
}

static base::subtle::AtomicWord g_TabModelJniBridge_setIndex = 0;
static void Java_TabModelJniBridge_setIndex(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper index) {
  CHECK_CLAZZ(env, obj.obj(),
      TabModelJniBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabModelJniBridge_clazz(env),
      "setIndex",

"("
"I"
")"
"V",
      &g_TabModelJniBridge_setIndex);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(index));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_TabModelJniBridge_getTabAt = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_TabModelJniBridge_getTabAt(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper index) {
  CHECK_CLAZZ(env, obj.obj(),
      TabModelJniBridge_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabModelJniBridge_clazz(env),
      "getTabAt",

"("
"I"
")"
"Lorg/chromium/chrome/browser/tab/Tab;",
      &g_TabModelJniBridge_getTabAt);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, as_jint(index));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_TabModelJniBridge_closeTabAt = 0;
static jboolean Java_TabModelJniBridge_closeTabAt(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper index) {
  CHECK_CLAZZ(env, obj.obj(),
      TabModelJniBridge_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabModelJniBridge_clazz(env),
      "closeTabAt",

"("
"I"
")"
"Z",
      &g_TabModelJniBridge_closeTabAt);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, as_jint(index));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TabModelJniBridge_createTabWithWebContents =
    0;
static jboolean Java_TabModelJniBridge_createTabWithWebContents(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& parent,
    jboolean incognito,
    const base::android::JavaRefOrBare<jobject>& webContents,
    JniIntWrapper parentId) {
  CHECK_CLAZZ(env, obj.obj(),
      TabModelJniBridge_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabModelJniBridge_clazz(env),
      "createTabWithWebContents",

"("
"Lorg/chromium/chrome/browser/tab/Tab;"
"Z"
"Lorg/chromium/content_public/browser/WebContents;"
"I"
")"
"Z",
      &g_TabModelJniBridge_createTabWithWebContents);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, parent.obj(), incognito, webContents.obj(),
              as_jint(parentId));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TabModelJniBridge_createNewTabForDevTools = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_TabModelJniBridge_createNewTabForDevTools(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& url) {
  CHECK_CLAZZ(env, obj.obj(),
      TabModelJniBridge_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabModelJniBridge_clazz(env),
      "createNewTabForDevTools",

"("
"Ljava/lang/String;"
")"
"Lorg/chromium/chrome/browser/tab/Tab;",
      &g_TabModelJniBridge_createNewTabForDevTools);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, url.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_TabModelJniBridge_getCount = 0;
static jint Java_TabModelJniBridge_getCount(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      TabModelJniBridge_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabModelJniBridge_clazz(env),
      "getCount",

"("
")"
"I",
      &g_TabModelJniBridge_getCount);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TabModelJniBridge_index = 0;
static jint Java_TabModelJniBridge_index(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      TabModelJniBridge_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabModelJniBridge_clazz(env),
      "index",

"("
")"
"I",
      &g_TabModelJniBridge_index);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TabModelJniBridge_isSessionRestoreInProgress =
    0;
static jboolean Java_TabModelJniBridge_isSessionRestoreInProgress(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      TabModelJniBridge_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabModelJniBridge_clazz(env),
      "isSessionRestoreInProgress",

"("
")"
"Z",
      &g_TabModelJniBridge_isSessionRestoreInProgress);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsTabModelJniBridge[] = {
    { "nativeInit",
"("
"Z"
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeInit)
    },
    { "nativeGetProfileAndroid",
"("
"J"
")"
"Lorg/chromium/chrome/browser/profiles/Profile;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeGetProfileAndroid)
    },
    { "nativeBroadcastSessionRestoreComplete",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeBroadcastSessionRestoreComplete)
    },
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeDestroy)
    },
    { "nativeTabAddedToModel",
"("
"J"
"Lorg/chromium/chrome/browser/tab/Tab;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeTabAddedToModel)
    },
    { "nativeLogFromCloseMetric",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeLogFromCloseMetric)
    },
    { "nativeLogFromExitMetric",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeLogFromExitMetric)
    },
    { "nativeLogFromNewMetric",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeLogFromNewMetric)
    },
    { "nativeLogFromUserMetric",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_tabmodel_TabModelJniBridge_nativeLogFromUserMetric)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsTabModelJniBridgeSize =
      arraysize(kMethodsTabModelJniBridge);

  if (env->RegisterNatives(TabModelJniBridge_clazz(env),
                           kMethodsTabModelJniBridge,
                           kMethodsTabModelJniBridgeSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, TabModelJniBridge_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_tabmodel_TabModelJniBridge_JNI
