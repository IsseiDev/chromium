// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/media/remote/RecordCastAction

#ifndef org_chromium_chrome_browser_media_remote_RecordCastAction_JNI
#define org_chromium_chrome_browser_media_remote_RecordCastAction_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kRecordCastActionClassPath[] =
    "org/chromium/chrome/browser/media/remote/RecordCastAction";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_RecordCastAction_clazz __attribute__((unused)) = 0;
#define RecordCastAction_clazz(env) base::android::LazyGetClass(env, kRecordCastActionClassPath, &g_RecordCastAction_clazz)

}  // namespace

namespace remote_media {

// Step 2: method stubs.

static void RecordRemotePlaybackDeviceSelected(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jint deviceType);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_media_remote_RecordCastAction_nativeRecordRemotePlaybackDeviceSelected(JNIEnv*
    env, jclass jcaller,
    jint deviceType) {
  return RecordRemotePlaybackDeviceSelected(env,
      base::android::JavaParamRef<jclass>(env, jcaller), deviceType);
}

static void RecordCastPlayRequested(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_media_remote_RecordCastAction_nativeRecordCastPlayRequested(JNIEnv*
    env, jclass jcaller) {
  return RecordCastPlayRequested(env, base::android::JavaParamRef<jclass>(env,
      jcaller));
}

static void RecordCastDefaultPlayerResult(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jboolean castSucceeded);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_media_remote_RecordCastAction_nativeRecordCastDefaultPlayerResult(JNIEnv*
    env, jclass jcaller,
    jboolean castSucceeded) {
  return RecordCastDefaultPlayerResult(env,
      base::android::JavaParamRef<jclass>(env, jcaller), castSucceeded);
}

static void RecordCastYouTubePlayerResult(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jboolean castSucceeded);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_media_remote_RecordCastAction_nativeRecordCastYouTubePlayerResult(JNIEnv*
    env, jclass jcaller,
    jboolean castSucceeded) {
  return RecordCastYouTubePlayerResult(env,
      base::android::JavaParamRef<jclass>(env, jcaller), castSucceeded);
}

static void RecordCastEndedTimeRemaining(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jint videoLengthMs,
    jint timeRemainingMs);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_media_remote_RecordCastAction_nativeRecordCastEndedTimeRemaining(JNIEnv*
    env, jclass jcaller,
    jint videoLengthMs,
    jint timeRemainingMs) {
  return RecordCastEndedTimeRemaining(env,
      base::android::JavaParamRef<jclass>(env, jcaller), videoLengthMs,
      timeRemainingMs);
}

static void RecordCastMediaType(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jint mediaType);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_media_remote_RecordCastAction_nativeRecordCastMediaType(JNIEnv*
    env, jclass jcaller,
    jint mediaType) {
  return RecordCastMediaType(env, base::android::JavaParamRef<jclass>(env,
      jcaller), mediaType);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsRecordCastAction[] = {
    { "nativeRecordRemotePlaybackDeviceSelected",
"("
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_media_remote_RecordCastAction_nativeRecordRemotePlaybackDeviceSelected)
    },
    { "nativeRecordCastPlayRequested",
"("
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_media_remote_RecordCastAction_nativeRecordCastPlayRequested)
    },
    { "nativeRecordCastDefaultPlayerResult",
"("
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_media_remote_RecordCastAction_nativeRecordCastDefaultPlayerResult)
    },
    { "nativeRecordCastYouTubePlayerResult",
"("
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_media_remote_RecordCastAction_nativeRecordCastYouTubePlayerResult)
    },
    { "nativeRecordCastEndedTimeRemaining",
"("
"I"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_media_remote_RecordCastAction_nativeRecordCastEndedTimeRemaining)
    },
    { "nativeRecordCastMediaType",
"("
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_media_remote_RecordCastAction_nativeRecordCastMediaType)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsRecordCastActionSize = arraysize(kMethodsRecordCastAction);

  if (env->RegisterNatives(RecordCastAction_clazz(env),
                           kMethodsRecordCastAction,
                           kMethodsRecordCastActionSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, RecordCastAction_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace remote_media

#endif  // org_chromium_chrome_browser_media_remote_RecordCastAction_JNI
