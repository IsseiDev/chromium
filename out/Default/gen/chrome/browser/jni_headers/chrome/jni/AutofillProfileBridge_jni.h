// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/preferences/autofill/AutofillProfileBridge

#ifndef org_chromium_chrome_browser_preferences_autofill_AutofillProfileBridge_JNI
#define org_chromium_chrome_browser_preferences_autofill_AutofillProfileBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAutofillProfileBridgeClassPath[] =
    "org/chromium/chrome/browser/preferences/autofill/AutofillProfileBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AutofillProfileBridge_clazz __attribute__((unused)) =
    0;
#define AutofillProfileBridge_clazz(env) base::android::LazyGetClass(env, kAutofillProfileBridgeClassPath, &g_AutofillProfileBridge_clazz)

}  // namespace

namespace autofill {

// Step 2: method stubs.

static base::android::ScopedJavaLocalRef<jstring> GetDefaultCountryCode(JNIEnv*
    env, const base::android::JavaParamRef<jclass>& jcaller);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_preferences_autofill_AutofillProfileBridge_nativeGetDefaultCountryCode(JNIEnv*
    env, jclass jcaller) {
  return GetDefaultCountryCode(env, base::android::JavaParamRef<jclass>(env,
      jcaller)).Release();
}

static void GetSupportedCountries(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& countryCodes,
    const base::android::JavaParamRef<jobject>& countryNames);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_preferences_autofill_AutofillProfileBridge_nativeGetSupportedCountries(JNIEnv*
    env, jclass jcaller,
    jobject countryCodes,
    jobject countryNames) {
  return GetSupportedCountries(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, countryCodes),
      base::android::JavaParamRef<jobject>(env, countryNames));
}

static void GetRequiredFields(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& countryCode,
    const base::android::JavaParamRef<jobject>& requiredFields);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_preferences_autofill_AutofillProfileBridge_nativeGetRequiredFields(JNIEnv*
    env, jclass jcaller,
    jstring countryCode,
    jobject requiredFields) {
  return GetRequiredFields(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, countryCode),
      base::android::JavaParamRef<jobject>(env, requiredFields));
}

static base::android::ScopedJavaLocalRef<jstring> GetAddressUiComponents(JNIEnv*
    env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& countryCode,
    const base::android::JavaParamRef<jstring>& languageCode,
    const base::android::JavaParamRef<jobject>& componentIds,
    const base::android::JavaParamRef<jobject>& componentNames,
    const base::android::JavaParamRef<jobject>& componentRequired,
    const base::android::JavaParamRef<jobject>& componentLengths);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_preferences_autofill_AutofillProfileBridge_nativeGetAddressUiComponents(JNIEnv*
    env, jclass jcaller,
    jstring countryCode,
    jstring languageCode,
    jobject componentIds,
    jobject componentNames,
    jobject componentRequired,
    jobject componentLengths) {
  return GetAddressUiComponents(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, countryCode),
      base::android::JavaParamRef<jstring>(env, languageCode),
      base::android::JavaParamRef<jobject>(env, componentIds),
      base::android::JavaParamRef<jobject>(env, componentNames),
      base::android::JavaParamRef<jobject>(env, componentRequired),
      base::android::JavaParamRef<jobject>(env, componentLengths)).Release();
}

static base::subtle::AtomicWord g_AutofillProfileBridge_stringArrayToList = 0;
static void Java_AutofillProfileBridge_stringArrayToList(JNIEnv* env, const
    base::android::JavaRefOrBare<jobjectArray>& array,
    const base::android::JavaRefOrBare<jobject>& list) {
  CHECK_CLAZZ(env, AutofillProfileBridge_clazz(env),
      AutofillProfileBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, AutofillProfileBridge_clazz(env),
      "stringArrayToList",

"("
"[Ljava/lang/String;"
"Ljava/util/List;"
")"
"V",
      &g_AutofillProfileBridge_stringArrayToList);

     env->CallStaticVoidMethod(AutofillProfileBridge_clazz(env),
          method_id, array.obj(), list.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_AutofillProfileBridge_intArrayToList = 0;
static void Java_AutofillProfileBridge_intArrayToList(JNIEnv* env, const
    base::android::JavaRefOrBare<jintArray>& array,
    const base::android::JavaRefOrBare<jobject>& list) {
  CHECK_CLAZZ(env, AutofillProfileBridge_clazz(env),
      AutofillProfileBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, AutofillProfileBridge_clazz(env),
      "intArrayToList",

"("
"[I"
"Ljava/util/List;"
")"
"V",
      &g_AutofillProfileBridge_intArrayToList);

     env->CallStaticVoidMethod(AutofillProfileBridge_clazz(env),
          method_id, array.obj(), list.obj());
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAutofillProfileBridge[] = {
    { "nativeGetDefaultCountryCode",
"("
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_preferences_autofill_AutofillProfileBridge_nativeGetDefaultCountryCode)
    },
    { "nativeGetSupportedCountries",
"("
"Ljava/util/List;"
"Ljava/util/List;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_preferences_autofill_AutofillProfileBridge_nativeGetSupportedCountries)
    },
    { "nativeGetRequiredFields",
"("
"Ljava/lang/String;"
"Ljava/util/List;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_preferences_autofill_AutofillProfileBridge_nativeGetRequiredFields)
    },
    { "nativeGetAddressUiComponents",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/util/List;"
"Ljava/util/List;"
"Ljava/util/List;"
"Ljava/util/List;"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_preferences_autofill_AutofillProfileBridge_nativeGetAddressUiComponents)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsAutofillProfileBridgeSize =
      arraysize(kMethodsAutofillProfileBridge);

  if (env->RegisterNatives(AutofillProfileBridge_clazz(env),
                           kMethodsAutofillProfileBridge,
                           kMethodsAutofillProfileBridgeSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, AutofillProfileBridge_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace autofill

#endif  // org_chromium_chrome_browser_preferences_autofill_AutofillProfileBridge_JNI
