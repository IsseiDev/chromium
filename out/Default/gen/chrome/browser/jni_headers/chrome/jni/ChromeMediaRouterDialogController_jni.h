// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//
//    org/chromium/chrome/browser/media/router/ChromeMediaRouterDialogController

#ifndef org_chromium_chrome_browser_media_router_ChromeMediaRouterDialogController_JNI
#define org_chromium_chrome_browser_media_router_ChromeMediaRouterDialogController_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kChromeMediaRouterDialogControllerClassPath[] =
    "org/chromium/chrome/browser/media/router/ChromeMediaRouterDialogController";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ChromeMediaRouterDialogController_clazz
    __attribute__((unused)) = 0;
#define ChromeMediaRouterDialogController_clazz(env) base::android::LazyGetClass(env, kChromeMediaRouterDialogControllerClassPath, &g_ChromeMediaRouterDialogController_clazz)

}  // namespace

namespace media_router {

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_media_router_ChromeMediaRouterDialogController_nativeOnDialogCancelled(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeMediaRouterDialogControllerAndroid) {
  MediaRouterDialogControllerAndroid* native =
      reinterpret_cast<MediaRouterDialogControllerAndroid*>(nativeMediaRouterDialogControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDialogCancelled");
  return native->OnDialogCancelled(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_media_router_ChromeMediaRouterDialogController_nativeOnSinkSelected(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeMediaRouterDialogControllerAndroid,
    jstring sinkId) {
  MediaRouterDialogControllerAndroid* native =
      reinterpret_cast<MediaRouterDialogControllerAndroid*>(nativeMediaRouterDialogControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSinkSelected");
  return native->OnSinkSelected(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, sinkId));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_media_router_ChromeMediaRouterDialogController_nativeOnRouteClosed(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeMediaRouterDialogControllerAndroid,
    jstring routeId) {
  MediaRouterDialogControllerAndroid* native =
      reinterpret_cast<MediaRouterDialogControllerAndroid*>(nativeMediaRouterDialogControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnRouteClosed");
  return native->OnRouteClosed(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, routeId));
}

static base::subtle::AtomicWord g_ChromeMediaRouterDialogController_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ChromeMediaRouterDialogController_create(JNIEnv* env, jlong
    nativeDialogController,
    const base::android::JavaRefOrBare<jobject>& context) {
  CHECK_CLAZZ(env, ChromeMediaRouterDialogController_clazz(env),
      ChromeMediaRouterDialogController_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ChromeMediaRouterDialogController_clazz(env),
      "create",

"("
"J"
"Landroid/content/Context;"
")"
"Lorg/chromium/chrome/browser/media/router/ChromeMediaRouterDialogController;",
      &g_ChromeMediaRouterDialogController_create);

  jobject ret =
      env->CallStaticObjectMethod(ChromeMediaRouterDialogController_clazz(env),
          method_id, nativeDialogController, context.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_ChromeMediaRouterDialogController_openRouteChooserDialog = 0;
static void
    Java_ChromeMediaRouterDialogController_openRouteChooserDialog(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& sourceUrn) {
  CHECK_CLAZZ(env, obj.obj(),
      ChromeMediaRouterDialogController_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ChromeMediaRouterDialogController_clazz(env),
      "openRouteChooserDialog",

"("
"Ljava/lang/String;"
")"
"V",
      &g_ChromeMediaRouterDialogController_openRouteChooserDialog);

     env->CallVoidMethod(obj.obj(),
          method_id, sourceUrn.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_ChromeMediaRouterDialogController_openRouteControllerDialog = 0;
static void
    Java_ChromeMediaRouterDialogController_openRouteControllerDialog(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& sourceUrn,
    const base::android::JavaRefOrBare<jstring>& mediaRouteId) {
  CHECK_CLAZZ(env, obj.obj(),
      ChromeMediaRouterDialogController_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ChromeMediaRouterDialogController_clazz(env),
      "openRouteControllerDialog",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_ChromeMediaRouterDialogController_openRouteControllerDialog);

     env->CallVoidMethod(obj.obj(),
          method_id, sourceUrn.obj(), mediaRouteId.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ChromeMediaRouterDialogController_closeDialog
    = 0;
static void Java_ChromeMediaRouterDialogController_closeDialog(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ChromeMediaRouterDialogController_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ChromeMediaRouterDialogController_clazz(env),
      "closeDialog",

"("
")"
"V",
      &g_ChromeMediaRouterDialogController_closeDialog);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_ChromeMediaRouterDialogController_isShowingDialog = 0;
static jboolean Java_ChromeMediaRouterDialogController_isShowingDialog(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ChromeMediaRouterDialogController_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ChromeMediaRouterDialogController_clazz(env),
      "isShowingDialog",

"("
")"
"Z",
      &g_ChromeMediaRouterDialogController_isShowingDialog);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsChromeMediaRouterDialogController[] = {
    { "nativeOnDialogCancelled",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_media_router_ChromeMediaRouterDialogController_nativeOnDialogCancelled)
    },
    { "nativeOnSinkSelected",
"("
"J"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_media_router_ChromeMediaRouterDialogController_nativeOnSinkSelected)
    },
    { "nativeOnRouteClosed",
"("
"J"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_media_router_ChromeMediaRouterDialogController_nativeOnRouteClosed)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsChromeMediaRouterDialogControllerSize =
      arraysize(kMethodsChromeMediaRouterDialogController);

  if (env->RegisterNatives(ChromeMediaRouterDialogController_clazz(env),
                           kMethodsChromeMediaRouterDialogController,
                           kMethodsChromeMediaRouterDialogControllerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ChromeMediaRouterDialogController_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace media_router

#endif  // org_chromium_chrome_browser_media_router_ChromeMediaRouterDialogController_JNI
