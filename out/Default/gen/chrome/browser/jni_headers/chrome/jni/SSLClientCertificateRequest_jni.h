// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/SSLClientCertificateRequest

#ifndef org_chromium_chrome_browser_SSLClientCertificateRequest_JNI
#define org_chromium_chrome_browser_SSLClientCertificateRequest_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSSLClientCertificateRequestClassPath[] =
    "org/chromium/chrome/browser/SSLClientCertificateRequest";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SSLClientCertificateRequest_clazz
    __attribute__((unused)) = 0;
#define SSLClientCertificateRequest_clazz(env) base::android::LazyGetClass(env, kSSLClientCertificateRequestClassPath, &g_SSLClientCertificateRequest_clazz)

}  // namespace

namespace chrome {
namespace android {

// Step 2: method stubs.

static void NotifyClientCertificatesChangedOnIOThread(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_SSLClientCertificateRequest_nativeNotifyClientCertificatesChangedOnIOThread(JNIEnv*
    env, jclass jcaller) {
  return NotifyClientCertificatesChangedOnIOThread(env,
      base::android::JavaParamRef<jclass>(env, jcaller));
}

static void OnSystemRequestCompletion(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong requestPtr,
    const base::android::JavaParamRef<jobjectArray>& certChain,
    const base::android::JavaParamRef<jobject>& privateKey);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_SSLClientCertificateRequest_nativeOnSystemRequestCompletion(JNIEnv*
    env, jclass jcaller,
    jlong requestPtr,
    jobjectArray certChain,
    jobject privateKey) {
  return OnSystemRequestCompletion(env, base::android::JavaParamRef<jclass>(env,
      jcaller), requestPtr, base::android::JavaParamRef<jobjectArray>(env,
      certChain), base::android::JavaParamRef<jobject>(env, privateKey));
}

static base::subtle::AtomicWord
    g_SSLClientCertificateRequest_selectClientCertificate = 0;
static jboolean Java_SSLClientCertificateRequest_selectClientCertificate(JNIEnv*
    env, jlong nativePtr,
    const base::android::JavaRefOrBare<jobject>& window,
    const base::android::JavaRefOrBare<jobjectArray>& keyTypes,
    const base::android::JavaRefOrBare<jobjectArray>& encodedPrincipals,
    const base::android::JavaRefOrBare<jstring>& hostName,
    JniIntWrapper port) {
  CHECK_CLAZZ(env, SSLClientCertificateRequest_clazz(env),
      SSLClientCertificateRequest_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, SSLClientCertificateRequest_clazz(env),
      "selectClientCertificate",

"("
"J"
"Lorg/chromium/ui/base/WindowAndroid;"
"[Ljava/lang/String;"
"[[B"
"Ljava/lang/String;"
"I"
")"
"Z",
      &g_SSLClientCertificateRequest_selectClientCertificate);

  jboolean ret =
      env->CallStaticBooleanMethod(SSLClientCertificateRequest_clazz(env),
          method_id, nativePtr, window.obj(), keyTypes.obj(),
              encodedPrincipals.obj(), hostName.obj(), as_jint(port));
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSSLClientCertificateRequest[] = {
    { "nativeNotifyClientCertificatesChangedOnIOThread",
"("
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_SSLClientCertificateRequest_nativeNotifyClientCertificatesChangedOnIOThread)
    },
    { "nativeOnSystemRequestCompletion",
"("
"J"
"[[B"
"Ljava/security/PrivateKey;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_SSLClientCertificateRequest_nativeOnSystemRequestCompletion)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsSSLClientCertificateRequestSize =
      arraysize(kMethodsSSLClientCertificateRequest);

  if (env->RegisterNatives(SSLClientCertificateRequest_clazz(env),
                           kMethodsSSLClientCertificateRequest,
                           kMethodsSSLClientCertificateRequestSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, SSLClientCertificateRequest_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_SSLClientCertificateRequest_JNI
