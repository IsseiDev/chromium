// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/metrics/UmaSessionStats

#ifndef org_chromium_chrome_browser_metrics_UmaSessionStats_JNI
#define org_chromium_chrome_browser_metrics_UmaSessionStats_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kUmaSessionStatsClassPath[] =
    "org/chromium/chrome/browser/metrics/UmaSessionStats";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_UmaSessionStats_clazz __attribute__((unused)) = 0;
#define UmaSessionStats_clazz(env) base::android::LazyGetClass(env, kUmaSessionStatsClassPath, &g_UmaSessionStats_clazz)

}  // namespace

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeInit(JNIEnv*
    env, jclass jcaller) {
  return Init(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static void UpdateMetricsServiceState(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jboolean mayRecord,
    jboolean mayUpload);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeUpdateMetricsServiceState(JNIEnv*
    env, jobject jcaller,
    jboolean mayRecord,
    jboolean mayUpload) {
  return UpdateMetricsServiceState(env,
      base::android::JavaParamRef<jobject>(env, jcaller), mayRecord, mayUpload);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeUmaResumeSession(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeUmaSessionStats) {
  UmaSessionStats* native =
      reinterpret_cast<UmaSessionStats*>(nativeUmaSessionStats);
  CHECK_NATIVE_PTR(env, jcaller, native, "UmaResumeSession");
  return native->UmaResumeSession(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeUmaEndSession(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeUmaSessionStats) {
  UmaSessionStats* native =
      reinterpret_cast<UmaSessionStats*>(nativeUmaSessionStats);
  CHECK_NATIVE_PTR(env, jcaller, native, "UmaEndSession");
  return native->UmaEndSession(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

static void LogRendererCrash(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeLogRendererCrash(JNIEnv*
    env, jclass jcaller) {
  return LogRendererCrash(env, base::android::JavaParamRef<jclass>(env,
      jcaller));
}

static void RegisterExternalExperiment(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& studyName,
    const base::android::JavaParamRef<jintArray>& experimentIds);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeRegisterExternalExperiment(JNIEnv*
    env, jclass jcaller,
    jstring studyName,
    jintArray experimentIds) {
  return RegisterExternalExperiment(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, studyName),
      base::android::JavaParamRef<jintArray>(env, experimentIds));
}

static void RegisterSyntheticFieldTrial(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& trialName,
    const base::android::JavaParamRef<jstring>& groupName);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeRegisterSyntheticFieldTrial(JNIEnv*
    env, jclass jcaller,
    jstring trialName,
    jstring groupName) {
  return RegisterSyntheticFieldTrial(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, trialName),
      base::android::JavaParamRef<jstring>(env, groupName));
}

static void RecordMultiWindowSession(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jint areaPercent,
    jint instanceCount);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeRecordMultiWindowSession(JNIEnv*
    env, jclass jcaller,
    jint areaPercent,
    jint instanceCount) {
  return RecordMultiWindowSession(env, base::android::JavaParamRef<jclass>(env,
      jcaller), areaPercent, instanceCount);
}

static void RecordTabCountPerLoad(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jint numTabsOpen);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeRecordTabCountPerLoad(JNIEnv*
    env, jclass jcaller,
    jint numTabsOpen) {
  return RecordTabCountPerLoad(env, base::android::JavaParamRef<jclass>(env,
      jcaller), numTabsOpen);
}

static void RecordPageLoaded(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jboolean isDesktopUserAgent);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeRecordPageLoaded(JNIEnv*
    env, jclass jcaller,
    jboolean isDesktopUserAgent) {
  return RecordPageLoaded(env, base::android::JavaParamRef<jclass>(env,
      jcaller), isDesktopUserAgent);
}

static void RecordPageLoadedWithKeyboard(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeRecordPageLoadedWithKeyboard(JNIEnv*
    env, jclass jcaller) {
  return RecordPageLoadedWithKeyboard(env,
      base::android::JavaParamRef<jclass>(env, jcaller));
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsUmaSessionStats[] = {
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeInit)
    },
    { "nativeUpdateMetricsServiceState",
"("
"Z"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeUpdateMetricsServiceState)
    },
    { "nativeUmaResumeSession",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeUmaResumeSession)
    },
    { "nativeUmaEndSession",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeUmaEndSession)
    },
    { "nativeLogRendererCrash",
"("
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeLogRendererCrash)
    },
    { "nativeRegisterExternalExperiment",
"("
"Ljava/lang/String;"
"[I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeRegisterExternalExperiment)
    },
    { "nativeRegisterSyntheticFieldTrial",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeRegisterSyntheticFieldTrial)
    },
    { "nativeRecordMultiWindowSession",
"("
"I"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeRecordMultiWindowSession)
    },
    { "nativeRecordTabCountPerLoad",
"("
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeRecordTabCountPerLoad)
    },
    { "nativeRecordPageLoaded",
"("
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeRecordPageLoaded)
    },
    { "nativeRecordPageLoadedWithKeyboard",
"("
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_metrics_UmaSessionStats_nativeRecordPageLoadedWithKeyboard)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsUmaSessionStatsSize = arraysize(kMethodsUmaSessionStats);

  if (env->RegisterNatives(UmaSessionStats_clazz(env),
                           kMethodsUmaSessionStats,
                           kMethodsUmaSessionStatsSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, UmaSessionStats_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_metrics_UmaSessionStats_JNI
