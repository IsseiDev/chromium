// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/signin/SigninPromoUtil

#ifndef org_chromium_chrome_browser_signin_SigninPromoUtil_JNI
#define org_chromium_chrome_browser_signin_SigninPromoUtil_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSigninPromoUtilClassPath[] =
    "org/chromium/chrome/browser/signin/SigninPromoUtil";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SigninPromoUtil_clazz __attribute__((unused)) = 0;
#define SigninPromoUtil_clazz(env) base::android::LazyGetClass(env, kSigninPromoUtilClassPath, &g_SigninPromoUtil_clazz)

}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_SigninPromoUtil_openAccountSigninActivityForPromo = 0;
static void Java_SigninPromoUtil_openAccountSigninActivityForPromo(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& window,
    JniIntWrapper accessPoint) {
  CHECK_CLAZZ(env, SigninPromoUtil_clazz(env),
      SigninPromoUtil_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, SigninPromoUtil_clazz(env),
      "openAccountSigninActivityForPromo",

"("
"Lorg/chromium/ui/base/WindowAndroid;"
"I"
")"
"V",
      &g_SigninPromoUtil_openAccountSigninActivityForPromo);

     env->CallStaticVoidMethod(SigninPromoUtil_clazz(env),
          method_id, window.obj(), as_jint(accessPoint));
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

#endif  // org_chromium_chrome_browser_signin_SigninPromoUtil_JNI
