// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/contextualsearch/ContextualSearchManager

#ifndef org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_JNI
#define org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kContextualSearchManagerClassPath[] =
    "org/chromium/chrome/browser/contextualsearch/ContextualSearchManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ContextualSearchManager_clazz __attribute__((unused))
    = 0;
#define ContextualSearchManager_clazz(env) base::android::LazyGetClass(env, kContextualSearchManagerClassPath, &g_ContextualSearchManager_clazz)

}  // namespace

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_nativeInit(JNIEnv*
    env, jobject jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_nativeDestroy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContextualSearchManager) {
  ContextualSearchManager* native =
      reinterpret_cast<ContextualSearchManager*>(nativeContextualSearchManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_nativeStartSearchTermResolutionRequest(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContextualSearchManager,
    jstring selection,
    jboolean useResolvedSearchTerm,
    jobject baseWebContents,
    jboolean maySendBasePageUrl) {
  ContextualSearchManager* native =
      reinterpret_cast<ContextualSearchManager*>(nativeContextualSearchManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "StartSearchTermResolutionRequest");
  return native->StartSearchTermResolutionRequest(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, selection),
      useResolvedSearchTerm, base::android::JavaParamRef<jobject>(env,
      baseWebContents), maySendBasePageUrl);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_nativeGatherSurroundingText(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContextualSearchManager,
    jstring selection,
    jboolean useResolvedSearchTerm,
    jobject baseWebContents,
    jboolean maySendBasePageUrl) {
  ContextualSearchManager* native =
      reinterpret_cast<ContextualSearchManager*>(nativeContextualSearchManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "GatherSurroundingText");
  return native->GatherSurroundingText(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, selection),
      useResolvedSearchTerm, base::android::JavaParamRef<jobject>(env,
      baseWebContents), maySendBasePageUrl);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_nativeEnableContextualSearchJsApiForOverlay(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContextualSearchManager,
    jobject overlayWebContents) {
  ContextualSearchManager* native =
      reinterpret_cast<ContextualSearchManager*>(nativeContextualSearchManager);
  CHECK_NATIVE_PTR(env, jcaller, native,
      "EnableContextualSearchJsApiForOverlay");
  return native->EnableContextualSearchJsApiForOverlay(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, overlayWebContents));
}

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_nativeGetTargetLanguage(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContextualSearchManager) {
  ContextualSearchManager* native =
      reinterpret_cast<ContextualSearchManager*>(nativeContextualSearchManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTargetLanguage", NULL);
  return native->GetTargetLanguage(env,
      base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_nativeGetAcceptLanguages(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContextualSearchManager) {
  ContextualSearchManager* native =
      reinterpret_cast<ContextualSearchManager*>(nativeContextualSearchManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetAcceptLanguages", NULL);
  return native->GetAcceptLanguages(env,
      base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

static base::subtle::AtomicWord g_ContextualSearchManager_clearNativeManager =
    0;
static void Java_ContextualSearchManager_clearNativeManager(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContextualSearchManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContextualSearchManager_clazz(env),
      "clearNativeManager",

"("
")"
"V",
      &g_ContextualSearchManager_clearNativeManager);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContextualSearchManager_setNativeManager = 0;
static void Java_ContextualSearchManager_setNativeManager(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jlong nativeManager) {
  CHECK_CLAZZ(env, obj.obj(),
      ContextualSearchManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContextualSearchManager_clazz(env),
      "setNativeManager",

"("
"J"
")"
"V",
      &g_ContextualSearchManager_setNativeManager);

     env->CallVoidMethod(obj.obj(),
          method_id, nativeManager);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_ContextualSearchManager_onSurroundingTextAvailable = 0;
static void Java_ContextualSearchManager_onSurroundingTextAvailable(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& afterText) {
  CHECK_CLAZZ(env, obj.obj(),
      ContextualSearchManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContextualSearchManager_clazz(env),
      "onSurroundingTextAvailable",

"("
"Ljava/lang/String;"
")"
"V",
      &g_ContextualSearchManager_onSurroundingTextAvailable);

     env->CallVoidMethod(obj.obj(),
          method_id, afterText.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_ContextualSearchManager_onIcingSelectionAvailable = 0;
static void Java_ContextualSearchManager_onIcingSelectionAvailable(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& encoding,
    const base::android::JavaRefOrBare<jstring>& surroundingText,
    JniIntWrapper startOffset,
    JniIntWrapper endOffset) {
  CHECK_CLAZZ(env, obj.obj(),
      ContextualSearchManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContextualSearchManager_clazz(env),
      "onIcingSelectionAvailable",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"I"
"I"
")"
"V",
      &g_ContextualSearchManager_onIcingSelectionAvailable);

     env->CallVoidMethod(obj.obj(),
          method_id, encoding.obj(), surroundingText.obj(),
              as_jint(startOffset), as_jint(endOffset));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_ContextualSearchManager_onSearchTermResolutionResponse = 0;
static void Java_ContextualSearchManager_onSearchTermResolutionResponse(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj, jboolean
    isNetworkUnavailable,
    JniIntWrapper responseCode,
    const base::android::JavaRefOrBare<jstring>& searchTerm,
    const base::android::JavaRefOrBare<jstring>& displayText,
    const base::android::JavaRefOrBare<jstring>& alternateTerm,
    const base::android::JavaRefOrBare<jstring>& mid,
    jboolean doPreventPreload,
    JniIntWrapper selectionStartAdjust,
    JniIntWrapper selectionEndAdjust,
    const base::android::JavaRefOrBare<jstring>& contextLanguage) {
  CHECK_CLAZZ(env, obj.obj(),
      ContextualSearchManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContextualSearchManager_clazz(env),
      "onSearchTermResolutionResponse",

"("
"Z"
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
"I"
"I"
"Ljava/lang/String;"
")"
"V",
      &g_ContextualSearchManager_onSearchTermResolutionResponse);

     env->CallVoidMethod(obj.obj(),
          method_id, isNetworkUnavailable, as_jint(responseCode),
              searchTerm.obj(), displayText.obj(), alternateTerm.obj(),
              mid.obj(), doPreventPreload, as_jint(selectionStartAdjust),
              as_jint(selectionEndAdjust), contextLanguage.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContextualSearchManager_onSetCaption = 0;
static void Java_ContextualSearchManager_onSetCaption(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& caption,
    jboolean doesAnswer) {
  CHECK_CLAZZ(env, obj.obj(),
      ContextualSearchManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContextualSearchManager_clazz(env),
      "onSetCaption",

"("
"Ljava/lang/String;"
"Z"
")"
"V",
      &g_ContextualSearchManager_onSetCaption);

     env->CallVoidMethod(obj.obj(),
          method_id, caption.obj(), doesAnswer);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsContextualSearchManager[] = {
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_nativeInit)
    },
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_nativeDestroy)
    },
    { "nativeStartSearchTermResolutionRequest",
"("
"J"
"Ljava/lang/String;"
"Z"
"Lorg/chromium/content_public/browser/WebContents;"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_nativeStartSearchTermResolutionRequest)
    },
    { "nativeGatherSurroundingText",
"("
"J"
"Ljava/lang/String;"
"Z"
"Lorg/chromium/content_public/browser/WebContents;"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_nativeGatherSurroundingText)
    },
    { "nativeEnableContextualSearchJsApiForOverlay",
"("
"J"
"Lorg/chromium/content_public/browser/WebContents;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_nativeEnableContextualSearchJsApiForOverlay)
    },
    { "nativeGetTargetLanguage",
"("
"J"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_nativeGetTargetLanguage)
    },
    { "nativeGetAcceptLanguages",
"("
"J"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_nativeGetAcceptLanguages)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsContextualSearchManagerSize =
      arraysize(kMethodsContextualSearchManager);

  if (env->RegisterNatives(ContextualSearchManager_clazz(env),
                           kMethodsContextualSearchManager,
                           kMethodsContextualSearchManagerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ContextualSearchManager_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_contextualsearch_ContextualSearchManager_JNI
