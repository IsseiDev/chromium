// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/webapps/WebappRegistry

#ifndef org_chromium_chrome_browser_webapps_WebappRegistry_JNI
#define org_chromium_chrome_browser_webapps_WebappRegistry_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kWebappRegistryClassPath[] =
    "org/chromium/chrome/browser/webapps/WebappRegistry";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_WebappRegistry_clazz __attribute__((unused)) = 0;
#define WebappRegistry_clazz(env) base::android::LazyGetClass(env, kWebappRegistryClassPath, &g_WebappRegistry_clazz)

}  // namespace

// Step 2: method stubs.

static void OnWebappsUnregistered(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong callbackPointer);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_webapps_WebappRegistry_nativeOnWebappsUnregistered(JNIEnv*
    env, jclass jcaller,
    jlong callbackPointer) {
  return OnWebappsUnregistered(env, base::android::JavaParamRef<jclass>(env,
      jcaller), callbackPointer);
}

static void OnClearedWebappHistory(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong callbackPointer);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_webapps_WebappRegistry_nativeOnClearedWebappHistory(JNIEnv*
    env, jclass jcaller,
    jlong callbackPointer) {
  return OnClearedWebappHistory(env, base::android::JavaParamRef<jclass>(env,
      jcaller), callbackPointer);
}

static base::subtle::AtomicWord g_WebappRegistry_unregisterWebappsForUrls = 0;
static void Java_WebappRegistry_unregisterWebappsForUrls(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jobject>& urlFilter,
    jlong callbackPointer) {
  CHECK_CLAZZ(env, WebappRegistry_clazz(env),
      WebappRegistry_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, WebappRegistry_clazz(env),
      "unregisterWebappsForUrls",

"("
"Landroid/content/Context;"
"Lorg/chromium/chrome/browser/browsing_data/UrlFilterBridge;"
"J"
")"
"V",
      &g_WebappRegistry_unregisterWebappsForUrls);

     env->CallStaticVoidMethod(WebappRegistry_clazz(env),
          method_id, context.obj(), urlFilter.obj(), callbackPointer);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_WebappRegistry_clearWebappHistory = 0;
static void Java_WebappRegistry_clearWebappHistory(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context,
    jlong callbackPointer) {
  CHECK_CLAZZ(env, WebappRegistry_clazz(env),
      WebappRegistry_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, WebappRegistry_clazz(env),
      "clearWebappHistory",

"("
"Landroid/content/Context;"
"J"
")"
"V",
      &g_WebappRegistry_clearWebappHistory);

     env->CallStaticVoidMethod(WebappRegistry_clazz(env),
          method_id, context.obj(), callbackPointer);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsWebappRegistry[] = {
    { "nativeOnWebappsUnregistered",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_webapps_WebappRegistry_nativeOnWebappsUnregistered)
    },
    { "nativeOnClearedWebappHistory",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_webapps_WebappRegistry_nativeOnClearedWebappHistory)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsWebappRegistrySize = arraysize(kMethodsWebappRegistry);

  if (env->RegisterNatives(WebappRegistry_clazz(env),
                           kMethodsWebappRegistry,
                           kMethodsWebappRegistrySize) < 0) {
    jni_generator::HandleRegistrationError(
        env, WebappRegistry_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_webapps_WebappRegistry_JNI
