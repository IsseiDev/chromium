// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/cookies/CookiesFetcher

#ifndef org_chromium_chrome_browser_cookies_CookiesFetcher_JNI
#define org_chromium_chrome_browser_cookies_CookiesFetcher_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kCookiesFetcherClassPath[] =
    "org/chromium/chrome/browser/cookies/CookiesFetcher";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_CookiesFetcher_clazz __attribute__((unused)) = 0;
#define CookiesFetcher_clazz(env) base::android::LazyGetClass(env, kCookiesFetcherClassPath, &g_CookiesFetcher_clazz)

}  // namespace

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

extern "C" __attribute__((visibility("default")))
jlong Java_org_chromium_chrome_browser_cookies_CookiesFetcher_nativeInit(JNIEnv*
    env, jobject jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_cookies_CookiesFetcher_nativeDestroy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeCookiesFetcher) {
  CookiesFetcher* native =
      reinterpret_cast<CookiesFetcher*>(nativeCookiesFetcher);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_cookies_CookiesFetcher_nativePersistCookies(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeCookiesFetcher) {
  CookiesFetcher* native =
      reinterpret_cast<CookiesFetcher*>(nativeCookiesFetcher);
  CHECK_NATIVE_PTR(env, jcaller, native, "PersistCookies");
  return native->PersistCookies(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

static void RestoreCookies(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& name,
    const base::android::JavaParamRef<jstring>& value,
    const base::android::JavaParamRef<jstring>& domain,
    const base::android::JavaParamRef<jstring>& path,
    jlong creation,
    jlong expiration,
    jlong lastAccess,
    jboolean secure,
    jboolean httpOnly,
    jint sameSite,
    jint priority);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_cookies_CookiesFetcher_nativeRestoreCookies(JNIEnv*
    env, jclass jcaller,
    jstring name,
    jstring value,
    jstring domain,
    jstring path,
    jlong creation,
    jlong expiration,
    jlong lastAccess,
    jboolean secure,
    jboolean httpOnly,
    jint sameSite,
    jint priority) {
  return RestoreCookies(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, name),
      base::android::JavaParamRef<jstring>(env, value),
      base::android::JavaParamRef<jstring>(env, domain),
      base::android::JavaParamRef<jstring>(env, path), creation, expiration,
      lastAccess, secure, httpOnly, sameSite, priority);
}

static base::subtle::AtomicWord g_CookiesFetcher_createCookie = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_CookiesFetcher_createCookie(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& name,
    const base::android::JavaRefOrBare<jstring>& value,
    const base::android::JavaRefOrBare<jstring>& domain,
    const base::android::JavaRefOrBare<jstring>& path,
    jlong creation,
    jlong expiration,
    jlong lastAccess,
    jboolean secure,
    jboolean httpOnly,
    JniIntWrapper sameSite,
    JniIntWrapper priority) {
  CHECK_CLAZZ(env, obj.obj(),
      CookiesFetcher_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, CookiesFetcher_clazz(env),
      "createCookie",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
"J"
"J"
"Z"
"Z"
"I"
"I"
")"
"Lorg/chromium/chrome/browser/cookies/CanonicalCookie;",
      &g_CookiesFetcher_createCookie);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, name.obj(), value.obj(), domain.obj(), path.obj(),
              creation, expiration, lastAccess, secure, httpOnly,
              as_jint(sameSite), as_jint(priority));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_CookiesFetcher_onCookieFetchFinished = 0;
static void Java_CookiesFetcher_onCookieFetchFinished(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobjectArray>& cookies) {
  CHECK_CLAZZ(env, obj.obj(),
      CookiesFetcher_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, CookiesFetcher_clazz(env),
      "onCookieFetchFinished",

"("
"[Lorg/chromium/chrome/browser/cookies/CanonicalCookie;"
")"
"V",
      &g_CookiesFetcher_onCookieFetchFinished);

     env->CallVoidMethod(obj.obj(),
          method_id, cookies.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_CookiesFetcher_createCookiesArray = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_CookiesFetcher_createCookiesArray(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper size) {
  CHECK_CLAZZ(env, obj.obj(),
      CookiesFetcher_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, CookiesFetcher_clazz(env),
      "createCookiesArray",

"("
"I"
")"
"[Lorg/chromium/chrome/browser/cookies/CanonicalCookie;",
      &g_CookiesFetcher_createCookiesArray);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          method_id, as_jint(size)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsCookiesFetcher[] = {
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_cookies_CookiesFetcher_nativeInit)
    },
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_cookies_CookiesFetcher_nativeDestroy)
    },
    { "nativePersistCookies",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_cookies_CookiesFetcher_nativePersistCookies)
    },
    { "nativeRestoreCookies",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
"J"
"J"
"Z"
"Z"
"I"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_cookies_CookiesFetcher_nativeRestoreCookies)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsCookiesFetcherSize = arraysize(kMethodsCookiesFetcher);

  if (env->RegisterNatives(CookiesFetcher_clazz(env),
                           kMethodsCookiesFetcher,
                           kMethodsCookiesFetcherSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, CookiesFetcher_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_cookies_CookiesFetcher_JNI
