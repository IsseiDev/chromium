// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/UsbChooserDialog

#ifndef org_chromium_chrome_browser_UsbChooserDialog_JNI
#define org_chromium_chrome_browser_UsbChooserDialog_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kUsbChooserDialogClassPath[] =
    "org/chromium/chrome/browser/UsbChooserDialog";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_UsbChooserDialog_clazz __attribute__((unused)) = 0;
#define UsbChooserDialog_clazz(env) base::android::LazyGetClass(env, kUsbChooserDialogClassPath, &g_UsbChooserDialog_clazz)

}  // namespace

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_UsbChooserDialog_nativeOnItemSelected(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeUsbChooserDialogAndroid,
    jstring deviceId) {
  UsbChooserDialogAndroid* native =
      reinterpret_cast<UsbChooserDialogAndroid*>(nativeUsbChooserDialogAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnItemSelected");
  return native->OnItemSelected(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, deviceId));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_UsbChooserDialog_nativeOnDialogCancelled(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeUsbChooserDialogAndroid) {
  UsbChooserDialogAndroid* native =
      reinterpret_cast<UsbChooserDialogAndroid*>(nativeUsbChooserDialogAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDialogCancelled");
  return native->OnDialogCancelled(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_UsbChooserDialog_nativeLoadUsbHelpPage(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeUsbChooserDialogAndroid) {
  UsbChooserDialogAndroid* native =
      reinterpret_cast<UsbChooserDialogAndroid*>(nativeUsbChooserDialogAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "LoadUsbHelpPage");
  return native->LoadUsbHelpPage(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

static base::subtle::AtomicWord g_UsbChooserDialog_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_UsbChooserDialog_create(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& windowAndroid,
    const base::android::JavaRefOrBare<jstring>& origin,
    JniIntWrapper securityLevel,
    jlong nativeUsbChooserDialogPtr) {
  CHECK_CLAZZ(env, UsbChooserDialog_clazz(env),
      UsbChooserDialog_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, UsbChooserDialog_clazz(env),
      "create",

"("
"Lorg/chromium/ui/base/WindowAndroid;"
"Ljava/lang/String;"
"I"
"J"
")"
"Lorg/chromium/chrome/browser/UsbChooserDialog;",
      &g_UsbChooserDialog_create);

  jobject ret =
      env->CallStaticObjectMethod(UsbChooserDialog_clazz(env),
          method_id, windowAndroid.obj(), origin.obj(), as_jint(securityLevel),
              nativeUsbChooserDialogPtr);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_UsbChooserDialog_setIdleState = 0;
static void Java_UsbChooserDialog_setIdleState(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      UsbChooserDialog_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, UsbChooserDialog_clazz(env),
      "setIdleState",

"("
")"
"V",
      &g_UsbChooserDialog_setIdleState);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_UsbChooserDialog_addDevice = 0;
static void Java_UsbChooserDialog_addDevice(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& deviceId,
    const base::android::JavaRefOrBare<jstring>& deviceName) {
  CHECK_CLAZZ(env, obj.obj(),
      UsbChooserDialog_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, UsbChooserDialog_clazz(env),
      "addDevice",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_UsbChooserDialog_addDevice);

     env->CallVoidMethod(obj.obj(),
          method_id, deviceId.obj(), deviceName.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_UsbChooserDialog_removeDevice = 0;
static void Java_UsbChooserDialog_removeDevice(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& deviceId,
    const base::android::JavaRefOrBare<jstring>& deviceName) {
  CHECK_CLAZZ(env, obj.obj(),
      UsbChooserDialog_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, UsbChooserDialog_clazz(env),
      "removeDevice",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_UsbChooserDialog_removeDevice);

     env->CallVoidMethod(obj.obj(),
          method_id, deviceId.obj(), deviceName.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_UsbChooserDialog_closeDialog = 0;
static void Java_UsbChooserDialog_closeDialog(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      UsbChooserDialog_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, UsbChooserDialog_clazz(env),
      "closeDialog",

"("
")"
"V",
      &g_UsbChooserDialog_closeDialog);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsUsbChooserDialog[] = {
    { "nativeOnItemSelected",
"("
"J"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_UsbChooserDialog_nativeOnItemSelected)
    },
    { "nativeOnDialogCancelled",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_UsbChooserDialog_nativeOnDialogCancelled)
    },
    { "nativeLoadUsbHelpPage",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_UsbChooserDialog_nativeLoadUsbHelpPage)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsUsbChooserDialogSize = arraysize(kMethodsUsbChooserDialog);

  if (env->RegisterNatives(UsbChooserDialog_clazz(env),
                           kMethodsUsbChooserDialog,
                           kMethodsUsbChooserDialogSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, UsbChooserDialog_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_UsbChooserDialog_JNI
