// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/pageinfo/ConnectionInfoPopup

#ifndef org_chromium_chrome_browser_pageinfo_ConnectionInfoPopup_JNI
#define org_chromium_chrome_browser_pageinfo_ConnectionInfoPopup_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kConnectionInfoPopupClassPath[] =
    "org/chromium/chrome/browser/pageinfo/ConnectionInfoPopup";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ConnectionInfoPopup_clazz __attribute__((unused)) =
    0;
#define ConnectionInfoPopup_clazz(env) base::android::LazyGetClass(env, kConnectionInfoPopupClassPath, &g_ConnectionInfoPopup_clazz)

}  // namespace

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    const base::android::JavaParamRef<jobject>& popup,
    const base::android::JavaParamRef<jobject>& webContents);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_pageinfo_ConnectionInfoPopup_nativeInit(JNIEnv*
    env, jclass jcaller,
    jobject popup,
    jobject webContents) {
  return Init(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, popup),
      base::android::JavaParamRef<jobject>(env, webContents));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_pageinfo_ConnectionInfoPopup_nativeDestroy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeConnectionInfoPopupAndroid) {
  ConnectionInfoPopupAndroid* native =
      reinterpret_cast<ConnectionInfoPopupAndroid*>(nativeConnectionInfoPopupAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_pageinfo_ConnectionInfoPopup_nativeResetCertDecisions(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeConnectionInfoPopupAndroid,
    jobject webContents) {
  ConnectionInfoPopupAndroid* native =
      reinterpret_cast<ConnectionInfoPopupAndroid*>(nativeConnectionInfoPopupAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ResetCertDecisions");
  return native->ResetCertDecisions(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

static base::android::ScopedJavaLocalRef<jobjectArray>
    GetCertificateChain(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

extern "C" __attribute__((visibility("default")))
jobjectArray
    Java_org_chromium_chrome_browser_pageinfo_ConnectionInfoPopup_nativeGetCertificateChain(JNIEnv*
    env, jobject jcaller,
    jobject webContents) {
  return GetCertificateChain(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env,
      webContents)).Release();
}

static base::subtle::AtomicWord g_ConnectionInfoPopup_addCertificateSection = 0;
static void Java_ConnectionInfoPopup_addCertificateSection(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper enumeratedIconId,
    const base::android::JavaRefOrBare<jstring>& headline,
    const base::android::JavaRefOrBare<jstring>& description,
    const base::android::JavaRefOrBare<jstring>& label) {
  CHECK_CLAZZ(env, obj.obj(),
      ConnectionInfoPopup_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ConnectionInfoPopup_clazz(env),
      "addCertificateSection",

"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_ConnectionInfoPopup_addCertificateSection);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(enumeratedIconId), headline.obj(),
              description.obj(), label.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ConnectionInfoPopup_addDescriptionSection = 0;
static void Java_ConnectionInfoPopup_addDescriptionSection(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper enumeratedIconId,
    const base::android::JavaRefOrBare<jstring>& headline,
    const base::android::JavaRefOrBare<jstring>& description) {
  CHECK_CLAZZ(env, obj.obj(),
      ConnectionInfoPopup_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ConnectionInfoPopup_clazz(env),
      "addDescriptionSection",

"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_ConnectionInfoPopup_addDescriptionSection);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(enumeratedIconId), headline.obj(),
              description.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_ConnectionInfoPopup_addResetCertDecisionsButton = 0;
static void Java_ConnectionInfoPopup_addResetCertDecisionsButton(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& label) {
  CHECK_CLAZZ(env, obj.obj(),
      ConnectionInfoPopup_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ConnectionInfoPopup_clazz(env),
      "addResetCertDecisionsButton",

"("
"Ljava/lang/String;"
")"
"V",
      &g_ConnectionInfoPopup_addResetCertDecisionsButton);

     env->CallVoidMethod(obj.obj(),
          method_id, label.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ConnectionInfoPopup_addMoreInfoLink = 0;
static void Java_ConnectionInfoPopup_addMoreInfoLink(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& linkText) {
  CHECK_CLAZZ(env, obj.obj(),
      ConnectionInfoPopup_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ConnectionInfoPopup_clazz(env),
      "addMoreInfoLink",

"("
"Ljava/lang/String;"
")"
"V",
      &g_ConnectionInfoPopup_addMoreInfoLink);

     env->CallVoidMethod(obj.obj(),
          method_id, linkText.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ConnectionInfoPopup_showDialog = 0;
static void Java_ConnectionInfoPopup_showDialog(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ConnectionInfoPopup_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ConnectionInfoPopup_clazz(env),
      "showDialog",

"("
")"
"V",
      &g_ConnectionInfoPopup_showDialog);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsConnectionInfoPopup[] = {
    { "nativeInit",
"("
"Lorg/chromium/chrome/browser/pageinfo/ConnectionInfoPopup;"
"Lorg/chromium/content_public/browser/WebContents;"
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_pageinfo_ConnectionInfoPopup_nativeInit)
    },
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_pageinfo_ConnectionInfoPopup_nativeDestroy)
    },
    { "nativeResetCertDecisions",
"("
"J"
"Lorg/chromium/content_public/browser/WebContents;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_pageinfo_ConnectionInfoPopup_nativeResetCertDecisions)
    },
    { "nativeGetCertificateChain",
"("
"Lorg/chromium/content_public/browser/WebContents;"
")"
"[[B",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_pageinfo_ConnectionInfoPopup_nativeGetCertificateChain)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsConnectionInfoPopupSize =
      arraysize(kMethodsConnectionInfoPopup);

  if (env->RegisterNatives(ConnectionInfoPopup_clazz(env),
                           kMethodsConnectionInfoPopup,
                           kMethodsConnectionInfoPopupSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ConnectionInfoPopup_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_pageinfo_ConnectionInfoPopup_JNI
