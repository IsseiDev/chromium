// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/database/SQLiteCursor

#ifndef org_chromium_chrome_browser_database_SQLiteCursor_JNI
#define org_chromium_chrome_browser_database_SQLiteCursor_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSQLiteCursorClassPath[] =
    "org/chromium/chrome/browser/database/SQLiteCursor";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SQLiteCursor_clazz __attribute__((unused)) = 0;
#define SQLiteCursor_clazz(env) base::android::LazyGetClass(env, kSQLiteCursorClassPath, &g_SQLiteCursor_clazz)

}  // namespace

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeDestroy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSQLiteCursor) {
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
jint
    Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetCount(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSQLiteCursor) {
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCount", 0);
  return native->GetCount(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
jobjectArray
    Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetColumnNames(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSQLiteCursor) {
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetColumnNames", NULL);
  return native->GetColumnNames(env, base::android::JavaParamRef<jobject>(env,
      jcaller)).Release();
}

extern "C" __attribute__((visibility("default")))
jint
    Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetColumnType(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSQLiteCursor,
    jint column) {
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetColumnType", 0);
  return native->GetColumnType(env, base::android::JavaParamRef<jobject>(env,
      jcaller), column);
}

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetString(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSQLiteCursor,
    jint column) {
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetString", NULL);
  return native->GetString(env, base::android::JavaParamRef<jobject>(env,
      jcaller), column).Release();
}

extern "C" __attribute__((visibility("default")))
jbyteArray
    Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetBlob(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSQLiteCursor,
    jint column) {
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetBlob", NULL);
  return native->GetBlob(env, base::android::JavaParamRef<jobject>(env,
      jcaller), column).Release();
}

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeIsNull(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSQLiteCursor,
    jint column) {
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsNull", false);
  return native->IsNull(env, base::android::JavaParamRef<jobject>(env, jcaller),
      column);
}

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetLong(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSQLiteCursor,
    jint column) {
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLong", 0);
  return native->GetLong(env, base::android::JavaParamRef<jobject>(env,
      jcaller), column);
}

extern "C" __attribute__((visibility("default")))
jint Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetInt(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSQLiteCursor,
    jint column) {
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetInt", 0);
  return native->GetInt(env, base::android::JavaParamRef<jobject>(env, jcaller),
      column);
}

extern "C" __attribute__((visibility("default")))
jdouble
    Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetDouble(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSQLiteCursor,
    jint column) {
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetDouble", 0);
  return native->GetDouble(env, base::android::JavaParamRef<jobject>(env,
      jcaller), column);
}

extern "C" __attribute__((visibility("default")))
jint Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeMoveTo(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSQLiteCursor,
    jint newPosition) {
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  CHECK_NATIVE_PTR(env, jcaller, native, "MoveTo", 0);
  return native->MoveTo(env, base::android::JavaParamRef<jobject>(env, jcaller),
      newPosition);
}

static base::subtle::AtomicWord g_SQLiteCursor_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_SQLiteCursor_create(JNIEnv* env, jlong nativeSQLiteCursor) {
  CHECK_CLAZZ(env, SQLiteCursor_clazz(env),
      SQLiteCursor_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, SQLiteCursor_clazz(env),
      "create",

"("
"J"
")"
"Lorg/chromium/chrome/browser/database/SQLiteCursor;",
      &g_SQLiteCursor_create);

  jobject ret =
      env->CallStaticObjectMethod(SQLiteCursor_clazz(env),
          method_id, nativeSQLiteCursor);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSQLiteCursor[] = {
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeDestroy)
    },
    { "nativeGetCount",
"("
"J"
")"
"I",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetCount)
    },
    { "nativeGetColumnNames",
"("
"J"
")"
"[Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetColumnNames)
    },
    { "nativeGetColumnType",
"("
"J"
"I"
")"
"I",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetColumnType)
    },
    { "nativeGetString",
"("
"J"
"I"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetString)
    },
    { "nativeGetBlob",
"("
"J"
"I"
")"
"[B",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetBlob)
    },
    { "nativeIsNull",
"("
"J"
"I"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeIsNull)
    },
    { "nativeGetLong",
"("
"J"
"I"
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetLong)
    },
    { "nativeGetInt",
"("
"J"
"I"
")"
"I",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetInt)
    },
    { "nativeGetDouble",
"("
"J"
"I"
")"
"D",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeGetDouble)
    },
    { "nativeMoveTo",
"("
"J"
"I"
")"
"I",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_database_SQLiteCursor_nativeMoveTo)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsSQLiteCursorSize = arraysize(kMethodsSQLiteCursor);

  if (env->RegisterNatives(SQLiteCursor_clazz(env),
                           kMethodsSQLiteCursor,
                           kMethodsSQLiteCursorSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, SQLiteCursor_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_database_SQLiteCursor_JNI
