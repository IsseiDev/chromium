// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/media/cdm/MediaDrmCredentialManager

#ifndef org_chromium_chrome_browser_media_cdm_MediaDrmCredentialManager_JNI
#define org_chromium_chrome_browser_media_cdm_MediaDrmCredentialManager_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kMediaDrmCredentialManagerClassPath[] =
    "org/chromium/chrome/browser/media/cdm/MediaDrmCredentialManager";
const char kMediaDrmCredentialManagerCallbackClassPath[] =
    "org/chromium/chrome/browser/media/cdm/MediaDrmCredentialManager$MediaDrmCredentialManagerCallback";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MediaDrmCredentialManager_clazz
    __attribute__((unused)) = 0;
#define MediaDrmCredentialManager_clazz(env) base::android::LazyGetClass(env, kMediaDrmCredentialManagerClassPath, &g_MediaDrmCredentialManager_clazz)
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MediaDrmCredentialManagerCallback_clazz
    __attribute__((unused)) = 0;
#define MediaDrmCredentialManagerCallback_clazz(env) base::android::LazyGetClass(env, kMediaDrmCredentialManagerCallbackClassPath, &g_MediaDrmCredentialManagerCallback_clazz)

}  // namespace

// Step 2: method stubs.

static void ResetCredentials(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& callback);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_media_cdm_MediaDrmCredentialManager_nativeResetCredentials(JNIEnv*
    env, jclass jcaller,
    jobject callback) {
  return ResetCredentials(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, callback));
}

static base::subtle::AtomicWord
    g_MediaDrmCredentialManagerCallback_onCredentialResetFinished = 0;
static void
    Java_MediaDrmCredentialManagerCallback_onCredentialResetFinished(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj, jboolean succeeded) {
  CHECK_CLAZZ(env, obj.obj(),
      MediaDrmCredentialManagerCallback_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, MediaDrmCredentialManagerCallback_clazz(env),
      "onCredentialResetFinished",

"("
"Z"
")"
"V",
      &g_MediaDrmCredentialManagerCallback_onCredentialResetFinished);

     env->CallVoidMethod(obj.obj(),
          method_id, succeeded);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsMediaDrmCredentialManager[] = {
    { "nativeResetCredentials",
"("
"Lorg/chromium/chrome/browser/media/cdm/MediaDrmCredentialManager$MediaDrmCredentialManagerCallback;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_media_cdm_MediaDrmCredentialManager_nativeResetCredentials)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsMediaDrmCredentialManagerSize =
      arraysize(kMethodsMediaDrmCredentialManager);

  if (env->RegisterNatives(MediaDrmCredentialManager_clazz(env),
                           kMethodsMediaDrmCredentialManager,
                           kMethodsMediaDrmCredentialManagerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, MediaDrmCredentialManager_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_media_cdm_MediaDrmCredentialManager_JNI
