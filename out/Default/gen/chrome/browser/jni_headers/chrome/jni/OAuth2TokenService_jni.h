// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/signin/OAuth2TokenService

#ifndef org_chromium_chrome_browser_signin_OAuth2TokenService_JNI
#define org_chromium_chrome_browser_signin_OAuth2TokenService_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kOAuth2TokenServiceClassPath[] =
    "org/chromium/chrome/browser/signin/OAuth2TokenService";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_OAuth2TokenService_clazz __attribute__((unused)) = 0;
#define OAuth2TokenService_clazz(env) base::android::LazyGetClass(env, kOAuth2TokenServiceClassPath, &g_OAuth2TokenService_clazz)

}  // namespace

// Step 2: method stubs.

static base::android::ScopedJavaLocalRef<jobject> GetForProfile(JNIEnv* env,
    const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& profile);

extern "C" __attribute__((visibility("default")))
jobject
    Java_org_chromium_chrome_browser_signin_OAuth2TokenService_nativeGetForProfile(JNIEnv*
    env, jclass jcaller,
    jobject profile) {
  return GetForProfile(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile)).Release();
}

static void OAuth2TokenFetched(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& authToken,
    jboolean isTransientError,
    jlong nativeCallback);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_signin_OAuth2TokenService_nativeOAuth2TokenFetched(JNIEnv*
    env, jclass jcaller,
    jstring authToken,
    jboolean isTransientError,
    jlong nativeCallback) {
  return OAuth2TokenFetched(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, authToken),
      isTransientError, nativeCallback);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_signin_OAuth2TokenService_nativeValidateAccounts(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOAuth2TokenServiceDelegateAndroid,
    jstring currentlySignedInAccount,
    jboolean forceNotifications) {
  OAuth2TokenServiceDelegateAndroid* native =
      reinterpret_cast<OAuth2TokenServiceDelegateAndroid*>(nativeOAuth2TokenServiceDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ValidateAccounts");
  return native->ValidateAccounts(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env,
      currentlySignedInAccount), forceNotifications);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_signin_OAuth2TokenService_nativeFireRefreshTokenAvailableFromJava(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOAuth2TokenServiceDelegateAndroid,
    jstring accountName) {
  OAuth2TokenServiceDelegateAndroid* native =
      reinterpret_cast<OAuth2TokenServiceDelegateAndroid*>(nativeOAuth2TokenServiceDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "FireRefreshTokenAvailableFromJava");
  return native->FireRefreshTokenAvailableFromJava(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, accountName));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_signin_OAuth2TokenService_nativeFireRefreshTokenRevokedFromJava(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOAuth2TokenServiceDelegateAndroid,
    jstring accountName) {
  OAuth2TokenServiceDelegateAndroid* native =
      reinterpret_cast<OAuth2TokenServiceDelegateAndroid*>(nativeOAuth2TokenServiceDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "FireRefreshTokenRevokedFromJava");
  return native->FireRefreshTokenRevokedFromJava(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, accountName));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_signin_OAuth2TokenService_nativeFireRefreshTokensLoadedFromJava(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOAuth2TokenServiceDelegateAndroid) {
  OAuth2TokenServiceDelegateAndroid* native =
      reinterpret_cast<OAuth2TokenServiceDelegateAndroid*>(nativeOAuth2TokenServiceDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "FireRefreshTokensLoadedFromJava");
  return native->FireRefreshTokensLoadedFromJava(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_OAuth2TokenService_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_OAuth2TokenService_create(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context,
    jlong nativeOAuth2Service) {
  CHECK_CLAZZ(env, OAuth2TokenService_clazz(env),
      OAuth2TokenService_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OAuth2TokenService_clazz(env),
      "create",

"("
"Landroid/content/Context;"
"J"
")"
"Lorg/chromium/chrome/browser/signin/OAuth2TokenService;",
      &g_OAuth2TokenService_create);

  jobject ret =
      env->CallStaticObjectMethod(OAuth2TokenService_clazz(env),
          method_id, context.obj(), nativeOAuth2Service);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_OAuth2TokenService_getSystemAccountNames = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_OAuth2TokenService_getSystemAccountNames(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context) {
  CHECK_CLAZZ(env, OAuth2TokenService_clazz(env),
      OAuth2TokenService_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OAuth2TokenService_clazz(env),
      "getSystemAccountNames",

"("
"Landroid/content/Context;"
")"
"[Ljava/lang/String;",
      &g_OAuth2TokenService_getSystemAccountNames);

  jobjectArray ret =
static_cast<jobjectArray>(env->CallStaticObjectMethod(OAuth2TokenService_clazz(env),
          method_id, context.obj()));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord g_OAuth2TokenService_getAccounts = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_OAuth2TokenService_getAccounts(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context) {
  CHECK_CLAZZ(env, OAuth2TokenService_clazz(env),
      OAuth2TokenService_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OAuth2TokenService_clazz(env),
      "getAccounts",

"("
"Landroid/content/Context;"
")"
"[Ljava/lang/String;",
      &g_OAuth2TokenService_getAccounts);

  jobjectArray ret =
static_cast<jobjectArray>(env->CallStaticObjectMethod(OAuth2TokenService_clazz(env),
          method_id, context.obj()));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord g_OAuth2TokenService_getOAuth2AuthToken = 0;
static void Java_OAuth2TokenService_getOAuth2AuthToken(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jstring>& username,
    const base::android::JavaRefOrBare<jstring>& scope,
    jlong nativeCallback) {
  CHECK_CLAZZ(env, OAuth2TokenService_clazz(env),
      OAuth2TokenService_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OAuth2TokenService_clazz(env),
      "getOAuth2AuthToken",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
")"
"V",
      &g_OAuth2TokenService_getOAuth2AuthToken);

     env->CallStaticVoidMethod(OAuth2TokenService_clazz(env),
          method_id, context.obj(), username.obj(), scope.obj(),
              nativeCallback);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OAuth2TokenService_hasOAuth2RefreshToken = 0;
static jboolean Java_OAuth2TokenService_hasOAuth2RefreshToken(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jstring>& accountName) {
  CHECK_CLAZZ(env, OAuth2TokenService_clazz(env),
      OAuth2TokenService_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OAuth2TokenService_clazz(env),
      "hasOAuth2RefreshToken",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
")"
"Z",
      &g_OAuth2TokenService_hasOAuth2RefreshToken);

  jboolean ret =
      env->CallStaticBooleanMethod(OAuth2TokenService_clazz(env),
          method_id, context.obj(), accountName.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_OAuth2TokenService_invalidateOAuth2AuthToken =
    0;
static void Java_OAuth2TokenService_invalidateOAuth2AuthToken(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jstring>& accessToken) {
  CHECK_CLAZZ(env, OAuth2TokenService_clazz(env),
      OAuth2TokenService_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OAuth2TokenService_clazz(env),
      "invalidateOAuth2AuthToken",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
")"
"V",
      &g_OAuth2TokenService_invalidateOAuth2AuthToken);

     env->CallStaticVoidMethod(OAuth2TokenService_clazz(env),
          method_id, context.obj(), accessToken.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OAuth2TokenService_validateAccounts = 0;
static void Java_OAuth2TokenService_validateAccounts(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& context,
    jboolean forceNotifications) {
  CHECK_CLAZZ(env, obj.obj(),
      OAuth2TokenService_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, OAuth2TokenService_clazz(env),
      "validateAccounts",

"("
"Landroid/content/Context;"
"Z"
")"
"V",
      &g_OAuth2TokenService_validateAccounts);

     env->CallVoidMethod(obj.obj(),
          method_id, context.obj(), forceNotifications);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OAuth2TokenService_notifyRefreshTokenAvailable
    = 0;
static void Java_OAuth2TokenService_notifyRefreshTokenAvailable(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& accountName) {
  CHECK_CLAZZ(env, obj.obj(),
      OAuth2TokenService_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, OAuth2TokenService_clazz(env),
      "notifyRefreshTokenAvailable",

"("
"Ljava/lang/String;"
")"
"V",
      &g_OAuth2TokenService_notifyRefreshTokenAvailable);

     env->CallVoidMethod(obj.obj(),
          method_id, accountName.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OAuth2TokenService_notifyRefreshTokenRevoked =
    0;
static void Java_OAuth2TokenService_notifyRefreshTokenRevoked(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& accountName) {
  CHECK_CLAZZ(env, obj.obj(),
      OAuth2TokenService_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, OAuth2TokenService_clazz(env),
      "notifyRefreshTokenRevoked",

"("
"Ljava/lang/String;"
")"
"V",
      &g_OAuth2TokenService_notifyRefreshTokenRevoked);

     env->CallVoidMethod(obj.obj(),
          method_id, accountName.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OAuth2TokenService_notifyRefreshTokensLoaded =
    0;
static void Java_OAuth2TokenService_notifyRefreshTokensLoaded(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      OAuth2TokenService_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, OAuth2TokenService_clazz(env),
      "notifyRefreshTokensLoaded",

"("
")"
"V",
      &g_OAuth2TokenService_notifyRefreshTokensLoaded);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OAuth2TokenService_saveStoredAccounts = 0;
static void Java_OAuth2TokenService_saveStoredAccounts(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jobjectArray>& accounts) {
  CHECK_CLAZZ(env, OAuth2TokenService_clazz(env),
      OAuth2TokenService_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OAuth2TokenService_clazz(env),
      "saveStoredAccounts",

"("
"Landroid/content/Context;"
"[Ljava/lang/String;"
")"
"V",
      &g_OAuth2TokenService_saveStoredAccounts);

     env->CallStaticVoidMethod(OAuth2TokenService_clazz(env),
          method_id, context.obj(), accounts.obj());
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsOAuth2TokenService[] = {
    { "nativeGetForProfile",
"("
"Lorg/chromium/chrome/browser/profiles/Profile;"
")"
"Ljava/lang/Object;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_OAuth2TokenService_nativeGetForProfile)
    },
    { "nativeOAuth2TokenFetched",
"("
"Ljava/lang/String;"
"Z"
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_OAuth2TokenService_nativeOAuth2TokenFetched)
    },
    { "nativeValidateAccounts",
"("
"J"
"Ljava/lang/String;"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_OAuth2TokenService_nativeValidateAccounts)
    },
    { "nativeFireRefreshTokenAvailableFromJava",
"("
"J"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_OAuth2TokenService_nativeFireRefreshTokenAvailableFromJava)
    },
    { "nativeFireRefreshTokenRevokedFromJava",
"("
"J"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_OAuth2TokenService_nativeFireRefreshTokenRevokedFromJava)
    },
    { "nativeFireRefreshTokensLoadedFromJava",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_OAuth2TokenService_nativeFireRefreshTokensLoadedFromJava)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsOAuth2TokenServiceSize =
      arraysize(kMethodsOAuth2TokenService);

  if (env->RegisterNatives(OAuth2TokenService_clazz(env),
                           kMethodsOAuth2TokenService,
                           kMethodsOAuth2TokenServiceSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, OAuth2TokenService_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_signin_OAuth2TokenService_JNI
