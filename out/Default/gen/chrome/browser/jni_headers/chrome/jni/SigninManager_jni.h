// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/signin/SigninManager

#ifndef org_chromium_chrome_browser_signin_SigninManager_JNI
#define org_chromium_chrome_browser_signin_SigninManager_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSigninManagerClassPath[] =
    "org/chromium/chrome/browser/signin/SigninManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SigninManager_clazz __attribute__((unused)) = 0;
#define SigninManager_clazz(env) base::android::LazyGetClass(env, kSigninManagerClassPath, &g_SigninManager_clazz)

}  // namespace

// Step 2: method stubs.

static base::android::ScopedJavaLocalRef<jstring> ExtractDomainName(JNIEnv* env,
    const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& email);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_signin_SigninManager_nativeExtractDomainName(JNIEnv*
    env, jclass jcaller,
    jstring email) {
  return ExtractDomainName(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, email)).Release();
}

static jboolean ShouldLoadPolicyForUser(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& username);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_signin_SigninManager_nativeShouldLoadPolicyForUser(JNIEnv*
    env, jclass jcaller,
    jstring username) {
  return ShouldLoadPolicyForUser(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, username));
}

static void IsUserManaged(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& username,
    const base::android::JavaParamRef<jobject>& callback);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_signin_SigninManager_nativeIsUserManaged(JNIEnv*
    env, jclass jcaller,
    jstring username,
    jobject callback) {
  return IsUserManaged(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, username),
      base::android::JavaParamRef<jobject>(env, callback));
}

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

extern "C" __attribute__((visibility("default")))
jlong Java_org_chromium_chrome_browser_signin_SigninManager_nativeInit(JNIEnv*
    env, jobject jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_signin_SigninManager_nativeIsSigninAllowedByPolicy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSigninManagerAndroid) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsSigninAllowedByPolicy", false);
  return native->IsSigninAllowedByPolicy(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_signin_SigninManager_nativeCheckPolicyBeforeSignIn(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSigninManagerAndroid,
    jstring username) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CheckPolicyBeforeSignIn");
  return native->CheckPolicyBeforeSignIn(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, username));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_signin_SigninManager_nativeFetchPolicyBeforeSignIn(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSigninManagerAndroid) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "FetchPolicyBeforeSignIn");
  return native->FetchPolicyBeforeSignIn(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_signin_SigninManager_nativeAbortSignIn(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSigninManagerAndroid) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AbortSignIn");
  return native->AbortSignIn(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_signin_SigninManager_nativeOnSignInCompleted(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSigninManagerAndroid,
    jstring username) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSignInCompleted");
  return native->OnSignInCompleted(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, username));
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_chrome_browser_signin_SigninManager_nativeSignOut(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSigninManagerAndroid) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SignOut");
  return native->SignOut(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_signin_SigninManager_nativeGetManagementDomain(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSigninManagerAndroid) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetManagementDomain", NULL);
  return native->GetManagementDomain(env,
      base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_signin_SigninManager_nativeWipeProfileData(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSigninManagerAndroid,
    jobject hooks) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "WipeProfileData");
  return native->WipeProfileData(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, hooks));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_signin_SigninManager_nativeClearLastSignedInUser(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSigninManagerAndroid) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearLastSignedInUser");
  return native->ClearLastSignedInUser(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_signin_SigninManager_nativeLogInSignedInUser(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSigninManagerAndroid) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "LogInSignedInUser");
  return native->LogInSignedInUser(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_signin_SigninManager_nativeIsSignedInOnNative(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeSigninManagerAndroid) {
  SigninManagerAndroid* native =
      reinterpret_cast<SigninManagerAndroid*>(nativeSigninManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsSignedInOnNative", false);
  return native->IsSignedInOnNative(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_SigninManager_onPolicyCheckedBeforeSignIn = 0;
static void Java_SigninManager_onPolicyCheckedBeforeSignIn(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& managementDomain) {
  CHECK_CLAZZ(env, obj.obj(),
      SigninManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, SigninManager_clazz(env),
      "onPolicyCheckedBeforeSignIn",

"("
"Ljava/lang/String;"
")"
"V",
      &g_SigninManager_onPolicyCheckedBeforeSignIn);

     env->CallVoidMethod(obj.obj(),
          method_id, managementDomain.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SigninManager_onPolicyFetchedBeforeSignIn = 0;
static void Java_SigninManager_onPolicyFetchedBeforeSignIn(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      SigninManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, SigninManager_clazz(env),
      "onPolicyFetchedBeforeSignIn",

"("
")"
"V",
      &g_SigninManager_onPolicyFetchedBeforeSignIn);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SigninManager_onProfileDataWiped = 0;
static void Java_SigninManager_onProfileDataWiped(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& hooks) {
  CHECK_CLAZZ(env, obj.obj(),
      SigninManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, SigninManager_clazz(env),
      "onProfileDataWiped",

"("
"Lorg/chromium/chrome/browser/signin/SigninManager$WipeDataHooks;"
")"
"V",
      &g_SigninManager_onProfileDataWiped);

     env->CallVoidMethod(obj.obj(),
          method_id, hooks.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SigninManager_onNativeSignOut = 0;
static void Java_SigninManager_onNativeSignOut(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      SigninManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, SigninManager_clazz(env),
      "onNativeSignOut",

"("
")"
"V",
      &g_SigninManager_onNativeSignOut);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SigninManager_onSigninAllowedByPolicyChanged =
    0;
static void Java_SigninManager_onSigninAllowedByPolicyChanged(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jboolean
    newSigninAllowedByPolicy) {
  CHECK_CLAZZ(env, obj.obj(),
      SigninManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, SigninManager_clazz(env),
      "onSigninAllowedByPolicyChanged",

"("
"Z"
")"
"V",
      &g_SigninManager_onSigninAllowedByPolicyChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, newSigninAllowedByPolicy);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSigninManager[] = {
    { "nativeExtractDomainName",
"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeExtractDomainName)
    },
    { "nativeShouldLoadPolicyForUser",
"("
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeShouldLoadPolicyForUser)
    },
    { "nativeIsUserManaged",
"("
"Ljava/lang/String;"
"Lorg/chromium/base/Callback;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeIsUserManaged)
    },
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeInit)
    },
    { "nativeIsSigninAllowedByPolicy",
"("
"J"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeIsSigninAllowedByPolicy)
    },
    { "nativeCheckPolicyBeforeSignIn",
"("
"J"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeCheckPolicyBeforeSignIn)
    },
    { "nativeFetchPolicyBeforeSignIn",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeFetchPolicyBeforeSignIn)
    },
    { "nativeAbortSignIn",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeAbortSignIn)
    },
    { "nativeOnSignInCompleted",
"("
"J"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeOnSignInCompleted)
    },
    { "nativeSignOut",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeSignOut)
    },
    { "nativeGetManagementDomain",
"("
"J"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeGetManagementDomain)
    },
    { "nativeWipeProfileData",
"("
"J"
"Lorg/chromium/chrome/browser/signin/SigninManager$WipeDataHooks;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeWipeProfileData)
    },
    { "nativeClearLastSignedInUser",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeClearLastSignedInUser)
    },
    { "nativeLogInSignedInUser",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeLogInSignedInUser)
    },
    { "nativeIsSignedInOnNative",
"("
"J"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_signin_SigninManager_nativeIsSignedInOnNative)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsSigninManagerSize = arraysize(kMethodsSigninManager);

  if (env->RegisterNatives(SigninManager_clazz(env),
                           kMethodsSigninManager,
                           kMethodsSigninManagerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, SigninManager_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_signin_SigninManager_JNI
