// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/favicon/FaviconHelper

#ifndef org_chromium_chrome_browser_favicon_FaviconHelper_JNI
#define org_chromium_chrome_browser_favicon_FaviconHelper_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kFaviconHelperClassPath[] =
    "org/chromium/chrome/browser/favicon/FaviconHelper";
const char kFaviconImageCallbackClassPath[] =
    "org/chromium/chrome/browser/favicon/FaviconHelper$FaviconImageCallback";
const char kIconAvailabilityCallbackClassPath[] =
    "org/chromium/chrome/browser/favicon/FaviconHelper$IconAvailabilityCallback";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_FaviconHelper_clazz __attribute__((unused)) = 0;
#define FaviconHelper_clazz(env) base::android::LazyGetClass(env, kFaviconHelperClassPath, &g_FaviconHelper_clazz)
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_FaviconImageCallback_clazz __attribute__((unused)) =
    0;
#define FaviconImageCallback_clazz(env) base::android::LazyGetClass(env, kFaviconImageCallbackClassPath, &g_FaviconImageCallback_clazz)
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_IconAvailabilityCallback_clazz
    __attribute__((unused)) = 0;
#define IconAvailabilityCallback_clazz(env) base::android::LazyGetClass(env, kIconAvailabilityCallbackClassPath, &g_IconAvailabilityCallback_clazz)

}  // namespace

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller);

extern "C" __attribute__((visibility("default")))
jlong Java_org_chromium_chrome_browser_favicon_FaviconHelper_nativeInit(JNIEnv*
    env, jclass jcaller) {
  return Init(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_favicon_FaviconHelper_nativeDestroy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeFaviconHelper) {
  FaviconHelper* native = reinterpret_cast<FaviconHelper*>(nativeFaviconHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_favicon_FaviconHelper_nativeGetLocalFaviconImageForURL(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeFaviconHelper,
    jobject profile,
    jstring pageUrl,
    jint iconTypes,
    jint desiredSizeInDip,
    jobject faviconImageCallback) {
  FaviconHelper* native = reinterpret_cast<FaviconHelper*>(nativeFaviconHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLocalFaviconImageForURL", false);
  return native->GetLocalFaviconImageForURL(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile),
      base::android::JavaParamRef<jstring>(env, pageUrl), iconTypes,
      desiredSizeInDip, base::android::JavaParamRef<jobject>(env,
      faviconImageCallback));
}

extern "C" __attribute__((visibility("default")))
jobject
    Java_org_chromium_chrome_browser_favicon_FaviconHelper_nativeGetSyncedFaviconImageForURL(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeFaviconHelper,
    jobject profile,
    jstring pageUrl) {
  FaviconHelper* native = reinterpret_cast<FaviconHelper*>(nativeFaviconHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSyncedFaviconImageForURL", NULL);
  return native->GetSyncedFaviconImageForURL(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile),
      base::android::JavaParamRef<jstring>(env, pageUrl)).Release();
}

static jint GetDominantColorForBitmap(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& image);

extern "C" __attribute__((visibility("default")))
jint
    Java_org_chromium_chrome_browser_favicon_FaviconHelper_nativeGetDominantColorForBitmap(JNIEnv*
    env, jclass jcaller,
    jobject image) {
  return GetDominantColorForBitmap(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, image));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_favicon_FaviconHelper_nativeEnsureIconIsAvailable(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeFaviconHelper,
    jobject profile,
    jobject webContents,
    jstring pageUrl,
    jstring iconUrl,
    jboolean isLargeIcon,
    jboolean isTemporary,
    jobject callback) {
  FaviconHelper* native = reinterpret_cast<FaviconHelper*>(nativeFaviconHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "EnsureIconIsAvailable");
  return native->EnsureIconIsAvailable(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile),
      base::android::JavaParamRef<jobject>(env, webContents),
      base::android::JavaParamRef<jstring>(env, pageUrl),
      base::android::JavaParamRef<jstring>(env, iconUrl), isLargeIcon,
      isTemporary, base::android::JavaParamRef<jobject>(env, callback));
}

static base::subtle::AtomicWord g_FaviconImageCallback_onFaviconAvailable = 0;
static void Java_FaviconImageCallback_onFaviconAvailable(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& image,
    const base::android::JavaRefOrBare<jstring>& iconUrl) {
  CHECK_CLAZZ(env, obj.obj(),
      FaviconImageCallback_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, FaviconImageCallback_clazz(env),
      "onFaviconAvailable",

"("
"Landroid/graphics/Bitmap;"
"Ljava/lang/String;"
")"
"V",
      &g_FaviconImageCallback_onFaviconAvailable);

     env->CallVoidMethod(obj.obj(),
          method_id, image.obj(), iconUrl.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_IconAvailabilityCallback_onIconAvailabilityChecked = 0;
static void Java_IconAvailabilityCallback_onIconAvailabilityChecked(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, jboolean newlyAvailable) {
  CHECK_CLAZZ(env, obj.obj(),
      IconAvailabilityCallback_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, IconAvailabilityCallback_clazz(env),
      "onIconAvailabilityChecked",

"("
"Z"
")"
"V",
      &g_IconAvailabilityCallback_onIconAvailabilityChecked);

     env->CallVoidMethod(obj.obj(),
          method_id, newlyAvailable);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsFaviconHelper[] = {
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_favicon_FaviconHelper_nativeInit)
    },
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_favicon_FaviconHelper_nativeDestroy)
    },
    { "nativeGetLocalFaviconImageForURL",
"("
"J"
"Lorg/chromium/chrome/browser/profiles/Profile;"
"Ljava/lang/String;"
"I"
"I"
"Lorg/chromium/chrome/browser/favicon/FaviconHelper$FaviconImageCallback;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_favicon_FaviconHelper_nativeGetLocalFaviconImageForURL)
    },
    { "nativeGetSyncedFaviconImageForURL",
"("
"J"
"Lorg/chromium/chrome/browser/profiles/Profile;"
"Ljava/lang/String;"
")"
"Landroid/graphics/Bitmap;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_favicon_FaviconHelper_nativeGetSyncedFaviconImageForURL)
    },
    { "nativeGetDominantColorForBitmap",
"("
"Landroid/graphics/Bitmap;"
")"
"I",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_favicon_FaviconHelper_nativeGetDominantColorForBitmap)
    },
    { "nativeEnsureIconIsAvailable",
"("
"J"
"Lorg/chromium/chrome/browser/profiles/Profile;"
"Lorg/chromium/content_public/browser/WebContents;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
"Z"
"Lorg/chromium/chrome/browser/favicon/FaviconHelper$IconAvailabilityCallback;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_favicon_FaviconHelper_nativeEnsureIconIsAvailable)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsFaviconHelperSize = arraysize(kMethodsFaviconHelper);

  if (env->RegisterNatives(FaviconHelper_clazz(env),
                           kMethodsFaviconHelper,
                           kMethodsFaviconHelperSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, FaviconHelper_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_favicon_FaviconHelper_JNI
