// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/password_manager/AutoSigninFirstRunDialog

#ifndef org_chromium_chrome_browser_password_manager_AutoSigninFirstRunDialog_JNI
#define org_chromium_chrome_browser_password_manager_AutoSigninFirstRunDialog_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAutoSigninFirstRunDialogClassPath[] =
    "org/chromium/chrome/browser/password_manager/AutoSigninFirstRunDialog";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AutoSigninFirstRunDialog_clazz
    __attribute__((unused)) = 0;
#define AutoSigninFirstRunDialog_clazz(env) base::android::LazyGetClass(env, kAutoSigninFirstRunDialogClassPath, &g_AutoSigninFirstRunDialog_clazz)

}  // namespace

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_password_1manager_AutoSigninFirstRunDialog_nativeOnTurnOffClicked(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeAutoSigninFirstRunDialogAndroid) {
  AutoSigninFirstRunDialogAndroid* native =
      reinterpret_cast<AutoSigninFirstRunDialogAndroid*>(nativeAutoSigninFirstRunDialogAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnTurnOffClicked");
  return native->OnTurnOffClicked(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_password_1manager_AutoSigninFirstRunDialog_nativeOnOkClicked(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeAutoSigninFirstRunDialogAndroid) {
  AutoSigninFirstRunDialogAndroid* native =
      reinterpret_cast<AutoSigninFirstRunDialogAndroid*>(nativeAutoSigninFirstRunDialogAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnOkClicked");
  return native->OnOkClicked(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_password_1manager_AutoSigninFirstRunDialog_nativeDestroy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeAutoSigninFirstRunDialogAndroid) {
  AutoSigninFirstRunDialogAndroid* native =
      reinterpret_cast<AutoSigninFirstRunDialogAndroid*>(nativeAutoSigninFirstRunDialogAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_password_1manager_AutoSigninFirstRunDialog_nativeOnLinkClicked(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeAutoSigninFirstRunDialogAndroid) {
  AutoSigninFirstRunDialogAndroid* native =
      reinterpret_cast<AutoSigninFirstRunDialogAndroid*>(nativeAutoSigninFirstRunDialogAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnLinkClicked");
  return native->OnLinkClicked(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

static base::subtle::AtomicWord g_AutoSigninFirstRunDialog_createAndShowDialog =
    0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_AutoSigninFirstRunDialog_createAndShowDialog(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& windowAndroid,
    jlong nativeAutoSigninFirstRunDialog,
    const base::android::JavaRefOrBare<jstring>& title,
    const base::android::JavaRefOrBare<jstring>& explanation,
    JniIntWrapper explanationLinkStart,
    JniIntWrapper explanationLinkEnd,
    const base::android::JavaRefOrBare<jstring>& okButtonText,
    const base::android::JavaRefOrBare<jstring>& turnOffButtonText) {
  CHECK_CLAZZ(env, AutoSigninFirstRunDialog_clazz(env),
      AutoSigninFirstRunDialog_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, AutoSigninFirstRunDialog_clazz(env),
      "createAndShowDialog",

"("
"Lorg/chromium/ui/base/WindowAndroid;"
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"I"
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Lorg/chromium/chrome/browser/password_manager/AutoSigninFirstRunDialog;",
      &g_AutoSigninFirstRunDialog_createAndShowDialog);

  jobject ret =
      env->CallStaticObjectMethod(AutoSigninFirstRunDialog_clazz(env),
          method_id, windowAndroid.obj(), nativeAutoSigninFirstRunDialog,
              title.obj(), explanation.obj(), as_jint(explanationLinkStart),
              as_jint(explanationLinkEnd), okButtonText.obj(),
              turnOffButtonText.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_AutoSigninFirstRunDialog_dismissDialog = 0;
static void Java_AutoSigninFirstRunDialog_dismissDialog(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      AutoSigninFirstRunDialog_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, AutoSigninFirstRunDialog_clazz(env),
      "dismissDialog",

"("
")"
"V",
      &g_AutoSigninFirstRunDialog_dismissDialog);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAutoSigninFirstRunDialog[] = {
    { "nativeOnTurnOffClicked",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_password_1manager_AutoSigninFirstRunDialog_nativeOnTurnOffClicked)
    },
    { "nativeOnOkClicked",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_password_1manager_AutoSigninFirstRunDialog_nativeOnOkClicked)
    },
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_password_1manager_AutoSigninFirstRunDialog_nativeDestroy)
    },
    { "nativeOnLinkClicked",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_password_1manager_AutoSigninFirstRunDialog_nativeOnLinkClicked)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsAutoSigninFirstRunDialogSize =
      arraysize(kMethodsAutoSigninFirstRunDialog);

  if (env->RegisterNatives(AutoSigninFirstRunDialog_clazz(env),
                           kMethodsAutoSigninFirstRunDialog,
                           kMethodsAutoSigninFirstRunDialogSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, AutoSigninFirstRunDialog_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_password_manager_AutoSigninFirstRunDialog_JNI
