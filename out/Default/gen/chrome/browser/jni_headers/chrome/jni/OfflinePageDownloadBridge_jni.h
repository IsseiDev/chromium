// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//
//    org/chromium/chrome/browser/offlinepages/downloads/OfflinePageDownloadBridge

#ifndef org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_JNI
#define org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kOfflinePageDownloadBridgeClassPath[] =
    "org/chromium/chrome/browser/offlinepages/downloads/OfflinePageDownloadBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_OfflinePageDownloadBridge_clazz
    __attribute__((unused)) = 0;
#define OfflinePageDownloadBridge_clazz(env) base::android::LazyGetClass(env, kOfflinePageDownloadBridgeClassPath, &g_OfflinePageDownloadBridge_clazz)

}  // namespace

namespace offline_pages {
namespace android {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    const base::android::JavaParamRef<jobject>& profile);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_nativeInit(JNIEnv*
    env, jobject jcaller,
    jobject profile) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_nativeDestroy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageDownloadBridge) {
  OfflinePageDownloadBridge* native =
      reinterpret_cast<OfflinePageDownloadBridge*>(nativeOfflinePageDownloadBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_nativeGetAllItems(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageDownloadBridge,
    jobject items) {
  OfflinePageDownloadBridge* native =
      reinterpret_cast<OfflinePageDownloadBridge*>(nativeOfflinePageDownloadBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetAllItems");
  return native->GetAllItems(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, items));
}

extern "C" __attribute__((visibility("default")))
jobject
    Java_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_nativeGetItemByGuid(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageDownloadBridge,
    jstring guid) {
  OfflinePageDownloadBridge* native =
      reinterpret_cast<OfflinePageDownloadBridge*>(nativeOfflinePageDownloadBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetItemByGuid", NULL);
  return native->GetItemByGuid(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, guid)).Release();
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_nativeDeleteItemByGuid(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageDownloadBridge,
    jstring guid) {
  OfflinePageDownloadBridge* native =
      reinterpret_cast<OfflinePageDownloadBridge*>(nativeOfflinePageDownloadBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeleteItemByGuid");
  return native->DeleteItemByGuid(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, guid));
}

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_nativeGetOfflineUrlByGuid(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageDownloadBridge,
    jstring guid) {
  OfflinePageDownloadBridge* native =
      reinterpret_cast<OfflinePageDownloadBridge*>(nativeOfflinePageDownloadBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetOfflineUrlByGuid", NULL);
  return native->GetOfflineUrlByGuid(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, guid)).Release();
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_nativeStartDownload(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageDownloadBridge,
    jobject tab) {
  OfflinePageDownloadBridge* native =
      reinterpret_cast<OfflinePageDownloadBridge*>(nativeOfflinePageDownloadBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "StartDownload");
  return native->StartDownload(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, tab));
}

static base::subtle::AtomicWord g_OfflinePageDownloadBridge_downloadItemsLoaded
    = 0;
static void Java_OfflinePageDownloadBridge_downloadItemsLoaded(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      OfflinePageDownloadBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, OfflinePageDownloadBridge_clazz(env),
      "downloadItemsLoaded",

"("
")"
"V",
      &g_OfflinePageDownloadBridge_downloadItemsLoaded);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OfflinePageDownloadBridge_downloadItemAdded =
    0;
static void Java_OfflinePageDownloadBridge_downloadItemAdded(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& item) {
  CHECK_CLAZZ(env, obj.obj(),
      OfflinePageDownloadBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, OfflinePageDownloadBridge_clazz(env),
      "downloadItemAdded",

"("
"Lorg/chromium/chrome/browser/offlinepages/downloads/OfflinePageDownloadItem;"
")"
"V",
      &g_OfflinePageDownloadBridge_downloadItemAdded);

     env->CallVoidMethod(obj.obj(),
          method_id, item.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OfflinePageDownloadBridge_downloadItemDeleted
    = 0;
static void Java_OfflinePageDownloadBridge_downloadItemDeleted(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& guid) {
  CHECK_CLAZZ(env, obj.obj(),
      OfflinePageDownloadBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, OfflinePageDownloadBridge_clazz(env),
      "downloadItemDeleted",

"("
"Ljava/lang/String;"
")"
"V",
      &g_OfflinePageDownloadBridge_downloadItemDeleted);

     env->CallVoidMethod(obj.obj(),
          method_id, guid.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OfflinePageDownloadBridge_downloadItemUpdated
    = 0;
static void Java_OfflinePageDownloadBridge_downloadItemUpdated(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& item) {
  CHECK_CLAZZ(env, obj.obj(),
      OfflinePageDownloadBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, OfflinePageDownloadBridge_clazz(env),
      "downloadItemUpdated",

"("
"Lorg/chromium/chrome/browser/offlinepages/downloads/OfflinePageDownloadItem;"
")"
"V",
      &g_OfflinePageDownloadBridge_downloadItemUpdated);

     env->CallVoidMethod(obj.obj(),
          method_id, item.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_OfflinePageDownloadBridge_createDownloadItemAndAddToList = 0;
static void
    Java_OfflinePageDownloadBridge_createDownloadItemAndAddToList(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& list,
    const base::android::JavaRefOrBare<jstring>& guid,
    const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& title,
    const base::android::JavaRefOrBare<jstring>& targetPath,
    jlong startTimeMs,
    jlong totalBytes) {
  CHECK_CLAZZ(env, OfflinePageDownloadBridge_clazz(env),
      OfflinePageDownloadBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OfflinePageDownloadBridge_clazz(env),
      "createDownloadItemAndAddToList",

"("
"Ljava/util/List;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
"J"
")"
"V",
      &g_OfflinePageDownloadBridge_createDownloadItemAndAddToList);

     env->CallStaticVoidMethod(OfflinePageDownloadBridge_clazz(env),
          method_id, list.obj(), guid.obj(), url.obj(), title.obj(),
              targetPath.obj(), startTimeMs, totalBytes);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OfflinePageDownloadBridge_createDownloadItem =
    0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_OfflinePageDownloadBridge_createDownloadItem(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& guid,
    const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& title,
    const base::android::JavaRefOrBare<jstring>& targetPath,
    jlong startTimeMs,
    jlong totalBytes) {
  CHECK_CLAZZ(env, OfflinePageDownloadBridge_clazz(env),
      OfflinePageDownloadBridge_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OfflinePageDownloadBridge_clazz(env),
      "createDownloadItem",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
"J"
")"
"Lorg/chromium/chrome/browser/offlinepages/downloads/OfflinePageDownloadItem;",
      &g_OfflinePageDownloadBridge_createDownloadItem);

  jobject ret =
      env->CallStaticObjectMethod(OfflinePageDownloadBridge_clazz(env),
          method_id, guid.obj(), url.obj(), title.obj(), targetPath.obj(),
              startTimeMs, totalBytes);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsOfflinePageDownloadBridge[] = {
    { "nativeInit",
"("
"Lorg/chromium/chrome/browser/profiles/Profile;"
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_nativeInit)
    },
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_nativeDestroy)
    },
    { "nativeGetAllItems",
"("
"J"
"Ljava/util/List;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_nativeGetAllItems)
    },
    { "nativeGetItemByGuid",
"("
"J"
"Ljava/lang/String;"
")"
"Lorg/chromium/chrome/browser/offlinepages/downloads/OfflinePageDownloadItem;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_nativeGetItemByGuid)
    },
    { "nativeDeleteItemByGuid",
"("
"J"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_nativeDeleteItemByGuid)
    },
    { "nativeGetOfflineUrlByGuid",
"("
"J"
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_nativeGetOfflineUrlByGuid)
    },
    { "nativeStartDownload",
"("
"J"
"Lorg/chromium/chrome/browser/tab/Tab;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_nativeStartDownload)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsOfflinePageDownloadBridgeSize =
      arraysize(kMethodsOfflinePageDownloadBridge);

  if (env->RegisterNatives(OfflinePageDownloadBridge_clazz(env),
                           kMethodsOfflinePageDownloadBridge,
                           kMethodsOfflinePageDownloadBridgeSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, OfflinePageDownloadBridge_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace offline_pages

#endif  // org_chromium_chrome_browser_offlinepages_downloads_OfflinePageDownloadBridge_JNI
