// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/infobar/InfoBar

#ifndef org_chromium_chrome_browser_infobar_InfoBar_JNI
#define org_chromium_chrome_browser_infobar_InfoBar_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kInfoBarClassPath[] = "org/chromium/chrome/browser/infobar/InfoBar";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_InfoBar_clazz __attribute__((unused)) = 0;
#define InfoBar_clazz(env) base::android::LazyGetClass(env, kInfoBarClassPath, &g_InfoBar_clazz)

}  // namespace

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_infobar_InfoBar_nativeOnLinkClicked(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeInfoBarAndroid) {
  InfoBarAndroid* native =
      reinterpret_cast<InfoBarAndroid*>(nativeInfoBarAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnLinkClicked");
  return native->OnLinkClicked(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_infobar_InfoBar_nativeOnButtonClicked(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeInfoBarAndroid,
    jint action) {
  InfoBarAndroid* native =
      reinterpret_cast<InfoBarAndroid*>(nativeInfoBarAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnButtonClicked");
  return native->OnButtonClicked(env, base::android::JavaParamRef<jobject>(env,
      jcaller), action);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_infobar_InfoBar_nativeOnCloseButtonClicked(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeInfoBarAndroid) {
  InfoBarAndroid* native =
      reinterpret_cast<InfoBarAndroid*>(nativeInfoBarAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnCloseButtonClicked");
  return native->OnCloseButtonClicked(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_InfoBar_setNativeInfoBar = 0;
static void Java_InfoBar_setNativeInfoBar(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jlong nativeInfoBarPtr) {
  CHECK_CLAZZ(env, obj.obj(),
      InfoBar_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, InfoBar_clazz(env),
      "setNativeInfoBar",

"("
"J"
")"
"V",
      &g_InfoBar_setNativeInfoBar);

     env->CallVoidMethod(obj.obj(),
          method_id, nativeInfoBarPtr);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_InfoBar_onNativeDestroyed = 0;
static void Java_InfoBar_onNativeDestroyed(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      InfoBar_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, InfoBar_clazz(env),
      "onNativeDestroyed",

"("
")"
"V",
      &g_InfoBar_onNativeDestroyed);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_InfoBar_closeInfoBar = 0;
static jboolean Java_InfoBar_closeInfoBar(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      InfoBar_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, InfoBar_clazz(env),
      "closeInfoBar",

"("
")"
"Z",
      &g_InfoBar_closeInfoBar);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsInfoBar[] = {
    { "nativeOnLinkClicked",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_infobar_InfoBar_nativeOnLinkClicked)
    },
    { "nativeOnButtonClicked",
"("
"J"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_infobar_InfoBar_nativeOnButtonClicked)
    },
    { "nativeOnCloseButtonClicked",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_infobar_InfoBar_nativeOnCloseButtonClicked)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsInfoBarSize = arraysize(kMethodsInfoBar);

  if (env->RegisterNatives(InfoBar_clazz(env),
                           kMethodsInfoBar,
                           kMethodsInfoBarSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, InfoBar_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_infobar_InfoBar_JNI
