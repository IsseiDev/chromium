// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/accessibility/FontSizePrefs

#ifndef org_chromium_chrome_browser_accessibility_FontSizePrefs_JNI
#define org_chromium_chrome_browser_accessibility_FontSizePrefs_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kFontSizePrefsClassPath[] =
    "org/chromium/chrome/browser/accessibility/FontSizePrefs";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_FontSizePrefs_clazz __attribute__((unused)) = 0;
#define FontSizePrefs_clazz(env) base::android::LazyGetClass(env, kFontSizePrefsClassPath, &g_FontSizePrefs_clazz)

}  // namespace

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_accessibility_FontSizePrefs_nativeInit(JNIEnv*
    env, jobject jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_accessibility_FontSizePrefs_nativeSetFontScaleFactor(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeFontSizePrefsAndroid,
    jfloat fontScaleFactor) {
  FontSizePrefsAndroid* native =
      reinterpret_cast<FontSizePrefsAndroid*>(nativeFontSizePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetFontScaleFactor");
  return native->SetFontScaleFactor(env,
      base::android::JavaParamRef<jobject>(env, jcaller), fontScaleFactor);
}

extern "C" __attribute__((visibility("default")))
jfloat
    Java_org_chromium_chrome_browser_accessibility_FontSizePrefs_nativeGetFontScaleFactor(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeFontSizePrefsAndroid) {
  FontSizePrefsAndroid* native =
      reinterpret_cast<FontSizePrefsAndroid*>(nativeFontSizePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetFontScaleFactor", 0);
  return native->GetFontScaleFactor(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_accessibility_FontSizePrefs_nativeGetForceEnableZoom(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeFontSizePrefsAndroid) {
  FontSizePrefsAndroid* native =
      reinterpret_cast<FontSizePrefsAndroid*>(nativeFontSizePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetForceEnableZoom", false);
  return native->GetForceEnableZoom(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_accessibility_FontSizePrefs_nativeSetForceEnableZoom(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeFontSizePrefsAndroid,
    jboolean enabled) {
  FontSizePrefsAndroid* native =
      reinterpret_cast<FontSizePrefsAndroid*>(nativeFontSizePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetForceEnableZoom");
  return native->SetForceEnableZoom(env,
      base::android::JavaParamRef<jobject>(env, jcaller), enabled);
}

static base::subtle::AtomicWord g_FontSizePrefs_onFontScaleFactorChanged = 0;
static void Java_FontSizePrefs_onFontScaleFactorChanged(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jfloat fontScaleFactor) {
  CHECK_CLAZZ(env, obj.obj(),
      FontSizePrefs_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, FontSizePrefs_clazz(env),
      "onFontScaleFactorChanged",

"("
"F"
")"
"V",
      &g_FontSizePrefs_onFontScaleFactorChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, fontScaleFactor);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_FontSizePrefs_onForceEnableZoomChanged = 0;
static void Java_FontSizePrefs_onForceEnableZoomChanged(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jboolean enabled) {
  CHECK_CLAZZ(env, obj.obj(),
      FontSizePrefs_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, FontSizePrefs_clazz(env),
      "onForceEnableZoomChanged",

"("
"Z"
")"
"V",
      &g_FontSizePrefs_onForceEnableZoomChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, enabled);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsFontSizePrefs[] = {
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_accessibility_FontSizePrefs_nativeInit)
    },
    { "nativeSetFontScaleFactor",
"("
"J"
"F"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_accessibility_FontSizePrefs_nativeSetFontScaleFactor)
    },
    { "nativeGetFontScaleFactor",
"("
"J"
")"
"F",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_accessibility_FontSizePrefs_nativeGetFontScaleFactor)
    },
    { "nativeGetForceEnableZoom",
"("
"J"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_accessibility_FontSizePrefs_nativeGetForceEnableZoom)
    },
    { "nativeSetForceEnableZoom",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_accessibility_FontSizePrefs_nativeSetForceEnableZoom)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsFontSizePrefsSize = arraysize(kMethodsFontSizePrefs);

  if (env->RegisterNatives(FontSizePrefs_clazz(env),
                           kMethodsFontSizePrefs,
                           kMethodsFontSizePrefsSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, FontSizePrefs_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_accessibility_FontSizePrefs_JNI
