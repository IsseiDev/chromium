// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/util/FeatureUtilities

#ifndef org_chromium_chrome_browser_util_FeatureUtilities_JNI
#define org_chromium_chrome_browser_util_FeatureUtilities_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kFeatureUtilitiesClassPath[] =
    "org/chromium/chrome/browser/util/FeatureUtilities";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_FeatureUtilities_clazz __attribute__((unused)) = 0;
#define FeatureUtilities_clazz(env) base::android::LazyGetClass(env, kFeatureUtilitiesClassPath, &g_FeatureUtilities_clazz)

}  // namespace

// Step 2: method stubs.

static void SetDocumentModeEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jboolean enabled);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_util_FeatureUtilities_nativeSetDocumentModeEnabled(JNIEnv*
    env, jclass jcaller,
    jboolean enabled) {
  return SetDocumentModeEnabled(env, base::android::JavaParamRef<jclass>(env,
      jcaller), enabled);
}

static void SetCustomTabVisible(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jboolean visible);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_util_FeatureUtilities_nativeSetCustomTabVisible(JNIEnv*
    env, jclass jcaller,
    jboolean visible) {
  return SetCustomTabVisible(env, base::android::JavaParamRef<jclass>(env,
      jcaller), visible);
}

static void SetIsInMultiWindowMode(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jboolean isInMultiWindowMode);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_util_FeatureUtilities_nativeSetIsInMultiWindowMode(JNIEnv*
    env, jclass jcaller,
    jboolean isInMultiWindowMode) {
  return SetIsInMultiWindowMode(env, base::android::JavaParamRef<jclass>(env,
      jcaller), isInMultiWindowMode);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsFeatureUtilities[] = {
    { "nativeSetDocumentModeEnabled",
"("
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_FeatureUtilities_nativeSetDocumentModeEnabled)
    },
    { "nativeSetCustomTabVisible",
"("
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_FeatureUtilities_nativeSetCustomTabVisible)
    },
    { "nativeSetIsInMultiWindowMode",
"("
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_FeatureUtilities_nativeSetIsInMultiWindowMode)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsFeatureUtilitiesSize = arraysize(kMethodsFeatureUtilities);

  if (env->RegisterNatives(FeatureUtilities_clazz(env),
                           kMethodsFeatureUtilities,
                           kMethodsFeatureUtilitiesSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, FeatureUtilities_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_util_FeatureUtilities_JNI
