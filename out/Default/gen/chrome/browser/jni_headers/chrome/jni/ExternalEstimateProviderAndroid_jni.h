// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//
//    org/chromium/chrome/browser/net/qualityprovider/ExternalEstimateProviderAndroid

#ifndef org_chromium_chrome_browser_net_qualityprovider_ExternalEstimateProviderAndroid_JNI
#define org_chromium_chrome_browser_net_qualityprovider_ExternalEstimateProviderAndroid_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kExternalEstimateProviderAndroidClassPath[] =
    "org/chromium/chrome/browser/net/qualityprovider/ExternalEstimateProviderAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ExternalEstimateProviderAndroid_clazz
    __attribute__((unused)) = 0;
#define ExternalEstimateProviderAndroid_clazz(env) base::android::LazyGetClass(env, kExternalEstimateProviderAndroidClassPath, &g_ExternalEstimateProviderAndroid_clazz)

}  // namespace

namespace chrome {
namespace android {

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_net_qualityprovider_ExternalEstimateProviderAndroid_nativeNotifyExternalEstimateProviderAndroidUpdate(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeExternalEstimateProviderAndroid) {
  ExternalEstimateProviderAndroid* native =
      reinterpret_cast<ExternalEstimateProviderAndroid*>(nativeExternalEstimateProviderAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native,
      "NotifyExternalEstimateProviderAndroidUpdate");
  return native->NotifyExternalEstimateProviderAndroidUpdate(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_ExternalEstimateProviderAndroid_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ExternalEstimateProviderAndroid_create(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context,
    jlong nativePtr) {
  CHECK_CLAZZ(env, ExternalEstimateProviderAndroid_clazz(env),
      ExternalEstimateProviderAndroid_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ExternalEstimateProviderAndroid_clazz(env),
      "create",

"("
"Landroid/content/Context;"
"J"
")"
"Lorg/chromium/chrome/browser/net/qualityprovider/ExternalEstimateProviderAndroid;",
      &g_ExternalEstimateProviderAndroid_create);

  jobject ret =
      env->CallStaticObjectMethod(ExternalEstimateProviderAndroid_clazz(env),
          method_id, context.obj(), nativePtr);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ExternalEstimateProviderAndroid_destroy = 0;
static void Java_ExternalEstimateProviderAndroid_destroy(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ExternalEstimateProviderAndroid_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ExternalEstimateProviderAndroid_clazz(env),
      "destroy",

"("
")"
"V",
      &g_ExternalEstimateProviderAndroid_destroy);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ExternalEstimateProviderAndroid_requestUpdate
    = 0;
static void Java_ExternalEstimateProviderAndroid_requestUpdate(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ExternalEstimateProviderAndroid_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ExternalEstimateProviderAndroid_clazz(env),
      "requestUpdate",

"("
")"
"V",
      &g_ExternalEstimateProviderAndroid_requestUpdate);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_ExternalEstimateProviderAndroid_getRTTMilliseconds = 0;
static jint Java_ExternalEstimateProviderAndroid_getRTTMilliseconds(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ExternalEstimateProviderAndroid_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ExternalEstimateProviderAndroid_clazz(env),
      "getRTTMilliseconds",

"("
")"
"I",
      &g_ExternalEstimateProviderAndroid_getRTTMilliseconds);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_ExternalEstimateProviderAndroid_getDownstreamThroughputKbps = 0;
static jlong
    Java_ExternalEstimateProviderAndroid_getDownstreamThroughputKbps(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ExternalEstimateProviderAndroid_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ExternalEstimateProviderAndroid_clazz(env),
      "getDownstreamThroughputKbps",

"("
")"
"J",
      &g_ExternalEstimateProviderAndroid_getDownstreamThroughputKbps);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_ExternalEstimateProviderAndroid_getUpstreamThroughputKbps = 0;
static jlong
    Java_ExternalEstimateProviderAndroid_getUpstreamThroughputKbps(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ExternalEstimateProviderAndroid_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ExternalEstimateProviderAndroid_clazz(env),
      "getUpstreamThroughputKbps",

"("
")"
"J",
      &g_ExternalEstimateProviderAndroid_getUpstreamThroughputKbps);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_ExternalEstimateProviderAndroid_getTimeSinceLastUpdateSeconds = 0;
static jlong
    Java_ExternalEstimateProviderAndroid_getTimeSinceLastUpdateSeconds(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ExternalEstimateProviderAndroid_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ExternalEstimateProviderAndroid_clazz(env),
      "getTimeSinceLastUpdateSeconds",

"("
")"
"J",
      &g_ExternalEstimateProviderAndroid_getTimeSinceLastUpdateSeconds);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ExternalEstimateProviderAndroid_getNoValue =
    0;
static jint Java_ExternalEstimateProviderAndroid_getNoValue(JNIEnv* env) {
  CHECK_CLAZZ(env, ExternalEstimateProviderAndroid_clazz(env),
      ExternalEstimateProviderAndroid_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ExternalEstimateProviderAndroid_clazz(env),
      "getNoValue",

"("
")"
"I",
      &g_ExternalEstimateProviderAndroid_getNoValue);

  jint ret =
      env->CallStaticIntMethod(ExternalEstimateProviderAndroid_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsExternalEstimateProviderAndroid[] = {
    { "nativeNotifyExternalEstimateProviderAndroidUpdate",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_net_qualityprovider_ExternalEstimateProviderAndroid_nativeNotifyExternalEstimateProviderAndroidUpdate)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsExternalEstimateProviderAndroidSize =
      arraysize(kMethodsExternalEstimateProviderAndroid);

  if (env->RegisterNatives(ExternalEstimateProviderAndroid_clazz(env),
                           kMethodsExternalEstimateProviderAndroid,
                           kMethodsExternalEstimateProviderAndroidSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ExternalEstimateProviderAndroid_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_net_qualityprovider_ExternalEstimateProviderAndroid_JNI
