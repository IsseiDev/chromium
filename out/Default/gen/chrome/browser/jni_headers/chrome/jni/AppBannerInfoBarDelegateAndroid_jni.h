// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/infobar/AppBannerInfoBarDelegateAndroid

#ifndef org_chromium_chrome_browser_infobar_AppBannerInfoBarDelegateAndroid_JNI
#define org_chromium_chrome_browser_infobar_AppBannerInfoBarDelegateAndroid_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAppBannerInfoBarDelegateAndroidClassPath[] =
    "org/chromium/chrome/browser/infobar/AppBannerInfoBarDelegateAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AppBannerInfoBarDelegateAndroid_clazz
    __attribute__((unused)) = 0;
#define AppBannerInfoBarDelegateAndroid_clazz(env) base::android::LazyGetClass(env, kAppBannerInfoBarDelegateAndroidClassPath, &g_AppBannerInfoBarDelegateAndroid_clazz)

}  // namespace

namespace banners {

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_infobar_AppBannerInfoBarDelegateAndroid_nativeOnInstallIntentReturned(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeAppBannerInfoBarDelegateAndroid,
    jboolean isInstalling) {
  AppBannerInfoBarDelegateAndroid* native =
      reinterpret_cast<AppBannerInfoBarDelegateAndroid*>(nativeAppBannerInfoBarDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnInstallIntentReturned");
  return native->OnInstallIntentReturned(env,
      base::android::JavaParamRef<jobject>(env, jcaller), isInstalling);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_infobar_AppBannerInfoBarDelegateAndroid_nativeOnInstallFinished(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeAppBannerInfoBarDelegateAndroid,
    jboolean success) {
  AppBannerInfoBarDelegateAndroid* native =
      reinterpret_cast<AppBannerInfoBarDelegateAndroid*>(nativeAppBannerInfoBarDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnInstallFinished");
  return native->OnInstallFinished(env,
      base::android::JavaParamRef<jobject>(env, jcaller), success);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_infobar_AppBannerInfoBarDelegateAndroid_nativeUpdateInstallState(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeAppBannerInfoBarDelegateAndroid) {
  AppBannerInfoBarDelegateAndroid* native =
      reinterpret_cast<AppBannerInfoBarDelegateAndroid*>(nativeAppBannerInfoBarDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateInstallState");
  return native->UpdateInstallState(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_AppBannerInfoBarDelegateAndroid_destroy = 0;
static void Java_AppBannerInfoBarDelegateAndroid_destroy(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      AppBannerInfoBarDelegateAndroid_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, AppBannerInfoBarDelegateAndroid_clazz(env),
      "destroy",

"("
")"
"V",
      &g_AppBannerInfoBarDelegateAndroid_destroy);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_AppBannerInfoBarDelegateAndroid_installOrOpenNativeApp = 0;
static jboolean
    Java_AppBannerInfoBarDelegateAndroid_installOrOpenNativeApp(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& tab,
    const base::android::JavaRefOrBare<jobject>& appData,
    const base::android::JavaRefOrBare<jstring>& referrer) {
  CHECK_CLAZZ(env, obj.obj(),
      AppBannerInfoBarDelegateAndroid_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, AppBannerInfoBarDelegateAndroid_clazz(env),
      "installOrOpenNativeApp",

"("
"Lorg/chromium/chrome/browser/tab/Tab;"
"Lorg/chromium/chrome/browser/banners/AppData;"
"Ljava/lang/String;"
")"
"Z",
      &g_AppBannerInfoBarDelegateAndroid_installOrOpenNativeApp);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, tab.obj(), appData.obj(), referrer.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AppBannerInfoBarDelegateAndroid_showAppDetails
    = 0;
static void Java_AppBannerInfoBarDelegateAndroid_showAppDetails(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& tab,
    const base::android::JavaRefOrBare<jobject>& appData) {
  CHECK_CLAZZ(env, obj.obj(),
      AppBannerInfoBarDelegateAndroid_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, AppBannerInfoBarDelegateAndroid_clazz(env),
      "showAppDetails",

"("
"Lorg/chromium/chrome/browser/tab/Tab;"
"Lorg/chromium/chrome/browser/banners/AppData;"
")"
"V",
      &g_AppBannerInfoBarDelegateAndroid_showAppDetails);

     env->CallVoidMethod(obj.obj(),
          method_id, tab.obj(), appData.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_AppBannerInfoBarDelegateAndroid_determineInstallState = 0;
static jint Java_AppBannerInfoBarDelegateAndroid_determineInstallState(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& data) {
  CHECK_CLAZZ(env, obj.obj(),
      AppBannerInfoBarDelegateAndroid_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, AppBannerInfoBarDelegateAndroid_clazz(env),
      "determineInstallState",

"("
"Lorg/chromium/chrome/browser/banners/AppData;"
")"
"I",
      &g_AppBannerInfoBarDelegateAndroid_determineInstallState);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id, data.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AppBannerInfoBarDelegateAndroid_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_AppBannerInfoBarDelegateAndroid_create(JNIEnv* env, jlong nativePtr) {
  CHECK_CLAZZ(env, AppBannerInfoBarDelegateAndroid_clazz(env),
      AppBannerInfoBarDelegateAndroid_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, AppBannerInfoBarDelegateAndroid_clazz(env),
      "create",

"("
"J"
")"
"Lorg/chromium/chrome/browser/infobar/AppBannerInfoBarDelegateAndroid;",
      &g_AppBannerInfoBarDelegateAndroid_create);

  jobject ret =
      env->CallStaticObjectMethod(AppBannerInfoBarDelegateAndroid_clazz(env),
          method_id, nativePtr);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAppBannerInfoBarDelegateAndroid[] = {
    { "nativeOnInstallIntentReturned",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_infobar_AppBannerInfoBarDelegateAndroid_nativeOnInstallIntentReturned)
    },
    { "nativeOnInstallFinished",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_infobar_AppBannerInfoBarDelegateAndroid_nativeOnInstallFinished)
    },
    { "nativeUpdateInstallState",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_infobar_AppBannerInfoBarDelegateAndroid_nativeUpdateInstallState)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsAppBannerInfoBarDelegateAndroidSize =
      arraysize(kMethodsAppBannerInfoBarDelegateAndroid);

  if (env->RegisterNatives(AppBannerInfoBarDelegateAndroid_clazz(env),
                           kMethodsAppBannerInfoBarDelegateAndroid,
                           kMethodsAppBannerInfoBarDelegateAndroidSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, AppBannerInfoBarDelegateAndroid_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace banners

#endif  // org_chromium_chrome_browser_infobar_AppBannerInfoBarDelegateAndroid_JNI
