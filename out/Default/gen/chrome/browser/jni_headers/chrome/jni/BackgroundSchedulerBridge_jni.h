// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/offlinepages/BackgroundSchedulerBridge

#ifndef org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_JNI
#define org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kBackgroundSchedulerBridgeClassPath[] =
    "org/chromium/chrome/browser/offlinepages/BackgroundSchedulerBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_BackgroundSchedulerBridge_clazz
    __attribute__((unused)) = 0;
#define BackgroundSchedulerBridge_clazz(env) base::android::LazyGetClass(env, kBackgroundSchedulerBridgeClassPath, &g_BackgroundSchedulerBridge_clazz)

}  // namespace

namespace offline_pages {
namespace android {

// Step 2: method stubs.

static jboolean StartProcessing(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jboolean powerConnected,
    jint batteryPercentage,
    jint netConnectionType,
    const base::android::JavaParamRef<jobject>& callback);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_nativeStartProcessing(JNIEnv*
    env, jclass jcaller,
    jboolean powerConnected,
    jint batteryPercentage,
    jint netConnectionType,
    jobject callback) {
  return StartProcessing(env, base::android::JavaParamRef<jclass>(env, jcaller),
      powerConnected, batteryPercentage, netConnectionType,
      base::android::JavaParamRef<jobject>(env, callback));
}

static base::subtle::AtomicWord g_BackgroundSchedulerBridge_schedule = 0;
static void Java_BackgroundSchedulerBridge_schedule(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& triggerConditions) {
  CHECK_CLAZZ(env, BackgroundSchedulerBridge_clazz(env),
      BackgroundSchedulerBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, BackgroundSchedulerBridge_clazz(env),
      "schedule",

"("
"Lorg/chromium/chrome/browser/offlinepages/TriggerConditions;"
")"
"V",
      &g_BackgroundSchedulerBridge_schedule);

     env->CallStaticVoidMethod(BackgroundSchedulerBridge_clazz(env),
          method_id, triggerConditions.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_BackgroundSchedulerBridge_unschedule = 0;
static void Java_BackgroundSchedulerBridge_unschedule(JNIEnv* env) {
  CHECK_CLAZZ(env, BackgroundSchedulerBridge_clazz(env),
      BackgroundSchedulerBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, BackgroundSchedulerBridge_clazz(env),
      "unschedule",

"("
")"
"V",
      &g_BackgroundSchedulerBridge_unschedule);

     env->CallStaticVoidMethod(BackgroundSchedulerBridge_clazz(env),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_BackgroundSchedulerBridge_createTriggerConditions = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BackgroundSchedulerBridge_createTriggerConditions(JNIEnv* env, jboolean
    requirePowerConnected,
    JniIntWrapper minimumBatteryPercentage,
    jboolean requireUnmeteredNetwork) {
  CHECK_CLAZZ(env, BackgroundSchedulerBridge_clazz(env),
      BackgroundSchedulerBridge_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, BackgroundSchedulerBridge_clazz(env),
      "createTriggerConditions",

"("
"Z"
"I"
"Z"
")"
"Lorg/chromium/chrome/browser/offlinepages/TriggerConditions;",
      &g_BackgroundSchedulerBridge_createTriggerConditions);

  jobject ret =
      env->CallStaticObjectMethod(BackgroundSchedulerBridge_clazz(env),
          method_id, requirePowerConnected, as_jint(minimumBatteryPercentage),
              requireUnmeteredNetwork);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsBackgroundSchedulerBridge[] = {
    { "nativeStartProcessing",
"("
"Z"
"I"
"I"
"Lorg/chromium/base/Callback;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_nativeStartProcessing)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsBackgroundSchedulerBridgeSize =
      arraysize(kMethodsBackgroundSchedulerBridge);

  if (env->RegisterNatives(BackgroundSchedulerBridge_clazz(env),
                           kMethodsBackgroundSchedulerBridge,
                           kMethodsBackgroundSchedulerBridgeSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, BackgroundSchedulerBridge_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace offline_pages

#endif  // org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_JNI
