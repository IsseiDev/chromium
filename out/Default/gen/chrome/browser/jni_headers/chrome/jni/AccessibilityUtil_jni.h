// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/util/AccessibilityUtil

#ifndef org_chromium_chrome_browser_util_AccessibilityUtil_JNI
#define org_chromium_chrome_browser_util_AccessibilityUtil_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAccessibilityUtilClassPath[] =
    "org/chromium/chrome/browser/util/AccessibilityUtil";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AccessibilityUtil_clazz __attribute__((unused)) = 0;
#define AccessibilityUtil_clazz(env) base::android::LazyGetClass(env, kAccessibilityUtilClassPath, &g_AccessibilityUtil_clazz)

}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_AccessibilityUtil_isAccessibilityEnabled = 0;
static jboolean Java_AccessibilityUtil_isAccessibilityEnabled(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context) {
  CHECK_CLAZZ(env, AccessibilityUtil_clazz(env),
      AccessibilityUtil_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, AccessibilityUtil_clazz(env),
      "isAccessibilityEnabled",

"("
"Landroid/content/Context;"
")"
"Z",
      &g_AccessibilityUtil_isAccessibilityEnabled);

  jboolean ret =
      env->CallStaticBooleanMethod(AccessibilityUtil_clazz(env),
          method_id, context.obj());
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

#endif  // org_chromium_chrome_browser_util_AccessibilityUtil_JNI
