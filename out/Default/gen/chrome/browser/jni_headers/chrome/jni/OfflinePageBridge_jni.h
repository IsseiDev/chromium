// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/offlinepages/OfflinePageBridge

#ifndef org_chromium_chrome_browser_offlinepages_OfflinePageBridge_JNI
#define org_chromium_chrome_browser_offlinepages_OfflinePageBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kOfflinePageBridgeClassPath[] =
    "org/chromium/chrome/browser/offlinepages/OfflinePageBridge";
const char kSavePageCallbackClassPath[] =
    "org/chromium/chrome/browser/offlinepages/OfflinePageBridge$SavePageCallback";
const char kCheckPagesExistOfflineCallbackInternalClassPath[] =
    "org/chromium/chrome/browser/offlinepages/OfflinePageBridge$CheckPagesExistOfflineCallbackInternal";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_OfflinePageBridge_clazz __attribute__((unused)) = 0;
#define OfflinePageBridge_clazz(env) base::android::LazyGetClass(env, kOfflinePageBridgeClassPath, &g_OfflinePageBridge_clazz)
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SavePageCallback_clazz __attribute__((unused)) = 0;
#define SavePageCallback_clazz(env) base::android::LazyGetClass(env, kSavePageCallbackClassPath, &g_SavePageCallback_clazz)
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_CheckPagesExistOfflineCallbackInternal_clazz
    __attribute__((unused)) = 0;
#define CheckPagesExistOfflineCallbackInternal_clazz(env) base::android::LazyGetClass(env, kCheckPagesExistOfflineCallbackInternalClassPath, &g_CheckPagesExistOfflineCallbackInternal_clazz)

}  // namespace

namespace offline_pages {
namespace android {

// Step 2: method stubs.

static jboolean IsOfflinePagesEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeIsOfflinePagesEnabled(JNIEnv*
    env, jclass jcaller) {
  return IsOfflinePagesEnabled(env, base::android::JavaParamRef<jclass>(env,
      jcaller));
}

static jboolean IsOfflineBookmarksEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeIsOfflineBookmarksEnabled(JNIEnv*
    env, jclass jcaller) {
  return IsOfflineBookmarksEnabled(env, base::android::JavaParamRef<jclass>(env,
      jcaller));
}

static jboolean IsBackgroundLoadingEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeIsBackgroundLoadingEnabled(JNIEnv*
    env, jclass jcaller) {
  return IsBackgroundLoadingEnabled(env,
      base::android::JavaParamRef<jclass>(env, jcaller));
}

static jboolean IsPageSharingEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeIsPageSharingEnabled(JNIEnv*
    env, jclass jcaller) {
  return IsPageSharingEnabled(env, base::android::JavaParamRef<jclass>(env,
      jcaller));
}

static jboolean CanSavePage(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeCanSavePage(JNIEnv*
    env, jclass jcaller,
    jstring url) {
  return CanSavePage(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, url));
}

static base::android::ScopedJavaLocalRef<jobject>
    GetOfflinePageBridgeForProfile(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& profile);

extern "C" __attribute__((visibility("default")))
jobject
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeGetOfflinePageBridgeForProfile(JNIEnv*
    env, jclass jcaller,
    jobject profile) {
  return GetOfflinePageBridgeForProfile(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile)).Release();
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeGetAllPages(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageBridge,
    jobject offlinePages,
    jobject callback) {
  OfflinePageBridge* native =
      reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetAllPages");
  return native->GetAllPages(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, offlinePages),
      base::android::JavaParamRef<jobject>(env, callback));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeCheckPagesExistOffline(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageBridge,
    jobjectArray urls,
    jobject callback) {
  OfflinePageBridge* native =
      reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "CheckPagesExistOffline");
  return native->CheckPagesExistOffline(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobjectArray>(env, urls),
      base::android::JavaParamRef<jobject>(env, callback));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeHasPages(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageBridge,
    jstring nameSpace,
    jobject callback) {
  OfflinePageBridge* native =
      reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasPages");
  return native->HasPages(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, nameSpace),
      base::android::JavaParamRef<jobject>(env, callback));
}

extern "C" __attribute__((visibility("default")))
jlongArray
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeGetOfflineIdsForClientId(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageBridge,
    jstring clientNamespace,
    jstring clientId) {
  OfflinePageBridge* native =
      reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetOfflineIdsForClientId", NULL);
  return native->GetOfflineIdsForClientId(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, clientNamespace),
      base::android::JavaParamRef<jstring>(env, clientId)).Release();
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeGetRequestsInQueue(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageBridge,
    jobject callback) {
  OfflinePageBridge* native =
      reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetRequestsInQueue");
  return native->GetRequestsInQueue(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, callback));
}

extern "C" __attribute__((visibility("default")))
jobject
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeGetPageByOfflineId(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageBridge,
    jlong offlineId) {
  OfflinePageBridge* native =
      reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPageByOfflineId", NULL);
  return native->GetPageByOfflineId(env,
      base::android::JavaParamRef<jobject>(env, jcaller), offlineId).Release();
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeSelectPageForOnlineUrl(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageBridge,
    jstring onlineUrl,
    jint tabId,
    jobject callback) {
  OfflinePageBridge* native =
      reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "SelectPageForOnlineUrl");
  return native->SelectPageForOnlineUrl(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, onlineUrl), tabId,
      base::android::JavaParamRef<jobject>(env, callback));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeGetPageByOfflineUrl(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageBridge,
    jstring offlineUrl,
    jobject callback) {
  OfflinePageBridge* native =
      reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPageByOfflineUrl");
  return native->GetPageByOfflineUrl(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, offlineUrl),
      base::android::JavaParamRef<jobject>(env, callback));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeSavePage(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageBridge,
    jobject callback,
    jobject webContents,
    jstring clientNamespace,
    jstring clientId) {
  OfflinePageBridge* native =
      reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "SavePage");
  return native->SavePage(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, callback),
      base::android::JavaParamRef<jobject>(env, webContents),
      base::android::JavaParamRef<jstring>(env, clientNamespace),
      base::android::JavaParamRef<jstring>(env, clientId));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeSavePageLater(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageBridge,
    jstring url,
    jstring clientNamespace,
    jstring clientId) {
  OfflinePageBridge* native =
      reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "SavePageLater");
  return native->SavePageLater(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, url),
      base::android::JavaParamRef<jstring>(env, clientNamespace),
      base::android::JavaParamRef<jstring>(env, clientId));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeDeletePages(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageBridge,
    jobject callback,
    jlongArray offlineIds) {
  OfflinePageBridge* native =
      reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeletePages");
  return native->DeletePages(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, callback),
      base::android::JavaParamRef<jlongArray>(env, offlineIds));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeCheckMetadataConsistency(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOfflinePageBridge) {
  OfflinePageBridge* native =
      reinterpret_cast<OfflinePageBridge*>(nativeOfflinePageBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "CheckMetadataConsistency");
  return native->CheckMetadataConsistency(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_SavePageCallback_onSavePageDone = 0;
static void Java_SavePageCallback_onSavePageDone(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper savePageResult,
    const base::android::JavaRefOrBare<jstring>& url,
    jlong offlineId) {
  CHECK_CLAZZ(env, obj.obj(),
      SavePageCallback_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, SavePageCallback_clazz(env),
      "onSavePageDone",

"("
"I"
"Ljava/lang/String;"
"J"
")"
"V",
      &g_SavePageCallback_onSavePageDone);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(savePageResult), url.obj(), offlineId);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OfflinePageBridge_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_OfflinePageBridge_create(JNIEnv* env, jlong nativeOfflinePageBridge) {
  CHECK_CLAZZ(env, OfflinePageBridge_clazz(env),
      OfflinePageBridge_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OfflinePageBridge_clazz(env),
      "create",

"("
"J"
")"
"Lorg/chromium/chrome/browser/offlinepages/OfflinePageBridge;",
      &g_OfflinePageBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(OfflinePageBridge_clazz(env),
          method_id, nativeOfflinePageBridge);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_CheckPagesExistOfflineCallbackInternal_onResult = 0;
static void Java_CheckPagesExistOfflineCallbackInternal_onResult(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobjectArray>& results) {
  CHECK_CLAZZ(env, obj.obj(),
      CheckPagesExistOfflineCallbackInternal_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, CheckPagesExistOfflineCallbackInternal_clazz(env),
      "onResult",

"("
"[Ljava/lang/String;"
")"
"V",
      &g_CheckPagesExistOfflineCallbackInternal_onResult);

     env->CallVoidMethod(obj.obj(),
          method_id, results.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OfflinePageBridge_offlinePageModelLoaded = 0;
static void Java_OfflinePageBridge_offlinePageModelLoaded(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      OfflinePageBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, OfflinePageBridge_clazz(env),
      "offlinePageModelLoaded",

"("
")"
"V",
      &g_OfflinePageBridge_offlinePageModelLoaded);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OfflinePageBridge_offlinePageModelChanged = 0;
static void Java_OfflinePageBridge_offlinePageModelChanged(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      OfflinePageBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, OfflinePageBridge_clazz(env),
      "offlinePageModelChanged",

"("
")"
"V",
      &g_OfflinePageBridge_offlinePageModelChanged);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OfflinePageBridge_offlinePageBridgeDestroyed =
    0;
static void Java_OfflinePageBridge_offlinePageBridgeDestroyed(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      OfflinePageBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, OfflinePageBridge_clazz(env),
      "offlinePageBridgeDestroyed",

"("
")"
"V",
      &g_OfflinePageBridge_offlinePageBridgeDestroyed);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OfflinePageBridge_offlinePageDeleted = 0;
static void Java_OfflinePageBridge_offlinePageDeleted(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jlong offlineId,
    const base::android::JavaRefOrBare<jobject>& clientId) {
  CHECK_CLAZZ(env, obj.obj(),
      OfflinePageBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, OfflinePageBridge_clazz(env),
      "offlinePageDeleted",

"("
"J"
"Lorg/chromium/chrome/browser/offlinepages/ClientId;"
")"
"V",
      &g_OfflinePageBridge_offlinePageDeleted);

     env->CallVoidMethod(obj.obj(),
          method_id, offlineId, clientId.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_OfflinePageBridge_createOfflinePageAndAddToList = 0;
static void Java_OfflinePageBridge_createOfflinePageAndAddToList(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& offlinePagesList,
    const base::android::JavaRefOrBare<jstring>& url,
    jlong offlineId,
    const base::android::JavaRefOrBare<jstring>& clientNamespace,
    const base::android::JavaRefOrBare<jstring>& clientId,
    const base::android::JavaRefOrBare<jstring>& offlineUrl,
    const base::android::JavaRefOrBare<jstring>& filePath,
    jlong fileSize,
    jlong creationTime,
    JniIntWrapper accessCount,
    jlong lastAccessTimeMs) {
  CHECK_CLAZZ(env, OfflinePageBridge_clazz(env),
      OfflinePageBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OfflinePageBridge_clazz(env),
      "createOfflinePageAndAddToList",

"("
"Ljava/util/List;"
"Ljava/lang/String;"
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
"J"
"I"
"J"
")"
"V",
      &g_OfflinePageBridge_createOfflinePageAndAddToList);

     env->CallStaticVoidMethod(OfflinePageBridge_clazz(env),
          method_id, offlinePagesList.obj(), url.obj(), offlineId,
              clientNamespace.obj(), clientId.obj(), offlineUrl.obj(),
              filePath.obj(), fileSize, creationTime, as_jint(accessCount),
              lastAccessTimeMs);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OfflinePageBridge_createOfflinePageItem = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_OfflinePageBridge_createOfflinePageItem(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& url,
    jlong offlineId,
    const base::android::JavaRefOrBare<jstring>& clientNamespace,
    const base::android::JavaRefOrBare<jstring>& clientId,
    const base::android::JavaRefOrBare<jstring>& offlineUrl,
    const base::android::JavaRefOrBare<jstring>& filePath,
    jlong fileSize,
    jlong creationTime,
    JniIntWrapper accessCount,
    jlong lastAccessTimeMs) {
  CHECK_CLAZZ(env, OfflinePageBridge_clazz(env),
      OfflinePageBridge_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OfflinePageBridge_clazz(env),
      "createOfflinePageItem",

"("
"Ljava/lang/String;"
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
"J"
"I"
"J"
")"
"Lorg/chromium/chrome/browser/offlinepages/OfflinePageItem;",
      &g_OfflinePageBridge_createOfflinePageItem);

  jobject ret =
      env->CallStaticObjectMethod(OfflinePageBridge_clazz(env),
          method_id, url.obj(), offlineId, clientNamespace.obj(),
              clientId.obj(), offlineUrl.obj(), filePath.obj(), fileSize,
              creationTime, as_jint(accessCount), lastAccessTimeMs);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_OfflinePageBridge_createClientId = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_OfflinePageBridge_createClientId(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& clientNamespace,
    const base::android::JavaRefOrBare<jstring>& id) {
  CHECK_CLAZZ(env, OfflinePageBridge_clazz(env),
      OfflinePageBridge_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OfflinePageBridge_clazz(env),
      "createClientId",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Lorg/chromium/chrome/browser/offlinepages/ClientId;",
      &g_OfflinePageBridge_createClientId);

  jobject ret =
      env->CallStaticObjectMethod(OfflinePageBridge_clazz(env),
          method_id, clientNamespace.obj(), id.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsOfflinePageBridge[] = {
    { "nativeIsOfflinePagesEnabled",
"("
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeIsOfflinePagesEnabled)
    },
    { "nativeIsOfflineBookmarksEnabled",
"("
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeIsOfflineBookmarksEnabled)
    },
    { "nativeIsBackgroundLoadingEnabled",
"("
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeIsBackgroundLoadingEnabled)
    },
    { "nativeIsPageSharingEnabled",
"("
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeIsPageSharingEnabled)
    },
    { "nativeCanSavePage",
"("
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeCanSavePage)
    },
    { "nativeGetOfflinePageBridgeForProfile",
"("
"Lorg/chromium/chrome/browser/profiles/Profile;"
")"
"Lorg/chromium/chrome/browser/offlinepages/OfflinePageBridge;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeGetOfflinePageBridgeForProfile)
    },
    { "nativeGetAllPages",
"("
"J"
"Ljava/util/List;"
"Lorg/chromium/base/Callback;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeGetAllPages)
    },
    { "nativeCheckPagesExistOffline",
"("
"J"
"[Ljava/lang/Object;"
"Lorg/chromium/chrome/browser/offlinepages/OfflinePageBridge$CheckPagesExistOfflineCallbackInternal;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeCheckPagesExistOffline)
    },
    { "nativeHasPages",
"("
"J"
"Ljava/lang/String;"
"Lorg/chromium/base/Callback;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeHasPages)
    },
    { "nativeGetOfflineIdsForClientId",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"[J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeGetOfflineIdsForClientId)
    },
    { "nativeGetRequestsInQueue",
"("
"J"
"Lorg/chromium/base/Callback;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeGetRequestsInQueue)
    },
    { "nativeGetPageByOfflineId",
"("
"J"
"J"
")"
"Lorg/chromium/chrome/browser/offlinepages/OfflinePageItem;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeGetPageByOfflineId)
    },
    { "nativeSelectPageForOnlineUrl",
"("
"J"
"Ljava/lang/String;"
"I"
"Lorg/chromium/base/Callback;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeSelectPageForOnlineUrl)
    },
    { "nativeGetPageByOfflineUrl",
"("
"J"
"Ljava/lang/String;"
"Lorg/chromium/base/Callback;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeGetPageByOfflineUrl)
    },
    { "nativeSavePage",
"("
"J"
"Lorg/chromium/chrome/browser/offlinepages/OfflinePageBridge$SavePageCallback;"
"Lorg/chromium/content_public/browser/WebContents;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeSavePage)
    },
    { "nativeSavePageLater",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeSavePageLater)
    },
    { "nativeDeletePages",
"("
"J"
"Lorg/chromium/base/Callback;"
"[J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeDeletePages)
    },
    { "nativeCheckMetadataConsistency",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_offlinepages_OfflinePageBridge_nativeCheckMetadataConsistency)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsOfflinePageBridgeSize =
      arraysize(kMethodsOfflinePageBridge);

  if (env->RegisterNatives(OfflinePageBridge_clazz(env),
                           kMethodsOfflinePageBridge,
                           kMethodsOfflinePageBridgeSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, OfflinePageBridge_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace offline_pages

#endif  // org_chromium_chrome_browser_offlinepages_OfflinePageBridge_JNI
