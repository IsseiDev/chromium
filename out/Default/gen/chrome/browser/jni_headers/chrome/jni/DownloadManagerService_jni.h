// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/download/DownloadManagerService

#ifndef org_chromium_chrome_browser_download_DownloadManagerService_JNI
#define org_chromium_chrome_browser_download_DownloadManagerService_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDownloadManagerServiceClassPath[] =
    "org/chromium/chrome/browser/download/DownloadManagerService";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DownloadManagerService_clazz __attribute__((unused))
    = 0;
#define DownloadManagerService_clazz(env) base::android::LazyGetClass(env, kDownloadManagerServiceClassPath, &g_DownloadManagerService_clazz)

}  // namespace

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_download_DownloadManagerService_nativeInit(JNIEnv*
    env, jobject jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_download_DownloadManagerService_nativeResumeDownload(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDownloadManagerService,
    jstring downloadGuid,
    jboolean isOffTheRecord) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "ResumeDownload");
  return native->ResumeDownload(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, downloadGuid),
      isOffTheRecord);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_download_DownloadManagerService_nativeCancelDownload(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDownloadManagerService,
    jstring downloadGuid,
    jboolean isOffTheRecord,
    jboolean isNotificationDismissed) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "CancelDownload");
  return native->CancelDownload(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, downloadGuid),
      isOffTheRecord, isNotificationDismissed);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_download_DownloadManagerService_nativePauseDownload(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDownloadManagerService,
    jstring downloadGuid,
    jboolean isOffTheRecord) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "PauseDownload");
  return native->PauseDownload(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, downloadGuid),
      isOffTheRecord);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_download_DownloadManagerService_nativeRemoveDownload(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDownloadManagerService,
    jstring downloadGuid,
    jboolean isOffTheRecord) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveDownload");
  return native->RemoveDownload(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, downloadGuid),
      isOffTheRecord);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_download_DownloadManagerService_nativeGetAllDownloads(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDownloadManagerService,
    jboolean isOffTheRecord) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetAllDownloads");
  return native->GetAllDownloads(env, base::android::JavaParamRef<jobject>(env,
      jcaller), isOffTheRecord);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_download_DownloadManagerService_nativeCheckForExternallyRemovedDownloads(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeDownloadManagerService,
    jboolean isOffTheRecord) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "CheckForExternallyRemovedDownloads");
  return native->CheckForExternallyRemovedDownloads(env,
      base::android::JavaParamRef<jobject>(env, jcaller), isOffTheRecord);
}

static base::subtle::AtomicWord g_DownloadManagerService_onResumptionFailed = 0;
static void Java_DownloadManagerService_onResumptionFailed(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& downloadGuid) {
  CHECK_CLAZZ(env, obj.obj(),
      DownloadManagerService_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DownloadManagerService_clazz(env),
      "onResumptionFailed",

"("
"Ljava/lang/String;"
")"
"V",
      &g_DownloadManagerService_onResumptionFailed);

     env->CallVoidMethod(obj.obj(),
          method_id, downloadGuid.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_DownloadManagerService_createDownloadItemList
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_DownloadManagerService_createDownloadItemList(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      DownloadManagerService_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DownloadManagerService_clazz(env),
      "createDownloadItemList",

"("
")"
"Ljava/util/List;",
      &g_DownloadManagerService_createDownloadItemList);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_DownloadManagerService_addDownloadItemToList =
    0;
static void Java_DownloadManagerService_addDownloadItemToList(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& list,
    const base::android::JavaRefOrBare<jstring>& guid,
    const base::android::JavaRefOrBare<jstring>& displayName,
    const base::android::JavaRefOrBare<jstring>& filepath,
    const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& mimeType,
    jlong startTimestamp,
    jlong totalBytes,
    jboolean hasBeenExternallyRemoved) {
  CHECK_CLAZZ(env, obj.obj(),
      DownloadManagerService_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DownloadManagerService_clazz(env),
      "addDownloadItemToList",

"("
"Ljava/util/List;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
"J"
"Z"
")"
"V",
      &g_DownloadManagerService_addDownloadItemToList);

     env->CallVoidMethod(obj.obj(),
          method_id, list.obj(), guid.obj(), displayName.obj(), filepath.obj(),
              url.obj(), mimeType.obj(), startTimestamp, totalBytes,
              hasBeenExternallyRemoved);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_DownloadManagerService_onAllDownloadsRetrieved
    = 0;
static void Java_DownloadManagerService_onAllDownloadsRetrieved(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& list,
    jboolean isOffTheRecord) {
  CHECK_CLAZZ(env, obj.obj(),
      DownloadManagerService_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DownloadManagerService_clazz(env),
      "onAllDownloadsRetrieved",

"("
"Ljava/util/List;"
"Z"
")"
"V",
      &g_DownloadManagerService_onAllDownloadsRetrieved);

     env->CallVoidMethod(obj.obj(),
          method_id, list.obj(), isOffTheRecord);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_DownloadManagerService_onDownloadItemUpdated =
    0;
static void Java_DownloadManagerService_onDownloadItemUpdated(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& guid,
    const base::android::JavaRefOrBare<jstring>& displayName,
    const base::android::JavaRefOrBare<jstring>& filepath,
    const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& mimeType,
    jlong startTimestamp,
    jlong totalBytes,
    jboolean isOffTheRecord,
    jboolean hasBeenExternallyRemoved) {
  CHECK_CLAZZ(env, obj.obj(),
      DownloadManagerService_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DownloadManagerService_clazz(env),
      "onDownloadItemUpdated",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
"J"
"Z"
"Z"
")"
"V",
      &g_DownloadManagerService_onDownloadItemUpdated);

     env->CallVoidMethod(obj.obj(),
          method_id, guid.obj(), displayName.obj(), filepath.obj(), url.obj(),
              mimeType.obj(), startTimestamp, totalBytes, isOffTheRecord,
              hasBeenExternallyRemoved);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_DownloadManagerService_onDownloadItemRemoved =
    0;
static void Java_DownloadManagerService_onDownloadItemRemoved(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& guid,
    jboolean isOffTheRecord) {
  CHECK_CLAZZ(env, obj.obj(),
      DownloadManagerService_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DownloadManagerService_clazz(env),
      "onDownloadItemRemoved",

"("
"Ljava/lang/String;"
"Z"
")"
"V",
      &g_DownloadManagerService_onDownloadItemRemoved);

     env->CallVoidMethod(obj.obj(),
          method_id, guid.obj(), isOffTheRecord);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_DownloadManagerService_onDownloadItemCanceled
    = 0;
static void Java_DownloadManagerService_onDownloadItemCanceled(JNIEnv* env,
    const base::android::JavaRefOrBare<jstring>& fileName,
    jboolean isExternalStorageMissing) {
  CHECK_CLAZZ(env, DownloadManagerService_clazz(env),
      DownloadManagerService_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, DownloadManagerService_clazz(env),
      "onDownloadItemCanceled",

"("
"Ljava/lang/String;"
"Z"
")"
"V",
      &g_DownloadManagerService_onDownloadItemCanceled);

     env->CallStaticVoidMethod(DownloadManagerService_clazz(env),
          method_id, fileName.obj(), isExternalStorageMissing);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsDownloadManagerService[] = {
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_DownloadManagerService_nativeInit)
    },
    { "nativeResumeDownload",
"("
"J"
"Ljava/lang/String;"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_DownloadManagerService_nativeResumeDownload)
    },
    { "nativeCancelDownload",
"("
"J"
"Ljava/lang/String;"
"Z"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_DownloadManagerService_nativeCancelDownload)
    },
    { "nativePauseDownload",
"("
"J"
"Ljava/lang/String;"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_DownloadManagerService_nativePauseDownload)
    },
    { "nativeRemoveDownload",
"("
"J"
"Ljava/lang/String;"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_DownloadManagerService_nativeRemoveDownload)
    },
    { "nativeGetAllDownloads",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_DownloadManagerService_nativeGetAllDownloads)
    },
    { "nativeCheckForExternallyRemovedDownloads",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_DownloadManagerService_nativeCheckForExternallyRemovedDownloads)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsDownloadManagerServiceSize =
      arraysize(kMethodsDownloadManagerService);

  if (env->RegisterNatives(DownloadManagerService_clazz(env),
                           kMethodsDownloadManagerService,
                           kMethodsDownloadManagerServiceSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, DownloadManagerService_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_download_DownloadManagerService_JNI
