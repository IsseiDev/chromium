// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/webapps/WebApkInstaller

#ifndef org_chromium_chrome_browser_webapps_WebApkInstaller_JNI
#define org_chromium_chrome_browser_webapps_WebApkInstaller_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kWebApkInstallerClassPath[] =
    "org/chromium/chrome/browser/webapps/WebApkInstaller";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_WebApkInstaller_clazz __attribute__((unused)) = 0;
#define WebApkInstaller_clazz(env) base::android::LazyGetClass(env, kWebApkInstallerClassPath, &g_WebApkInstaller_clazz)

}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_WebApkInstaller_installAsyncFromNative = 0;
static jboolean Java_WebApkInstaller_installAsyncFromNative(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& filePath,
    const base::android::JavaRefOrBare<jstring>& packageName) {
  CHECK_CLAZZ(env, WebApkInstaller_clazz(env),
      WebApkInstaller_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, WebApkInstaller_clazz(env),
      "installAsyncFromNative",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Z",
      &g_WebApkInstaller_installAsyncFromNative);

  jboolean ret =
      env->CallStaticBooleanMethod(WebApkInstaller_clazz(env),
          method_id, filePath.obj(), packageName.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_WebApkInstaller_updateAsyncFromNative = 0;
static jboolean Java_WebApkInstaller_updateAsyncFromNative(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& filePath,
    const base::android::JavaRefOrBare<jstring>& packageName) {
  CHECK_CLAZZ(env, WebApkInstaller_clazz(env),
      WebApkInstaller_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, WebApkInstaller_clazz(env),
      "updateAsyncFromNative",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Z",
      &g_WebApkInstaller_updateAsyncFromNative);

  jboolean ret =
      env->CallStaticBooleanMethod(WebApkInstaller_clazz(env),
          method_id, filePath.obj(), packageName.obj());
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

#endif  // org_chromium_chrome_browser_webapps_WebApkInstaller_JNI
