// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/autofill/CardUnmaskBridge

#ifndef org_chromium_chrome_browser_autofill_CardUnmaskBridge_JNI
#define org_chromium_chrome_browser_autofill_CardUnmaskBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kCardUnmaskBridgeClassPath[] =
    "org/chromium/chrome/browser/autofill/CardUnmaskBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_CardUnmaskBridge_clazz __attribute__((unused)) = 0;
#define CardUnmaskBridge_clazz(env) base::android::LazyGetClass(env, kCardUnmaskBridgeClassPath, &g_CardUnmaskBridge_clazz)

}  // namespace

namespace autofill {

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_autofill_CardUnmaskBridge_nativePromptDismissed(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeCardUnmaskPromptViewAndroid) {
  CardUnmaskPromptViewAndroid* native =
      reinterpret_cast<CardUnmaskPromptViewAndroid*>(nativeCardUnmaskPromptViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PromptDismissed");
  return native->PromptDismissed(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_autofill_CardUnmaskBridge_nativeCheckUserInputValidity(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeCardUnmaskPromptViewAndroid,
    jstring userResponse) {
  CardUnmaskPromptViewAndroid* native =
      reinterpret_cast<CardUnmaskPromptViewAndroid*>(nativeCardUnmaskPromptViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CheckUserInputValidity", false);
  return native->CheckUserInputValidity(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, userResponse));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_autofill_CardUnmaskBridge_nativeOnUserInput(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeCardUnmaskPromptViewAndroid,
    jstring cvc,
    jstring month,
    jstring year,
    jboolean shouldStoreLocally) {
  CardUnmaskPromptViewAndroid* native =
      reinterpret_cast<CardUnmaskPromptViewAndroid*>(nativeCardUnmaskPromptViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnUserInput");
  return native->OnUserInput(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, cvc),
      base::android::JavaParamRef<jstring>(env, month),
      base::android::JavaParamRef<jstring>(env, year), shouldStoreLocally);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_autofill_CardUnmaskBridge_nativeOnNewCardLinkClicked(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeCardUnmaskPromptViewAndroid) {
  CardUnmaskPromptViewAndroid* native =
      reinterpret_cast<CardUnmaskPromptViewAndroid*>(nativeCardUnmaskPromptViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnNewCardLinkClicked");
  return native->OnNewCardLinkClicked(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_CardUnmaskBridge_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_CardUnmaskBridge_create(JNIEnv* env, jlong nativeUnmaskPrompt,
    const base::android::JavaRefOrBare<jstring>& title,
    const base::android::JavaRefOrBare<jstring>& instructions,
    const base::android::JavaRefOrBare<jstring>& confirmButtonLabel,
    JniIntWrapper iconId,
    jboolean shouldRequestExpirationDate,
    jboolean canStoreLocally,
    jboolean defaultToStoringLocally,
    jlong successMessageDurationMilliseconds,
    const base::android::JavaRefOrBare<jobject>& windowAndroid) {
  CHECK_CLAZZ(env, CardUnmaskBridge_clazz(env),
      CardUnmaskBridge_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, CardUnmaskBridge_clazz(env),
      "create",

"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"I"
"Z"
"Z"
"Z"
"J"
"Lorg/chromium/ui/base/WindowAndroid;"
")"
"Lorg/chromium/chrome/browser/autofill/CardUnmaskBridge;",
      &g_CardUnmaskBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(CardUnmaskBridge_clazz(env),
          method_id, nativeUnmaskPrompt, title.obj(), instructions.obj(),
              confirmButtonLabel.obj(), as_jint(iconId),
              shouldRequestExpirationDate, canStoreLocally,
              defaultToStoringLocally, successMessageDurationMilliseconds,
              windowAndroid.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_CardUnmaskBridge_show = 0;
static void Java_CardUnmaskBridge_show(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      CardUnmaskBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, CardUnmaskBridge_clazz(env),
      "show",

"("
")"
"V",
      &g_CardUnmaskBridge_show);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_CardUnmaskBridge_update = 0;
static void Java_CardUnmaskBridge_update(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& title,
    const base::android::JavaRefOrBare<jstring>& instructions,
    jboolean shouldRequestExpirationDate) {
  CHECK_CLAZZ(env, obj.obj(),
      CardUnmaskBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, CardUnmaskBridge_clazz(env),
      "update",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
")"
"V",
      &g_CardUnmaskBridge_update);

     env->CallVoidMethod(obj.obj(),
          method_id, title.obj(), instructions.obj(),
              shouldRequestExpirationDate);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_CardUnmaskBridge_dismiss = 0;
static void Java_CardUnmaskBridge_dismiss(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      CardUnmaskBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, CardUnmaskBridge_clazz(env),
      "dismiss",

"("
")"
"V",
      &g_CardUnmaskBridge_dismiss);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_CardUnmaskBridge_disableAndWaitForVerification
    = 0;
static void Java_CardUnmaskBridge_disableAndWaitForVerification(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      CardUnmaskBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, CardUnmaskBridge_clazz(env),
      "disableAndWaitForVerification",

"("
")"
"V",
      &g_CardUnmaskBridge_disableAndWaitForVerification);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_CardUnmaskBridge_verificationFinished = 0;
static void Java_CardUnmaskBridge_verificationFinished(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& errorMessage,
    jboolean allowRetry) {
  CHECK_CLAZZ(env, obj.obj(),
      CardUnmaskBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, CardUnmaskBridge_clazz(env),
      "verificationFinished",

"("
"Ljava/lang/String;"
"Z"
")"
"V",
      &g_CardUnmaskBridge_verificationFinished);

     env->CallVoidMethod(obj.obj(),
          method_id, errorMessage.obj(), allowRetry);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsCardUnmaskBridge[] = {
    { "nativePromptDismissed",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_autofill_CardUnmaskBridge_nativePromptDismissed)
    },
    { "nativeCheckUserInputValidity",
"("
"J"
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_autofill_CardUnmaskBridge_nativeCheckUserInputValidity)
    },
    { "nativeOnUserInput",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_autofill_CardUnmaskBridge_nativeOnUserInput)
    },
    { "nativeOnNewCardLinkClicked",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_autofill_CardUnmaskBridge_nativeOnNewCardLinkClicked)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsCardUnmaskBridgeSize = arraysize(kMethodsCardUnmaskBridge);

  if (env->RegisterNatives(CardUnmaskBridge_clazz(env),
                           kMethodsCardUnmaskBridge,
                           kMethodsCardUnmaskBridgeSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, CardUnmaskBridge_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace autofill

#endif  // org_chromium_chrome_browser_autofill_CardUnmaskBridge_JNI
