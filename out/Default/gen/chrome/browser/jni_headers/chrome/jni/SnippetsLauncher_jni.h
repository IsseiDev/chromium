// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/ntp/snippets/SnippetsLauncher

#ifndef org_chromium_chrome_browser_ntp_snippets_SnippetsLauncher_JNI
#define org_chromium_chrome_browser_ntp_snippets_SnippetsLauncher_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSnippetsLauncherClassPath[] =
    "org/chromium/chrome/browser/ntp/snippets/SnippetsLauncher";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SnippetsLauncher_clazz __attribute__((unused)) = 0;
#define SnippetsLauncher_clazz(env) base::android::LazyGetClass(env, kSnippetsLauncherClassPath, &g_SnippetsLauncher_clazz)

}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_SnippetsLauncher_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_SnippetsLauncher_create(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context) {
  CHECK_CLAZZ(env, SnippetsLauncher_clazz(env),
      SnippetsLauncher_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, SnippetsLauncher_clazz(env),
      "create",

"("
"Landroid/content/Context;"
")"
"Lorg/chromium/chrome/browser/ntp/snippets/SnippetsLauncher;",
      &g_SnippetsLauncher_create);

  jobject ret =
      env->CallStaticObjectMethod(SnippetsLauncher_clazz(env),
          method_id, context.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SnippetsLauncher_destroy = 0;
static void Java_SnippetsLauncher_destroy(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      SnippetsLauncher_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, SnippetsLauncher_clazz(env),
      "destroy",

"("
")"
"V",
      &g_SnippetsLauncher_destroy);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SnippetsLauncher_schedule = 0;
static jboolean Java_SnippetsLauncher_schedule(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jlong periodWifiChargingSeconds,
    jlong periodWifiSeconds,
    jlong periodFallbackSeconds,
    jlong rescheduleTime) {
  CHECK_CLAZZ(env, obj.obj(),
      SnippetsLauncher_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, SnippetsLauncher_clazz(env),
      "schedule",

"("
"J"
"J"
"J"
"J"
")"
"Z",
      &g_SnippetsLauncher_schedule);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, periodWifiChargingSeconds, periodWifiSeconds,
              periodFallbackSeconds, rescheduleTime);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_SnippetsLauncher_unschedule = 0;
static jboolean Java_SnippetsLauncher_unschedule(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      SnippetsLauncher_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, SnippetsLauncher_clazz(env),
      "unschedule",

"("
")"
"Z",
      &g_SnippetsLauncher_unschedule);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

#endif  // org_chromium_chrome_browser_ntp_snippets_SnippetsLauncher_JNI
