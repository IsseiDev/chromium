// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//
//    org/chromium/chrome/browser/offlinepages/downloads/OfflinePageNotificationBridge

#ifndef org_chromium_chrome_browser_offlinepages_downloads_OfflinePageNotificationBridge_JNI
#define org_chromium_chrome_browser_offlinepages_downloads_OfflinePageNotificationBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kOfflinePageNotificationBridgeClassPath[] =
    "org/chromium/chrome/browser/offlinepages/downloads/OfflinePageNotificationBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_OfflinePageNotificationBridge_clazz
    __attribute__((unused)) = 0;
#define OfflinePageNotificationBridge_clazz(env) base::android::LazyGetClass(env, kOfflinePageNotificationBridgeClassPath, &g_OfflinePageNotificationBridge_clazz)

}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_OfflinePageNotificationBridge_notifyDownloadSuccessful = 0;
static void Java_OfflinePageNotificationBridge_notifyDownloadSuccessful(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jstring>& guid,
    const base::android::JavaRefOrBare<jstring>& url) {
  CHECK_CLAZZ(env, OfflinePageNotificationBridge_clazz(env),
      OfflinePageNotificationBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OfflinePageNotificationBridge_clazz(env),
      "notifyDownloadSuccessful",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_OfflinePageNotificationBridge_notifyDownloadSuccessful);

     env->CallStaticVoidMethod(OfflinePageNotificationBridge_clazz(env),
          method_id, context.obj(), guid.obj(), url.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_OfflinePageNotificationBridge_notifyDownloadFailed = 0;
static void Java_OfflinePageNotificationBridge_notifyDownloadFailed(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jstring>& guid,
    const base::android::JavaRefOrBare<jstring>& url) {
  CHECK_CLAZZ(env, OfflinePageNotificationBridge_clazz(env),
      OfflinePageNotificationBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OfflinePageNotificationBridge_clazz(env),
      "notifyDownloadFailed",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_OfflinePageNotificationBridge_notifyDownloadFailed);

     env->CallStaticVoidMethod(OfflinePageNotificationBridge_clazz(env),
          method_id, context.obj(), guid.obj(), url.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_OfflinePageNotificationBridge_notifyDownloadProgress = 0;
static void Java_OfflinePageNotificationBridge_notifyDownloadProgress(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jstring>& guid,
    const base::android::JavaRefOrBare<jstring>& url,
    jlong startTime) {
  CHECK_CLAZZ(env, OfflinePageNotificationBridge_clazz(env),
      OfflinePageNotificationBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OfflinePageNotificationBridge_clazz(env),
      "notifyDownloadProgress",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
")"
"V",
      &g_OfflinePageNotificationBridge_notifyDownloadProgress);

     env->CallStaticVoidMethod(OfflinePageNotificationBridge_clazz(env),
          method_id, context.obj(), guid.obj(), url.obj(), startTime);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_OfflinePageNotificationBridge_notifyDownloadPaused = 0;
static void Java_OfflinePageNotificationBridge_notifyDownloadPaused(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jstring>& guid) {
  CHECK_CLAZZ(env, OfflinePageNotificationBridge_clazz(env),
      OfflinePageNotificationBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OfflinePageNotificationBridge_clazz(env),
      "notifyDownloadPaused",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
")"
"V",
      &g_OfflinePageNotificationBridge_notifyDownloadPaused);

     env->CallStaticVoidMethod(OfflinePageNotificationBridge_clazz(env),
          method_id, context.obj(), guid.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_OfflinePageNotificationBridge_notifyDownloadInterrupted = 0;
static void Java_OfflinePageNotificationBridge_notifyDownloadInterrupted(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jstring>& guid) {
  CHECK_CLAZZ(env, OfflinePageNotificationBridge_clazz(env),
      OfflinePageNotificationBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OfflinePageNotificationBridge_clazz(env),
      "notifyDownloadInterrupted",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
")"
"V",
      &g_OfflinePageNotificationBridge_notifyDownloadInterrupted);

     env->CallStaticVoidMethod(OfflinePageNotificationBridge_clazz(env),
          method_id, context.obj(), guid.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_OfflinePageNotificationBridge_notifyDownloadCanceled = 0;
static void Java_OfflinePageNotificationBridge_notifyDownloadCanceled(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jstring>& guid) {
  CHECK_CLAZZ(env, OfflinePageNotificationBridge_clazz(env),
      OfflinePageNotificationBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, OfflinePageNotificationBridge_clazz(env),
      "notifyDownloadCanceled",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
")"
"V",
      &g_OfflinePageNotificationBridge_notifyDownloadCanceled);

     env->CallStaticVoidMethod(OfflinePageNotificationBridge_clazz(env),
          method_id, context.obj(), guid.obj());
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

#endif  // org_chromium_chrome_browser_offlinepages_downloads_OfflinePageNotificationBridge_JNI
