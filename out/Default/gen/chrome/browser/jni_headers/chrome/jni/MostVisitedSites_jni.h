// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/profiles/MostVisitedSites

#ifndef org_chromium_chrome_browser_profiles_MostVisitedSites_JNI
#define org_chromium_chrome_browser_profiles_MostVisitedSites_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kMostVisitedURLsObserverClassPath[] =
    "org/chromium/chrome/browser/profiles/MostVisitedSites$MostVisitedURLsObserver";
const char kMostVisitedSitesClassPath[] =
    "org/chromium/chrome/browser/profiles/MostVisitedSites";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MostVisitedURLsObserver_clazz __attribute__((unused))
    = 0;
#define MostVisitedURLsObserver_clazz(env) base::android::LazyGetClass(env, kMostVisitedURLsObserverClassPath, &g_MostVisitedURLsObserver_clazz)
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MostVisitedSites_clazz __attribute__((unused)) = 0;
#define MostVisitedSites_clazz(env) base::android::LazyGetClass(env, kMostVisitedSitesClassPath, &g_MostVisitedSites_clazz)

}  // namespace

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    const base::android::JavaParamRef<jobject>& profile);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_profiles_MostVisitedSites_nativeInit(JNIEnv*
    env, jobject jcaller,
    jobject profile) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_profiles_MostVisitedSites_nativeDestroy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeMostVisitedSitesBridge) {
  MostVisitedSitesBridge* native =
      reinterpret_cast<MostVisitedSitesBridge*>(nativeMostVisitedSitesBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_profiles_MostVisitedSites_nativeSetMostVisitedURLsObserver(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeMostVisitedSitesBridge,
    jobject observer,
    jint numSites) {
  MostVisitedSitesBridge* native =
      reinterpret_cast<MostVisitedSitesBridge*>(nativeMostVisitedSitesBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetMostVisitedURLsObserver");
  return native->SetMostVisitedURLsObserver(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, observer), numSites);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_profiles_MostVisitedSites_nativeAddOrRemoveBlacklistedUrl(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeMostVisitedSitesBridge,
    jstring url,
    jboolean addUrl) {
  MostVisitedSitesBridge* native =
      reinterpret_cast<MostVisitedSitesBridge*>(nativeMostVisitedSitesBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddOrRemoveBlacklistedUrl");
  return native->AddOrRemoveBlacklistedUrl(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, url), addUrl);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_profiles_MostVisitedSites_nativeRecordTileTypeMetrics(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeMostVisitedSitesBridge,
    jintArray tileTypes,
    jintArray sources) {
  MostVisitedSitesBridge* native =
      reinterpret_cast<MostVisitedSitesBridge*>(nativeMostVisitedSitesBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "RecordTileTypeMetrics");
  return native->RecordTileTypeMetrics(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jintArray>(env, tileTypes),
      base::android::JavaParamRef<jintArray>(env, sources));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_profiles_MostVisitedSites_nativeRecordOpenedMostVisitedItem(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeMostVisitedSitesBridge,
    jint index,
    jint tileType,
    jint source) {
  MostVisitedSitesBridge* native =
      reinterpret_cast<MostVisitedSitesBridge*>(nativeMostVisitedSitesBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "RecordOpenedMostVisitedItem");
  return native->RecordOpenedMostVisitedItem(env,
      base::android::JavaParamRef<jobject>(env, jcaller), index, tileType,
      source);
}

static base::subtle::AtomicWord
    g_MostVisitedURLsObserver_onMostVisitedURLsAvailable = 0;
static void Java_MostVisitedURLsObserver_onMostVisitedURLsAvailable(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobjectArray>& titles,
    const base::android::JavaRefOrBare<jobjectArray>& urls,
    const base::android::JavaRefOrBare<jobjectArray>& whitelistIconPaths,
    const base::android::JavaRefOrBare<jintArray>& sources) {
  CHECK_CLAZZ(env, obj.obj(),
      MostVisitedURLsObserver_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, MostVisitedURLsObserver_clazz(env),
      "onMostVisitedURLsAvailable",

"("
"[Ljava/lang/String;"
"[Ljava/lang/String;"
"[Ljava/lang/String;"
"[I"
")"
"V",
      &g_MostVisitedURLsObserver_onMostVisitedURLsAvailable);

     env->CallVoidMethod(obj.obj(),
          method_id, titles.obj(), urls.obj(), whitelistIconPaths.obj(),
              sources.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_MostVisitedURLsObserver_onPopularURLsAvailable
    = 0;
static void Java_MostVisitedURLsObserver_onPopularURLsAvailable(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobjectArray>& urls,
    const base::android::JavaRefOrBare<jobjectArray>& faviconUrls,
    const base::android::JavaRefOrBare<jobjectArray>& largeIconUrls) {
  CHECK_CLAZZ(env, obj.obj(),
      MostVisitedURLsObserver_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, MostVisitedURLsObserver_clazz(env),
      "onPopularURLsAvailable",

"("
"[Ljava/lang/String;"
"[Ljava/lang/String;"
"[Ljava/lang/String;"
")"
"V",
      &g_MostVisitedURLsObserver_onPopularURLsAvailable);

     env->CallVoidMethod(obj.obj(),
          method_id, urls.obj(), faviconUrls.obj(), largeIconUrls.obj());
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsMostVisitedSites[] = {
    { "nativeInit",
"("
"Lorg/chromium/chrome/browser/profiles/Profile;"
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_profiles_MostVisitedSites_nativeInit)
    },
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_profiles_MostVisitedSites_nativeDestroy)
    },
    { "nativeSetMostVisitedURLsObserver",
"("
"J"
"Lorg/chromium/chrome/browser/profiles/MostVisitedSites$MostVisitedURLsObserver;"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_profiles_MostVisitedSites_nativeSetMostVisitedURLsObserver)
    },
    { "nativeAddOrRemoveBlacklistedUrl",
"("
"J"
"Ljava/lang/String;"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_profiles_MostVisitedSites_nativeAddOrRemoveBlacklistedUrl)
    },
    { "nativeRecordTileTypeMetrics",
"("
"J"
"[I"
"[I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_profiles_MostVisitedSites_nativeRecordTileTypeMetrics)
    },
    { "nativeRecordOpenedMostVisitedItem",
"("
"J"
"I"
"I"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_profiles_MostVisitedSites_nativeRecordOpenedMostVisitedItem)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsMostVisitedSitesSize = arraysize(kMethodsMostVisitedSites);

  if (env->RegisterNatives(MostVisitedSites_clazz(env),
                           kMethodsMostVisitedSites,
                           kMethodsMostVisitedSitesSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, MostVisitedSites_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_profiles_MostVisitedSites_JNI
