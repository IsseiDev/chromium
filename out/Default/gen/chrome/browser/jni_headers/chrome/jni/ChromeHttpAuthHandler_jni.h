// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/ChromeHttpAuthHandler

#ifndef org_chromium_chrome_browser_ChromeHttpAuthHandler_JNI
#define org_chromium_chrome_browser_ChromeHttpAuthHandler_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kChromeHttpAuthHandlerClassPath[] =
    "org/chromium/chrome/browser/ChromeHttpAuthHandler";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ChromeHttpAuthHandler_clazz __attribute__((unused)) =
    0;
#define ChromeHttpAuthHandler_clazz(env) base::android::LazyGetClass(env, kChromeHttpAuthHandlerClassPath, &g_ChromeHttpAuthHandler_clazz)

}  // namespace

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_ChromeHttpAuthHandler_nativeSetAuth(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeChromeHttpAuthHandler,
    jstring username,
    jstring password) {
  ChromeHttpAuthHandler* native =
      reinterpret_cast<ChromeHttpAuthHandler*>(nativeChromeHttpAuthHandler);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetAuth");
  return native->SetAuth(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, username),
      base::android::JavaParamRef<jstring>(env, password));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_ChromeHttpAuthHandler_nativeCancelAuth(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeChromeHttpAuthHandler) {
  ChromeHttpAuthHandler* native =
      reinterpret_cast<ChromeHttpAuthHandler*>(nativeChromeHttpAuthHandler);
  CHECK_NATIVE_PTR(env, jcaller, native, "CancelAuth");
  return native->CancelAuth(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_ChromeHttpAuthHandler_nativeGetMessageBody(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeChromeHttpAuthHandler) {
  ChromeHttpAuthHandler* native =
      reinterpret_cast<ChromeHttpAuthHandler*>(nativeChromeHttpAuthHandler);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetMessageBody", NULL);
  return native->GetMessageBody(env, base::android::JavaParamRef<jobject>(env,
      jcaller)).Release();
}

static base::subtle::AtomicWord g_ChromeHttpAuthHandler_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ChromeHttpAuthHandler_create(JNIEnv* env, jlong
    nativeChromeHttpAuthHandler) {
  CHECK_CLAZZ(env, ChromeHttpAuthHandler_clazz(env),
      ChromeHttpAuthHandler_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ChromeHttpAuthHandler_clazz(env),
      "create",

"("
"J"
")"
"Lorg/chromium/chrome/browser/ChromeHttpAuthHandler;",
      &g_ChromeHttpAuthHandler_create);

  jobject ret =
      env->CallStaticObjectMethod(ChromeHttpAuthHandler_clazz(env),
          method_id, nativeChromeHttpAuthHandler);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ChromeHttpAuthHandler_showDialog = 0;
static void Java_ChromeHttpAuthHandler_showDialog(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& windowAndroid) {
  CHECK_CLAZZ(env, obj.obj(),
      ChromeHttpAuthHandler_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ChromeHttpAuthHandler_clazz(env),
      "showDialog",

"("
"Lorg/chromium/ui/base/WindowAndroid;"
")"
"V",
      &g_ChromeHttpAuthHandler_showDialog);

     env->CallVoidMethod(obj.obj(),
          method_id, windowAndroid.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ChromeHttpAuthHandler_onAutofillDataAvailable
    = 0;
static void Java_ChromeHttpAuthHandler_onAutofillDataAvailable(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& username,
    const base::android::JavaRefOrBare<jstring>& password) {
  CHECK_CLAZZ(env, obj.obj(),
      ChromeHttpAuthHandler_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ChromeHttpAuthHandler_clazz(env),
      "onAutofillDataAvailable",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_ChromeHttpAuthHandler_onAutofillDataAvailable);

     env->CallVoidMethod(obj.obj(),
          method_id, username.obj(), password.obj());
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsChromeHttpAuthHandler[] = {
    { "nativeSetAuth",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_ChromeHttpAuthHandler_nativeSetAuth)
    },
    { "nativeCancelAuth",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_ChromeHttpAuthHandler_nativeCancelAuth)
    },
    { "nativeGetMessageBody",
"("
"J"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_ChromeHttpAuthHandler_nativeGetMessageBody)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsChromeHttpAuthHandlerSize =
      arraysize(kMethodsChromeHttpAuthHandler);

  if (env->RegisterNatives(ChromeHttpAuthHandler_clazz(env),
                           kMethodsChromeHttpAuthHandler,
                           kMethodsChromeHttpAuthHandlerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ChromeHttpAuthHandler_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_ChromeHttpAuthHandler_JNI
