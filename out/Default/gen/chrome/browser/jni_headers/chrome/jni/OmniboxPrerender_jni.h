// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/omnibox/OmniboxPrerender

#ifndef org_chromium_chrome_browser_omnibox_OmniboxPrerender_JNI
#define org_chromium_chrome_browser_omnibox_OmniboxPrerender_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kOmniboxPrerenderClassPath[] =
    "org/chromium/chrome/browser/omnibox/OmniboxPrerender";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_OmniboxPrerender_clazz __attribute__((unused)) = 0;
#define OmniboxPrerender_clazz(env) base::android::LazyGetClass(env, kOmniboxPrerenderClassPath, &g_OmniboxPrerender_clazz)

}  // namespace

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_omnibox_OmniboxPrerender_nativeInit(JNIEnv*
    env, jobject jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_omnibox_OmniboxPrerender_nativeClear(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOmniboxPrerender,
    jobject profile) {
  OmniboxPrerender* native =
      reinterpret_cast<OmniboxPrerender*>(nativeOmniboxPrerender);
  CHECK_NATIVE_PTR(env, jcaller, native, "Clear");
  return native->Clear(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_omnibox_OmniboxPrerender_nativeInitializeForProfile(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOmniboxPrerender,
    jobject profile) {
  OmniboxPrerender* native =
      reinterpret_cast<OmniboxPrerender*>(nativeOmniboxPrerender);
  CHECK_NATIVE_PTR(env, jcaller, native, "InitializeForProfile");
  return native->InitializeForProfile(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_omnibox_OmniboxPrerender_nativePrerenderMaybe(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeOmniboxPrerender,
    jstring url,
    jstring currentUrl,
    jlong nativeAutocompleteResult,
    jobject profile,
    jobject tab) {
  OmniboxPrerender* native =
      reinterpret_cast<OmniboxPrerender*>(nativeOmniboxPrerender);
  CHECK_NATIVE_PTR(env, jcaller, native, "PrerenderMaybe");
  return native->PrerenderMaybe(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, url),
      base::android::JavaParamRef<jstring>(env, currentUrl),
      nativeAutocompleteResult, base::android::JavaParamRef<jobject>(env,
      profile), base::android::JavaParamRef<jobject>(env, tab));
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsOmniboxPrerender[] = {
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_omnibox_OmniboxPrerender_nativeInit)
    },
    { "nativeClear",
"("
"J"
"Lorg/chromium/chrome/browser/profiles/Profile;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_omnibox_OmniboxPrerender_nativeClear)
    },
    { "nativeInitializeForProfile",
"("
"J"
"Lorg/chromium/chrome/browser/profiles/Profile;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_omnibox_OmniboxPrerender_nativeInitializeForProfile)
    },
    { "nativePrerenderMaybe",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
"Lorg/chromium/chrome/browser/profiles/Profile;"
"Lorg/chromium/chrome/browser/tab/Tab;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_omnibox_OmniboxPrerender_nativePrerenderMaybe)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsOmniboxPrerenderSize = arraysize(kMethodsOmniboxPrerender);

  if (env->RegisterNatives(OmniboxPrerender_clazz(env),
                           kMethodsOmniboxPrerender,
                           kMethodsOmniboxPrerenderSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, OmniboxPrerender_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_omnibox_OmniboxPrerender_JNI
