// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/compositor/layouts/content/TabContentManager

#ifndef org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_JNI
#define org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kTabContentManagerClassPath[] =
    "org/chromium/chrome/browser/compositor/layouts/content/TabContentManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_TabContentManager_clazz __attribute__((unused)) = 0;
#define TabContentManager_clazz(env) base::android::LazyGetClass(env, kTabContentManagerClassPath, &g_TabContentManager_clazz)

}  // namespace

namespace chrome {
namespace android {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    jint defaultCacheSize,
    jint approximationCacheSize,
    jint compressionQueueMaxSize,
    jint writeQueueMaxSize,
    jboolean useApproximationThumbnail);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeInit(JNIEnv*
    env, jobject jcaller,
    jint defaultCacheSize,
    jint approximationCacheSize,
    jint compressionQueueMaxSize,
    jint writeQueueMaxSize,
    jboolean useApproximationThumbnail) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
      defaultCacheSize, approximationCacheSize, compressionQueueMaxSize,
      writeQueueMaxSize, useApproximationThumbnail);
}

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeHasFullCachedThumbnail(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTabContentManager,
    jint tabId) {
  TabContentManager* native =
      reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasFullCachedThumbnail", false);
  return native->HasFullCachedThumbnail(env,
      base::android::JavaParamRef<jobject>(env, jcaller), tabId);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeCacheTab(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTabContentManager,
    jobject tab,
    jfloat thumbnailScale) {
  TabContentManager* native =
      reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "CacheTab");
  return native->CacheTab(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, tab), thumbnailScale);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeCacheTabWithBitmap(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTabContentManager,
    jobject tab,
    jobject bitmap,
    jfloat thumbnailScale) {
  TabContentManager* native =
      reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "CacheTabWithBitmap");
  return native->CacheTabWithBitmap(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, tab),
      base::android::JavaParamRef<jobject>(env, bitmap), thumbnailScale);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeInvalidateIfChanged(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTabContentManager,
    jint tabId,
    jstring url) {
  TabContentManager* native =
      reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "InvalidateIfChanged");
  return native->InvalidateIfChanged(env,
      base::android::JavaParamRef<jobject>(env, jcaller), tabId,
      base::android::JavaParamRef<jstring>(env, url));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeUpdateVisibleIds(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTabContentManager,
    jintArray priority) {
  TabContentManager* native =
      reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateVisibleIds");
  return native->UpdateVisibleIds(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jintArray>(env, priority));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeRemoveTabThumbnail(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTabContentManager,
    jint tabId) {
  TabContentManager* native =
      reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveTabThumbnail");
  return native->RemoveTabThumbnail(env,
      base::android::JavaParamRef<jobject>(env, jcaller), tabId);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeGetDecompressedThumbnail(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTabContentManager,
    jint tabId) {
  TabContentManager* native =
      reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetDecompressedThumbnail");
  return native->GetDecompressedThumbnail(env,
      base::android::JavaParamRef<jobject>(env, jcaller), tabId);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeDestroy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeTabContentManager) {
  TabContentManager* native =
      reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

static base::subtle::AtomicWord g_TabContentManager_getNativePtr = 0;
static jlong Java_TabContentManager_getNativePtr(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      TabContentManager_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabContentManager_clazz(env),
      "getNativePtr",

"("
")"
"J",
      &g_TabContentManager_getNativePtr);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_TabContentManager_notifyDecompressBitmapFinished = 0;
static void Java_TabContentManager_notifyDecompressBitmapFinished(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper tabId,
    const base::android::JavaRefOrBare<jobject>& bitmap) {
  CHECK_CLAZZ(env, obj.obj(),
      TabContentManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabContentManager_clazz(env),
      "notifyDecompressBitmapFinished",

"("
"I"
"Landroid/graphics/Bitmap;"
")"
"V",
      &g_TabContentManager_notifyDecompressBitmapFinished);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(tabId), bitmap.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_TabContentManager_notifyListenersOfThumbnailChange = 0;
static void Java_TabContentManager_notifyListenersOfThumbnailChange(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper tabId) {
  CHECK_CLAZZ(env, obj.obj(),
      TabContentManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, TabContentManager_clazz(env),
      "notifyListenersOfThumbnailChange",

"("
"I"
")"
"V",
      &g_TabContentManager_notifyListenersOfThumbnailChange);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(tabId));
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsTabContentManager[] = {
    { "nativeInit",
"("
"I"
"I"
"I"
"I"
"Z"
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeInit)
    },
    { "nativeHasFullCachedThumbnail",
"("
"J"
"I"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeHasFullCachedThumbnail)
    },
    { "nativeCacheTab",
"("
"J"
"Ljava/lang/Object;"
"F"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeCacheTab)
    },
    { "nativeCacheTabWithBitmap",
"("
"J"
"Ljava/lang/Object;"
"Ljava/lang/Object;"
"F"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeCacheTabWithBitmap)
    },
    { "nativeInvalidateIfChanged",
"("
"J"
"I"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeInvalidateIfChanged)
    },
    { "nativeUpdateVisibleIds",
"("
"J"
"[I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeUpdateVisibleIds)
    },
    { "nativeRemoveTabThumbnail",
"("
"J"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeRemoveTabThumbnail)
    },
    { "nativeGetDecompressedThumbnail",
"("
"J"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeGetDecompressedThumbnail)
    },
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_nativeDestroy)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsTabContentManagerSize =
      arraysize(kMethodsTabContentManager);

  if (env->RegisterNatives(TabContentManager_clazz(env),
                           kMethodsTabContentManager,
                           kMethodsTabContentManagerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, TabContentManager_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_JNI
