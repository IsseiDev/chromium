// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/password_manager/AccountChooserDialog

#ifndef org_chromium_chrome_browser_password_manager_AccountChooserDialog_JNI
#define org_chromium_chrome_browser_password_manager_AccountChooserDialog_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAccountChooserDialogClassPath[] =
    "org/chromium/chrome/browser/password_manager/AccountChooserDialog";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AccountChooserDialog_clazz __attribute__((unused)) =
    0;
#define AccountChooserDialog_clazz(env) base::android::LazyGetClass(env, kAccountChooserDialogClassPath, &g_AccountChooserDialog_clazz)

}  // namespace

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_password_1manager_AccountChooserDialog_nativeOnCredentialClicked(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeAccountChooserDialogAndroid,
    jint credentialId,
    jint credentialType,
    jboolean signinButtonClicked) {
  AccountChooserDialogAndroid* native =
      reinterpret_cast<AccountChooserDialogAndroid*>(nativeAccountChooserDialogAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnCredentialClicked");
  return native->OnCredentialClicked(env,
      base::android::JavaParamRef<jobject>(env, jcaller), credentialId,
      credentialType, signinButtonClicked);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_password_1manager_AccountChooserDialog_nativeCancelDialog(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeAccountChooserDialogAndroid) {
  AccountChooserDialogAndroid* native =
      reinterpret_cast<AccountChooserDialogAndroid*>(nativeAccountChooserDialogAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CancelDialog");
  return native->CancelDialog(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_password_1manager_AccountChooserDialog_nativeDestroy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeAccountChooserDialogAndroid) {
  AccountChooserDialogAndroid* native =
      reinterpret_cast<AccountChooserDialogAndroid*>(nativeAccountChooserDialogAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_password_1manager_AccountChooserDialog_nativeOnLinkClicked(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeAccountChooserDialogAndroid) {
  AccountChooserDialogAndroid* native =
      reinterpret_cast<AccountChooserDialogAndroid*>(nativeAccountChooserDialogAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnLinkClicked");
  return native->OnLinkClicked(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

static base::subtle::AtomicWord
    g_AccountChooserDialog_createAndShowAccountChooser = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_AccountChooserDialog_createAndShowAccountChooser(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& windowAndroid,
    jlong nativeAccountChooserDialog,
    const base::android::JavaRefOrBare<jobjectArray>& credentials,
    const base::android::JavaRefOrBare<jstring>& title,
    JniIntWrapper titleLinkStart,
    JniIntWrapper titleLinkEnd,
    const base::android::JavaRefOrBare<jstring>& origin,
    const base::android::JavaRefOrBare<jstring>& signinButtonText) {
  CHECK_CLAZZ(env, AccountChooserDialog_clazz(env),
      AccountChooserDialog_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, AccountChooserDialog_clazz(env),
      "createAndShowAccountChooser",

"("
"Lorg/chromium/ui/base/WindowAndroid;"
"J"
"[Lorg/chromium/chrome/browser/password_manager/Credential;"
"Ljava/lang/String;"
"I"
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Lorg/chromium/chrome/browser/password_manager/AccountChooserDialog;",
      &g_AccountChooserDialog_createAndShowAccountChooser);

  jobject ret =
      env->CallStaticObjectMethod(AccountChooserDialog_clazz(env),
          method_id, windowAndroid.obj(), nativeAccountChooserDialog,
              credentials.obj(), title.obj(), as_jint(titleLinkStart),
              as_jint(titleLinkEnd), origin.obj(), signinButtonText.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_AccountChooserDialog_imageFetchComplete = 0;
static void Java_AccountChooserDialog_imageFetchComplete(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper index,
    const base::android::JavaRefOrBare<jobject>& avatarBitmap) {
  CHECK_CLAZZ(env, obj.obj(),
      AccountChooserDialog_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, AccountChooserDialog_clazz(env),
      "imageFetchComplete",

"("
"I"
"Landroid/graphics/Bitmap;"
")"
"V",
      &g_AccountChooserDialog_imageFetchComplete);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(index), avatarBitmap.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_AccountChooserDialog_dismissDialog = 0;
static void Java_AccountChooserDialog_dismissDialog(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      AccountChooserDialog_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, AccountChooserDialog_clazz(env),
      "dismissDialog",

"("
")"
"V",
      &g_AccountChooserDialog_dismissDialog);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAccountChooserDialog[] = {
    { "nativeOnCredentialClicked",
"("
"J"
"I"
"I"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_password_1manager_AccountChooserDialog_nativeOnCredentialClicked)
    },
    { "nativeCancelDialog",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_password_1manager_AccountChooserDialog_nativeCancelDialog)
    },
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_password_1manager_AccountChooserDialog_nativeDestroy)
    },
    { "nativeOnLinkClicked",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_password_1manager_AccountChooserDialog_nativeOnLinkClicked)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsAccountChooserDialogSize =
      arraysize(kMethodsAccountChooserDialog);

  if (env->RegisterNatives(AccountChooserDialog_clazz(env),
                           kMethodsAccountChooserDialog,
                           kMethodsAccountChooserDialogSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, AccountChooserDialog_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_password_manager_AccountChooserDialog_JNI
