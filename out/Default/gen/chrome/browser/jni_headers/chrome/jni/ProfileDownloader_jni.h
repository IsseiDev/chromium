// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/profiles/ProfileDownloader

#ifndef org_chromium_chrome_browser_profiles_ProfileDownloader_JNI
#define org_chromium_chrome_browser_profiles_ProfileDownloader_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kProfileDownloaderClassPath[] =
    "org/chromium/chrome/browser/profiles/ProfileDownloader";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ProfileDownloader_clazz __attribute__((unused)) = 0;
#define ProfileDownloader_clazz(env) base::android::LazyGetClass(env, kProfileDownloaderClassPath, &g_ProfileDownloader_clazz)

}  // namespace

// Step 2: method stubs.

static void StartFetchingAccountInfoFor(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& profile,
    const base::android::JavaParamRef<jstring>& accountId,
    jint imageSidePixels,
    jboolean isPreSignin);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_profiles_ProfileDownloader_nativeStartFetchingAccountInfoFor(JNIEnv*
    env, jclass jcaller,
    jobject profile,
    jstring accountId,
    jint imageSidePixels,
    jboolean isPreSignin) {
  return StartFetchingAccountInfoFor(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile),
      base::android::JavaParamRef<jstring>(env, accountId), imageSidePixels,
      isPreSignin);
}

static base::android::ScopedJavaLocalRef<jstring>
    GetCachedFullNameForPrimaryAccount(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& profile);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_profiles_ProfileDownloader_nativeGetCachedFullNameForPrimaryAccount(JNIEnv*
    env, jclass jcaller,
    jobject profile) {
  return GetCachedFullNameForPrimaryAccount(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile)).Release();
}

static base::android::ScopedJavaLocalRef<jstring>
    GetCachedGivenNameForPrimaryAccount(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& profile);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_profiles_ProfileDownloader_nativeGetCachedGivenNameForPrimaryAccount(JNIEnv*
    env, jclass jcaller,
    jobject profile) {
  return GetCachedGivenNameForPrimaryAccount(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile)).Release();
}

static base::android::ScopedJavaLocalRef<jobject>
    GetCachedAvatarForPrimaryAccount(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& profile);

extern "C" __attribute__((visibility("default")))
jobject
    Java_org_chromium_chrome_browser_profiles_ProfileDownloader_nativeGetCachedAvatarForPrimaryAccount(JNIEnv*
    env, jclass jcaller,
    jobject profile) {
  return GetCachedAvatarForPrimaryAccount(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile)).Release();
}

static base::subtle::AtomicWord g_ProfileDownloader_onProfileDownloadSuccess =
    0;
static void Java_ProfileDownloader_onProfileDownloadSuccess(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& accountId,
    const base::android::JavaRefOrBare<jstring>& fullName,
    const base::android::JavaRefOrBare<jstring>& givenName,
    const base::android::JavaRefOrBare<jobject>& bitmap) {
  CHECK_CLAZZ(env, ProfileDownloader_clazz(env),
      ProfileDownloader_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ProfileDownloader_clazz(env),
      "onProfileDownloadSuccess",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Landroid/graphics/Bitmap;"
")"
"V",
      &g_ProfileDownloader_onProfileDownloadSuccess);

     env->CallStaticVoidMethod(ProfileDownloader_clazz(env),
          method_id, accountId.obj(), fullName.obj(), givenName.obj(),
              bitmap.obj());
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsProfileDownloader[] = {
    { "nativeStartFetchingAccountInfoFor",
"("
"Lorg/chromium/chrome/browser/profiles/Profile;"
"Ljava/lang/String;"
"I"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_profiles_ProfileDownloader_nativeStartFetchingAccountInfoFor)
    },
    { "nativeGetCachedFullNameForPrimaryAccount",
"("
"Lorg/chromium/chrome/browser/profiles/Profile;"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_profiles_ProfileDownloader_nativeGetCachedFullNameForPrimaryAccount)
    },
    { "nativeGetCachedGivenNameForPrimaryAccount",
"("
"Lorg/chromium/chrome/browser/profiles/Profile;"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_profiles_ProfileDownloader_nativeGetCachedGivenNameForPrimaryAccount)
    },
    { "nativeGetCachedAvatarForPrimaryAccount",
"("
"Lorg/chromium/chrome/browser/profiles/Profile;"
")"
"Landroid/graphics/Bitmap;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_profiles_ProfileDownloader_nativeGetCachedAvatarForPrimaryAccount)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsProfileDownloaderSize =
      arraysize(kMethodsProfileDownloader);

  if (env->RegisterNatives(ProfileDownloader_clazz(env),
                           kMethodsProfileDownloader,
                           kMethodsProfileDownloaderSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ProfileDownloader_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_profiles_ProfileDownloader_JNI
