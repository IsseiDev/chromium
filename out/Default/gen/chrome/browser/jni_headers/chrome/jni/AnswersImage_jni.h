// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/omnibox/AnswersImage

#ifndef org_chromium_chrome_browser_omnibox_AnswersImage_JNI
#define org_chromium_chrome_browser_omnibox_AnswersImage_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAnswersImageObserverClassPath[] =
    "org/chromium/chrome/browser/omnibox/AnswersImage$AnswersImageObserver";
const char kAnswersImageClassPath[] =
    "org/chromium/chrome/browser/omnibox/AnswersImage";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AnswersImageObserver_clazz __attribute__((unused)) =
    0;
#define AnswersImageObserver_clazz(env) base::android::LazyGetClass(env, kAnswersImageObserverClassPath, &g_AnswersImageObserver_clazz)
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AnswersImage_clazz __attribute__((unused)) = 0;
#define AnswersImage_clazz(env) base::android::LazyGetClass(env, kAnswersImageClassPath, &g_AnswersImage_clazz)

}  // namespace

// Step 2: method stubs.

static jint RequestAnswersImage(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& profile,
    const base::android::JavaParamRef<jstring>& imageUrl,
    const base::android::JavaParamRef<jobject>& observer);

extern "C" __attribute__((visibility("default")))
jint
    Java_org_chromium_chrome_browser_omnibox_AnswersImage_nativeRequestAnswersImage(JNIEnv*
    env, jclass jcaller,
    jobject profile,
    jstring imageUrl,
    jobject observer) {
  return RequestAnswersImage(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, profile),
      base::android::JavaParamRef<jstring>(env, imageUrl),
      base::android::JavaParamRef<jobject>(env, observer));
}

static void CancelAnswersImageRequest(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& profile,
    jint requestId);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_omnibox_AnswersImage_nativeCancelAnswersImageRequest(JNIEnv*
    env, jclass jcaller,
    jobject profile,
    jint requestId) {
  return CancelAnswersImageRequest(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, profile), requestId);
}

static base::subtle::AtomicWord g_AnswersImageObserver_onAnswersImageChanged =
    0;
static void Java_AnswersImageObserver_onAnswersImageChanged(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& bitmap) {
  CHECK_CLAZZ(env, obj.obj(),
      AnswersImageObserver_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, AnswersImageObserver_clazz(env),
      "onAnswersImageChanged",

"("
"Landroid/graphics/Bitmap;"
")"
"V",
      &g_AnswersImageObserver_onAnswersImageChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, bitmap.obj());
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAnswersImage[] = {
    { "nativeRequestAnswersImage",
"("
"Lorg/chromium/chrome/browser/profiles/Profile;"
"Ljava/lang/String;"
"Lorg/chromium/chrome/browser/omnibox/AnswersImage$AnswersImageObserver;"
")"
"I",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_omnibox_AnswersImage_nativeRequestAnswersImage)
    },
    { "nativeCancelAnswersImageRequest",
"("
"Lorg/chromium/chrome/browser/profiles/Profile;"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_omnibox_AnswersImage_nativeCancelAnswersImageRequest)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsAnswersImageSize = arraysize(kMethodsAnswersImage);

  if (env->RegisterNatives(AnswersImage_clazz(env),
                           kMethodsAnswersImage,
                           kMethodsAnswersImageSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, AnswersImage_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_omnibox_AnswersImage_JNI
