// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/historyreport/HistoryReportJniBridge

#ifndef org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_JNI
#define org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kHistoryReportJniBridgeClassPath[] =
    "org/chromium/chrome/browser/historyreport/HistoryReportJniBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_HistoryReportJniBridge_clazz __attribute__((unused))
    = 0;
#define HistoryReportJniBridge_clazz(env) base::android::LazyGetClass(env, kHistoryReportJniBridgeClassPath, &g_HistoryReportJniBridge_clazz)

}  // namespace

namespace history_report {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_nativeInit(JNIEnv*
    env, jobject jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_nativeTrimDeltaFile(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeHistoryReportJniBridge,
    jlong seqNoLowerBound) {
  HistoryReportJniBridge* native =
      reinterpret_cast<HistoryReportJniBridge*>(nativeHistoryReportJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "TrimDeltaFile", 0);
  return native->TrimDeltaFile(env, base::android::JavaParamRef<jobject>(env,
      jcaller), seqNoLowerBound);
}

extern "C" __attribute__((visibility("default")))
jobjectArray
    Java_org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_nativeQuery(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeHistoryReportJniBridge,
    jlong lastSeqNo,
    jint limit) {
  HistoryReportJniBridge* native =
      reinterpret_cast<HistoryReportJniBridge*>(nativeHistoryReportJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Query", NULL);
  return native->Query(env, base::android::JavaParamRef<jobject>(env, jcaller),
      lastSeqNo, limit).Release();
}

extern "C" __attribute__((visibility("default")))
jobjectArray
    Java_org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_nativeGetUsageReportsBatch(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeHistoryReportJniBridge,
    jint batchSize) {
  HistoryReportJniBridge* native =
      reinterpret_cast<HistoryReportJniBridge*>(nativeHistoryReportJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetUsageReportsBatch", NULL);
  return native->GetUsageReportsBatch(env,
      base::android::JavaParamRef<jobject>(env, jcaller), batchSize).Release();
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_nativeRemoveUsageReports(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeHistoryReportJniBridge,
    jobjectArray reportIds) {
  HistoryReportJniBridge* native =
      reinterpret_cast<HistoryReportJniBridge*>(nativeHistoryReportJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveUsageReports");
  return native->RemoveUsageReports(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobjectArray>(env, reportIds));
}

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_nativeAddHistoricVisitsToUsageReportsBuffer(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeHistoryReportJniBridge) {
  HistoryReportJniBridge* native =
      reinterpret_cast<HistoryReportJniBridge*>(nativeHistoryReportJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native,
      "AddHistoricVisitsToUsageReportsBuffer", false);
  return native->AddHistoricVisitsToUsageReportsBuffer(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_nativeDump(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeHistoryReportJniBridge) {
  HistoryReportJniBridge* native =
      reinterpret_cast<HistoryReportJniBridge*>(nativeHistoryReportJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Dump", NULL);
  return native->Dump(env, base::android::JavaParamRef<jobject>(env,
      jcaller)).Release();
}

static base::subtle::AtomicWord
    g_HistoryReportJniBridge_createDeltaFileEntriesArray = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_HistoryReportJniBridge_createDeltaFileEntriesArray(JNIEnv* env,
    JniIntWrapper size) {
  CHECK_CLAZZ(env, HistoryReportJniBridge_clazz(env),
      HistoryReportJniBridge_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, HistoryReportJniBridge_clazz(env),
      "createDeltaFileEntriesArray",

"("
"I"
")"
"[Lorg/chromium/chrome/browser/historyreport/DeltaFileEntry;",
      &g_HistoryReportJniBridge_createDeltaFileEntriesArray);

  jobjectArray ret =
static_cast<jobjectArray>(env->CallStaticObjectMethod(HistoryReportJniBridge_clazz(env),
          method_id, as_jint(size)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord g_HistoryReportJniBridge_setDeltaFileEntry = 0;
static void Java_HistoryReportJniBridge_setDeltaFileEntry(JNIEnv* env, const
    base::android::JavaRefOrBare<jobjectArray>& entries,
    JniIntWrapper position,
    jlong seqNo,
    const base::android::JavaRefOrBare<jstring>& type,
    const base::android::JavaRefOrBare<jstring>& id,
    const base::android::JavaRefOrBare<jstring>& url,
    JniIntWrapper score,
    const base::android::JavaRefOrBare<jstring>& title,
    const base::android::JavaRefOrBare<jstring>& indexedUrl) {
  CHECK_CLAZZ(env, HistoryReportJniBridge_clazz(env),
      HistoryReportJniBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, HistoryReportJniBridge_clazz(env),
      "setDeltaFileEntry",

"("
"[Lorg/chromium/chrome/browser/historyreport/DeltaFileEntry;"
"I"
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_HistoryReportJniBridge_setDeltaFileEntry);

     env->CallStaticVoidMethod(HistoryReportJniBridge_clazz(env),
          method_id, entries.obj(), as_jint(position), seqNo, type.obj(),
              id.obj(), url.obj(), as_jint(score), title.obj(),
              indexedUrl.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_HistoryReportJniBridge_createUsageReportsArray
    = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_HistoryReportJniBridge_createUsageReportsArray(JNIEnv* env,
    JniIntWrapper size) {
  CHECK_CLAZZ(env, HistoryReportJniBridge_clazz(env),
      HistoryReportJniBridge_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, HistoryReportJniBridge_clazz(env),
      "createUsageReportsArray",

"("
"I"
")"
"[Lorg/chromium/chrome/browser/historyreport/UsageReport;",
      &g_HistoryReportJniBridge_createUsageReportsArray);

  jobjectArray ret =
static_cast<jobjectArray>(env->CallStaticObjectMethod(HistoryReportJniBridge_clazz(env),
          method_id, as_jint(size)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord g_HistoryReportJniBridge_setUsageReport = 0;
static void Java_HistoryReportJniBridge_setUsageReport(JNIEnv* env, const
    base::android::JavaRefOrBare<jobjectArray>& reports,
    JniIntWrapper position,
    const base::android::JavaRefOrBare<jstring>& reportId,
    const base::android::JavaRefOrBare<jstring>& pageId,
    jlong timestampMs,
    jboolean typedVisit) {
  CHECK_CLAZZ(env, HistoryReportJniBridge_clazz(env),
      HistoryReportJniBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, HistoryReportJniBridge_clazz(env),
      "setUsageReport",

"("
"[Lorg/chromium/chrome/browser/historyreport/UsageReport;"
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
"Z"
")"
"V",
      &g_HistoryReportJniBridge_setUsageReport);

     env->CallStaticVoidMethod(HistoryReportJniBridge_clazz(env),
          method_id, reports.obj(), as_jint(position), reportId.obj(),
              pageId.obj(), timestampMs, typedVisit);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_HistoryReportJniBridge_onDataChanged = 0;
static void Java_HistoryReportJniBridge_onDataChanged(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      HistoryReportJniBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, HistoryReportJniBridge_clazz(env),
      "onDataChanged",

"("
")"
"V",
      &g_HistoryReportJniBridge_onDataChanged);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_HistoryReportJniBridge_onDataCleared = 0;
static void Java_HistoryReportJniBridge_onDataCleared(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      HistoryReportJniBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, HistoryReportJniBridge_clazz(env),
      "onDataCleared",

"("
")"
"V",
      &g_HistoryReportJniBridge_onDataCleared);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_HistoryReportJniBridge_startReportingTask = 0;
static void Java_HistoryReportJniBridge_startReportingTask(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      HistoryReportJniBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, HistoryReportJniBridge_clazz(env),
      "startReportingTask",

"("
")"
"V",
      &g_HistoryReportJniBridge_startReportingTask);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_HistoryReportJniBridge_stopReportingTask = 0;
static void Java_HistoryReportJniBridge_stopReportingTask(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      HistoryReportJniBridge_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, HistoryReportJniBridge_clazz(env),
      "stopReportingTask",

"("
")"
"V",
      &g_HistoryReportJniBridge_stopReportingTask);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsHistoryReportJniBridge[] = {
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_nativeInit)
    },
    { "nativeTrimDeltaFile",
"("
"J"
"J"
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_nativeTrimDeltaFile)
    },
    { "nativeQuery",
"("
"J"
"J"
"I"
")"
"[Lorg/chromium/chrome/browser/historyreport/DeltaFileEntry;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_nativeQuery)
    },
    { "nativeGetUsageReportsBatch",
"("
"J"
"I"
")"
"[Lorg/chromium/chrome/browser/historyreport/UsageReport;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_nativeGetUsageReportsBatch)
    },
    { "nativeRemoveUsageReports",
"("
"J"
"[Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_nativeRemoveUsageReports)
    },
    { "nativeAddHistoricVisitsToUsageReportsBuffer",
"("
"J"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_nativeAddHistoricVisitsToUsageReportsBuffer)
    },
    { "nativeDump",
"("
"J"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_nativeDump)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsHistoryReportJniBridgeSize =
      arraysize(kMethodsHistoryReportJniBridge);

  if (env->RegisterNatives(HistoryReportJniBridge_clazz(env),
                           kMethodsHistoryReportJniBridge,
                           kMethodsHistoryReportJniBridgeSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, HistoryReportJniBridge_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace history_report

#endif  // org_chromium_chrome_browser_historyreport_HistoryReportJniBridge_JNI
