// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/ntp/LogoBridge

#ifndef org_chromium_chrome_browser_ntp_LogoBridge_JNI
#define org_chromium_chrome_browser_ntp_LogoBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kLogoBridgeClassPath[] =
    "org/chromium/chrome/browser/ntp/LogoBridge";
const char kAnimatedLogoCallbackClassPath[] =
    "org/chromium/chrome/browser/ntp/LogoBridge$AnimatedLogoCallback";
const char kLogoObserverClassPath[] =
    "org/chromium/chrome/browser/ntp/LogoBridge$LogoObserver";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_LogoBridge_clazz __attribute__((unused)) = 0;
#define LogoBridge_clazz(env) base::android::LazyGetClass(env, kLogoBridgeClassPath, &g_LogoBridge_clazz)
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AnimatedLogoCallback_clazz __attribute__((unused)) =
    0;
#define AnimatedLogoCallback_clazz(env) base::android::LazyGetClass(env, kAnimatedLogoCallbackClassPath, &g_AnimatedLogoCallback_clazz)
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_LogoObserver_clazz __attribute__((unused)) = 0;
#define LogoObserver_clazz(env) base::android::LazyGetClass(env, kLogoObserverClassPath, &g_LogoObserver_clazz)

}  // namespace

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    const base::android::JavaParamRef<jobject>& profile);

extern "C" __attribute__((visibility("default")))
jlong Java_org_chromium_chrome_browser_ntp_LogoBridge_nativeInit(JNIEnv* env,
    jobject jcaller,
    jobject profile) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_ntp_LogoBridge_nativeGetCurrentLogo(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeLogoBridge,
    jobject logoObserver) {
  LogoBridge* native = reinterpret_cast<LogoBridge*>(nativeLogoBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCurrentLogo");
  return native->GetCurrentLogo(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, logoObserver));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_ntp_LogoBridge_nativeGetAnimatedLogo(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeLogoBridge,
    jobject callback,
    jstring gifUrl) {
  LogoBridge* native = reinterpret_cast<LogoBridge*>(nativeLogoBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetAnimatedLogo");
  return native->GetAnimatedLogo(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, callback),
      base::android::JavaParamRef<jstring>(env, gifUrl));
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_chrome_browser_ntp_LogoBridge_nativeDestroy(JNIEnv* env,
    jobject jcaller,
    jlong nativeLogoBridge) {
  LogoBridge* native = reinterpret_cast<LogoBridge*>(nativeLogoBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

static base::subtle::AtomicWord g_LogoObserver_onLogoAvailable = 0;
static void Java_LogoObserver_onLogoAvailable(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& logo,
    jboolean fromCache) {
  CHECK_CLAZZ(env, obj.obj(),
      LogoObserver_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, LogoObserver_clazz(env),
      "onLogoAvailable",

"("
"Lorg/chromium/chrome/browser/ntp/LogoBridge$Logo;"
"Z"
")"
"V",
      &g_LogoObserver_onLogoAvailable);

     env->CallVoidMethod(obj.obj(),
          method_id, logo.obj(), fromCache);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_AnimatedLogoCallback_onAnimatedLogoAvailable =
    0;
static void Java_AnimatedLogoCallback_onAnimatedLogoAvailable(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& animatedLogoImage) {
  CHECK_CLAZZ(env, obj.obj(),
      AnimatedLogoCallback_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, AnimatedLogoCallback_clazz(env),
      "onAnimatedLogoAvailable",

"("
"Ljp/tomorrowkey/android/gifplayer/BaseGifImage;"
")"
"V",
      &g_AnimatedLogoCallback_onAnimatedLogoAvailable);

     env->CallVoidMethod(obj.obj(),
          method_id, animatedLogoImage.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_LogoBridge_createLogo = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LogoBridge_createLogo(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& image,
    const base::android::JavaRefOrBare<jstring>& onClickUrl,
    const base::android::JavaRefOrBare<jstring>& altText,
    const base::android::JavaRefOrBare<jstring>& gifUrl) {
  CHECK_CLAZZ(env, LogoBridge_clazz(env),
      LogoBridge_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, LogoBridge_clazz(env),
      "createLogo",

"("
"Landroid/graphics/Bitmap;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Lorg/chromium/chrome/browser/ntp/LogoBridge$Logo;",
      &g_LogoBridge_createLogo);

  jobject ret =
      env->CallStaticObjectMethod(LogoBridge_clazz(env),
          method_id, image.obj(), onClickUrl.obj(), altText.obj(),
              gifUrl.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_LogoBridge_createGifImage = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LogoBridge_createGifImage(JNIEnv* env, const
    base::android::JavaRefOrBare<jbyteArray>& bytes) {
  CHECK_CLAZZ(env, LogoBridge_clazz(env),
      LogoBridge_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, LogoBridge_clazz(env),
      "createGifImage",

"("
"[B"
")"
"Ljp/tomorrowkey/android/gifplayer/BaseGifImage;",
      &g_LogoBridge_createGifImage);

  jobject ret =
      env->CallStaticObjectMethod(LogoBridge_clazz(env),
          method_id, bytes.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsLogoBridge[] = {
    { "nativeInit",
"("
"Lorg/chromium/chrome/browser/profiles/Profile;"
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_ntp_LogoBridge_nativeInit)
    },
    { "nativeGetCurrentLogo",
"("
"J"
"Lorg/chromium/chrome/browser/ntp/LogoBridge$LogoObserver;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_ntp_LogoBridge_nativeGetCurrentLogo)
    },
    { "nativeGetAnimatedLogo",
"("
"J"
"Lorg/chromium/chrome/browser/ntp/LogoBridge$AnimatedLogoCallback;"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_ntp_LogoBridge_nativeGetAnimatedLogo)
    },
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_ntp_LogoBridge_nativeDestroy)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsLogoBridgeSize = arraysize(kMethodsLogoBridge);

  if (env->RegisterNatives(LogoBridge_clazz(env),
                           kMethodsLogoBridge,
                           kMethodsLogoBridgeSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, LogoBridge_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_ntp_LogoBridge_JNI
