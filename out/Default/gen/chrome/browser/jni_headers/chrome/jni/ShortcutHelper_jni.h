// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/ShortcutHelper

#ifndef org_chromium_chrome_browser_ShortcutHelper_JNI
#define org_chromium_chrome_browser_ShortcutHelper_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kShortcutHelperClassPath[] =
    "org/chromium/chrome/browser/ShortcutHelper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ShortcutHelper_clazz __attribute__((unused)) = 0;
#define ShortcutHelper_clazz(env) base::android::LazyGetClass(env, kShortcutHelperClassPath, &g_ShortcutHelper_clazz)

}  // namespace

// Step 2: method stubs.

static void OnWebappDataStored(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong callbackPointer);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_ShortcutHelper_nativeOnWebappDataStored(JNIEnv*
    env, jclass jcaller,
    jlong callbackPointer) {
  return OnWebappDataStored(env, base::android::JavaParamRef<jclass>(env,
      jcaller), callbackPointer);
}

static base::subtle::AtomicWord g_ShortcutHelper_addWebapp = 0;
static void Java_ShortcutHelper_addWebapp(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& id,
    const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& scopeUrl,
    const base::android::JavaRefOrBare<jstring>& userTitle,
    const base::android::JavaRefOrBare<jstring>& name,
    const base::android::JavaRefOrBare<jstring>& shortName,
    const base::android::JavaRefOrBare<jstring>& iconUrl,
    const base::android::JavaRefOrBare<jobject>& icon,
    JniIntWrapper displayMode,
    JniIntWrapper orientation,
    JniIntWrapper source,
    jlong themeColor,
    jlong backgroundColor,
    jlong callbackPointer) {
  CHECK_CLAZZ(env, ShortcutHelper_clazz(env),
      ShortcutHelper_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ShortcutHelper_clazz(env),
      "addWebapp",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Landroid/graphics/Bitmap;"
"I"
"I"
"I"
"J"
"J"
"J"
")"
"V",
      &g_ShortcutHelper_addWebapp);

     env->CallStaticVoidMethod(ShortcutHelper_clazz(env),
          method_id, id.obj(), url.obj(), scopeUrl.obj(), userTitle.obj(),
              name.obj(), shortName.obj(), iconUrl.obj(), icon.obj(),
              as_jint(displayMode), as_jint(orientation), as_jint(source),
              themeColor, backgroundColor, callbackPointer);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ShortcutHelper_addShortcut = 0;
static void Java_ShortcutHelper_addShortcut(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& userTitle,
    const base::android::JavaRefOrBare<jobject>& icon,
    JniIntWrapper source) {
  CHECK_CLAZZ(env, ShortcutHelper_clazz(env),
      ShortcutHelper_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ShortcutHelper_clazz(env),
      "addShortcut",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Landroid/graphics/Bitmap;"
"I"
")"
"V",
      &g_ShortcutHelper_addShortcut);

     env->CallStaticVoidMethod(ShortcutHelper_clazz(env),
          method_id, url.obj(), userTitle.obj(), icon.obj(), as_jint(source));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ShortcutHelper_storeWebappSplashImage = 0;
static void Java_ShortcutHelper_storeWebappSplashImage(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& id,
    const base::android::JavaRefOrBare<jobject>& splashImage) {
  CHECK_CLAZZ(env, ShortcutHelper_clazz(env),
      ShortcutHelper_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ShortcutHelper_clazz(env),
      "storeWebappSplashImage",

"("
"Ljava/lang/String;"
"Landroid/graphics/Bitmap;"
")"
"V",
      &g_ShortcutHelper_storeWebappSplashImage);

     env->CallStaticVoidMethod(ShortcutHelper_clazz(env),
          method_id, id.obj(), splashImage.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ShortcutHelper_isIconLargeEnoughForLauncher =
    0;
static jboolean Java_ShortcutHelper_isIconLargeEnoughForLauncher(JNIEnv* env,
    JniIntWrapper width,
    JniIntWrapper height) {
  CHECK_CLAZZ(env, ShortcutHelper_clazz(env),
      ShortcutHelper_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ShortcutHelper_clazz(env),
      "isIconLargeEnoughForLauncher",

"("
"I"
"I"
")"
"Z",
      &g_ShortcutHelper_isIconLargeEnoughForLauncher);

  jboolean ret =
      env->CallStaticBooleanMethod(ShortcutHelper_clazz(env),
          method_id, as_jint(width), as_jint(height));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ShortcutHelper_createHomeScreenIconFromWebIcon
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ShortcutHelper_createHomeScreenIconFromWebIcon(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& webIcon) {
  CHECK_CLAZZ(env, ShortcutHelper_clazz(env),
      ShortcutHelper_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ShortcutHelper_clazz(env),
      "createHomeScreenIconFromWebIcon",

"("
"Landroid/graphics/Bitmap;"
")"
"Landroid/graphics/Bitmap;",
      &g_ShortcutHelper_createHomeScreenIconFromWebIcon);

  jobject ret =
      env->CallStaticObjectMethod(ShortcutHelper_clazz(env),
          method_id, webIcon.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ShortcutHelper_generateHomeScreenIcon = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ShortcutHelper_generateHomeScreenIcon(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& url,
    JniIntWrapper red,
    JniIntWrapper green,
    JniIntWrapper blue) {
  CHECK_CLAZZ(env, ShortcutHelper_clazz(env),
      ShortcutHelper_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ShortcutHelper_clazz(env),
      "generateHomeScreenIcon",

"("
"Ljava/lang/String;"
"I"
"I"
"I"
")"
"Landroid/graphics/Bitmap;",
      &g_ShortcutHelper_generateHomeScreenIcon);

  jobject ret =
      env->CallStaticObjectMethod(ShortcutHelper_clazz(env),
          method_id, url.obj(), as_jint(red), as_jint(green), as_jint(blue));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ShortcutHelper_isWebApkInstalled = 0;
static jboolean Java_ShortcutHelper_isWebApkInstalled(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& url) {
  CHECK_CLAZZ(env, ShortcutHelper_clazz(env),
      ShortcutHelper_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ShortcutHelper_clazz(env),
      "isWebApkInstalled",

"("
"Ljava/lang/String;"
")"
"Z",
      &g_ShortcutHelper_isWebApkInstalled);

  jboolean ret =
      env->CallStaticBooleanMethod(ShortcutHelper_clazz(env),
          method_id, url.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ShortcutHelper_getScopeFromUrl = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_ShortcutHelper_getScopeFromUrl(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& url) {
  CHECK_CLAZZ(env, ShortcutHelper_clazz(env),
      ShortcutHelper_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ShortcutHelper_clazz(env),
      "getScopeFromUrl",

"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
      &g_ShortcutHelper_getScopeFromUrl);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(ShortcutHelper_clazz(env),
          method_id, url.obj()));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_ShortcutHelper_getHomeScreenIconAndSplashImageSizes = 0;
static base::android::ScopedJavaLocalRef<jintArray>
    Java_ShortcutHelper_getHomeScreenIconAndSplashImageSizes(JNIEnv* env) {
  CHECK_CLAZZ(env, ShortcutHelper_clazz(env),
      ShortcutHelper_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ShortcutHelper_clazz(env),
      "getHomeScreenIconAndSplashImageSizes",

"("
")"
"[I",
      &g_ShortcutHelper_getHomeScreenIconAndSplashImageSizes);

  jintArray ret =
static_cast<jintArray>(env->CallStaticObjectMethod(ShortcutHelper_clazz(env),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jintArray>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsShortcutHelper[] = {
    { "nativeOnWebappDataStored",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_ShortcutHelper_nativeOnWebappDataStored)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsShortcutHelperSize = arraysize(kMethodsShortcutHelper);

  if (env->RegisterNatives(ShortcutHelper_clazz(env),
                           kMethodsShortcutHelper,
                           kMethodsShortcutHelperSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ShortcutHelper_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_ShortcutHelper_JNI
