// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/metrics/UmaUtils

#ifndef org_chromium_chrome_browser_metrics_UmaUtils_JNI
#define org_chromium_chrome_browser_metrics_UmaUtils_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kUmaUtilsClassPath[] =
    "org/chromium/chrome/browser/metrics/UmaUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_UmaUtils_clazz __attribute__((unused)) = 0;
#define UmaUtils_clazz(env) base::android::LazyGetClass(env, kUmaUtilsClassPath, &g_UmaUtils_clazz)

}  // namespace

namespace chrome {
namespace android {

// Step 2: method stubs.

static void RecordMetricsReportingDefaultOptIn(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jboolean optIn);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_metrics_UmaUtils_nativeRecordMetricsReportingDefaultOptIn(JNIEnv*
    env, jclass jcaller,
    jboolean optIn) {
  return RecordMetricsReportingDefaultOptIn(env,
      base::android::JavaParamRef<jclass>(env, jcaller), optIn);
}

static base::subtle::AtomicWord g_UmaUtils_getMainEntryPointWallTime = 0;
static jlong Java_UmaUtils_getMainEntryPointWallTime(JNIEnv* env) {
  CHECK_CLAZZ(env, UmaUtils_clazz(env),
      UmaUtils_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, UmaUtils_clazz(env),
      "getMainEntryPointWallTime",

"("
")"
"J",
      &g_UmaUtils_getMainEntryPointWallTime);

  jlong ret =
      env->CallStaticLongMethod(UmaUtils_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsUmaUtils[] = {
    { "nativeRecordMetricsReportingDefaultOptIn",
"("
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_metrics_UmaUtils_nativeRecordMetricsReportingDefaultOptIn)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsUmaUtilsSize = arraysize(kMethodsUmaUtils);

  if (env->RegisterNatives(UmaUtils_clazz(env),
                           kMethodsUmaUtils,
                           kMethodsUmaUtilsSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, UmaUtils_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_metrics_UmaUtils_JNI
