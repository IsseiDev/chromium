// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/PasswordUIView

#ifndef org_chromium_chrome_browser_PasswordUIView_JNI
#define org_chromium_chrome_browser_PasswordUIView_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kPasswordUIViewClassPath[] =
    "org/chromium/chrome/browser/PasswordUIView";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_PasswordUIView_clazz __attribute__((unused)) = 0;
#define PasswordUIView_clazz(env) base::android::LazyGetClass(env, kPasswordUIViewClassPath, &g_PasswordUIView_clazz)

}  // namespace

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

extern "C" __attribute__((visibility("default")))
jlong Java_org_chromium_chrome_browser_PasswordUIView_nativeInit(JNIEnv* env,
    jobject jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_PasswordUIView_nativeUpdatePasswordLists(JNIEnv*
    env,
    jobject jcaller,
    jlong nativePasswordUIViewAndroid) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdatePasswordLists");
  return native->UpdatePasswordLists(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
jobject
    Java_org_chromium_chrome_browser_PasswordUIView_nativeGetSavedPasswordEntry(JNIEnv*
    env,
    jobject jcaller,
    jlong nativePasswordUIViewAndroid,
    jint index) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSavedPasswordEntry", NULL);
  return native->GetSavedPasswordEntry(env,
      base::android::JavaParamRef<jobject>(env, jcaller), index).Release();
}

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_PasswordUIView_nativeGetSavedPasswordException(JNIEnv*
    env,
    jobject jcaller,
    jlong nativePasswordUIViewAndroid,
    jint index) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSavedPasswordException", NULL);
  return native->GetSavedPasswordException(env,
      base::android::JavaParamRef<jobject>(env, jcaller), index).Release();
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_PasswordUIView_nativeHandleRemoveSavedPasswordEntry(JNIEnv*
    env,
    jobject jcaller,
    jlong nativePasswordUIViewAndroid,
    jint index) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HandleRemoveSavedPasswordEntry");
  return native->HandleRemoveSavedPasswordEntry(env,
      base::android::JavaParamRef<jobject>(env, jcaller), index);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_PasswordUIView_nativeHandleRemoveSavedPasswordException(JNIEnv*
    env,
    jobject jcaller,
    jlong nativePasswordUIViewAndroid,
    jint index) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HandleRemoveSavedPasswordException");
  return native->HandleRemoveSavedPasswordException(env,
      base::android::JavaParamRef<jobject>(env, jcaller), index);
}

static base::android::ScopedJavaLocalRef<jstring> GetAccountDashboardURL(JNIEnv*
    env, const base::android::JavaParamRef<jclass>& jcaller);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_PasswordUIView_nativeGetAccountDashboardURL(JNIEnv*
    env, jclass jcaller) {
  return GetAccountDashboardURL(env, base::android::JavaParamRef<jclass>(env,
      jcaller)).Release();
}

static jboolean ShouldUseSmartLockBranding(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_PasswordUIView_nativeShouldUseSmartLockBranding(JNIEnv*
    env, jclass jcaller) {
  return ShouldUseSmartLockBranding(env,
      base::android::JavaParamRef<jclass>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_chrome_browser_PasswordUIView_nativeDestroy(JNIEnv* env,
    jobject jcaller,
    jlong nativePasswordUIViewAndroid) {
  PasswordUIViewAndroid* native =
      reinterpret_cast<PasswordUIViewAndroid*>(nativePasswordUIViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

static base::subtle::AtomicWord g_PasswordUIView_createSavedPasswordEntry = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_PasswordUIView_createSavedPasswordEntry(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& name) {
  CHECK_CLAZZ(env, PasswordUIView_clazz(env),
      PasswordUIView_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, PasswordUIView_clazz(env),
      "createSavedPasswordEntry",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Lorg/chromium/chrome/browser/PasswordUIView$SavedPasswordEntry;",
      &g_PasswordUIView_createSavedPasswordEntry);

  jobject ret =
      env->CallStaticObjectMethod(PasswordUIView_clazz(env),
          method_id, url.obj(), name.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_PasswordUIView_passwordListAvailable = 0;
static void Java_PasswordUIView_passwordListAvailable(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper count) {
  CHECK_CLAZZ(env, obj.obj(),
      PasswordUIView_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PasswordUIView_clazz(env),
      "passwordListAvailable",

"("
"I"
")"
"V",
      &g_PasswordUIView_passwordListAvailable);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(count));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_PasswordUIView_passwordExceptionListAvailable
    = 0;
static void Java_PasswordUIView_passwordExceptionListAvailable(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper count) {
  CHECK_CLAZZ(env, obj.obj(),
      PasswordUIView_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PasswordUIView_clazz(env),
      "passwordExceptionListAvailable",

"("
"I"
")"
"V",
      &g_PasswordUIView_passwordExceptionListAvailable);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(count));
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsPasswordUIView[] = {
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_PasswordUIView_nativeInit)
    },
    { "nativeUpdatePasswordLists",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_PasswordUIView_nativeUpdatePasswordLists)
    },
    { "nativeGetSavedPasswordEntry",
"("
"J"
"I"
")"
"Lorg/chromium/chrome/browser/PasswordUIView$SavedPasswordEntry;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_PasswordUIView_nativeGetSavedPasswordEntry)
    },
    { "nativeGetSavedPasswordException",
"("
"J"
"I"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_PasswordUIView_nativeGetSavedPasswordException)
    },
    { "nativeHandleRemoveSavedPasswordEntry",
"("
"J"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_PasswordUIView_nativeHandleRemoveSavedPasswordEntry)
    },
    { "nativeHandleRemoveSavedPasswordException",
"("
"J"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_PasswordUIView_nativeHandleRemoveSavedPasswordException)
    },
    { "nativeGetAccountDashboardURL",
"("
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_PasswordUIView_nativeGetAccountDashboardURL)
    },
    { "nativeShouldUseSmartLockBranding",
"("
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_PasswordUIView_nativeShouldUseSmartLockBranding)
    },
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_PasswordUIView_nativeDestroy)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsPasswordUIViewSize = arraysize(kMethodsPasswordUIView);

  if (env->RegisterNatives(PasswordUIView_clazz(env),
                           kMethodsPasswordUIView,
                           kMethodsPasswordUIViewSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, PasswordUIView_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_PasswordUIView_JNI
