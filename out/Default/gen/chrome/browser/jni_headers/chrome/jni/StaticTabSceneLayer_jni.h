// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/compositor/scene_layer/StaticTabSceneLayer

#ifndef org_chromium_chrome_browser_compositor_scene_layer_StaticTabSceneLayer_JNI
#define org_chromium_chrome_browser_compositor_scene_layer_StaticTabSceneLayer_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kStaticTabSceneLayerClassPath[] =
    "org/chromium/chrome/browser/compositor/scene_layer/StaticTabSceneLayer";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_StaticTabSceneLayer_clazz __attribute__((unused)) =
    0;
#define StaticTabSceneLayer_clazz(env) base::android::LazyGetClass(env, kStaticTabSceneLayerClassPath, &g_StaticTabSceneLayer_clazz)

}  // namespace

namespace chrome {
namespace android {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_compositor_scene_1layer_StaticTabSceneLayer_nativeInit(JNIEnv*
    env, jobject jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_scene_1layer_StaticTabSceneLayer_nativeUpdateTabLayer(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeStaticTabSceneLayer,
    jfloat contentViewportX,
    jfloat contentViewportY,
    jfloat contentViewportWidth,
    jfloat contentViewportHeight,
    jobject tabContentManager,
    jint id,
    jint toolbarResourceId,
    jboolean canUseLiveLayer,
    jint backgroundColor,
    jfloat x,
    jfloat y,
    jfloat width,
    jfloat height,
    jfloat contentOffsetY,
    jfloat staticToViewBlend,
    jfloat saturation,
    jfloat brightness) {
  StaticTabSceneLayer* native =
      reinterpret_cast<StaticTabSceneLayer*>(nativeStaticTabSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateTabLayer");
  return native->UpdateTabLayer(env, base::android::JavaParamRef<jobject>(env,
      jcaller), contentViewportX, contentViewportY, contentViewportWidth,
      contentViewportHeight, base::android::JavaParamRef<jobject>(env,
      tabContentManager), id, toolbarResourceId, canUseLiveLayer,
      backgroundColor, x, y, width, height, contentOffsetY, staticToViewBlend,
      saturation, brightness);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsStaticTabSceneLayer[] = {
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_scene_1layer_StaticTabSceneLayer_nativeInit)
    },
    { "nativeUpdateTabLayer",
"("
"J"
"F"
"F"
"F"
"F"
"Lorg/chromium/chrome/browser/compositor/layouts/content/TabContentManager;"
"I"
"I"
"Z"
"I"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_scene_1layer_StaticTabSceneLayer_nativeUpdateTabLayer)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsStaticTabSceneLayerSize =
      arraysize(kMethodsStaticTabSceneLayer);

  if (env->RegisterNatives(StaticTabSceneLayer_clazz(env),
                           kMethodsStaticTabSceneLayer,
                           kMethodsStaticTabSceneLayerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, StaticTabSceneLayer_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_compositor_scene_layer_StaticTabSceneLayer_JNI
