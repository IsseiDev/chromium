// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/util/UrlUtilities

#ifndef org_chromium_chrome_browser_util_UrlUtilities_JNI
#define org_chromium_chrome_browser_util_UrlUtilities_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kUrlUtilitiesClassPath[] =
    "org/chromium/chrome/browser/util/UrlUtilities";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_UrlUtilities_clazz __attribute__((unused)) = 0;
#define UrlUtilities_clazz(env) base::android::LazyGetClass(env, kUrlUtilitiesClassPath, &g_UrlUtilities_clazz)

}  // namespace

// Step 2: method stubs.

static jboolean IsDownloadable(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_util_UrlUtilities_nativeIsDownloadable(JNIEnv*
    env, jclass jcaller,
    jstring url) {
  return IsDownloadable(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, url));
}

static jboolean IsValidForIntentFallbackNavigation(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_util_UrlUtilities_nativeIsValidForIntentFallbackNavigation(JNIEnv*
    env, jclass jcaller,
    jstring url) {
  return IsValidForIntentFallbackNavigation(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, url));
}

static jboolean IsAcceptedScheme(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_util_UrlUtilities_nativeIsAcceptedScheme(JNIEnv*
    env, jclass jcaller,
    jstring url) {
  return IsAcceptedScheme(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, url));
}

static jboolean SameDomainOrHost(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& primaryUrl,
    const base::android::JavaParamRef<jstring>& secondaryUrl,
    jboolean includePrivateRegistries);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_util_UrlUtilities_nativeSameDomainOrHost(JNIEnv*
    env, jclass jcaller,
    jstring primaryUrl,
    jstring secondaryUrl,
    jboolean includePrivateRegistries) {
  return SameDomainOrHost(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, primaryUrl),
      base::android::JavaParamRef<jstring>(env, secondaryUrl),
      includePrivateRegistries);
}

static jboolean SameHost(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    const base::android::JavaParamRef<jstring>& primaryUrl,
    const base::android::JavaParamRef<jstring>& secondaryUrl);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_util_UrlUtilities_nativeSameHost(JNIEnv*
    env, jclass jcaller,
    jstring primaryUrl,
    jstring secondaryUrl) {
  return SameHost(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, primaryUrl),
      base::android::JavaParamRef<jstring>(env, secondaryUrl));
}

static base::android::ScopedJavaLocalRef<jstring> GetDomainAndRegistry(JNIEnv*
    env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url,
    jboolean includePrivateRegistries);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_util_UrlUtilities_nativeGetDomainAndRegistry(JNIEnv*
    env, jclass jcaller,
    jstring url,
    jboolean includePrivateRegistries) {
  return GetDomainAndRegistry(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, url),
      includePrivateRegistries).Release();
}

static jboolean IsGoogleSearchUrl(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_util_UrlUtilities_nativeIsGoogleSearchUrl(JNIEnv*
    env, jclass jcaller,
    jstring url) {
  return IsGoogleSearchUrl(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, url));
}

static jboolean IsGoogleHomePageUrl(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_util_UrlUtilities_nativeIsGoogleHomePageUrl(JNIEnv*
    env, jclass jcaller,
    jstring url) {
  return IsGoogleHomePageUrl(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, url));
}

static base::android::ScopedJavaLocalRef<jstring>
    FormatUrlForSecurityDisplay(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_util_UrlUtilities_nativeFormatUrlForSecurityDisplay(JNIEnv*
    env, jclass jcaller,
    jstring url) {
  return FormatUrlForSecurityDisplay(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, url)).Release();
}

static base::android::ScopedJavaLocalRef<jstring>
    FormatUrlForSecurityDisplayOmitScheme(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_util_UrlUtilities_nativeFormatUrlForSecurityDisplayOmitScheme(JNIEnv*
    env, jclass jcaller,
    jstring url) {
  return FormatUrlForSecurityDisplayOmitScheme(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, url)).Release();
}

static base::android::ScopedJavaLocalRef<jstring> FixupUrl(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& desiredTld);

extern "C" __attribute__((visibility("default")))
jstring
    Java_org_chromium_chrome_browser_util_UrlUtilities_nativeFixupUrl(JNIEnv*
    env, jclass jcaller,
    jstring url,
    jstring desiredTld) {
  return FixupUrl(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, url),
      base::android::JavaParamRef<jstring>(env, desiredTld)).Release();
}

static jboolean UrlsMatchIgnoringFragments(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& url2);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_util_UrlUtilities_nativeUrlsMatchIgnoringFragments(JNIEnv*
    env, jclass jcaller,
    jstring url,
    jstring url2) {
  return UrlsMatchIgnoringFragments(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, url),
      base::android::JavaParamRef<jstring>(env, url2));
}

static jboolean UrlsFragmentsDiffer(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& url2);

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_util_UrlUtilities_nativeUrlsFragmentsDiffer(JNIEnv*
    env, jclass jcaller,
    jstring url,
    jstring url2) {
  return UrlsFragmentsDiffer(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, url),
      base::android::JavaParamRef<jstring>(env, url2));
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsUrlUtilities[] = {
    { "nativeIsDownloadable",
"("
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_UrlUtilities_nativeIsDownloadable)
    },
    { "nativeIsValidForIntentFallbackNavigation",
"("
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_UrlUtilities_nativeIsValidForIntentFallbackNavigation)
    },
    { "nativeIsAcceptedScheme",
"("
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_UrlUtilities_nativeIsAcceptedScheme)
    },
    { "nativeSameDomainOrHost",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_UrlUtilities_nativeSameDomainOrHost)
    },
    { "nativeSameHost",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_UrlUtilities_nativeSameHost)
    },
    { "nativeGetDomainAndRegistry",
"("
"Ljava/lang/String;"
"Z"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_UrlUtilities_nativeGetDomainAndRegistry)
    },
    { "nativeIsGoogleSearchUrl",
"("
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_UrlUtilities_nativeIsGoogleSearchUrl)
    },
    { "nativeIsGoogleHomePageUrl",
"("
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_UrlUtilities_nativeIsGoogleHomePageUrl)
    },
    { "nativeFormatUrlForSecurityDisplay",
"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_UrlUtilities_nativeFormatUrlForSecurityDisplay)
    },
    { "nativeFormatUrlForSecurityDisplayOmitScheme",
"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_UrlUtilities_nativeFormatUrlForSecurityDisplayOmitScheme)
    },
    { "nativeFixupUrl",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_UrlUtilities_nativeFixupUrl)
    },
    { "nativeUrlsMatchIgnoringFragments",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_UrlUtilities_nativeUrlsMatchIgnoringFragments)
    },
    { "nativeUrlsFragmentsDiffer",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_util_UrlUtilities_nativeUrlsFragmentsDiffer)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsUrlUtilitiesSize = arraysize(kMethodsUrlUtilities);

  if (env->RegisterNatives(UrlUtilities_clazz(env),
                           kMethodsUrlUtilities,
                           kMethodsUrlUtilitiesSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, UrlUtilities_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_util_UrlUtilities_JNI
