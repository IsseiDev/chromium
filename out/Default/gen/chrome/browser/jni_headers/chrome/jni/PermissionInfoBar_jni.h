// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/infobar/PermissionInfoBar

#ifndef org_chromium_chrome_browser_infobar_PermissionInfoBar_JNI
#define org_chromium_chrome_browser_infobar_PermissionInfoBar_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kPermissionInfoBarClassPath[] =
    "org/chromium/chrome/browser/infobar/PermissionInfoBar";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_PermissionInfoBar_clazz __attribute__((unused)) = 0;
#define PermissionInfoBar_clazz(env) base::android::LazyGetClass(env, kPermissionInfoBarClassPath, &g_PermissionInfoBar_clazz)

}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_PermissionInfoBar_isPersistSwitchOn = 0;
static jboolean Java_PermissionInfoBar_isPersistSwitchOn(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      PermissionInfoBar_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PermissionInfoBar_clazz(env),
      "isPersistSwitchOn",

"("
")"
"Z",
      &g_PermissionInfoBar_isPersistSwitchOn);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_PermissionInfoBar_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_PermissionInfoBar_create(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& windowAndroid,
    JniIntWrapper enumeratedIconId,
    const base::android::JavaRefOrBare<jobject>& iconBitmap,
    const base::android::JavaRefOrBare<jstring>& message,
    const base::android::JavaRefOrBare<jstring>& linkText,
    const base::android::JavaRefOrBare<jstring>& buttonOk,
    const base::android::JavaRefOrBare<jstring>& buttonCancel,
    const base::android::JavaRefOrBare<jintArray>& contentSettings,
    jboolean showPersistenceToggle) {
  CHECK_CLAZZ(env, PermissionInfoBar_clazz(env),
      PermissionInfoBar_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, PermissionInfoBar_clazz(env),
      "create",

"("
"Lorg/chromium/ui/base/WindowAndroid;"
"I"
"Landroid/graphics/Bitmap;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"[I"
"Z"
")"
"Lorg/chromium/chrome/browser/infobar/PermissionInfoBar;",
      &g_PermissionInfoBar_create);

  jobject ret =
      env->CallStaticObjectMethod(PermissionInfoBar_clazz(env),
          method_id, windowAndroid.obj(), as_jint(enumeratedIconId),
              iconBitmap.obj(), message.obj(), linkText.obj(), buttonOk.obj(),
              buttonCancel.obj(), contentSettings.obj(), showPersistenceToggle);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

#endif  // org_chromium_chrome_browser_infobar_PermissionInfoBar_JNI
