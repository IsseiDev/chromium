// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/feedback/ScreenshotTask

#ifndef org_chromium_chrome_browser_feedback_ScreenshotTask_JNI
#define org_chromium_chrome_browser_feedback_ScreenshotTask_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kScreenshotTaskClassPath[] =
    "org/chromium/chrome/browser/feedback/ScreenshotTask";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ScreenshotTask_clazz __attribute__((unused)) = 0;
#define ScreenshotTask_clazz(env) base::android::LazyGetClass(env, kScreenshotTaskClassPath, &g_ScreenshotTask_clazz)

}  // namespace

namespace chrome {
namespace android {

// Step 2: method stubs.

static void GrabWindowSnapshotAsync(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& callback,
    jlong nativeWindowAndroid,
    jint width,
    jint height);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_feedback_ScreenshotTask_nativeGrabWindowSnapshotAsync(JNIEnv*
    env, jclass jcaller,
    jobject callback,
    jlong nativeWindowAndroid,
    jint width,
    jint height) {
  return GrabWindowSnapshotAsync(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, callback),
      nativeWindowAndroid, width, height);
}

static base::subtle::AtomicWord g_ScreenshotTask_notifySnapshotFinished = 0;
static void Java_ScreenshotTask_notifySnapshotFinished(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& callback,
    const base::android::JavaRefOrBare<jbyteArray>& pngBytes) {
  CHECK_CLAZZ(env, ScreenshotTask_clazz(env),
      ScreenshotTask_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ScreenshotTask_clazz(env),
      "notifySnapshotFinished",

"("
"Ljava/lang/Object;"
"[B"
")"
"V",
      &g_ScreenshotTask_notifySnapshotFinished);

     env->CallStaticVoidMethod(ScreenshotTask_clazz(env),
          method_id, callback.obj(), pngBytes.obj());
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsScreenshotTask[] = {
    { "nativeGrabWindowSnapshotAsync",
"("
"Lorg/chromium/chrome/browser/feedback/ScreenshotTask$SnapshotResultCallback;"
"J"
"I"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_feedback_ScreenshotTask_nativeGrabWindowSnapshotAsync)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsScreenshotTaskSize = arraysize(kMethodsScreenshotTask);

  if (env->RegisterNatives(ScreenshotTask_clazz(env),
                           kMethodsScreenshotTask,
                           kMethodsScreenshotTaskSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ScreenshotTask_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_feedback_ScreenshotTask_JNI
