// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/compositor/scene_layer/ReaderModeSceneLayer

#ifndef org_chromium_chrome_browser_compositor_scene_layer_ReaderModeSceneLayer_JNI
#define org_chromium_chrome_browser_compositor_scene_layer_ReaderModeSceneLayer_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kReaderModeSceneLayerClassPath[] =
    "org/chromium/chrome/browser/compositor/scene_layer/ReaderModeSceneLayer";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ReaderModeSceneLayer_clazz __attribute__((unused)) =
    0;
#define ReaderModeSceneLayer_clazz(env) base::android::LazyGetClass(env, kReaderModeSceneLayerClassPath, &g_ReaderModeSceneLayer_clazz)

}  // namespace

namespace chrome {
namespace android {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_compositor_scene_1layer_ReaderModeSceneLayer_nativeInit(JNIEnv*
    env, jobject jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_scene_1layer_ReaderModeSceneLayer_nativeCreateReaderModeLayer(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeReaderModeSceneLayer,
    jobject resourceManager) {
  ReaderModeSceneLayer* native =
      reinterpret_cast<ReaderModeSceneLayer*>(nativeReaderModeSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "CreateReaderModeLayer");
  return native->CreateReaderModeLayer(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, resourceManager));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_scene_1layer_ReaderModeSceneLayer_nativeSetContentTree(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeReaderModeSceneLayer,
    jobject contentTree) {
  ReaderModeSceneLayer* native =
      reinterpret_cast<ReaderModeSceneLayer*>(nativeReaderModeSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetContentTree");
  return native->SetContentTree(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, contentTree));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_scene_1layer_ReaderModeSceneLayer_nativeHideTree(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeReaderModeSceneLayer) {
  ReaderModeSceneLayer* native =
      reinterpret_cast<ReaderModeSceneLayer*>(nativeReaderModeSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "HideTree");
  return native->HideTree(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_scene_1layer_ReaderModeSceneLayer_nativeSetResourceIds(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeReaderModeSceneLayer,
    jint barTextResourceId,
    jint barBackgroundResourceId,
    jint barShadowResourceId,
    jint panelIconResourceId,
    jint closeIconResourceId) {
  ReaderModeSceneLayer* native =
      reinterpret_cast<ReaderModeSceneLayer*>(nativeReaderModeSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetResourceIds");
  return native->SetResourceIds(env, base::android::JavaParamRef<jobject>(env,
      jcaller), barTextResourceId, barBackgroundResourceId, barShadowResourceId,
      panelIconResourceId, closeIconResourceId);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_compositor_scene_1layer_ReaderModeSceneLayer_nativeUpdate(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeReaderModeSceneLayer,
    jfloat dpToPx,
    jfloat basePageBrightness,
    jfloat basePageYOffset,
    jobject webContents,
    jfloat panelX,
    jfloat panelY,
    jfloat panelWidth,
    jfloat panelHeight,
    jfloat barMarginSide,
    jfloat barHeight,
    jfloat textOpacity,
    jboolean barBorderVisible,
    jfloat barBorderHeight,
    jboolean barShadowVisible,
    jfloat barShadowOpacity) {
  ReaderModeSceneLayer* native =
      reinterpret_cast<ReaderModeSceneLayer*>(nativeReaderModeSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "Update");
  return native->Update(env, base::android::JavaParamRef<jobject>(env, jcaller),
      dpToPx, basePageBrightness, basePageYOffset,
      base::android::JavaParamRef<jobject>(env, webContents), panelX, panelY,
      panelWidth, panelHeight, barMarginSide, barHeight, textOpacity,
      barBorderVisible, barBorderHeight, barShadowVisible, barShadowOpacity);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsReaderModeSceneLayer[] = {
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_scene_1layer_ReaderModeSceneLayer_nativeInit)
    },
    { "nativeCreateReaderModeLayer",
"("
"J"
"Lorg/chromium/ui/resources/ResourceManager;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_scene_1layer_ReaderModeSceneLayer_nativeCreateReaderModeLayer)
    },
    { "nativeSetContentTree",
"("
"J"
"Lorg/chromium/chrome/browser/compositor/scene_layer/SceneLayer;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_scene_1layer_ReaderModeSceneLayer_nativeSetContentTree)
    },
    { "nativeHideTree",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_scene_1layer_ReaderModeSceneLayer_nativeHideTree)
    },
    { "nativeSetResourceIds",
"("
"J"
"I"
"I"
"I"
"I"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_scene_1layer_ReaderModeSceneLayer_nativeSetResourceIds)
    },
    { "nativeUpdate",
"("
"J"
"F"
"F"
"F"
"Lorg/chromium/content_public/browser/WebContents;"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"Z"
"F"
"Z"
"F"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_compositor_scene_1layer_ReaderModeSceneLayer_nativeUpdate)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsReaderModeSceneLayerSize =
      arraysize(kMethodsReaderModeSceneLayer);

  if (env->RegisterNatives(ReaderModeSceneLayer_clazz(env),
                           kMethodsReaderModeSceneLayer,
                           kMethodsReaderModeSceneLayerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ReaderModeSceneLayer_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_compositor_scene_layer_ReaderModeSceneLayer_JNI
