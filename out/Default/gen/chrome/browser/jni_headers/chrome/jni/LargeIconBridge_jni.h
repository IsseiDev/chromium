// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/favicon/LargeIconBridge

#ifndef org_chromium_chrome_browser_favicon_LargeIconBridge_JNI
#define org_chromium_chrome_browser_favicon_LargeIconBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kLargeIconBridgeClassPath[] =
    "org/chromium/chrome/browser/favicon/LargeIconBridge";
const char kLargeIconCallbackClassPath[] =
    "org/chromium/chrome/browser/favicon/LargeIconBridge$LargeIconCallback";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_LargeIconBridge_clazz __attribute__((unused)) = 0;
#define LargeIconBridge_clazz(env) base::android::LazyGetClass(env, kLargeIconBridgeClassPath, &g_LargeIconBridge_clazz)
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_LargeIconCallback_clazz __attribute__((unused)) = 0;
#define LargeIconCallback_clazz(env) base::android::LazyGetClass(env, kLargeIconCallbackClassPath, &g_LargeIconCallback_clazz)

}  // namespace

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller);

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_chrome_browser_favicon_LargeIconBridge_nativeInit(JNIEnv*
    env, jclass jcaller) {
  return Init(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_favicon_LargeIconBridge_nativeDestroy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeLargeIconBridge) {
  LargeIconBridge* native =
      reinterpret_cast<LargeIconBridge*>(nativeLargeIconBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_chrome_browser_favicon_LargeIconBridge_nativeGetLargeIconForURL(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeLargeIconBridge,
    jobject profile,
    jstring pageUrl,
    jint desiredSizePx,
    jobject callback) {
  LargeIconBridge* native =
      reinterpret_cast<LargeIconBridge*>(nativeLargeIconBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLargeIconForURL", false);
  return native->GetLargeIconForURL(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, profile),
      base::android::JavaParamRef<jstring>(env, pageUrl), desiredSizePx,
      base::android::JavaParamRef<jobject>(env, callback));
}

static base::subtle::AtomicWord g_LargeIconCallback_onLargeIconAvailable = 0;
static void Java_LargeIconCallback_onLargeIconAvailable(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& icon,
    JniIntWrapper fallbackColor) {
  CHECK_CLAZZ(env, obj.obj(),
      LargeIconCallback_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, LargeIconCallback_clazz(env),
      "onLargeIconAvailable",

"("
"Landroid/graphics/Bitmap;"
"I"
")"
"V",
      &g_LargeIconCallback_onLargeIconAvailable);

     env->CallVoidMethod(obj.obj(),
          method_id, icon.obj(), as_jint(fallbackColor));
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsLargeIconBridge[] = {
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_favicon_LargeIconBridge_nativeInit)
    },
    { "nativeDestroy",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_favicon_LargeIconBridge_nativeDestroy)
    },
    { "nativeGetLargeIconForURL",
"("
"J"
"Lorg/chromium/chrome/browser/profiles/Profile;"
"Ljava/lang/String;"
"I"
"Lorg/chromium/chrome/browser/favicon/LargeIconBridge$LargeIconCallback;"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_favicon_LargeIconBridge_nativeGetLargeIconForURL)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsLargeIconBridgeSize = arraysize(kMethodsLargeIconBridge);

  if (env->RegisterNatives(LargeIconBridge_clazz(env),
                           kMethodsLargeIconBridge,
                           kMethodsLargeIconBridgeSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, LargeIconBridge_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_favicon_LargeIconBridge_JNI
