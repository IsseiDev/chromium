// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/download/DownloadController

#ifndef org_chromium_chrome_browser_download_DownloadController_JNI
#define org_chromium_chrome_browser_download_DownloadController_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDownloadControllerClassPath[] =
    "org/chromium/chrome/browser/download/DownloadController";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DownloadController_clazz __attribute__((unused)) = 0;
#define DownloadController_clazz(env) base::android::LazyGetClass(env, kDownloadControllerClassPath, &g_DownloadController_clazz)

}  // namespace

// Step 2: method stubs.

static void Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_download_DownloadController_nativeInit(JNIEnv*
    env, jobject jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static void OnRequestFileAccessResult(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jlong callbackId,
    jboolean granted);

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_chrome_browser_download_DownloadController_nativeOnRequestFileAccessResult(JNIEnv*
    env, jobject jcaller,
    jlong callbackId,
    jboolean granted) {
  return OnRequestFileAccessResult(env,
      base::android::JavaParamRef<jobject>(env, jcaller), callbackId, granted);
}

static base::subtle::AtomicWord g_DownloadController_getInstance = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_DownloadController_getInstance(JNIEnv* env) {
  CHECK_CLAZZ(env, DownloadController_clazz(env),
      DownloadController_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, DownloadController_clazz(env),
      "getInstance",

"("
")"
"Lorg/chromium/chrome/browser/download/DownloadController;",
      &g_DownloadController_getInstance);

  jobject ret =
      env->CallStaticObjectMethod(DownloadController_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_DownloadController_onDownloadCompleted = 0;
static void Java_DownloadController_onDownloadCompleted(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& mimeType,
    const base::android::JavaRefOrBare<jstring>& filename,
    const base::android::JavaRefOrBare<jstring>& path,
    jlong contentLength,
    const base::android::JavaRefOrBare<jstring>& downloadGuid,
    const base::android::JavaRefOrBare<jstring>& originalUrl,
    const base::android::JavaRefOrBare<jstring>& refererUrl,
    jboolean hasUserGesture) {
  CHECK_CLAZZ(env, obj.obj(),
      DownloadController_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DownloadController_clazz(env),
      "onDownloadCompleted",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
")"
"V",
      &g_DownloadController_onDownloadCompleted);

     env->CallVoidMethod(obj.obj(),
          method_id, url.obj(), mimeType.obj(), filename.obj(), path.obj(),
              contentLength, downloadGuid.obj(), originalUrl.obj(),
              refererUrl.obj(), hasUserGesture);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_DownloadController_onDownloadInterrupted = 0;
static void Java_DownloadController_onDownloadInterrupted(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& mimeType,
    const base::android::JavaRefOrBare<jstring>& filename,
    const base::android::JavaRefOrBare<jstring>& path,
    jlong contentLength,
    const base::android::JavaRefOrBare<jstring>& downloadGuid,
    jboolean isResumable,
    jboolean isAutoResumable,
    jboolean isOffTheRecord) {
  CHECK_CLAZZ(env, obj.obj(),
      DownloadController_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DownloadController_clazz(env),
      "onDownloadInterrupted",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
"Ljava/lang/String;"
"Z"
"Z"
"Z"
")"
"V",
      &g_DownloadController_onDownloadInterrupted);

     env->CallVoidMethod(obj.obj(),
          method_id, url.obj(), mimeType.obj(), filename.obj(), path.obj(),
              contentLength, downloadGuid.obj(), isResumable, isAutoResumable,
              isOffTheRecord);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_DownloadController_onDownloadCancelled = 0;
static void Java_DownloadController_onDownloadCancelled(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& downloadGuid) {
  CHECK_CLAZZ(env, obj.obj(),
      DownloadController_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DownloadController_clazz(env),
      "onDownloadCancelled",

"("
"Ljava/lang/String;"
")"
"V",
      &g_DownloadController_onDownloadCancelled);

     env->CallVoidMethod(obj.obj(),
          method_id, downloadGuid.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_DownloadController_onDownloadUpdated = 0;
static void Java_DownloadController_onDownloadUpdated(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& mimeType,
    const base::android::JavaRefOrBare<jstring>& filename,
    const base::android::JavaRefOrBare<jstring>& path,
    jlong contentLength,
    const base::android::JavaRefOrBare<jstring>& downloadGuid,
    JniIntWrapper percentCompleted,
    jlong timeRemainingInMs,
    jboolean hasUserGesture,
    jboolean isPaused,
    jboolean isOffTheRecord) {
  CHECK_CLAZZ(env, obj.obj(),
      DownloadController_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DownloadController_clazz(env),
      "onDownloadUpdated",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
"Ljava/lang/String;"
"I"
"J"
"Z"
"Z"
"Z"
")"
"V",
      &g_DownloadController_onDownloadUpdated);

     env->CallVoidMethod(obj.obj(),
          method_id, url.obj(), mimeType.obj(), filename.obj(), path.obj(),
              contentLength, downloadGuid.obj(), as_jint(percentCompleted),
              timeRemainingInMs, hasUserGesture, isPaused, isOffTheRecord);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_DownloadController_hasFileAccess = 0;
static jboolean Java_DownloadController_hasFileAccess(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& windowAndroid) {
  CHECK_CLAZZ(env, obj.obj(),
      DownloadController_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DownloadController_clazz(env),
      "hasFileAccess",

"("
"Lorg/chromium/ui/base/WindowAndroid;"
")"
"Z",
      &g_DownloadController_hasFileAccess);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, windowAndroid.obj());
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsDownloadController[] = {
    { "nativeInit",
"("
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_DownloadController_nativeInit)
    },
    { "nativeOnRequestFileAccessResult",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_chrome_browser_download_DownloadController_nativeOnRequestFileAccessResult)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsDownloadControllerSize =
      arraysize(kMethodsDownloadController);

  if (env->RegisterNatives(DownloadController_clazz(env),
                           kMethodsDownloadController,
                           kMethodsDownloadControllerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, DownloadController_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_download_DownloadController_JNI
