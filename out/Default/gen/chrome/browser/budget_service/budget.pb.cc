// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: budget.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "budget.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace budget_service {

void protobuf_ShutdownFile_budget_2eproto() {
  delete Budget::default_instance_;
  delete BudgetChunk::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_budget_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_budget_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Budget::default_instance_ = new Budget();
  BudgetChunk::default_instance_ = new BudgetChunk();
  Budget::default_instance_->InitAsDefaultInstance();
  BudgetChunk::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_budget_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_budget_2eproto_once_);
void protobuf_AddDesc_budget_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_budget_2eproto_once_,
                 &protobuf_AddDesc_budget_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_budget_2eproto {
  StaticDescriptorInitializer_budget_2eproto() {
    protobuf_AddDesc_budget_2eproto();
  }
} static_descriptor_initializer_budget_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForBudget(
    Budget* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Budget::kBudgetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Budget::Budget()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:budget_service.Budget)
}

void Budget::InitAsDefaultInstance() {
}

Budget::Budget(const Budget& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:budget_service.Budget)
}

void Budget::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Budget::~Budget() {
  // @@protoc_insertion_point(destructor:budget_service.Budget)
  SharedDtor();
}

void Budget::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Budget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Budget& Budget::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_budget_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_budget_2eproto();
#endif
  return *default_instance_;
}

Budget* Budget::default_instance_ = NULL;

Budget* Budget::New(::google::protobuf::Arena* arena) const {
  Budget* n = new Budget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Budget::Clear() {
// @@protoc_insertion_point(message_clear_start:budget_service.Budget)
  budget_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Budget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForBudget, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:budget_service.Budget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .budget_service.BudgetChunk budget = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_budget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_budget()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_budget;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:budget_service.Budget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:budget_service.Budget)
  return false;
#undef DO_
}

void Budget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:budget_service.Budget)
  // repeated .budget_service.BudgetChunk budget = 1;
  for (unsigned int i = 0, n = this->budget_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->budget(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:budget_service.Budget)
}

int Budget::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:budget_service.Budget)
  int total_size = 0;

  // repeated .budget_service.BudgetChunk budget = 1;
  total_size += 1 * this->budget_size();
  for (int i = 0; i < this->budget_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->budget(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Budget::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Budget*>(&from));
}

void Budget::MergeFrom(const Budget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:budget_service.Budget)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  budget_.MergeFrom(from.budget_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Budget::CopyFrom(const Budget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:budget_service.Budget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Budget::IsInitialized() const {

  return true;
}

void Budget::Swap(Budget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Budget::InternalSwap(Budget* other) {
  budget_.UnsafeArenaSwap(&other->budget_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Budget::GetTypeName() const {
  return "budget_service.Budget";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Budget

// repeated .budget_service.BudgetChunk budget = 1;
int Budget::budget_size() const {
  return budget_.size();
}
void Budget::clear_budget() {
  budget_.Clear();
}
const ::budget_service::BudgetChunk& Budget::budget(int index) const {
  // @@protoc_insertion_point(field_get:budget_service.Budget.budget)
  return budget_.Get(index);
}
::budget_service::BudgetChunk* Budget::mutable_budget(int index) {
  // @@protoc_insertion_point(field_mutable:budget_service.Budget.budget)
  return budget_.Mutable(index);
}
::budget_service::BudgetChunk* Budget::add_budget() {
  // @@protoc_insertion_point(field_add:budget_service.Budget.budget)
  return budget_.Add();
}
::google::protobuf::RepeatedPtrField< ::budget_service::BudgetChunk >*
Budget::mutable_budget() {
  // @@protoc_insertion_point(field_mutable_list:budget_service.Budget.budget)
  return &budget_;
}
const ::google::protobuf::RepeatedPtrField< ::budget_service::BudgetChunk >&
Budget::budget() const {
  // @@protoc_insertion_point(field_list:budget_service.Budget.budget)
  return budget_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForBudgetChunk(
    BudgetChunk* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BudgetChunk::kAmountFieldNumber;
const int BudgetChunk::kExpirationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BudgetChunk::BudgetChunk()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:budget_service.BudgetChunk)
}

void BudgetChunk::InitAsDefaultInstance() {
}

BudgetChunk::BudgetChunk(const BudgetChunk& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:budget_service.BudgetChunk)
}

void BudgetChunk::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = 0;
  expiration_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BudgetChunk::~BudgetChunk() {
  // @@protoc_insertion_point(destructor:budget_service.BudgetChunk)
  SharedDtor();
}

void BudgetChunk::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BudgetChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BudgetChunk& BudgetChunk::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_budget_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_budget_2eproto();
#endif
  return *default_instance_;
}

BudgetChunk* BudgetChunk::default_instance_ = NULL;

BudgetChunk* BudgetChunk::New(::google::protobuf::Arena* arena) const {
  BudgetChunk* n = new BudgetChunk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BudgetChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:budget_service.BudgetChunk)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BudgetChunk, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BudgetChunk*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(amount_, expiration_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BudgetChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForBudgetChunk, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:budget_service.BudgetChunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double amount = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_expiration;
        break;
      }

      // optional int64 expiration = 2;
      case 2: {
        if (tag == 16) {
         parse_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiration_)));
          set_has_expiration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:budget_service.BudgetChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:budget_service.BudgetChunk)
  return false;
#undef DO_
}

void BudgetChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:budget_service.BudgetChunk)
  // optional double amount = 1;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->amount(), output);
  }

  // optional int64 expiration = 2;
  if (has_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->expiration(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:budget_service.BudgetChunk)
}

int BudgetChunk::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:budget_service.BudgetChunk)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double amount = 1;
    if (has_amount()) {
      total_size += 1 + 8;
    }

    // optional int64 expiration = 2;
    if (has_expiration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiration());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BudgetChunk::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BudgetChunk*>(&from));
}

void BudgetChunk::MergeFrom(const BudgetChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:budget_service.BudgetChunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_expiration()) {
      set_expiration(from.expiration());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void BudgetChunk::CopyFrom(const BudgetChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:budget_service.BudgetChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BudgetChunk::IsInitialized() const {

  return true;
}

void BudgetChunk::Swap(BudgetChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BudgetChunk::InternalSwap(BudgetChunk* other) {
  std::swap(amount_, other->amount_);
  std::swap(expiration_, other->expiration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BudgetChunk::GetTypeName() const {
  return "budget_service.BudgetChunk";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BudgetChunk

// optional double amount = 1;
bool BudgetChunk::has_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BudgetChunk::set_has_amount() {
  _has_bits_[0] |= 0x00000001u;
}
void BudgetChunk::clear_has_amount() {
  _has_bits_[0] &= ~0x00000001u;
}
void BudgetChunk::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
 double BudgetChunk::amount() const {
  // @@protoc_insertion_point(field_get:budget_service.BudgetChunk.amount)
  return amount_;
}
 void BudgetChunk::set_amount(double value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:budget_service.BudgetChunk.amount)
}

// optional int64 expiration = 2;
bool BudgetChunk::has_expiration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BudgetChunk::set_has_expiration() {
  _has_bits_[0] |= 0x00000002u;
}
void BudgetChunk::clear_has_expiration() {
  _has_bits_[0] &= ~0x00000002u;
}
void BudgetChunk::clear_expiration() {
  expiration_ = GOOGLE_LONGLONG(0);
  clear_has_expiration();
}
 ::google::protobuf::int64 BudgetChunk::expiration() const {
  // @@protoc_insertion_point(field_get:budget_service.BudgetChunk.expiration)
  return expiration_;
}
 void BudgetChunk::set_expiration(::google::protobuf::int64 value) {
  set_has_expiration();
  expiration_ = value;
  // @@protoc_insertion_point(field_set:budget_service.BudgetChunk.expiration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace budget_service

// @@protoc_insertion_point(global_scope)
