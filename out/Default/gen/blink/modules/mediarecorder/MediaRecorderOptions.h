// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef MediaRecorderOptions_h
#define MediaRecorderOptions_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/core/v8/Nullable.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT MediaRecorderOptions : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    MediaRecorderOptions();
    virtual ~MediaRecorderOptions();

    bool hasAudioBitsPerSecond() const { return !m_audioBitsPerSecond.isNull(); }
    unsigned audioBitsPerSecond() const { return m_audioBitsPerSecond.get(); }
    void setAudioBitsPerSecond(unsigned value) { m_audioBitsPerSecond = value; }

    bool hasBitsPerSecond() const { return !m_bitsPerSecond.isNull(); }
    unsigned bitsPerSecond() const { return m_bitsPerSecond.get(); }
    void setBitsPerSecond(unsigned value) { m_bitsPerSecond = value; }

    bool hasMimeType() const { return !m_mimeType.isNull(); }
    String mimeType() const { return m_mimeType; }
    void setMimeType(String value) { m_mimeType = value; }

    bool hasVideoBitsPerSecond() const { return !m_videoBitsPerSecond.isNull(); }
    unsigned videoBitsPerSecond() const { return m_videoBitsPerSecond.get(); }
    void setVideoBitsPerSecond(unsigned value) { m_videoBitsPerSecond = value; }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<unsigned> m_audioBitsPerSecond;
    Nullable<unsigned> m_bitsPerSecond;
    String m_mimeType;
    Nullable<unsigned> m_videoBitsPerSecond;

    friend class V8MediaRecorderOptions;
};

} // namespace blink

#endif // MediaRecorderOptions_h
