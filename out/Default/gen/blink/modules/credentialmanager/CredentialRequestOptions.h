// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef CredentialRequestOptions_h
#define CredentialRequestOptions_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/core/v8/Nullable.h"
#include "modules/ModulesExport.h"
#include "modules/credentialmanager/FederatedCredentialRequestOptions.h"
#include "platform/heap/Handle.h"

namespace blink {

class MODULES_EXPORT CredentialRequestOptions : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    CredentialRequestOptions();
    virtual ~CredentialRequestOptions();

    bool hasFederated() const { return !m_federated.isNull(); }
    const FederatedCredentialRequestOptions& federated() const { return m_federated.get(); }
    void setFederated(const FederatedCredentialRequestOptions& value) { m_federated = value; }

    bool hasPassword() const { return !m_password.isNull(); }
    bool password() const { return m_password.get(); }
    void setPassword(bool value) { m_password = value; }

    bool hasUnmediated() const { return !m_unmediated.isNull(); }
    bool unmediated() const { return m_unmediated.get(); }
    void setUnmediated(bool value) { m_unmediated = value; }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<FederatedCredentialRequestOptions> m_federated;
    Nullable<bool> m_password;
    Nullable<bool> m_unmediated;

    friend class V8CredentialRequestOptions;
};

} // namespace blink

#endif // CredentialRequestOptions_h
