// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef PhotoSettings_h
#define PhotoSettings_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/core/v8/Nullable.h"
#include "modules/ModulesExport.h"
#include "modules/imagecapture/Point2D.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT PhotoSettings : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    PhotoSettings();
    virtual ~PhotoSettings();

    bool hasFocusMode() const { return !m_focusMode.isNull(); }
    String focusMode() const { return m_focusMode; }
    void setFocusMode(String value) { m_focusMode = value; }

    bool hasImageHeight() const { return !m_imageHeight.isNull(); }
    unsigned imageHeight() const { return m_imageHeight.get(); }
    void setImageHeight(unsigned value) { m_imageHeight = value; }

    bool hasImageWidth() const { return !m_imageWidth.isNull(); }
    unsigned imageWidth() const { return m_imageWidth.get(); }
    void setImageWidth(unsigned value) { m_imageWidth = value; }

    bool hasPointsOfInterest() const { return !m_pointsOfInterest.isNull(); }
    const HeapVector<Point2D>& pointsOfInterest() const { return m_pointsOfInterest.get(); }
    void setPointsOfInterest(const HeapVector<Point2D>& value) { m_pointsOfInterest = value; }

    bool hasZoom() const { return !m_zoom.isNull(); }
    unsigned zoom() const { return m_zoom.get(); }
    void setZoom(unsigned value) { m_zoom = value; }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    String m_focusMode;
    Nullable<unsigned> m_imageHeight;
    Nullable<unsigned> m_imageWidth;
    Nullable<HeapVector<Point2D>> m_pointsOfInterest;
    Nullable<unsigned> m_zoom;

    friend class V8PhotoSettings;
};

} // namespace blink

#endif // PhotoSettings_h
