// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef IDBObserverInit_h
#define IDBObserverInit_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/core/v8/Nullable.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT IDBObserverInit : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    IDBObserverInit();
    virtual ~IDBObserverInit();

    bool hasNoRecords() const { return !m_noRecords.isNull(); }
    bool noRecords() const { return m_noRecords.get(); }
    void setNoRecords(bool value) { m_noRecords = value; }

    bool hasOperationTypes() const { return !m_operationTypes.isNull(); }
    const Vector<String>& operationTypes() const { return m_operationTypes.get(); }
    void setOperationTypes(const Vector<String>& value) { m_operationTypes = value; }

    bool hasTransaction() const { return !m_transaction.isNull(); }
    bool transaction() const { return m_transaction.get(); }
    void setTransaction(bool value) { m_transaction = value; }

    bool hasValues() const { return !m_values.isNull(); }
    bool values() const { return m_values.get(); }
    void setValues(bool value) { m_values = value; }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<bool> m_noRecords;
    Nullable<Vector<String>> m_operationTypes;
    Nullable<bool> m_transaction;
    Nullable<bool> m_values;

    friend class V8IDBObserverInit;
};

} // namespace blink

#endif // IDBObserverInit_h
