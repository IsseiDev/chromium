// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef USBControlTransferParameters_h
#define USBControlTransferParameters_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/core/v8/Nullable.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT USBControlTransferParameters : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    USBControlTransferParameters();
    virtual ~USBControlTransferParameters();

    bool hasIndex() const { return !m_index.isNull(); }
    unsigned index() const { return m_index.get(); }
    void setIndex(unsigned value) { m_index = value; }

    bool hasRecipient() const { return !m_recipient.isNull(); }
    String recipient() const { return m_recipient; }
    void setRecipient(String value) { m_recipient = value; }

    bool hasRequest() const { return !m_request.isNull(); }
    unsigned request() const { return m_request.get(); }
    void setRequest(unsigned value) { m_request = value; }

    bool hasRequestType() const { return !m_requestType.isNull(); }
    String requestType() const { return m_requestType; }
    void setRequestType(String value) { m_requestType = value; }

    bool hasValue() const { return !m_value.isNull(); }
    unsigned value() const { return m_value.get(); }
    void setValue(unsigned value) { m_value = value; }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<unsigned> m_index;
    String m_recipient;
    Nullable<unsigned> m_request;
    String m_requestType;
    Nullable<unsigned> m_value;

    friend class V8USBControlTransferParameters;
};

} // namespace blink

#endif // USBControlTransferParameters_h
