// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef ForeignFetchResponse_h
#define ForeignFetchResponse_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/core/v8/Nullable.h"
#include "modules/ModulesExport.h"
#include "modules/fetch/Response.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT ForeignFetchResponse : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    ForeignFetchResponse();
    virtual ~ForeignFetchResponse();

    bool hasHeaders() const { return !m_headers.isNull(); }
    const Vector<String>& headers() const { return m_headers.get(); }
    void setHeaders(const Vector<String>& value) { m_headers = value; }

    bool hasOrigin() const { return !m_origin.isNull(); }
    String origin() const { return m_origin; }
    void setOrigin(String value) { m_origin = value; }

    bool hasResponse() const { return m_response; }
    Response* response() const { return m_response; }
    void setResponse(Response* value) { m_response = value; }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<Vector<String>> m_headers;
    String m_origin;
    Member<Response> m_response;

    friend class V8ForeignFetchResponse;
};

} // namespace blink

#endif // ForeignFetchResponse_h
