// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef VRLayer_h
#define VRLayer_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/core/v8/Nullable.h"
#include "core/html/HTMLCanvasElement.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"

namespace blink {

class MODULES_EXPORT VRLayer : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    VRLayer();
    virtual ~VRLayer();

    bool hasLeftBounds() const { return !m_leftBounds.isNull(); }
    const Vector<float>& leftBounds() const { return m_leftBounds.get(); }
    void setLeftBounds(const Vector<float>& value) { m_leftBounds = value; }
    void setLeftBoundsToNull() { m_leftBounds = Nullable<Vector<float>>(); }

    bool hasRightBounds() const { return !m_rightBounds.isNull(); }
    const Vector<float>& rightBounds() const { return m_rightBounds.get(); }
    void setRightBounds(const Vector<float>& value) { m_rightBounds = value; }
    void setRightBoundsToNull() { m_rightBounds = Nullable<Vector<float>>(); }

    bool hasSource() const { return m_source; }
    HTMLCanvasElement* source() const { return m_source; }
    void setSource(HTMLCanvasElement* value) { m_source = value; }
    void setSourceToNull() { m_source = Member<HTMLCanvasElement>(); }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<Vector<float>> m_leftBounds;
    Nullable<Vector<float>> m_rightBounds;
    Member<HTMLCanvasElement> m_source;

    friend class V8VRLayer;
};

} // namespace blink

#endif // VRLayer_h
