// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef PaymentDetailsModifier_h
#define PaymentDetailsModifier_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/core/v8/Nullable.h"
#include "modules/ModulesExport.h"
#include "modules/payments/PaymentItem.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT PaymentDetailsModifier : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    PaymentDetailsModifier();
    virtual ~PaymentDetailsModifier();

    bool hasAdditionalDisplayItems() const { return !m_additionalDisplayItems.isNull(); }
    const HeapVector<PaymentItem>& additionalDisplayItems() const { return m_additionalDisplayItems.get(); }
    void setAdditionalDisplayItems(const HeapVector<PaymentItem>& value) { m_additionalDisplayItems = value; }

    bool hasSupportedMethods() const { return !m_supportedMethods.isNull(); }
    const Vector<String>& supportedMethods() const { return m_supportedMethods.get(); }
    void setSupportedMethods(const Vector<String>& value) { m_supportedMethods = value; }

    bool hasTotal() const { return !m_total.isNull(); }
    const PaymentItem& total() const { return m_total.get(); }
    void setTotal(const PaymentItem& value) { m_total = value; }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<HeapVector<PaymentItem>> m_additionalDisplayItems;
    Nullable<Vector<String>> m_supportedMethods;
    Nullable<PaymentItem> m_total;

    friend class V8PaymentDetailsModifier;
};

} // namespace blink

#endif // PaymentDetailsModifier_h
