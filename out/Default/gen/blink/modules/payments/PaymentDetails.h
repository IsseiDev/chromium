// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef PaymentDetails_h
#define PaymentDetails_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/core/v8/Nullable.h"
#include "modules/ModulesExport.h"
#include "modules/payments/PaymentDetailsModifier.h"
#include "modules/payments/PaymentItem.h"
#include "modules/payments/PaymentShippingOption.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"

namespace blink {

class MODULES_EXPORT PaymentDetails : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    PaymentDetails();
    virtual ~PaymentDetails();

    bool hasDisplayItems() const { return !m_displayItems.isNull(); }
    const HeapVector<PaymentItem>& displayItems() const { return m_displayItems.get(); }
    void setDisplayItems(const HeapVector<PaymentItem>& value) { m_displayItems = value; }

    bool hasModifiers() const { return !m_modifiers.isNull(); }
    const HeapVector<PaymentDetailsModifier>& modifiers() const { return m_modifiers.get(); }
    void setModifiers(const HeapVector<PaymentDetailsModifier>& value) { m_modifiers = value; }

    bool hasShippingOptions() const { return !m_shippingOptions.isNull(); }
    const HeapVector<PaymentShippingOption>& shippingOptions() const { return m_shippingOptions.get(); }
    void setShippingOptions(const HeapVector<PaymentShippingOption>& value) { m_shippingOptions = value; }

    bool hasTotal() const { return !m_total.isNull(); }
    const PaymentItem& total() const { return m_total.get(); }
    void setTotal(const PaymentItem& value) { m_total = value; }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<HeapVector<PaymentItem>> m_displayItems;
    Nullable<HeapVector<PaymentDetailsModifier>> m_modifiers;
    Nullable<HeapVector<PaymentShippingOption>> m_shippingOptions;
    Nullable<PaymentItem> m_total;

    friend class V8PaymentDetails;
};

} // namespace blink

#endif // PaymentDetails_h
