// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8UnionTypesTest.h"

#include "bindings/core/v8/DoubleOrInternalEnum.h"
#include "bindings/core/v8/DoubleOrString.h"
#include "bindings/core/v8/DoubleOrStringOrStringArray.h"
#include "bindings/core/v8/DoubleOrStringOrStringSequence.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/NodeListOrElement.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Element.h"
#include "bindings/core/v8/V8NodeList.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/dom/NameNodeList.h"
#include "core/dom/NodeList.h"
#include "core/dom/StaticNodeList.h"
#include "core/html/LabelsNodeList.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8UnionTypesTest::wrapperTypeInfo = { gin::kEmbedderBlink, V8UnionTypesTest::domTemplate, V8UnionTypesTest::trace, V8UnionTypesTest::traceWrappers, 0, 0, V8UnionTypesTest::preparePrototypeAndInterfaceObject, nullptr, "UnionTypesTest", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in UnionTypesTest.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& UnionTypesTest::s_wrapperTypeInfo = V8UnionTypesTest::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, UnionTypesTest>::value,
    "UnionTypesTest inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace UnionTypesTestV8Internal {

static void doubleOrStringOrStringArrayAttributeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(holder);
    DoubleOrStringOrStringArray result;
    impl->doubleOrStringOrStringArrayAttribute(result);
    v8SetReturnValue(info, result);
}

static void doubleOrStringOrStringArrayAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UnionTypesTestV8Internal::doubleOrStringOrStringArrayAttributeAttributeGetter(info);
}

static void doubleOrStringOrStringArrayAttributeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "doubleOrStringOrStringArrayAttribute", "UnionTypesTest", holder, info.GetIsolate());
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(holder);
    DoubleOrStringOrStringArray cppValue;
    V8DoubleOrStringOrStringArray::toImpl(info.GetIsolate(), v8Value, cppValue, UnionTypeConversionMode::NotNullable, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setDoubleOrStringOrStringArrayAttribute(cppValue);
}

static void doubleOrStringOrStringArrayAttributeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    UnionTypesTestV8Internal::doubleOrStringOrStringArrayAttributeAttributeSetter(v8Value, info);
}

static void doubleOrStringArgMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "doubleOrStringArg", "UnionTypesTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(info.Holder());
    DoubleOrString arg;
    {
        V8DoubleOrString::toImpl(info.GetIsolate(), info[0], arg, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueString(info, impl->doubleOrStringArg(arg), info.GetIsolate());
}

static void doubleOrStringArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UnionTypesTestV8Internal::doubleOrStringArgMethod(info);
}

static void doubleOrInternalEnumArgMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "doubleOrInternalEnumArg", "UnionTypesTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(info.Holder());
    DoubleOrInternalEnum arg;
    {
        V8DoubleOrInternalEnum::toImpl(info.GetIsolate(), info[0], arg, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueString(info, impl->doubleOrInternalEnumArg(arg), info.GetIsolate());
}

static void doubleOrInternalEnumArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UnionTypesTestV8Internal::doubleOrInternalEnumArgMethod(info);
}

static void doubleOrStringDefaultDoubleArgMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "doubleOrStringDefaultDoubleArg", "UnionTypesTest", info.Holder(), info.GetIsolate());
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(info.Holder());
    DoubleOrString arg;
    {
        if (!info[0]->IsUndefined()) {
            V8DoubleOrString::toImpl(info.GetIsolate(), info[0], arg, UnionTypeConversionMode::NotNullable, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            arg.setDouble(3.14);
        }
    }
    v8SetReturnValueString(info, impl->doubleOrStringArg(arg), info.GetIsolate());
}

static void doubleOrStringDefaultDoubleArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UnionTypesTestV8Internal::doubleOrStringDefaultDoubleArgMethod(info);
}

static void doubleOrStringDefaultStringArgMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "doubleOrStringDefaultStringArg", "UnionTypesTest", info.Holder(), info.GetIsolate());
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(info.Holder());
    DoubleOrString arg;
    {
        if (!info[0]->IsUndefined()) {
            V8DoubleOrString::toImpl(info.GetIsolate(), info[0], arg, UnionTypeConversionMode::NotNullable, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            arg.setString(String("foo"));
        }
    }
    v8SetReturnValueString(info, impl->doubleOrStringArg(arg), info.GetIsolate());
}

static void doubleOrStringDefaultStringArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UnionTypesTestV8Internal::doubleOrStringDefaultStringArgMethod(info);
}

static void doubleOrStringDefaultNullArgMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "doubleOrStringDefaultNullArg", "UnionTypesTest", info.Holder(), info.GetIsolate());
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(info.Holder());
    DoubleOrString arg;
    {
        if (!info[0]->IsUndefined()) {
            V8DoubleOrString::toImpl(info.GetIsolate(), info[0], arg, UnionTypeConversionMode::Nullable, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            /* null default value */;
        }
    }
    v8SetReturnValueString(info, impl->doubleOrStringArg(arg), info.GetIsolate());
}

static void doubleOrStringDefaultNullArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UnionTypesTestV8Internal::doubleOrStringDefaultNullArgMethod(info);
}

static void doubleOrStringArrayArgMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "doubleOrStringArrayArg", "UnionTypesTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(info.Holder());
    HeapVector<DoubleOrString> arg;
    {
        arg = toImplArray<HeapVector<DoubleOrString>>(info[0], 1, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueString(info, impl->doubleOrStringArrayArg(arg), info.GetIsolate());
}

static void doubleOrStringArrayArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UnionTypesTestV8Internal::doubleOrStringArrayArgMethod(info);
}

static void doubleOrStringSequenceArgMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "doubleOrStringSequenceArg", "UnionTypesTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(info.Holder());
    HeapVector<DoubleOrString> arg;
    {
        arg = toImplArray<HeapVector<DoubleOrString>>(info[0], 1, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueString(info, impl->doubleOrStringSequenceArg(arg), info.GetIsolate());
}

static void doubleOrStringSequenceArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UnionTypesTestV8Internal::doubleOrStringSequenceArgMethod(info);
}

static void nodeListOrElementArgMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "nodeListOrElementArg", "UnionTypesTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(info.Holder());
    NodeListOrElement arg;
    {
        V8NodeListOrElement::toImpl(info.GetIsolate(), info[0], arg, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueString(info, impl->nodeListOrElementArg(arg), info.GetIsolate());
}

static void nodeListOrElementArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UnionTypesTestV8Internal::nodeListOrElementArgMethod(info);
}

static void nodeListOrElementOrNullArgMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "nodeListOrElementOrNullArg", "UnionTypesTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(info.Holder());
    NodeListOrElement arg;
    {
        V8NodeListOrElement::toImpl(info.GetIsolate(), info[0], arg, UnionTypeConversionMode::Nullable, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueString(info, impl->nodeListOrElementOrNullArg(arg), info.GetIsolate());
}

static void nodeListOrElementOrNullArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UnionTypesTestV8Internal::nodeListOrElementOrNullArgMethod(info);
}

static void doubleOrStringOrStringArrayArgMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "doubleOrStringOrStringArrayArg", "UnionTypesTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(info.Holder());
    DoubleOrStringOrStringArray arg;
    {
        V8DoubleOrStringOrStringArray::toImpl(info.GetIsolate(), info[0], arg, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueString(info, impl->doubleOrStringOrStringArrayArg(arg), info.GetIsolate());
}

static void doubleOrStringOrStringArrayArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UnionTypesTestV8Internal::doubleOrStringOrStringArrayArgMethod(info);
}

static void doubleOrStringOrStringSequenceArgMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "doubleOrStringOrStringSequenceArg", "UnionTypesTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(info.Holder());
    DoubleOrStringOrStringSequence arg;
    {
        V8DoubleOrStringOrStringSequence::toImpl(info.GetIsolate(), info[0], arg, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueString(info, impl->doubleOrStringOrStringSequenceArg(arg), info.GetIsolate());
}

static void doubleOrStringOrStringSequenceArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UnionTypesTestV8Internal::doubleOrStringOrStringSequenceArgMethod(info);
}

static void doubleOrStringOrStringArrayNullableArgMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "doubleOrStringOrStringArrayNullableArg", "UnionTypesTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(info.Holder());
    DoubleOrStringOrStringArray arg;
    {
        V8DoubleOrStringOrStringArray::toImpl(info.GetIsolate(), info[0], arg, UnionTypeConversionMode::Nullable, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueString(info, impl->doubleOrStringOrStringArrayArg(arg), info.GetIsolate());
}

static void doubleOrStringOrStringArrayNullableArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UnionTypesTestV8Internal::doubleOrStringOrStringArrayNullableArgMethod(info);
}

static void doubleOrStringOrStringSequenceNullableArgMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "doubleOrStringOrStringSequenceNullableArg", "UnionTypesTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    UnionTypesTest* impl = V8UnionTypesTest::toImpl(info.Holder());
    DoubleOrStringOrStringSequence arg;
    {
        V8DoubleOrStringOrStringSequence::toImpl(info.GetIsolate(), info[0], arg, UnionTypeConversionMode::Nullable, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueString(info, impl->doubleOrStringOrStringSequenceArg(arg), info.GetIsolate());
}

static void doubleOrStringOrStringSequenceNullableArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UnionTypesTestV8Internal::doubleOrStringOrStringSequenceNullableArgMethod(info);
}

} // namespace UnionTypesTestV8Internal

const V8DOMConfiguration::AccessorConfiguration V8UnionTypesTestAccessors[] = {
    {"doubleOrStringOrStringArrayAttribute", UnionTypesTestV8Internal::doubleOrStringOrStringArrayAttributeAttributeGetterCallback, UnionTypesTestV8Internal::doubleOrStringOrStringArrayAttributeAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8UnionTypesTestMethods[] = {
    {"doubleOrStringArg", UnionTypesTestV8Internal::doubleOrStringArgMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"doubleOrInternalEnumArg", UnionTypesTestV8Internal::doubleOrInternalEnumArgMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"doubleOrStringDefaultDoubleArg", UnionTypesTestV8Internal::doubleOrStringDefaultDoubleArgMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"doubleOrStringDefaultStringArg", UnionTypesTestV8Internal::doubleOrStringDefaultStringArgMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"doubleOrStringDefaultNullArg", UnionTypesTestV8Internal::doubleOrStringDefaultNullArgMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"doubleOrStringArrayArg", UnionTypesTestV8Internal::doubleOrStringArrayArgMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"doubleOrStringSequenceArg", UnionTypesTestV8Internal::doubleOrStringSequenceArgMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"nodeListOrElementArg", UnionTypesTestV8Internal::nodeListOrElementArgMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"nodeListOrElementOrNullArg", UnionTypesTestV8Internal::nodeListOrElementOrNullArgMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"doubleOrStringOrStringArrayArg", UnionTypesTestV8Internal::doubleOrStringOrStringArrayArgMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"doubleOrStringOrStringSequenceArg", UnionTypesTestV8Internal::doubleOrStringOrStringSequenceArgMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"doubleOrStringOrStringArrayNullableArg", UnionTypesTestV8Internal::doubleOrStringOrStringArrayNullableArgMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"doubleOrStringOrStringSequenceNullableArg", UnionTypesTestV8Internal::doubleOrStringOrStringSequenceNullableArgMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8UnionTypesTestTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8UnionTypesTest::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8UnionTypesTest::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8UnionTypesTestAccessors, WTF_ARRAY_LENGTH(V8UnionTypesTestAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8UnionTypesTestMethods, WTF_ARRAY_LENGTH(V8UnionTypesTestMethods));
}

v8::Local<v8::FunctionTemplate> V8UnionTypesTest::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8UnionTypesTestTemplate);
}

bool V8UnionTypesTest::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8UnionTypesTest::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

UnionTypesTest* V8UnionTypesTest::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
