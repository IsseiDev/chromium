// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8SVGViewSpec.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8SVGAnimatedPreserveAspectRatio.h"
#include "bindings/core/v8/V8SVGAnimatedRect.h"
#include "bindings/core/v8/V8SVGElement.h"
#include "bindings/core/v8/V8SVGTransformList.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8SVGViewSpec::wrapperTypeInfo = { gin::kEmbedderBlink, V8SVGViewSpec::domTemplate, V8SVGViewSpec::trace, V8SVGViewSpec::traceWrappers, 0, V8SVGViewSpec::visitDOMWrapper, V8SVGViewSpec::preparePrototypeAndInterfaceObject, nullptr, "SVGViewSpec", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in SVGViewSpec.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& SVGViewSpec::s_wrapperTypeInfo = V8SVGViewSpec::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, SVGViewSpec>::value,
    "SVGViewSpec inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace SVGViewSpecV8Internal {

static void transformAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGViewSpec* impl = V8SVGViewSpec::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->transformFromJavascript()), impl);
}

static void transformAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGViewSpecV8Internal::transformAttributeGetter(info);
}

static void viewTargetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGViewSpec* impl = V8SVGViewSpec::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->viewTarget()), impl);
}

static void viewTargetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGViewSpecV8Internal::viewTargetAttributeGetter(info);
}

static void viewBoxStringAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGViewSpec* impl = V8SVGViewSpec::toImpl(holder);
    v8SetReturnValueString(info, impl->viewBoxString(), info.GetIsolate());
}

static void viewBoxStringAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGViewSpecV8Internal::viewBoxStringAttributeGetter(info);
}

static void preserveAspectRatioStringAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGViewSpec* impl = V8SVGViewSpec::toImpl(holder);
    v8SetReturnValueString(info, impl->preserveAspectRatioString(), info.GetIsolate());
}

static void preserveAspectRatioStringAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGViewSpecV8Internal::preserveAspectRatioStringAttributeGetter(info);
}

static void transformStringAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGViewSpec* impl = V8SVGViewSpec::toImpl(holder);
    v8SetReturnValueString(info, impl->transformString(), info.GetIsolate());
}

static void transformStringAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGViewSpecV8Internal::transformStringAttributeGetter(info);
}

static void viewTargetStringAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGViewSpec* impl = V8SVGViewSpec::toImpl(holder);
    v8SetReturnValueString(info, impl->viewTargetString(), info.GetIsolate());
}

static void viewTargetStringAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGViewSpecV8Internal::viewTargetStringAttributeGetter(info);
}

static void viewBoxAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGViewSpec* impl = V8SVGViewSpec::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->viewBox()), impl);
}

static void viewBoxAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMFitToViewBox);
    SVGViewSpecV8Internal::viewBoxAttributeGetter(info);
}

static void preserveAspectRatioAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGViewSpec* impl = V8SVGViewSpec::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->preserveAspectRatio()), impl);
}

static void preserveAspectRatioAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMFitToViewBox);
    SVGViewSpecV8Internal::preserveAspectRatioAttributeGetter(info);
}

static void zoomAndPanAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGViewSpec* impl = V8SVGViewSpec::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->zoomAndPan());
}

static void zoomAndPanAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMZoomAndPan);
    SVGViewSpecV8Internal::zoomAndPanAttributeGetter(info);
}

static void zoomAndPanAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "zoomAndPan", "SVGViewSpec", holder, info.GetIsolate());
    SVGViewSpec* impl = V8SVGViewSpec::toImpl(holder);
    unsigned cppValue = toUInt16(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setZoomAndPan(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void zoomAndPanAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMZoomAndPan);
    SVGViewSpecV8Internal::zoomAndPanAttributeSetter(v8Value, info);
}

} // namespace SVGViewSpecV8Internal

void V8SVGViewSpec::visitDOMWrapper(v8::Isolate* isolate, ScriptWrappable* scriptWrappable, const v8::Persistent<v8::Object>& wrapper)
{
    SVGViewSpec* impl = scriptWrappable->toImpl<SVGViewSpec>();
    SVGElement* contextElement = impl->contextElement();
    if (contextElement) {
        DOMWrapperWorld::setWrapperReferencesInAllWorlds(wrapper, contextElement, isolate);
    }
}

const V8DOMConfiguration::AccessorConfiguration V8SVGViewSpecAccessors[] = {
    {"transform", SVGViewSpecV8Internal::transformAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"viewTarget", SVGViewSpecV8Internal::viewTargetAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"viewBoxString", SVGViewSpecV8Internal::viewBoxStringAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"preserveAspectRatioString", SVGViewSpecV8Internal::preserveAspectRatioStringAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"transformString", SVGViewSpecV8Internal::transformStringAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"viewTargetString", SVGViewSpecV8Internal::viewTargetStringAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"viewBox", SVGViewSpecV8Internal::viewBoxAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"preserveAspectRatio", SVGViewSpecV8Internal::preserveAspectRatioAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"zoomAndPan", SVGViewSpecV8Internal::zoomAndPanAttributeGetterCallback, SVGViewSpecV8Internal::zoomAndPanAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static void installV8SVGViewSpecTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8SVGViewSpec::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8SVGViewSpec::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    const V8DOMConfiguration::ConstantConfiguration V8SVGViewSpecConstants[] = {
        {"SVG_ZOOMANDPAN_UNKNOWN", 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_ZOOMANDPAN_DISABLE", 1, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_ZOOMANDPAN_MAGNIFY", 2, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
    };
    V8DOMConfiguration::installConstants(isolate, interfaceTemplate, prototypeTemplate, V8SVGViewSpecConstants, WTF_ARRAY_LENGTH(V8SVGViewSpecConstants));
    static_assert(0 == SVGViewSpec::kSvgZoomandpanUnknown, "the value of SVGViewSpec_kSvgZoomandpanUnknown does not match with implementation");
    static_assert(1 == SVGViewSpec::kSvgZoomandpanDisable, "the value of SVGViewSpec_kSvgZoomandpanDisable does not match with implementation");
    static_assert(2 == SVGViewSpec::kSvgZoomandpanMagnify, "the value of SVGViewSpec_kSvgZoomandpanMagnify does not match with implementation");
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8SVGViewSpecAccessors, WTF_ARRAY_LENGTH(V8SVGViewSpecAccessors));
}

v8::Local<v8::FunctionTemplate> V8SVGViewSpec::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8SVGViewSpecTemplate);
}

bool V8SVGViewSpec::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8SVGViewSpec::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SVGViewSpec* V8SVGViewSpec::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
