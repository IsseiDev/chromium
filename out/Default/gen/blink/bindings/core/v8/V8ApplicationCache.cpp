// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8ApplicationCache.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8EventListenerList.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8ApplicationCache::wrapperTypeInfo = { gin::kEmbedderBlink, V8ApplicationCache::domTemplate, V8ApplicationCache::trace, V8ApplicationCache::traceWrappers, 0, 0, V8ApplicationCache::preparePrototypeAndInterfaceObject, nullptr, "ApplicationCache", &V8EventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in ApplicationCache.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& ApplicationCache::s_wrapperTypeInfo = V8ApplicationCache::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, ApplicationCache>::value,
    "ApplicationCache inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace ApplicationCacheV8Internal {

static void statusAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->status());
}

static void statusAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ApplicationCacheV8Internal::statusAttributeGetter(info);
}

static void oncheckingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    EventListener* cppValue(WTF::getPtr(impl->onchecking()));
    v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
}

static void oncheckingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ApplicationCacheV8Internal::oncheckingAttributeGetter(info);
}

static void oncheckingAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onchecking(), v8Value, V8ApplicationCache::eventListenerCacheIndex);
    impl->setOnchecking(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void oncheckingAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    ApplicationCacheV8Internal::oncheckingAttributeSetter(v8Value, info);
}

static void onerrorAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    EventListener* cppValue(WTF::getPtr(impl->onerror()));
    v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
}

static void onerrorAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ApplicationCacheV8Internal::onerrorAttributeGetter(info);
}

static void onerrorAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onerror(), v8Value, V8ApplicationCache::eventListenerCacheIndex);
    impl->setOnerror(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onerrorAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    ApplicationCacheV8Internal::onerrorAttributeSetter(v8Value, info);
}

static void onnoupdateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    EventListener* cppValue(WTF::getPtr(impl->onnoupdate()));
    v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
}

static void onnoupdateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ApplicationCacheV8Internal::onnoupdateAttributeGetter(info);
}

static void onnoupdateAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onnoupdate(), v8Value, V8ApplicationCache::eventListenerCacheIndex);
    impl->setOnnoupdate(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onnoupdateAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    ApplicationCacheV8Internal::onnoupdateAttributeSetter(v8Value, info);
}

static void ondownloadingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    EventListener* cppValue(WTF::getPtr(impl->ondownloading()));
    v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
}

static void ondownloadingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ApplicationCacheV8Internal::ondownloadingAttributeGetter(info);
}

static void ondownloadingAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->ondownloading(), v8Value, V8ApplicationCache::eventListenerCacheIndex);
    impl->setOndownloading(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondownloadingAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    ApplicationCacheV8Internal::ondownloadingAttributeSetter(v8Value, info);
}

static void onprogressAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    EventListener* cppValue(WTF::getPtr(impl->onprogress()));
    v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
}

static void onprogressAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ApplicationCacheV8Internal::onprogressAttributeGetter(info);
}

static void onprogressAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onprogress(), v8Value, V8ApplicationCache::eventListenerCacheIndex);
    impl->setOnprogress(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onprogressAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    ApplicationCacheV8Internal::onprogressAttributeSetter(v8Value, info);
}

static void onupdatereadyAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    EventListener* cppValue(WTF::getPtr(impl->onupdateready()));
    v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
}

static void onupdatereadyAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ApplicationCacheV8Internal::onupdatereadyAttributeGetter(info);
}

static void onupdatereadyAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onupdateready(), v8Value, V8ApplicationCache::eventListenerCacheIndex);
    impl->setOnupdateready(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onupdatereadyAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    ApplicationCacheV8Internal::onupdatereadyAttributeSetter(v8Value, info);
}

static void oncachedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    EventListener* cppValue(WTF::getPtr(impl->oncached()));
    v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
}

static void oncachedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ApplicationCacheV8Internal::oncachedAttributeGetter(info);
}

static void oncachedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->oncached(), v8Value, V8ApplicationCache::eventListenerCacheIndex);
    impl->setOncached(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void oncachedAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    ApplicationCacheV8Internal::oncachedAttributeSetter(v8Value, info);
}

static void onobsoleteAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    EventListener* cppValue(WTF::getPtr(impl->onobsolete()));
    v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
}

static void onobsoleteAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ApplicationCacheV8Internal::onobsoleteAttributeGetter(info);
}

static void onobsoleteAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ApplicationCache* impl = V8ApplicationCache::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onobsolete(), v8Value, V8ApplicationCache::eventListenerCacheIndex);
    impl->setOnobsolete(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onobsoleteAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    ApplicationCacheV8Internal::onobsoleteAttributeSetter(v8Value, info);
}

static void updateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "update", "ApplicationCache", info.Holder(), info.GetIsolate());
    ApplicationCache* impl = V8ApplicationCache::toImpl(info.Holder());
    impl->update(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void updateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ApplicationCacheV8Internal::updateMethod(info);
}

static void abortMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ApplicationCache* impl = V8ApplicationCache::toImpl(info.Holder());
    impl->abort();
}

static void abortMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ApplicationCacheV8Internal::abortMethod(info);
}

static void swapCacheMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "swapCache", "ApplicationCache", info.Holder(), info.GetIsolate());
    ApplicationCache* impl = V8ApplicationCache::toImpl(info.Holder());
    impl->swapCache(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void swapCacheMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ApplicationCacheV8Internal::swapCacheMethod(info);
}

} // namespace ApplicationCacheV8Internal

const V8DOMConfiguration::AccessorConfiguration V8ApplicationCacheAccessors[] = {
    {"status", ApplicationCacheV8Internal::statusAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onchecking", ApplicationCacheV8Internal::oncheckingAttributeGetterCallback, ApplicationCacheV8Internal::oncheckingAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onerror", ApplicationCacheV8Internal::onerrorAttributeGetterCallback, ApplicationCacheV8Internal::onerrorAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onnoupdate", ApplicationCacheV8Internal::onnoupdateAttributeGetterCallback, ApplicationCacheV8Internal::onnoupdateAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"ondownloading", ApplicationCacheV8Internal::ondownloadingAttributeGetterCallback, ApplicationCacheV8Internal::ondownloadingAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onprogress", ApplicationCacheV8Internal::onprogressAttributeGetterCallback, ApplicationCacheV8Internal::onprogressAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onupdateready", ApplicationCacheV8Internal::onupdatereadyAttributeGetterCallback, ApplicationCacheV8Internal::onupdatereadyAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"oncached", ApplicationCacheV8Internal::oncachedAttributeGetterCallback, ApplicationCacheV8Internal::oncachedAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onobsolete", ApplicationCacheV8Internal::onobsoleteAttributeGetterCallback, ApplicationCacheV8Internal::onobsoleteAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8ApplicationCacheMethods[] = {
    {"update", ApplicationCacheV8Internal::updateMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"abort", ApplicationCacheV8Internal::abortMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"swapCache", ApplicationCacheV8Internal::swapCacheMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8ApplicationCacheTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8ApplicationCache::wrapperTypeInfo.interfaceName, V8EventTarget::domTemplate(isolate, world), V8ApplicationCache::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    const V8DOMConfiguration::ConstantConfiguration V8ApplicationCacheConstants[] = {
        {"UNCACHED", 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"IDLE", 1, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"CHECKING", 2, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"DOWNLOADING", 3, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"UPDATEREADY", 4, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"OBSOLETE", 5, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
    };
    V8DOMConfiguration::installConstants(isolate, interfaceTemplate, prototypeTemplate, V8ApplicationCacheConstants, WTF_ARRAY_LENGTH(V8ApplicationCacheConstants));
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8ApplicationCacheAccessors, WTF_ARRAY_LENGTH(V8ApplicationCacheAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8ApplicationCacheMethods, WTF_ARRAY_LENGTH(V8ApplicationCacheMethods));
}

v8::Local<v8::FunctionTemplate> V8ApplicationCache::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8ApplicationCacheTemplate);
}

bool V8ApplicationCache::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8ApplicationCache::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

ApplicationCache* V8ApplicationCache::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
