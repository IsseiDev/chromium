// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8WorkerInternals.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/origin_trials/OriginTrials.h"
#include "core/origin_trials/testing/WorkerInternalsFrobulate.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8WorkerInternals::wrapperTypeInfo = { gin::kEmbedderBlink, V8WorkerInternals::domTemplate, V8WorkerInternals::trace, V8WorkerInternals::traceWrappers, 0, 0, V8WorkerInternals::preparePrototypeAndInterfaceObject, nullptr, "WorkerInternals", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in WorkerInternals.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& WorkerInternals::s_wrapperTypeInfo = V8WorkerInternals::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, WorkerInternals>::value,
    "WorkerInternals inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace WorkerInternalsV8Internal {

static void frobulateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerInternals* impl = V8WorkerInternals::toImpl(holder);
    v8SetReturnValueBool(info, WorkerInternalsFrobulate::frobulate(*impl));
}

static void frobulateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WorkerInternalsV8Internal::frobulateAttributeGetter(info);
}

} // namespace WorkerInternalsV8Internal

static void installV8WorkerInternalsTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8WorkerInternals::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8WorkerInternals::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    static_assert(1 == WorkerInternalsFrobulate::kFrobulateConst, "the value of WorkerInternals_kFrobulateConst does not match with implementation");
}

void V8WorkerInternals::installOriginTrialsSampleAPI(ScriptState* scriptState, v8::Local<v8::Object> instance)
{
    v8::Local<v8::FunctionTemplate> interfaceTemplate = V8WorkerInternals::wrapperTypeInfo.domTemplate(scriptState->isolate(), scriptState->world());
    v8::Local<v8::Signature> signature = v8::Signature::New(scriptState->isolate(), interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    V8PerContextData* perContextData = V8PerContextData::from(scriptState->context());
    v8::Local<v8::Object> prototype = perContextData->prototypeForType(&V8WorkerInternals::wrapperTypeInfo);
    v8::Local<v8::Function> interface = perContextData->constructorForType(&V8WorkerInternals::wrapperTypeInfo);
    ALLOW_UNUSED_LOCAL(interface);
    const V8DOMConfiguration::AccessorConfiguration accessorfrobulateConfiguration = \
        {"frobulate", WorkerInternalsV8Internal::frobulateAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
    V8DOMConfiguration::installAccessor(scriptState->isolate(), scriptState->world(), instance, prototype, interface, signature, accessorfrobulateConfiguration);
    const V8DOMConfiguration::ConstantConfiguration constantFrobulateConstConfiguration = {"FROBULATE_CONST", 1, 0, V8DOMConfiguration::ConstantTypeUnsignedShort};
    V8DOMConfiguration::installConstant(scriptState->isolate(), interface, prototype, constantFrobulateConstConfiguration);
}

void V8WorkerInternals::installOriginTrialsSampleAPI(ScriptState* scriptState)
{
    installOriginTrialsSampleAPI(scriptState, v8::Local<v8::Object>());
}
v8::Local<v8::FunctionTemplate> V8WorkerInternals::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8WorkerInternalsTemplate);
}

bool V8WorkerInternals::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8WorkerInternals::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

WorkerInternals* V8WorkerInternals::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
