// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8Event.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8EventInit.h"
#include "bindings/core/v8/V8EventTarget.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8Event::wrapperTypeInfo = { gin::kEmbedderBlink, V8Event::domTemplate, V8Event::trace, V8Event::traceWrappers, 0, 0, V8Event::preparePrototypeAndInterfaceObject, nullptr, "Event", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in Event.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& Event::s_wrapperTypeInfo = V8Event::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, Event>::value,
    "Event inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace EventV8Internal {

static void typeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toImpl(holder);
    v8SetReturnValueString(info, impl->type(), info.GetIsolate());
}

static void typeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    EventV8Internal::typeAttributeGetter(info);
}

static void targetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->target()), impl);
}

static void targetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    EventV8Internal::targetAttributeGetter(info);
}

static void currentTargetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->currentTarget()), impl);
}

static void currentTargetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    EventV8Internal::currentTargetAttributeGetter(info);
}

static void eventPhaseAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->eventPhase());
}

static void eventPhaseAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    EventV8Internal::eventPhaseAttributeGetter(info);
}

static void bubblesAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toImpl(holder);
    v8SetReturnValueBool(info, impl->bubbles());
}

static void bubblesAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    EventV8Internal::bubblesAttributeGetter(info);
}

static void cancelableAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toImpl(holder);
    v8SetReturnValueBool(info, impl->cancelable());
}

static void cancelableAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    EventV8Internal::cancelableAttributeGetter(info);
}

static void defaultPreventedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toImpl(holder);
    v8SetReturnValueBool(info, impl->defaultPrevented());
}

static void defaultPreventedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    EventV8Internal::defaultPreventedAttributeGetter(info);
}

static void composedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toImpl(holder);
    v8SetReturnValueBool(info, impl->composed());
}

static void composedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::EventComposed);
    EventV8Internal::composedAttributeGetter(info);
}

static void isTrustedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toImpl(holder);
    v8SetReturnValueBool(info, impl->isTrusted());
}

static void isTrustedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    EventV8Internal::isTrustedAttributeGetter(info);
}

static void timeStampAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toImpl(holder);
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    v8SetReturnValue(info, impl->timeStamp(scriptState));
}

static void timeStampAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    EventV8Internal::timeStampAttributeGetter(info);
}

static void pathAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toImpl(holder);
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    v8SetReturnValue(info, toV8(impl->path(scriptState), info.Holder(), info.GetIsolate()));
}

static void pathAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::EventPath);
    EventV8Internal::pathAttributeGetter(info);
}

static void srcElementAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->srcElement()), impl);
}

static void srcElementAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::EventSrcElement);
    EventV8Internal::srcElementAttributeGetter(info);
}

static void returnValueAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toImpl(holder);
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    v8SetReturnValueBool(info, impl->legacyReturnValue(executionContext));
}

static void returnValueAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::EventReturnValue);
    EventV8Internal::returnValueAttributeGetter(info);
}

static void returnValueAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "returnValue", "Event", holder, info.GetIsolate());
    Event* impl = V8Event::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    impl->setLegacyReturnValue(executionContext, cppValue);
}

static void returnValueAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::EventReturnValue);
    EventV8Internal::returnValueAttributeSetter(v8Value, info);
}

static void cancelBubbleAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toImpl(holder);
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    v8SetReturnValueBool(info, impl->cancelBubble(executionContext));
}

static void cancelBubbleAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::EventCancelBubble);
    EventV8Internal::cancelBubbleAttributeGetter(info);
}

static void cancelBubbleAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "cancelBubble", "Event", holder, info.GetIsolate());
    Event* impl = V8Event::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    impl->setCancelBubble(executionContext, cppValue);
}

static void cancelBubbleAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::EventCancelBubble);
    EventV8Internal::cancelBubbleAttributeSetter(v8Value, info);
}

static void stopPropagationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Event* impl = V8Event::toImpl(info.Holder());
    impl->stopPropagation();
}

static void stopPropagationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    EventV8Internal::stopPropagationMethod(info);
}

static void stopImmediatePropagationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Event* impl = V8Event::toImpl(info.Holder());
    impl->stopImmediatePropagation();
}

static void stopImmediatePropagationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    EventV8Internal::stopImmediatePropagationMethod(info);
}

static void preventDefaultMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Event* impl = V8Event::toImpl(info.Holder());
    impl->preventDefault();
}

static void preventDefaultMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    EventV8Internal::preventDefaultMethod(info);
}

static void initEventMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "initEvent", "Event", info.Holder(), info.GetIsolate());
    Event* impl = V8Event::toImpl(info.Holder());
    V8StringResource<> type;
    bool bubbles;
    bool cancelable;
    {
        type = info[0];
        if (!type.prepare())
            return;
        bubbles = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        cancelable = toBoolean(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->initEvent(type, bubbles, cancelable);
}

static void initEventMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8Event_InitEvent_Method);
    EventV8Internal::initEventMethod(info);
}

static void composedPathMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Event* impl = V8Event::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    HeapVector<Member<EventTarget>> result = impl->composedPath(scriptState);
    v8SetReturnValue(info, toV8(result, info.Holder(), info.GetIsolate()));
}

static void composedPathMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::EventComposedPath);
    EventV8Internal::composedPathMethod(info);
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ConstructionContext, "Event", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    V8StringResource<> type;
    EventInit eventInitDict;
    {
        type = info[0];
        if (!type.prepare())
            return;
        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('eventInitDict') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        V8EventInit::toImpl(info.GetIsolate(), info[1], eventInitDict, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    Event* impl = Event::create(type, eventInitDict);
    v8::Local<v8::Object> wrapper = info.Holder();
    wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8Event::wrapperTypeInfo, wrapper);
    v8SetReturnValue(info, wrapper);
}

} // namespace EventV8Internal

const V8DOMConfiguration::AccessorConfiguration V8EventAccessors[] = {
    {"type", EventV8Internal::typeAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"target", EventV8Internal::targetAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"currentTarget", EventV8Internal::currentTargetAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"eventPhase", EventV8Internal::eventPhaseAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"bubbles", EventV8Internal::bubblesAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cancelable", EventV8Internal::cancelableAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"defaultPrevented", EventV8Internal::defaultPreventedAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"isTrusted", EventV8Internal::isTrustedAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder},
    {"timeStamp", EventV8Internal::timeStampAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"path", EventV8Internal::pathAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"srcElement", EventV8Internal::srcElementAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"returnValue", EventV8Internal::returnValueAttributeGetterCallback, EventV8Internal::returnValueAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cancelBubble", EventV8Internal::cancelBubbleAttributeGetterCallback, EventV8Internal::cancelBubbleAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8EventMethods[] = {
    {"stopPropagation", EventV8Internal::stopPropagationMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"stopImmediatePropagation", EventV8Internal::stopImmediatePropagationMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"preventDefault", EventV8Internal::preventDefaultMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"initEvent", EventV8Internal::initEventMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

void V8Event::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("Event"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    EventV8Internal::constructor(info);
}

static void installV8EventTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8Event::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8Event::internalFieldCount);
    interfaceTemplate->SetCallHandler(V8Event::constructorCallback);
    interfaceTemplate->SetLength(1);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    const V8DOMConfiguration::ConstantConfiguration V8EventConstants[] = {
        {"NONE", 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"CAPTURING_PHASE", 1, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"AT_TARGET", 2, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"BUBBLING_PHASE", 3, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"MOUSEDOWN", 1, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"MOUSEUP", 2, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"MOUSEOVER", 4, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"MOUSEOUT", 8, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"MOUSEMOVE", 16, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"MOUSEDRAG", 32, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"CLICK", 64, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"DBLCLICK", 128, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"KEYDOWN", 256, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"KEYUP", 512, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"KEYPRESS", 1024, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"DRAGDROP", 2048, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"FOCUS", 4096, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"BLUR", 8192, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SELECT", 16384, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"CHANGE", 32768, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
    };
    V8DOMConfiguration::installConstants(isolate, interfaceTemplate, prototypeTemplate, V8EventConstants, WTF_ARRAY_LENGTH(V8EventConstants));
    static_assert(0 == Event::kNone, "the value of Event_kNone does not match with implementation");
    static_assert(1 == Event::kCapturingPhase, "the value of Event_kCapturingPhase does not match with implementation");
    static_assert(2 == Event::kAtTarget, "the value of Event_kAtTarget does not match with implementation");
    static_assert(3 == Event::kBubblingPhase, "the value of Event_kBubblingPhase does not match with implementation");
    static_assert(1 == Event::kMousedown, "the value of Event_kMousedown does not match with implementation");
    static_assert(2 == Event::kMouseup, "the value of Event_kMouseup does not match with implementation");
    static_assert(4 == Event::kMouseover, "the value of Event_kMouseover does not match with implementation");
    static_assert(8 == Event::kMouseout, "the value of Event_kMouseout does not match with implementation");
    static_assert(16 == Event::kMousemove, "the value of Event_kMousemove does not match with implementation");
    static_assert(32 == Event::kMousedrag, "the value of Event_kMousedrag does not match with implementation");
    static_assert(64 == Event::kClick, "the value of Event_kClick does not match with implementation");
    static_assert(128 == Event::kDblclick, "the value of Event_kDblclick does not match with implementation");
    static_assert(256 == Event::kKeydown, "the value of Event_kKeydown does not match with implementation");
    static_assert(512 == Event::kKeyup, "the value of Event_kKeyup does not match with implementation");
    static_assert(1024 == Event::kKeypress, "the value of Event_kKeypress does not match with implementation");
    static_assert(2048 == Event::kDragdrop, "the value of Event_kDragdrop does not match with implementation");
    static_assert(4096 == Event::kFocus, "the value of Event_kFocus does not match with implementation");
    static_assert(8192 == Event::kBlur, "the value of Event_kBlur does not match with implementation");
    static_assert(16384 == Event::kSelect, "the value of Event_kSelect does not match with implementation");
    static_assert(32768 == Event::kChange, "the value of Event_kChange does not match with implementation");
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8EventAccessors, WTF_ARRAY_LENGTH(V8EventAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8EventMethods, WTF_ARRAY_LENGTH(V8EventMethods));

    if (RuntimeEnabledFeatures::shadowDOMV1Enabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorcomposedConfiguration = \
        {"composed", EventV8Internal::composedAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorcomposedConfiguration);
    }

    if (RuntimeEnabledFeatures::shadowDOMV1Enabled()) {
        const V8DOMConfiguration::MethodConfiguration composedPathMethodConfiguration = {"composedPath", EventV8Internal::composedPathMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, composedPathMethodConfiguration);
    }
}

v8::Local<v8::FunctionTemplate> V8Event::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8EventTemplate);
}

bool V8Event::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8Event::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

Event* V8Event::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
