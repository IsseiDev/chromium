// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8SVGGeometryElement.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8SVGPoint.h"
#include "core/animation/ElementAnimation.h"
#include "core/dom/Document.h"
#include "core/dom/ElementFullscreen.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8SVGGeometryElement::wrapperTypeInfo = { gin::kEmbedderBlink, V8SVGGeometryElement::domTemplate, V8SVGGeometryElement::trace, V8SVGGeometryElement::traceWrappers, 0, 0, V8SVGGeometryElement::preparePrototypeAndInterfaceObject, nullptr, "SVGGeometryElement", &V8SVGGraphicsElement::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::NodeClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in SVGGeometryElement.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& SVGGeometryElement::s_wrapperTypeInfo = V8SVGGeometryElement::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, SVGGeometryElement>::value,
    "SVGGeometryElement inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace SVGGeometryElementV8Internal {

static void isPointInFillMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isPointInFill", "SVGGeometryElement", 1, info.Length()));
        return;
    }
    SVGGeometryElement* impl = V8SVGGeometryElement::toImpl(info.Holder());
    SVGPointTearOff* point;
    {
        point = V8SVGPoint::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!point) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isPointInFill", "SVGGeometryElement", "parameter 1 is not of type 'SVGPoint'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isPointInFill(point));
}

static void isPointInFillMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGGeometryElementV8Internal::isPointInFillMethod(info);
}

static void isPointInStrokeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isPointInStroke", "SVGGeometryElement", 1, info.Length()));
        return;
    }
    SVGGeometryElement* impl = V8SVGGeometryElement::toImpl(info.Holder());
    SVGPointTearOff* point;
    {
        point = V8SVGPoint::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!point) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isPointInStroke", "SVGGeometryElement", "parameter 1 is not of type 'SVGPoint'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isPointInStroke(point));
}

static void isPointInStrokeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGGeometryElementV8Internal::isPointInStrokeMethod(info);
}

} // namespace SVGGeometryElementV8Internal

const V8DOMConfiguration::MethodConfiguration V8SVGGeometryElementMethods[] = {
    {"isPointInFill", SVGGeometryElementV8Internal::isPointInFillMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isPointInStroke", SVGGeometryElementV8Internal::isPointInStrokeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8SVGGeometryElementTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8SVGGeometryElement::wrapperTypeInfo.interfaceName, V8SVGGraphicsElement::domTemplate(isolate, world), V8SVGGeometryElement::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8SVGGeometryElementMethods, WTF_ARRAY_LENGTH(V8SVGGeometryElementMethods));
}

v8::Local<v8::FunctionTemplate> V8SVGGeometryElement::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8SVGGeometryElementTemplate);
}

bool V8SVGGeometryElement::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8SVGGeometryElement::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SVGGeometryElement* V8SVGGeometryElement::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
