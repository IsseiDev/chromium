// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8StaticRange.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Node.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8Range.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8StaticRange::wrapperTypeInfo = { gin::kEmbedderBlink, V8StaticRange::domTemplate, V8StaticRange::trace, V8StaticRange::traceWrappers, 0, 0, V8StaticRange::preparePrototypeAndInterfaceObject, nullptr, "StaticRange", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in StaticRange.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& StaticRange::s_wrapperTypeInfo = V8StaticRange::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, StaticRange>::value,
    "StaticRange inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace StaticRangeV8Internal {

static void startContainerAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    StaticRange* impl = V8StaticRange::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->startContainer()), impl);
}

static void startContainerAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    StaticRangeV8Internal::startContainerAttributeGetter(info);
}

static void startContainerAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "startContainer", "StaticRange", holder, info.GetIsolate());
    StaticRange* impl = V8StaticRange::toImpl(holder);
    Node* cppValue = V8Node::toImplWithTypeCheck(info.GetIsolate(), v8Value);
    if (!cppValue) {
        exceptionState.throwTypeError("The provided value is not of type 'Node'.");
        exceptionState.throwIfNeeded();
        return;
    }
    impl->setStartContainer(cppValue);
}

static void startContainerAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    StaticRangeV8Internal::startContainerAttributeSetter(v8Value, info);
}

static void startOffsetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    StaticRange* impl = V8StaticRange::toImpl(holder);
    v8SetReturnValueInt(info, impl->startOffset());
}

static void startOffsetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    StaticRangeV8Internal::startOffsetAttributeGetter(info);
}

static void startOffsetAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "startOffset", "StaticRange", holder, info.GetIsolate());
    StaticRange* impl = V8StaticRange::toImpl(holder);
    int cppValue = toInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setStartOffset(cppValue);
}

static void startOffsetAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    StaticRangeV8Internal::startOffsetAttributeSetter(v8Value, info);
}

static void endContainerAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    StaticRange* impl = V8StaticRange::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->endContainer()), impl);
}

static void endContainerAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    StaticRangeV8Internal::endContainerAttributeGetter(info);
}

static void endContainerAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "endContainer", "StaticRange", holder, info.GetIsolate());
    StaticRange* impl = V8StaticRange::toImpl(holder);
    Node* cppValue = V8Node::toImplWithTypeCheck(info.GetIsolate(), v8Value);
    if (!cppValue) {
        exceptionState.throwTypeError("The provided value is not of type 'Node'.");
        exceptionState.throwIfNeeded();
        return;
    }
    impl->setEndContainer(cppValue);
}

static void endContainerAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    StaticRangeV8Internal::endContainerAttributeSetter(v8Value, info);
}

static void endOffsetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    StaticRange* impl = V8StaticRange::toImpl(holder);
    v8SetReturnValueInt(info, impl->endOffset());
}

static void endOffsetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    StaticRangeV8Internal::endOffsetAttributeGetter(info);
}

static void endOffsetAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "endOffset", "StaticRange", holder, info.GetIsolate());
    StaticRange* impl = V8StaticRange::toImpl(holder);
    int cppValue = toInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setEndOffset(cppValue);
}

static void endOffsetAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    StaticRangeV8Internal::endOffsetAttributeSetter(v8Value, info);
}

static void collapsedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    StaticRange* impl = V8StaticRange::toImpl(holder);
    v8SetReturnValueBool(info, impl->collapsed());
}

static void collapsedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    StaticRangeV8Internal::collapsedAttributeGetter(info);
}

static void setStartMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setStart", "StaticRange", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    StaticRange* impl = V8StaticRange::toImpl(info.Holder());
    Node* node;
    int offset;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
        offset = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setStart(node, offset);
}

static void setStartMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    StaticRangeV8Internal::setStartMethod(info);
}

static void setEndMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setEnd", "StaticRange", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    StaticRange* impl = V8StaticRange::toImpl(info.Holder());
    Node* node;
    int offset;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
        offset = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setEnd(node, offset);
}

static void setEndMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    StaticRangeV8Internal::setEndMethod(info);
}

static void toRangeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "toRange", "StaticRange", info.Holder(), info.GetIsolate());
    StaticRange* impl = V8StaticRange::toImpl(info.Holder());
    Range* result = impl->toRange(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    // [NewObject] must always create a new wrapper.  Check that a wrapper
    // does not exist yet.
    DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
    v8SetReturnValue(info, result);
}

static void toRangeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    StaticRangeV8Internal::toRangeMethod(info);
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Document& document = *toDocument(currentExecutionContext(info.GetIsolate()));
    StaticRange* impl = StaticRange::create(document);
    v8::Local<v8::Object> wrapper = info.Holder();
    wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8StaticRange::wrapperTypeInfo, wrapper);
    v8SetReturnValue(info, wrapper);
}

} // namespace StaticRangeV8Internal

const V8DOMConfiguration::AccessorConfiguration V8StaticRangeAccessors[] = {
    {"startContainer", StaticRangeV8Internal::startContainerAttributeGetterCallback, StaticRangeV8Internal::startContainerAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"startOffset", StaticRangeV8Internal::startOffsetAttributeGetterCallback, StaticRangeV8Internal::startOffsetAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"endContainer", StaticRangeV8Internal::endContainerAttributeGetterCallback, StaticRangeV8Internal::endContainerAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"endOffset", StaticRangeV8Internal::endOffsetAttributeGetterCallback, StaticRangeV8Internal::endOffsetAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"collapsed", StaticRangeV8Internal::collapsedAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8StaticRangeMethods[] = {
    {"setStart", StaticRangeV8Internal::setStartMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setEnd", StaticRangeV8Internal::setEndMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"toRange", StaticRangeV8Internal::toRangeMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

void V8StaticRange::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("StaticRange"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    StaticRangeV8Internal::constructor(info);
}

static void installV8StaticRangeTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8StaticRange::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8StaticRange::internalFieldCount);
    interfaceTemplate->SetCallHandler(V8StaticRange::constructorCallback);
    interfaceTemplate->SetLength(0);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    if (RuntimeEnabledFeatures::inputEventEnabled()) {
        V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8StaticRangeAccessors, WTF_ARRAY_LENGTH(V8StaticRangeAccessors));
        V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8StaticRangeMethods, WTF_ARRAY_LENGTH(V8StaticRangeMethods));
    }
}

v8::Local<v8::FunctionTemplate> V8StaticRange::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8StaticRangeTemplate);
}

bool V8StaticRange::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8StaticRange::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

StaticRange* V8StaticRange::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
