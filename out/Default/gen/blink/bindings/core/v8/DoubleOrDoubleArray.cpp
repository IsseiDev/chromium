// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "DoubleOrDoubleArray.h"

#include "bindings/core/v8/ToV8.h"

namespace blink {

DoubleOrDoubleArray::DoubleOrDoubleArray()
    : m_type(SpecificTypeNone)
{
}

double DoubleOrDoubleArray::getAsDouble() const
{
    ASSERT(isDouble());
    return m_double;
}

void DoubleOrDoubleArray::setDouble(double value)
{
    ASSERT(isNull());
    m_double = value;
    m_type = SpecificTypeDouble;
}

DoubleOrDoubleArray DoubleOrDoubleArray::fromDouble(double value)
{
    DoubleOrDoubleArray container;
    container.setDouble(value);
    return container;
}

const Vector<double>& DoubleOrDoubleArray::getAsDoubleArray() const
{
    ASSERT(isDoubleArray());
    return m_doubleArray;
}

void DoubleOrDoubleArray::setDoubleArray(const Vector<double>& value)
{
    ASSERT(isNull());
    m_doubleArray = value;
    m_type = SpecificTypeDoubleArray;
}

DoubleOrDoubleArray DoubleOrDoubleArray::fromDoubleArray(const Vector<double>& value)
{
    DoubleOrDoubleArray container;
    container.setDoubleArray(value);
    return container;
}

DoubleOrDoubleArray::DoubleOrDoubleArray(const DoubleOrDoubleArray&) = default;
DoubleOrDoubleArray::~DoubleOrDoubleArray() = default;
DoubleOrDoubleArray& DoubleOrDoubleArray::operator=(const DoubleOrDoubleArray&) = default;

DEFINE_TRACE(DoubleOrDoubleArray)
{
}

void V8DoubleOrDoubleArray::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, DoubleOrDoubleArray& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (v8Value->IsArray()) {
        Vector<double> cppValue = toImplArray<Vector<double>>(v8Value, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDoubleArray(cppValue);
        return;
    }

    if (v8Value->IsNumber()) {
        double cppValue = toRestrictedDouble(isolate, v8Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDouble(cppValue);
        return;
    }

    {
        double cppValue = toRestrictedDouble(isolate, v8Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDouble(cppValue);
        return;
    }
}

v8::Local<v8::Value> toV8(const DoubleOrDoubleArray& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case DoubleOrDoubleArray::SpecificTypeNone:
        return v8::Null(isolate);
    case DoubleOrDoubleArray::SpecificTypeDouble:
        return v8::Number::New(isolate, impl.getAsDouble());
    case DoubleOrDoubleArray::SpecificTypeDoubleArray:
        return toV8(impl.getAsDoubleArray(), creationContext, isolate);
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

DoubleOrDoubleArray NativeValueTraits<DoubleOrDoubleArray>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    DoubleOrDoubleArray impl;
    V8DoubleOrDoubleArray::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
