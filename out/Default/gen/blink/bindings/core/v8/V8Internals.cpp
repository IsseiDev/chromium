// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8Internals.h"

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/SerializedScriptValue.h"
#include "bindings/core/v8/SerializedScriptValueFactory.h"
#include "bindings/core/v8/V8Animation.h"
#include "bindings/core/v8/V8ArrayBuffer.h"
#include "bindings/core/v8/V8CSSStyleDeclaration.h"
#include "bindings/core/v8/V8ClientRect.h"
#include "bindings/core/v8/V8ClientRectList.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8DOMPoint.h"
#include "bindings/core/v8/V8DictionaryTest.h"
#include "bindings/core/v8/V8Document.h"
#include "bindings/core/v8/V8Element.h"
#include "bindings/core/v8/V8GCObservation.h"
#include "bindings/core/v8/V8HTMLMediaElement.h"
#include "bindings/core/v8/V8HTMLSelectElement.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8InternalRuntimeFlags.h"
#include "bindings/core/v8/V8InternalSettings.h"
#include "bindings/core/v8/V8Iterator.h"
#include "bindings/core/v8/V8LayerRectList.h"
#include "bindings/core/v8/V8Location.h"
#include "bindings/core/v8/V8Node.h"
#include "bindings/core/v8/V8NodeList.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8PrivateScriptTest.h"
#include "bindings/core/v8/V8Range.h"
#include "bindings/core/v8/V8ScrollState.h"
#include "bindings/core/v8/V8ShadowRoot.h"
#include "bindings/core/v8/V8TypeConversions.h"
#include "bindings/core/v8/V8UnionTypesTest.h"
#include "bindings/core/v8/V8Window.h"
#include "bindings/modules/v8/V8CanvasRenderingContext2D.h"
#include "core/dom/Document.h"
#include "core/dom/NameNodeList.h"
#include "core/dom/NodeList.h"
#include "core/dom/StaticNodeList.h"
#include "core/html/LabelsNodeList.h"
#include "core/origin_trials/OriginTrials.h"
#include "core/origin_trials/testing/InternalsFrobulate.h"
#include "core/origin_trials/testing/InternalsFrobulateInterfaceBindings.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
WrapperTypeInfo V8Internals::wrapperTypeInfo = { gin::kEmbedderBlink, V8Internals::domTemplate, V8Internals::trace, V8Internals::traceWrappers, 0, 0, V8Internals::preparePrototypeAndInterfaceObject, nullptr, "Internals", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in Internals.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& Internals::s_wrapperTypeInfo = V8Internals::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, Internals>::value,
    "Internals inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace InternalsV8Internal {

static void pagePopupWindowAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Internals* impl = V8Internals::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->pagePopupWindow()), impl);
}

static void pagePopupWindowAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::pagePopupWindowAttributeGetter(info);
}

static void settingsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Internals* impl = V8Internals::toImpl(holder);
    InternalSettings* cppValue(WTF::getPtr(impl->settings()));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "settings"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void settingsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::settingsAttributeGetter(info);
}

static void runtimeFlagsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Internals* impl = V8Internals::toImpl(holder);
    InternalRuntimeFlags* cppValue(WTF::getPtr(impl->runtimeFlags()));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "runtimeFlags"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void runtimeFlagsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::runtimeFlagsAttributeGetter(info);
}

static void workerThreadCountAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Internals* impl = V8Internals::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->workerThreadCount());
}

static void workerThreadCountAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::workerThreadCountAttributeGetter(info);
}

static void cursorUpdatePendingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Internals* impl = V8Internals::toImpl(holder);
    v8SetReturnValueBool(info, impl->cursorUpdatePending());
}

static void cursorUpdatePendingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::cursorUpdatePendingAttributeGetter(info);
}

static void unscopeableAttributeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Internals* impl = V8Internals::toImpl(holder);
    v8SetReturnValueString(info, impl->unscopeableAttribute(), info.GetIsolate());
}

static void unscopeableAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::unscopeableAttributeAttributeGetter(info);
}

static void frobulateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Internals* impl = V8Internals::toImpl(holder);
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ExceptionState exceptionState(ExceptionState::GetterContext, "frobulate", "Internals", holder, info.GetIsolate());
    bool cppValue(InternalsFrobulate::frobulate(scriptState, *impl, exceptionState));
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    v8SetReturnValueBool(info, cppValue);
}

static void frobulateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::frobulateAttributeGetter(info);
}

static void frobulateNoEnabledCheckAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Internals* impl = V8Internals::toImpl(holder);
    v8SetReturnValueBool(info, InternalsFrobulate::frobulateNoEnabledCheck(*impl));
}

static void frobulateNoEnabledCheckAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::frobulateNoEnabledCheckAttributeGetter(info);
}

static void frobulateBindingsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Internals* impl = V8Internals::toImpl(holder);
    v8SetReturnValueBool(info, InternalsFrobulate::frobulateNoEnabledCheck(*impl));
}

static void frobulateBindingsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::frobulateBindingsAttributeGetter(info);
}

static void frobulatePartialAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Internals* impl = V8Internals::toImpl(holder);
    v8SetReturnValueBool(info, InternalsFrobulateInterfaceBindings::frobulatePartial(*impl));
}

static void frobulatePartialAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::frobulatePartialAttributeGetter(info);
}

static void frobulateStaticPartialAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8SetReturnValueBool(info, InternalsFrobulateInterfaceBindings::frobulateStaticPartial());
}

static void frobulateStaticPartialAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::frobulateStaticPartialAttributeGetter(info);
}

static void addressMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "address", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("address", "Internals", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    v8SetReturnValueString(info, impl->address(node), info.GetIsolate());
}

static void addressMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::addressMethod(info);
}

static void observeGCMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "observeGC", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    ScriptValue observed;
    {
        observed = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
    }
    v8SetReturnValue(info, impl->observeGC(observed));
}

static void observeGCMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::observeGCMethod(info);
}

static void elementLayoutTreeAsTextMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "elementLayoutTreeAsText", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    String result = impl->elementLayoutTreeAsText(element, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void elementLayoutTreeAsTextMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::elementLayoutTreeAsTextMethod(info);
}

static void isPreloadedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isPreloaded", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    V8StringResource<> url;
    {
        url = info[0];
        if (!url.prepare())
            return;
    }
    v8SetReturnValueBool(info, impl->isPreloaded(url));
}

static void isPreloadedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::isPreloadedMethod(info);
}

static void isPreloadedByMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isPreloadedBy", "Internals", 2, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    V8StringResource<> url;
    Document* document;
    {
        url = info[0];
        if (!url.prepare())
            return;
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isPreloadedBy", "Internals", "parameter 2 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isPreloadedBy(url, document));
}

static void isPreloadedByMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::isPreloadedByMethod(info);
}

static void isLoadingFromMemoryCacheMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isLoadingFromMemoryCache", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    V8StringResource<> url;
    {
        url = info[0];
        if (!url.prepare())
            return;
    }
    v8SetReturnValueBool(info, impl->isLoadingFromMemoryCache(url));
}

static void isLoadingFromMemoryCacheMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::isLoadingFromMemoryCacheMethod(info);
}

static void isSharingStyleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isSharingStyle", "Internals", 2, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element1;
    Element* element2;
    {
        element1 = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element1) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isSharingStyle", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
        element2 = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!element2) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isSharingStyle", "Internals", "parameter 2 is not of type 'Element'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isSharingStyle(element1, element2));
}

static void isSharingStyleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::isSharingStyleMethod(info);
}

static void computedStyleIncludingVisitedInfoMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "computedStyleIncludingVisitedInfo", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("computedStyleIncludingVisitedInfo", "Internals", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    v8SetReturnValue(info, impl->computedStyleIncludingVisitedInfo(node));
}

static void computedStyleIncludingVisitedInfoMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::computedStyleIncludingVisitedInfoMethod(info);
}

static void createUserAgentShadowRootMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "createUserAgentShadowRoot", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* host;
    {
        host = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!host) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("createUserAgentShadowRoot", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
    }
    v8SetReturnValue(info, impl->createUserAgentShadowRoot(host));
}

static void createUserAgentShadowRootMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::createUserAgentShadowRootMethod(info);
}

static void shadowRootMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "shadowRoot", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* host;
    {
        host = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!host) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("shadowRoot", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
    }
    v8SetReturnValue(info, impl->shadowRoot(host));
}

static void shadowRootMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::shadowRootMethod(info);
}

static void youngestShadowRootMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "youngestShadowRoot", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* host;
    {
        host = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!host) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("youngestShadowRoot", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
    }
    v8SetReturnValue(info, impl->youngestShadowRoot(host));
}

static void youngestShadowRootMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::youngestShadowRootMethod(info);
}

static void oldestShadowRootMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "oldestShadowRoot", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* host;
    {
        host = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!host) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("oldestShadowRoot", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
    }
    v8SetReturnValue(info, impl->oldestShadowRoot(host));
}

static void oldestShadowRootMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::oldestShadowRootMethod(info);
}

static void youngerShadowRootMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "youngerShadowRoot", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* root;
    {
        root = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!root) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    ShadowRoot* result = impl->youngerShadowRoot(root, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void youngerShadowRootMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::youngerShadowRootMethod(info);
}

static void shadowRootTypeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "shadowRootType", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* root;
    {
        root = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!root) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    String result = impl->shadowRootType(root, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void shadowRootTypeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::shadowRootTypeMethod(info);
}

static void hasShadowInsertionPointMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "hasShadowInsertionPoint", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* root;
    {
        root = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!root) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    bool result = impl->hasShadowInsertionPoint(root, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueBool(info, result);
}

static void hasShadowInsertionPointMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::hasShadowInsertionPointMethod(info);
}

static void hasContentElementMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "hasContentElement", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* root;
    {
        root = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!root) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    bool result = impl->hasContentElement(root, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueBool(info, result);
}

static void hasContentElementMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::hasContentElementMethod(info);
}

static void countElementShadowMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "countElementShadow", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* Root;
    {
        Root = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!Root) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    unsigned result = impl->countElementShadow(Root, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueUnsigned(info, result);
}

static void countElementShadowMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::countElementShadowMethod(info);
}

static void shadowPseudoIdMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "shadowPseudoId", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("shadowPseudoId", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
    }
    v8SetReturnValueString(info, impl->shadowPseudoId(element), info.GetIsolate());
}

static void shadowPseudoIdMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::shadowPseudoIdMethod(info);
}

static void isValidContentSelectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "isValidContentSelect", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* contentElement;
    {
        contentElement = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!contentElement) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    bool result = impl->isValidContentSelect(contentElement, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueBool(info, result);
}

static void isValidContentSelectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::isValidContentSelectMethod(info);
}

static void treeScopeRootNodeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "treeScopeRootNode", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("treeScopeRootNode", "Internals", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    v8SetReturnValue(info, impl->treeScopeRootNode(node));
}

static void treeScopeRootNodeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::treeScopeRootNodeMethod(info);
}

static void parentTreeScopeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "parentTreeScope", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("parentTreeScope", "Internals", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    v8SetReturnValue(info, impl->parentTreeScope(node));
}

static void parentTreeScopeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::parentTreeScopeMethod(info);
}

static void hasSelectorForIdInShadowMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "hasSelectorForIdInShadow", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* host;
    V8StringResource<> id;
    {
        host = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!host) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
        id = info[1];
        if (!id.prepare())
            return;
    }
    bool result = impl->hasSelectorForIdInShadow(host, id, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueBool(info, result);
}

static void hasSelectorForIdInShadowMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::hasSelectorForIdInShadowMethod(info);
}

static void hasSelectorForClassInShadowMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "hasSelectorForClassInShadow", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* host;
    V8StringResource<> className;
    {
        host = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!host) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
        className = info[1];
        if (!className.prepare())
            return;
    }
    bool result = impl->hasSelectorForClassInShadow(host, className, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueBool(info, result);
}

static void hasSelectorForClassInShadowMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::hasSelectorForClassInShadowMethod(info);
}

static void hasSelectorForAttributeInShadowMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "hasSelectorForAttributeInShadow", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* host;
    V8StringResource<> attributeName;
    {
        host = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!host) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
        attributeName = info[1];
        if (!attributeName.prepare())
            return;
    }
    bool result = impl->hasSelectorForAttributeInShadow(host, attributeName, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueBool(info, result);
}

static void hasSelectorForAttributeInShadowMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::hasSelectorForAttributeInShadowMethod(info);
}

static void compareTreeScopePositionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "compareTreeScopePosition", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* treeScope1;
    Node* treeScope2;
    {
        treeScope1 = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!treeScope1) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
        treeScope2 = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!treeScope2) {
            exceptionState.throwTypeError("parameter 2 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    unsigned result = impl->compareTreeScopePosition(treeScope1, treeScope2, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueUnsigned(info, result);
}

static void compareTreeScopePositionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::compareTreeScopePositionMethod(info);
}

static void updateStyleAndReturnAffectedElementCountMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "updateStyleAndReturnAffectedElementCount", "Internals", info.Holder(), info.GetIsolate());
    Internals* impl = V8Internals::toImpl(info.Holder());
    unsigned result = impl->updateStyleAndReturnAffectedElementCount(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueUnsigned(info, result);
}

static void updateStyleAndReturnAffectedElementCountMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::updateStyleAndReturnAffectedElementCountMethod(info);
}

static void needsLayoutCountMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "needsLayoutCount", "Internals", info.Holder(), info.GetIsolate());
    Internals* impl = V8Internals::toImpl(info.Holder());
    unsigned result = impl->needsLayoutCount(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueUnsigned(info, result);
}

static void needsLayoutCountMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::needsLayoutCountMethod(info);
}

static void hitTestCountMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "hitTestCount", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    unsigned result = impl->hitTestCount(document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueUnsigned(info, result);
}

static void hitTestCountMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::hitTestCountMethod(info);
}

static void hitTestCacheHitsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "hitTestCacheHits", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    unsigned result = impl->hitTestCacheHits(document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueUnsigned(info, result);
}

static void hitTestCacheHitsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::hitTestCacheHitsMethod(info);
}

static void elementFromPointMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "elementFromPoint", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 5)) {
        setMinimumArityTypeError(exceptionState, 5, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    double x;
    double y;
    bool ignoreClipping;
    bool allowChildFrameContent;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        x = toRestrictedDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        ignoreClipping = toBoolean(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        allowChildFrameContent = toBoolean(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    Element* result = impl->elementFromPoint(document, x, y, ignoreClipping, allowChildFrameContent, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void elementFromPointMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::elementFromPointMethod(info);
}

static void clearHitTestCacheMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clearHitTestCache", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->clearHitTestCache(document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void clearHitTestCacheMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::clearHitTestCacheMethod(info);
}

static void pauseAnimationsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "pauseAnimations", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    double pauseTime;
    {
        pauseTime = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->pauseAnimations(pauseTime, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void pauseAnimationsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::pauseAnimationsMethod(info);
}

static void isCompositedAnimationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isCompositedAnimation", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Animation* animation;
    {
        animation = V8Animation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!animation) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isCompositedAnimation", "Internals", "parameter 1 is not of type 'Animation'."));
            return;
        }
    }
    v8SetReturnValue(info, impl->isCompositedAnimation(animation));
}

static void isCompositedAnimationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::isCompositedAnimationMethod(info);
}

static void disableCompositedAnimationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "disableCompositedAnimation", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Animation* animation;
    {
        animation = V8Animation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!animation) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("disableCompositedAnimation", "Internals", "parameter 1 is not of type 'Animation'."));
            return;
        }
    }
    impl->disableCompositedAnimation(animation);
}

static void disableCompositedAnimationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::disableCompositedAnimationMethod(info);
}

static void disableCSSAdditiveAnimationsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    impl->disableCSSAdditiveAnimations();
}

static void disableCSSAdditiveAnimationsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::disableCSSAdditiveAnimationsMethod(info);
}

static void advanceTimeForImageMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "advanceTimeForImage", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* image;
    double deltaTimeInSeconds;
    {
        image = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!image) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
        deltaTimeInSeconds = toRestrictedDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->advanceTimeForImage(image, deltaTimeInSeconds, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void advanceTimeForImageMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::advanceTimeForImageMethod(info);
}

static void advanceImageAnimationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "advanceImageAnimation", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* image;
    {
        image = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!image) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->advanceImageAnimation(image, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void advanceImageAnimationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::advanceImageAnimationMethod(info);
}

static void nextSiblingInFlatTreeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "nextSiblingInFlatTree", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    Node* result = impl->nextSiblingInFlatTree(node, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void nextSiblingInFlatTreeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::nextSiblingInFlatTreeMethod(info);
}

static void firstChildInFlatTreeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "firstChildInFlatTree", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    Node* result = impl->firstChildInFlatTree(node, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void firstChildInFlatTreeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::firstChildInFlatTreeMethod(info);
}

static void lastChildInFlatTreeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "lastChildInFlatTree", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    Node* result = impl->lastChildInFlatTree(node, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void lastChildInFlatTreeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::lastChildInFlatTreeMethod(info);
}

static void nextInFlatTreeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "nextInFlatTree", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    Node* result = impl->nextInFlatTree(node, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void nextInFlatTreeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::nextInFlatTreeMethod(info);
}

static void previousInFlatTreeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "previousInFlatTree", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    Node* result = impl->previousInFlatTree(node, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void previousInFlatTreeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::previousInFlatTreeMethod(info);
}

static void visiblePlaceholderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "visiblePlaceholder", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("visiblePlaceholder", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
    }
    v8SetReturnValueString(info, impl->visiblePlaceholder(element), info.GetIsolate());
}

static void visiblePlaceholderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::visiblePlaceholderMethod(info);
}

static void selectColorInColorChooserMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "selectColorInColorChooser", "Internals", 2, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    V8StringResource<> colorValue;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("selectColorInColorChooser", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
        colorValue = info[1];
        if (!colorValue.prepare())
            return;
    }
    impl->selectColorInColorChooser(element, colorValue);
}

static void selectColorInColorChooserMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::selectColorInColorChooserMethod(info);
}

static void endColorChooserMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "endColorChooser", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("endColorChooser", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
    }
    impl->endColorChooser(element);
}

static void endColorChooserMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::endColorChooserMethod(info);
}

static void hasAutofocusRequestMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        if (UNLIKELY(numArgsPassed <= 0)) {
            v8SetReturnValueBool(info, impl->hasAutofocusRequest());
            return;
        }
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("hasAutofocusRequest", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->hasAutofocusRequest(document));
}

static void hasAutofocusRequestMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::hasAutofocusRequestMethod(info);
}

static void formControlStateOfHistoryItemMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "formControlStateOfHistoryItem", "Internals", info.Holder(), info.GetIsolate());
    Internals* impl = V8Internals::toImpl(info.Holder());
    Vector<String> result = impl->formControlStateOfHistoryItem(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, toV8(result, info.Holder(), info.GetIsolate()));
}

static void formControlStateOfHistoryItemMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::formControlStateOfHistoryItemMethod(info);
}

static void setFormControlStateOfHistoryItemMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setFormControlStateOfHistoryItem", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Vector<String> values;
    {
        values = toImplArray<Vector<String>>(info[0], 1, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setFormControlStateOfHistoryItem(values, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setFormControlStateOfHistoryItemMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setFormControlStateOfHistoryItemMethod(info);
}

static void absoluteCaretBoundsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "absoluteCaretBounds", "Internals", info.Holder(), info.GetIsolate());
    Internals* impl = V8Internals::toImpl(info.Holder());
    ClientRect* result = impl->absoluteCaretBounds(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void absoluteCaretBoundsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::absoluteCaretBoundsMethod(info);
}

static void boundingBoxMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "boundingBox", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("boundingBox", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
    }
    v8SetReturnValue(info, impl->boundingBox(element));
}

static void boundingBoxMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::boundingBoxMethod(info);
}

static void markerCountForNodeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "markerCountForNode", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    V8StringResource<> markerType;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
        markerType = info[1];
        if (!markerType.prepare())
            return;
    }
    unsigned result = impl->markerCountForNode(node, markerType, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueUnsigned(info, result);
}

static void markerCountForNodeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::markerCountForNodeMethod(info);
}

static void activeMarkerCountForNodeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "activeMarkerCountForNode", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("activeMarkerCountForNode", "Internals", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    v8SetReturnValueUnsigned(info, impl->activeMarkerCountForNode(node));
}

static void activeMarkerCountForNodeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::activeMarkerCountForNodeMethod(info);
}

static void markerRangeForNodeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "markerRangeForNode", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    V8StringResource<> markerType;
    unsigned index;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
        markerType = info[1];
        if (!markerType.prepare())
            return;
        index = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    Range* result = impl->markerRangeForNode(node, markerType, index, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void markerRangeForNodeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::markerRangeForNodeMethod(info);
}

static void markerDescriptionForNodeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "markerDescriptionForNode", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    V8StringResource<> markerType;
    unsigned index;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
        markerType = info[1];
        if (!markerType.prepare())
            return;
        index = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    String result = impl->markerDescriptionForNode(node, markerType, index, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void markerDescriptionForNodeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::markerDescriptionForNodeMethod(info);
}

static void addTextMatchMarkerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addTextMatchMarker", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Range* range;
    bool isActive;
    {
        range = V8Range::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!range) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Range'.");
            exceptionState.throwIfNeeded();
            return;
        }
        isActive = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->addTextMatchMarker(range, isActive);
}

static void addTextMatchMarkerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::addTextMatchMarkerMethod(info);
}

static void setMarkersActiveMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMarkersActive", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    unsigned startOffset;
    unsigned endOffset;
    bool active;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
        startOffset = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        endOffset = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        active = toBoolean(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMarkersActive(node, startOffset, endOffset, active);
}

static void setMarkersActiveMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setMarkersActiveMethod(info);
}

static void setMarkedTextMatchesAreHighlightedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMarkedTextMatchesAreHighlighted", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    bool highlight;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        highlight = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMarkedTextMatchesAreHighlighted(document, highlight);
}

static void setMarkedTextMatchesAreHighlightedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setMarkedTextMatchesAreHighlightedMethod(info);
}

static void setFrameViewPositionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setFrameViewPosition", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    int x;
    int y;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        x = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setFrameViewPosition(document, x, y, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setFrameViewPositionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setFrameViewPositionMethod(info);
}

static void viewportAsTextMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "viewportAsText", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    float devicePixelRatio;
    int availableWidth;
    int availableHeight;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        devicePixelRatio = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        availableWidth = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        availableHeight = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    String result = impl->viewportAsText(document, devicePixelRatio, availableWidth, availableHeight, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void viewportAsTextMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::viewportAsTextMethod(info);
}

static void elementShouldAutoCompleteMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "elementShouldAutoComplete", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* inputElement;
    {
        inputElement = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!inputElement) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    bool result = impl->elementShouldAutoComplete(inputElement, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueBool(info, result);
}

static void elementShouldAutoCompleteMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::elementShouldAutoCompleteMethod(info);
}

static void suggestedValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "suggestedValue", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* inputElement;
    {
        inputElement = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!inputElement) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    String result = impl->suggestedValue(inputElement, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void suggestedValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::suggestedValueMethod(info);
}

static void setSuggestedValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setSuggestedValue", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* inputElement;
    V8StringResource<> value;
    {
        inputElement = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!inputElement) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
        value = info[1];
        if (!value.prepare())
            return;
    }
    impl->setSuggestedValue(inputElement, value, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setSuggestedValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setSuggestedValueMethod(info);
}

static void setEditingValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setEditingValue", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* inputElement;
    V8StringResource<> value;
    {
        inputElement = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!inputElement) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
        value = info[1];
        if (!value.prepare())
            return;
    }
    impl->setEditingValue(inputElement, value, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setEditingValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setEditingValueMethod(info);
}

static void setAutofilledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAutofilled", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* inputElement;
    bool enabled;
    {
        inputElement = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!inputElement) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
        enabled = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAutofilled(inputElement, enabled, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setAutofilledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setAutofilledMethod(info);
}

static void rangeFromLocationAndLengthMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "rangeFromLocationAndLength", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* scope;
    int rangeLocation;
    int rangeLength;
    {
        scope = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!scope) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
        rangeLocation = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        rangeLength = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValue(info, impl->rangeFromLocationAndLength(scope, rangeLocation, rangeLength));
}

static void rangeFromLocationAndLengthMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::rangeFromLocationAndLengthMethod(info);
}

static void locationFromRangeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "locationFromRange", "Internals", 2, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* scope;
    Range* range;
    {
        scope = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!scope) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("locationFromRange", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
        range = V8Range::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!range) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("locationFromRange", "Internals", "parameter 2 is not of type 'Range'."));
            return;
        }
    }
    v8SetReturnValueUnsigned(info, impl->locationFromRange(scope, range));
}

static void locationFromRangeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::locationFromRangeMethod(info);
}

static void lengthFromRangeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "lengthFromRange", "Internals", 2, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* scope;
    Range* range;
    {
        scope = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!scope) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("lengthFromRange", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
        range = V8Range::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!range) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("lengthFromRange", "Internals", "parameter 2 is not of type 'Range'."));
            return;
        }
    }
    v8SetReturnValueUnsigned(info, impl->lengthFromRange(scope, range));
}

static void lengthFromRangeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::lengthFromRangeMethod(info);
}

static void rangeAsTextMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "rangeAsText", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Range* range;
    {
        range = V8Range::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!range) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("rangeAsText", "Internals", "parameter 1 is not of type 'Range'."));
            return;
        }
    }
    v8SetReturnValueString(info, impl->rangeAsText(range), info.GetIsolate());
}

static void rangeAsTextMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::rangeAsTextMethod(info);
}

static void touchPositionAdjustedToBestClickableNodeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "touchPositionAdjustedToBestClickableNode", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 5)) {
        setMinimumArityTypeError(exceptionState, 5, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    int x;
    int y;
    int width;
    int height;
    Document* document;
    {
        x = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[4]);
        if (!document) {
            exceptionState.throwTypeError("parameter 5 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    DOMPoint* result = impl->touchPositionAdjustedToBestClickableNode(x, y, width, height, document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void touchPositionAdjustedToBestClickableNodeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::touchPositionAdjustedToBestClickableNodeMethod(info);
}

static void touchNodeAdjustedToBestClickableNodeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "touchNodeAdjustedToBestClickableNode", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 5)) {
        setMinimumArityTypeError(exceptionState, 5, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    int x;
    int y;
    int width;
    int height;
    Document* document;
    {
        x = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[4]);
        if (!document) {
            exceptionState.throwTypeError("parameter 5 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    Node* result = impl->touchNodeAdjustedToBestClickableNode(x, y, width, height, document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void touchNodeAdjustedToBestClickableNodeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::touchNodeAdjustedToBestClickableNodeMethod(info);
}

static void touchPositionAdjustedToBestContextMenuNodeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "touchPositionAdjustedToBestContextMenuNode", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 5)) {
        setMinimumArityTypeError(exceptionState, 5, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    int x;
    int y;
    int width;
    int height;
    Document* document;
    {
        x = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[4]);
        if (!document) {
            exceptionState.throwTypeError("parameter 5 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    DOMPoint* result = impl->touchPositionAdjustedToBestContextMenuNode(x, y, width, height, document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void touchPositionAdjustedToBestContextMenuNodeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::touchPositionAdjustedToBestContextMenuNodeMethod(info);
}

static void touchNodeAdjustedToBestContextMenuNodeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "touchNodeAdjustedToBestContextMenuNode", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 5)) {
        setMinimumArityTypeError(exceptionState, 5, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    int x;
    int y;
    int width;
    int height;
    Document* document;
    {
        x = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[4]);
        if (!document) {
            exceptionState.throwTypeError("parameter 5 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    Node* result = impl->touchNodeAdjustedToBestContextMenuNode(x, y, width, height, document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void touchNodeAdjustedToBestContextMenuNodeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::touchNodeAdjustedToBestContextMenuNodeMethod(info);
}

static void bestZoomableAreaForTouchPointMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bestZoomableAreaForTouchPoint", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 5)) {
        setMinimumArityTypeError(exceptionState, 5, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    int x;
    int y;
    int width;
    int height;
    Document* document;
    {
        x = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[4]);
        if (!document) {
            exceptionState.throwTypeError("parameter 5 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    ClientRect* result = impl->bestZoomableAreaForTouchPoint(x, y, width, height, document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void bestZoomableAreaForTouchPointMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::bestZoomableAreaForTouchPointMethod(info);
}

static void lastSpellCheckRequestSequenceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "lastSpellCheckRequestSequence", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    int result = impl->lastSpellCheckRequestSequence(document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueInt(info, result);
}

static void lastSpellCheckRequestSequenceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::lastSpellCheckRequestSequenceMethod(info);
}

static void lastSpellCheckProcessedSequenceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "lastSpellCheckProcessedSequence", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    int result = impl->lastSpellCheckProcessedSequence(document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueInt(info, result);
}

static void lastSpellCheckProcessedSequenceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::lastSpellCheckProcessedSequenceMethod(info);
}

static void userPreferredLanguagesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValue(info, toV8(impl->userPreferredLanguages(), info.Holder(), info.GetIsolate()));
}

static void userPreferredLanguagesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::userPreferredLanguagesMethod(info);
}

static void setUserPreferredLanguagesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setUserPreferredLanguages", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Vector<String> languages;
    {
        languages = toImplArray<Vector<String>>(info[0], 1, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setUserPreferredLanguages(languages);
}

static void setUserPreferredLanguagesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setUserPreferredLanguagesMethod(info);
}

static void activeDOMObjectCountMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "activeDOMObjectCount", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("activeDOMObjectCount", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValueUnsigned(info, impl->activeDOMObjectCount(document));
}

static void activeDOMObjectCountMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::activeDOMObjectCountMethod(info);
}

static void wheelEventHandlerCountMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "wheelEventHandlerCount", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("wheelEventHandlerCount", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValueUnsigned(info, impl->wheelEventHandlerCount(document));
}

static void wheelEventHandlerCountMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::wheelEventHandlerCountMethod(info);
}

static void scrollEventHandlerCountMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "scrollEventHandlerCount", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("scrollEventHandlerCount", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValueUnsigned(info, impl->scrollEventHandlerCount(document));
}

static void scrollEventHandlerCountMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::scrollEventHandlerCountMethod(info);
}

static void touchStartOrMoveEventHandlerCountMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "touchStartOrMoveEventHandlerCount", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("touchStartOrMoveEventHandlerCount", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValueUnsigned(info, impl->touchStartOrMoveEventHandlerCount(document));
}

static void touchStartOrMoveEventHandlerCountMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::touchStartOrMoveEventHandlerCountMethod(info);
}

static void touchEndOrCancelEventHandlerCountMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "touchEndOrCancelEventHandlerCount", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("touchEndOrCancelEventHandlerCount", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValueUnsigned(info, impl->touchEndOrCancelEventHandlerCount(document));
}

static void touchEndOrCancelEventHandlerCountMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::touchEndOrCancelEventHandlerCountMethod(info);
}

static void touchEventTargetLayerRectsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "touchEventTargetLayerRects", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    LayerRectList* result = impl->touchEventTargetLayerRects(document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void touchEventTargetLayerRectsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::touchEventTargetLayerRectsMethod(info);
}

static void executeCommandMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "executeCommand", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    V8StringResource<> name;
    V8StringResource<> value;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        name = info[1];
        if (!name.prepare())
            return;
        value = info[2];
        if (!value.prepare())
            return;
    }
    bool result = impl->executeCommand(document, name, value, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueBool(info, result);
}

static void executeCommandMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::executeCommandMethod(info);
}

static void htmlNamespaceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueString(info, impl->htmlNamespace(), info.GetIsolate());
}

static void htmlNamespaceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::htmlNamespaceMethod(info);
}

static void htmlTagsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValue(info, toV8(impl->htmlTags(), info.Holder(), info.GetIsolate()));
}

static void htmlTagsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::htmlTagsMethod(info);
}

static void svgNamespaceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueString(info, impl->svgNamespace(), info.GetIsolate());
}

static void svgNamespaceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::svgNamespaceMethod(info);
}

static void svgTagsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValue(info, toV8(impl->svgTags(), info.Holder(), info.GetIsolate()));
}

static void svgTagsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::svgTagsMethod(info);
}

static void nodesFromRectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "nodesFromRect", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 9)) {
        setMinimumArityTypeError(exceptionState, 9, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    int x;
    int y;
    unsigned topPadding;
    unsigned rightPadding;
    unsigned bottomPadding;
    unsigned leftPadding;
    bool ignoreClipping;
    bool allowChildFrameContent;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        x = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        topPadding = toUInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        rightPadding = toUInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        bottomPadding = toUInt32(info.GetIsolate(), info[5], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        leftPadding = toUInt32(info.GetIsolate(), info[6], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        ignoreClipping = toBoolean(info.GetIsolate(), info[7], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        allowChildFrameContent = toBoolean(info.GetIsolate(), info[8], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    NodeList* result = impl->nodesFromRect(document, x, y, topPadding, rightPadding, bottomPadding, leftPadding, ignoreClipping, allowChildFrameContent, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void nodesFromRectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::nodesFromRectMethod(info);
}

static void hasSpellingMarkerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "hasSpellingMarker", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    int from;
    int length;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        from = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        length = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueBool(info, impl->hasSpellingMarker(document, from, length));
}

static void hasSpellingMarkerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::hasSpellingMarkerMethod(info);
}

static void hasGrammarMarkerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "hasGrammarMarker", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    int from;
    int length;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        from = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        length = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueBool(info, impl->hasGrammarMarker(document, from, length));
}

static void hasGrammarMarkerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::hasGrammarMarkerMethod(info);
}

static void setSpellCheckingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setSpellCheckingEnabled", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setSpellCheckingEnabled(enabled);
}

static void setSpellCheckingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setSpellCheckingEnabledMethod(info);
}

static void canHyphenateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "canHyphenate", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    V8StringResource<> locale;
    {
        locale = info[0];
        if (!locale.prepare())
            return;
    }
    v8SetReturnValue(info, impl->canHyphenate(locale));
}

static void canHyphenateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::canHyphenateMethod(info);
}

static void setMockHyphenationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setMockHyphenation", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    V8StringResource<> locale;
    {
        locale = info[0];
        if (!locale.prepare())
            return;
    }
    impl->setMockHyphenation(locale);
}

static void setMockHyphenationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setMockHyphenationMethod(info);
}

static void isOverwriteModeEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isOverwriteModeEnabled", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isOverwriteModeEnabled", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isOverwriteModeEnabled(document));
}

static void isOverwriteModeEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::isOverwriteModeEnabledMethod(info);
}

static void toggleOverwriteModeEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "toggleOverwriteModeEnabled", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("toggleOverwriteModeEnabled", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    impl->toggleOverwriteModeEnabled(document);
}

static void toggleOverwriteModeEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::toggleOverwriteModeEnabledMethod(info);
}

static void numberOfScrollableAreasMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "numberOfScrollableAreas", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("numberOfScrollableAreas", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValueUnsigned(info, impl->numberOfScrollableAreas(document));
}

static void numberOfScrollableAreasMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::numberOfScrollableAreasMethod(info);
}

static void isPageBoxVisibleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "isPageBoxVisible", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    int pageNumber;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        pageNumber = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueBool(info, impl->isPageBoxVisible(document, pageNumber));
}

static void isPageBoxVisibleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::isPageBoxVisibleMethod(info);
}

static void layerTreeAsTextMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "layerTreeAsText", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    unsigned flags;
    {
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        if (UNLIKELY(numArgsPassed <= 1)) {
            String result = impl->layerTreeAsText(document, exceptionState);
            if (exceptionState.hadException()) {
                exceptionState.throwIfNeeded();
                return;
            }
            v8SetReturnValueString(info, result, info.GetIsolate());
            return;
        }
        flags = toUInt16(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    String result = impl->layerTreeAsText(document, flags, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void layerTreeAsTextMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::layerTreeAsTextMethod(info);
}

static void elementLayerTreeAsTextMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "elementLayerTreeAsText", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    unsigned flags;
    {
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
        if (UNLIKELY(numArgsPassed <= 1)) {
            String result = impl->elementLayerTreeAsText(element, exceptionState);
            if (exceptionState.hadException()) {
                exceptionState.throwIfNeeded();
                return;
            }
            v8SetReturnValueString(info, result, info.GetIsolate());
            return;
        }
        flags = toUInt16(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    String result = impl->elementLayerTreeAsText(element, flags, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void elementLayerTreeAsTextMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::elementLayerTreeAsTextMethod(info);
}

static void scrollsWithRespectToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "scrollsWithRespectTo", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element1;
    Element* element2;
    {
        element1 = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element1) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
        element2 = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!element2) {
            exceptionState.throwTypeError("parameter 2 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    bool result = impl->scrollsWithRespectTo(element1, element2, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueBool(info, result);
}

static void scrollsWithRespectToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::scrollsWithRespectToMethod(info);
}

static void scrollingStateTreeAsTextMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "scrollingStateTreeAsText", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("scrollingStateTreeAsText", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValueString(info, impl->scrollingStateTreeAsText(document), info.GetIsolate());
}

static void scrollingStateTreeAsTextMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::scrollingStateTreeAsTextMethod(info);
}

static void mainThreadScrollingReasonsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "mainThreadScrollingReasons", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    String result = impl->mainThreadScrollingReasons(document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void mainThreadScrollingReasonsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::mainThreadScrollingReasonsMethod(info);
}

static void nonFastScrollableRectsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "nonFastScrollableRects", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    ClientRectList* result = impl->nonFastScrollableRects(document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void nonFastScrollableRectsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::nonFastScrollableRectsMethod(info);
}

static void evictAllResourcesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    impl->evictAllResources();
}

static void evictAllResourcesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::evictAllResourcesMethod(info);
}

static void numberOfLiveNodesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueUnsigned(info, impl->numberOfLiveNodes());
}

static void numberOfLiveNodesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::numberOfLiveNodesMethod(info);
}

static void numberOfLiveDocumentsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueUnsigned(info, impl->numberOfLiveDocuments());
}

static void numberOfLiveDocumentsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::numberOfLiveDocumentsMethod(info);
}

static void dumpRefCountedInstanceCountsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueString(info, impl->dumpRefCountedInstanceCounts(), info.GetIsolate());
}

static void dumpRefCountedInstanceCountsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::dumpRefCountedInstanceCountsMethod(info);
}

static void setMemoryCacheCapacitiesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMemoryCacheCapacities", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    unsigned minDeadBytes;
    unsigned maxDeadBytes;
    unsigned totalBytes;
    {
        minDeadBytes = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        maxDeadBytes = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        totalBytes = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValue(info, toV8(impl->setMemoryCacheCapacities(minDeadBytes, maxDeadBytes, totalBytes), info.Holder(), info.GetIsolate()));
}

static void setMemoryCacheCapacitiesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setMemoryCacheCapacitiesMethod(info);
}

static void counterValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "counterValue", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("counterValue", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
    }
    v8SetReturnValueString(info, impl->counterValue(element), info.GetIsolate());
}

static void counterValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::counterValueMethod(info);
}

static void pageNumberMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "pageNumber", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    float pageWidth;
    float pageHeight;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
        if (!info[1]->IsUndefined()) {
            pageWidth = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            pageWidth = 800;
        }
        if (!info[2]->IsUndefined()) {
            pageHeight = toRestrictedFloat(info.GetIsolate(), info[2], exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            pageHeight = 600;
        }
    }
    int result = impl->pageNumber(element, pageWidth, pageHeight, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueInt(info, result);
}

static void pageNumberMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::pageNumberMethod(info);
}

static void shortcutIconURLsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "shortcutIconURLs", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("shortcutIconURLs", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValue(info, toV8(impl->shortcutIconURLs(document), info.Holder(), info.GetIsolate()));
}

static void shortcutIconURLsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::shortcutIconURLsMethod(info);
}

static void allIconURLsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "allIconURLs", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("allIconURLs", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValue(info, toV8(impl->allIconURLs(document), info.Holder(), info.GetIsolate()));
}

static void allIconURLsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::allIconURLsMethod(info);
}

static void numberOfPagesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "numberOfPages", "Internals", info.Holder(), info.GetIsolate());
    Internals* impl = V8Internals::toImpl(info.Holder());
    double pageWidthInPixels;
    double pageHeightInPixels;
    {
        if (!info[0]->IsUndefined()) {
            pageWidthInPixels = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            pageWidthInPixels = 800;
        }
        if (!info[1]->IsUndefined()) {
            pageHeightInPixels = toRestrictedDouble(info.GetIsolate(), info[1], exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            pageHeightInPixels = 600;
        }
    }
    int result = impl->numberOfPages(pageWidthInPixels, pageHeightInPixels, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueInt(info, result);
}

static void numberOfPagesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::numberOfPagesMethod(info);
}

static void pagePropertyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "pageProperty", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    V8StringResource<> propertyName;
    int pageNumber;
    {
        propertyName = info[0];
        if (!propertyName.prepare())
            return;
        pageNumber = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    String result = impl->pageProperty(propertyName, pageNumber, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void pagePropertyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::pagePropertyMethod(info);
}

static void pageSizeAndMarginsInPixelsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "pageSizeAndMarginsInPixels", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 7)) {
        setMinimumArityTypeError(exceptionState, 7, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    int pageIndex;
    int width;
    int height;
    int marginTop;
    int marginRight;
    int marginBottom;
    int marginLeft;
    {
        pageIndex = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        marginTop = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        marginRight = toInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        marginBottom = toInt32(info.GetIsolate(), info[5], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        marginLeft = toInt32(info.GetIsolate(), info[6], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    String result = impl->pageSizeAndMarginsInPixels(pageIndex, width, height, marginTop, marginRight, marginBottom, marginLeft, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void pageSizeAndMarginsInPixelsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::pageSizeAndMarginsInPixelsMethod(info);
}

static void setPageScaleFactorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setPageScaleFactor", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    float scaleFactor;
    {
        scaleFactor = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setPageScaleFactor(scaleFactor, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setPageScaleFactorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setPageScaleFactorMethod(info);
}

static void setPageScaleFactorLimitsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setPageScaleFactorLimits", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    float minScaleFactor;
    float maxScaleFactor;
    {
        minScaleFactor = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        maxScaleFactor = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setPageScaleFactorLimits(minScaleFactor, maxScaleFactor, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setPageScaleFactorLimitsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setPageScaleFactorLimitsMethod(info);
}

static void setIsCursorVisibleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setIsCursorVisible", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    bool isVisible;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        isVisible = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setIsCursorVisible(document, isVisible, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setIsCursorVisibleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setIsCursorVisibleMethod(info);
}

static void effectiveMediaVolumeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "effectiveMediaVolume", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    HTMLMediaElement* mediaElement;
    {
        mediaElement = V8HTMLMediaElement::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!mediaElement) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("effectiveMediaVolume", "Internals", "parameter 1 is not of type 'HTMLMediaElement'."));
            return;
        }
    }
    v8SetReturnValue(info, impl->effectiveMediaVolume(mediaElement));
}

static void effectiveMediaVolumeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::effectiveMediaVolumeMethod(info);
}

static void effectivePreloadMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "effectivePreload", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    HTMLMediaElement* mediaElement;
    {
        mediaElement = V8HTMLMediaElement::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!mediaElement) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("effectivePreload", "Internals", "parameter 1 is not of type 'HTMLMediaElement'."));
            return;
        }
    }
    v8SetReturnValueString(info, impl->effectivePreload(mediaElement), info.GetIsolate());
}

static void effectivePreloadMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::effectivePreloadMethod(info);
}

static void mediaPlayerRemoteRouteAvailabilityChangedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "mediaPlayerRemoteRouteAvailabilityChanged", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    HTMLMediaElement* mediaElement;
    bool available;
    {
        mediaElement = V8HTMLMediaElement::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!mediaElement) {
            exceptionState.throwTypeError("parameter 1 is not of type 'HTMLMediaElement'.");
            exceptionState.throwIfNeeded();
            return;
        }
        available = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->mediaPlayerRemoteRouteAvailabilityChanged(mediaElement, available);
}

static void mediaPlayerRemoteRouteAvailabilityChangedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::mediaPlayerRemoteRouteAvailabilityChangedMethod(info);
}

static void mediaPlayerPlayingRemotelyChangedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "mediaPlayerPlayingRemotelyChanged", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    HTMLMediaElement* mediaElement;
    bool remote;
    {
        mediaElement = V8HTMLMediaElement::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!mediaElement) {
            exceptionState.throwTypeError("parameter 1 is not of type 'HTMLMediaElement'.");
            exceptionState.throwIfNeeded();
            return;
        }
        remote = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->mediaPlayerPlayingRemotelyChanged(mediaElement, remote);
}

static void mediaPlayerPlayingRemotelyChangedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::mediaPlayerPlayingRemotelyChangedMethod(info);
}

static void setAllowHiddenVolumeControlsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAllowHiddenVolumeControls", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    HTMLMediaElement* mediaElement;
    bool allow;
    {
        mediaElement = V8HTMLMediaElement::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!mediaElement) {
            exceptionState.throwTypeError("parameter 1 is not of type 'HTMLMediaElement'.");
            exceptionState.throwIfNeeded();
            return;
        }
        allow = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAllowHiddenVolumeControls(mediaElement, allow);
}

static void setAllowHiddenVolumeControlsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setAllowHiddenVolumeControlsMethod(info);
}

static void registerURLSchemeAsBypassingContentSecurityPolicy1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    V8StringResource<> scheme;
    {
        scheme = info[0];
        if (!scheme.prepare())
            return;
    }
    impl->registerURLSchemeAsBypassingContentSecurityPolicy(scheme);
}

static void registerURLSchemeAsBypassingContentSecurityPolicy2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "registerURLSchemeAsBypassingContentSecurityPolicy", "Internals", info.Holder(), info.GetIsolate());
    Internals* impl = V8Internals::toImpl(info.Holder());
    V8StringResource<> scheme;
    Vector<String> policyAreas;
    {
        scheme = info[0];
        if (!scheme.prepare())
            return;
        policyAreas = toImplArray<Vector<String>>(info[1], 2, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->registerURLSchemeAsBypassingContentSecurityPolicy(scheme, policyAreas);
}

static void registerURLSchemeAsBypassingContentSecurityPolicyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "registerURLSchemeAsBypassingContentSecurityPolicy", "Internals", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 1:
        if (true) {
            registerURLSchemeAsBypassingContentSecurityPolicy1Method(info);
            return;
        }
        break;
    case 2:
        if (true) {
            registerURLSchemeAsBypassingContentSecurityPolicy2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 1) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void registerURLSchemeAsBypassingContentSecurityPolicyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::registerURLSchemeAsBypassingContentSecurityPolicyMethod(info);
}

static void removeURLSchemeRegisteredAsBypassingContentSecurityPolicyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "removeURLSchemeRegisteredAsBypassingContentSecurityPolicy", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    V8StringResource<> scheme;
    {
        scheme = info[0];
        if (!scheme.prepare())
            return;
    }
    impl->removeURLSchemeRegisteredAsBypassingContentSecurityPolicy(scheme);
}

static void removeURLSchemeRegisteredAsBypassingContentSecurityPolicyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::removeURLSchemeRegisteredAsBypassingContentSecurityPolicyMethod(info);
}

static void typeConversionsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValue(info, impl->typeConversions());
}

static void typeConversionsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::typeConversionsMethod(info);
}

static void privateScriptTestMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValue(info, impl->privateScriptTest());
}

static void privateScriptTestMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::privateScriptTestMethod(info);
}

static void getReferencedFilePathsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValue(info, toV8(impl->getReferencedFilePaths(), info.Holder(), info.GetIsolate()));
}

static void getReferencedFilePathsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::getReferencedFilePathsMethod(info);
}

static void startTrackingRepaintsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "startTrackingRepaints", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->startTrackingRepaints(document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void startTrackingRepaintsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::startTrackingRepaintsMethod(info);
}

static void stopTrackingRepaintsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "stopTrackingRepaints", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->stopTrackingRepaints(document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void stopTrackingRepaintsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::stopTrackingRepaintsMethod(info);
}

static void updateLayoutIgnorePendingStylesheetsAndRunPostLayoutTasksMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "updateLayoutIgnorePendingStylesheetsAndRunPostLayoutTasks", "Internals", info.Holder(), info.GetIsolate());
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        if (!info[0]->IsUndefined()) {
            node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
            if (!node && !isUndefinedOrNull(info[0])) {
                exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
                exceptionState.throwIfNeeded();
                return;
            }
        } else {
            node = nullptr;
        }
    }
    impl->updateLayoutIgnorePendingStylesheetsAndRunPostLayoutTasks(node, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void updateLayoutIgnorePendingStylesheetsAndRunPostLayoutTasksMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::updateLayoutIgnorePendingStylesheetsAndRunPostLayoutTasksMethod(info);
}

static void forceFullRepaintMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "forceFullRepaint", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->forceFullRepaint(document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void forceFullRepaintMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::forceFullRepaintMethod(info);
}

static void draggableRegionsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "draggableRegions", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    ClientRectList* result = impl->draggableRegions(document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void draggableRegionsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::draggableRegionsMethod(info);
}

static void nonDraggableRegionsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "nonDraggableRegions", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    ClientRectList* result = impl->nonDraggableRegions(document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void nonDraggableRegionsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::nonDraggableRegionsMethod(info);
}

static void getCurrentCursorInfoMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueString(info, impl->getCurrentCursorInfo(), info.GetIsolate());
}

static void getCurrentCursorInfoMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::getCurrentCursorInfoMethod(info);
}

static void markerTextForListItemMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "markerTextForListItem", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("markerTextForListItem", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
    }
    v8SetReturnValueString(info, impl->markerTextForListItem(element), info.GetIsolate());
}

static void markerTextForListItemMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::markerTextForListItemMethod(info);
}

static void deserializeBufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "deserializeBuffer", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    DOMArrayBuffer* buffer;
    {
        buffer = info[0]->IsArrayBuffer() ? V8ArrayBuffer::toImpl(v8::Local<v8::ArrayBuffer>::Cast(info[0])) : 0;
        if (!buffer) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("deserializeBuffer", "Internals", "parameter 1 is not of type 'ArrayBuffer'."));
            return;
        }
    }
    v8SetReturnValue(info, v8Deserialize(info.GetIsolate(), impl->deserializeBuffer(buffer)));
}

static void deserializeBufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::deserializeBufferMethod(info);
}

static void serializeObjectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "serializeObject", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    RefPtr<SerializedScriptValue> obj;
    {
        obj = SerializedScriptValue::serialize(info.GetIsolate(), info[0], nullptr, nullptr, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValue(info, impl->serializeObject(obj));
}

static void serializeObjectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::serializeObjectMethod(info);
}

static void forceReloadMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "forceReload", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    bool endToEnd;
    {
        endToEnd = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->forceReload(endToEnd);
}

static void forceReloadMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::forceReloadMethod(info);
}

static void getImageSourceURLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getImageSourceURL", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getImageSourceURL", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
    }
    v8SetReturnValueString(info, impl->getImageSourceURL(element), info.GetIsolate());
}

static void getImageSourceURLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::getImageSourceURLMethod(info);
}

static void selectMenuListTextMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "selectMenuListText", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    HTMLSelectElement* select;
    {
        select = V8HTMLSelectElement::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!select) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("selectMenuListText", "Internals", "parameter 1 is not of type 'HTMLSelectElement'."));
            return;
        }
    }
    v8SetReturnValueString(info, impl->selectMenuListText(select), info.GetIsolate());
}

static void selectMenuListTextMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::selectMenuListTextMethod(info);
}

static void isSelectPopupVisibleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isSelectPopupVisible", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isSelectPopupVisible", "Internals", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isSelectPopupVisible(node));
}

static void isSelectPopupVisibleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::isSelectPopupVisibleMethod(info);
}

static void selectPopupItemStyleIsRtlMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "selectPopupItemStyleIsRtl", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* select;
    int itemIndex;
    {
        select = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!select) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
        itemIndex = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueBool(info, impl->selectPopupItemStyleIsRtl(select, itemIndex));
}

static void selectPopupItemStyleIsRtlMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::selectPopupItemStyleIsRtlMethod(info);
}

static void selectPopupItemStyleFontHeightMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "selectPopupItemStyleFontHeight", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* select;
    int itemIndex;
    {
        select = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!select) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
        itemIndex = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueInt(info, impl->selectPopupItemStyleFontHeight(select, itemIndex));
}

static void selectPopupItemStyleFontHeightMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::selectPopupItemStyleFontHeightMethod(info);
}

static void resetTypeAheadSessionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "resetTypeAheadSession", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    HTMLSelectElement* select;
    {
        select = V8HTMLSelectElement::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!select) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("resetTypeAheadSession", "Internals", "parameter 1 is not of type 'HTMLSelectElement'."));
            return;
        }
    }
    impl->resetTypeAheadSession(select);
}

static void resetTypeAheadSessionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::resetTypeAheadSessionMethod(info);
}

static void selectionBoundsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "selectionBounds", "Internals", info.Holder(), info.GetIsolate());
    Internals* impl = V8Internals::toImpl(info.Holder());
    ClientRect* result = impl->selectionBounds(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void selectionBoundsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::selectionBoundsMethod(info);
}

static void loseSharedGraphicsContext3DMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueBool(info, impl->loseSharedGraphicsContext3D());
}

static void loseSharedGraphicsContext3DMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::loseSharedGraphicsContext3DMethod(info);
}

static void forceCompositingUpdateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "forceCompositingUpdate", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->forceCompositingUpdate(document, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void forceCompositingUpdateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::forceCompositingUpdateMethod(info);
}

static void setZoomFactorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setZoomFactor", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    float factor;
    {
        factor = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setZoomFactor(factor);
}

static void setZoomFactorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setZoomFactorMethod(info);
}

static void setShouldRevealPasswordMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setShouldRevealPassword", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    bool reveal;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
        reveal = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setShouldRevealPassword(element, reveal, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setShouldRevealPasswordMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setShouldRevealPasswordMethod(info);
}

static void createResolvedPromiseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        v8SetReturnValue(info, ScriptPromise::rejectRaw(ScriptState::current(info.GetIsolate()), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "createResolvedPromise", "Internals", 1, info.Length())));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    ScriptValue value;
    {
        value = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->createResolvedPromise(scriptState, value);
    v8SetReturnValue(info, result.v8Value());
}

static void createResolvedPromiseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::createResolvedPromiseMethod(info);
}

static void createRejectedPromiseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        v8SetReturnValue(info, ScriptPromise::rejectRaw(ScriptState::current(info.GetIsolate()), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "createRejectedPromise", "Internals", 1, info.Length())));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    ScriptValue reason;
    {
        reason = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->createRejectedPromise(scriptState, reason);
    v8SetReturnValue(info, result.v8Value());
}

static void createRejectedPromiseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::createRejectedPromiseMethod(info);
}

static void addOneToPromiseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        v8SetReturnValue(info, ScriptPromise::rejectRaw(ScriptState::current(info.GetIsolate()), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "addOneToPromise", "Internals", 1, info.Length())));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    ScriptPromise promise;
    {
        promise = ScriptPromise::cast(ScriptState::current(info.GetIsolate()), info[0]);
        if (!promise.isUndefinedOrNull() && !promise.isObject()) {
            v8SetReturnValue(info, ScriptPromise::rejectRaw(ScriptState::current(info.GetIsolate()), V8ThrowException::createTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("addOneToPromise", "Internals", "parameter 1 ('promise') is not an object."))));
            return;
        }
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->addOneToPromise(scriptState, promise);
    v8SetReturnValue(info, result.v8Value());
}

static void addOneToPromiseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::addOneToPromiseMethod(info);
}

static void promiseCheckMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    if (UNLIKELY(info.Length() < 5)) {
        setMinimumArityTypeError(exceptionState, 5, info.Length());
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    int arg1;
    bool arg2;
    Dictionary arg3;
    V8StringResource<> arg4;
    Vector<String> arg5;
    {
        arg1 = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        arg2 = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;
        if (!isUndefinedOrNull(info[2]) && !info[2]->IsObject()) {
            exceptionState.throwTypeError("parameter 3 ('arg3') is not an object.");
            return;
        }
        arg3 = Dictionary(info[2], info.GetIsolate(), exceptionState);
        if (exceptionState.hadException())
            return;
        arg4 = info[3];
        if (!arg4.prepare(exceptionState))
            return;
        arg5 = toImplArray<Vector<String>>(info[4], 5, info.GetIsolate(), exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->promiseCheck(scriptState, arg1, arg2, arg3, arg4, arg5, exceptionState);
    if (exceptionState.hadException()) {
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void promiseCheckMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "promiseCheck", "Internals", info.Holder(), info.GetIsolate());
    promiseCheckMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void promiseCheckMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::promiseCheckMethod(info);
}

static void promiseCheckWithoutExceptionStateMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Dictionary arg1;
    V8StringResource<> arg2;
    Vector<String> variadic;
    {
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('arg1') is not an object.");
            return;
        }
        arg1 = Dictionary(info[0], info.GetIsolate(), exceptionState);
        if (exceptionState.hadException())
            return;
        arg2 = info[1];
        if (!arg2.prepare(exceptionState))
            return;
        variadic = toImplArguments<Vector<String>>(info, 2, exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->promiseCheckWithoutExceptionState(scriptState, arg1, arg2, variadic);
    v8SetReturnValue(info, result.v8Value());
}

static void promiseCheckWithoutExceptionStateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "promiseCheckWithoutExceptionState", "Internals", info.Holder(), info.GetIsolate());
    promiseCheckWithoutExceptionStateMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void promiseCheckWithoutExceptionStateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::promiseCheckWithoutExceptionStateMethod(info);
}

static void promiseCheckRangeMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    unsigned arg1;
    {
        arg1 = toUInt8(info.GetIsolate(), info[0], EnforceRange, exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->promiseCheckRange(scriptState, arg1);
    v8SetReturnValue(info, result.v8Value());
}

static void promiseCheckRangeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "promiseCheckRange", "Internals", info.Holder(), info.GetIsolate());
    promiseCheckRangeMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void promiseCheckRangeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::promiseCheckRangeMethod(info);
}

static void promiseCheckOverload1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    Location* arg1;
    {
        arg1 = V8Location::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!arg1) {
            v8SetReturnValue(info, ScriptPromise::rejectRaw(ScriptState::current(info.GetIsolate()), V8ThrowException::createTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("promiseCheckOverload", "Internals", "parameter 1 is not of type 'Location'."))));
            return;
        }
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->promiseCheckOverload(scriptState, arg1);
    v8SetReturnValue(info, result.v8Value());
}

static void promiseCheckOverload2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* arg1;
    {
        arg1 = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!arg1) {
            v8SetReturnValue(info, ScriptPromise::rejectRaw(ScriptState::current(info.GetIsolate()), V8ThrowException::createTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("promiseCheckOverload", "Internals", "parameter 1 is not of type 'Document'."))));
            return;
        }
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->promiseCheckOverload(scriptState, arg1);
    v8SetReturnValue(info, result.v8Value());
}

static void promiseCheckOverload3MethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    Location* arg1;
    int arg2;
    int arg3;
    {
        arg1 = V8Location::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!arg1) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Location'.");
            return;
        }
        arg2 = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        arg3 = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->promiseCheckOverload(scriptState, arg1, arg2, arg3);
    v8SetReturnValue(info, result.v8Value());
}

static void promiseCheckOverload3Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "promiseCheckOverload", "Internals", info.Holder(), info.GetIsolate());
    promiseCheckOverload3MethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void promiseCheckOverloadMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "promiseCheckOverload", "Internals", info.Holder(), info.GetIsolate());
    switch (std::min(3, info.Length())) {
    case 1:
        if (V8Location::hasInstance(info[0], info.GetIsolate())) {
            promiseCheckOverload1Method(info);
            return;
        }
        if (V8Document::hasInstance(info[0], info.GetIsolate())) {
            promiseCheckOverload2Method(info);
            return;
        }
        break;
    case 3:
        if (true) {
            promiseCheckOverload3Method(info);
            return;
        }
        break;
    default:
        if (info.Length() >= 1) {
            setArityTypeError(exceptionState, "[1, 3]", info.Length());
            v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
            return;
        }
        break;
    }
    if (info.Length() < 1) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
    return;
}

static void promiseCheckOverloadMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::promiseCheckOverloadMethod(info);
}

static void setValueForUserMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setValueForUser", "Internals", 2, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    V8StringResource<> value;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("setValueForUser", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
        value = info[1];
        if (!value.prepare())
            return;
    }
    impl->setValueForUser(element, value);
}

static void setValueForUserMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setValueForUserMethod(info);
}

static void textSurroundingNodeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "textSurroundingNode", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    int x;
    int y;
    unsigned maxLength;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
        x = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        maxLength = toUInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueString(info, impl->textSurroundingNode(node, x, y, maxLength), info.GetIsolate());
}

static void textSurroundingNodeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::textSurroundingNodeMethod(info);
}

static void setFocusedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setFocused", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    bool focused;
    {
        focused = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setFocused(focused);
}

static void setFocusedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setFocusedMethod(info);
}

static void setInitialFocusMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setInitialFocus", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    bool reverse;
    {
        reverse = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setInitialFocus(reverse);
}

static void setInitialFocusMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setInitialFocusMethod(info);
}

static void ignoreLayoutWithPendingStylesheetsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "ignoreLayoutWithPendingStylesheets", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("ignoreLayoutWithPendingStylesheets", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->ignoreLayoutWithPendingStylesheets(document));
}

static void ignoreLayoutWithPendingStylesheetsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::ignoreLayoutWithPendingStylesheetsMethod(info);
}

static void setNetworkConnectionInfoOverrideMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setNetworkConnectionInfoOverride", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    bool onLine;
    V8StringResource<> type;
    double downlinkMaxMbps;
    {
        onLine = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = info[1];
        if (!type.prepare())
            return;
        downlinkMaxMbps = toRestrictedDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setNetworkConnectionInfoOverride(onLine, type, downlinkMaxMbps, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setNetworkConnectionInfoOverrideMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setNetworkConnectionInfoOverrideMethod(info);
}

static void clearNetworkConnectionInfoOverrideMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    impl->clearNetworkConnectionInfoOverride();
}

static void clearNetworkConnectionInfoOverrideMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::clearNetworkConnectionInfoOverrideMethod(info);
}

static void countHitRegionsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "countHitRegions", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    CanvasRenderingContext2D* context;
    {
        context = V8CanvasRenderingContext2D::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!context) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("countHitRegions", "Internals", "parameter 1 is not of type 'CanvasRenderingContext2D'."));
            return;
        }
    }
    v8SetReturnValueUnsigned(info, impl->countHitRegions(context));
}

static void countHitRegionsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::countHitRegionsMethod(info);
}

static void isInCanvasFontCacheMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isInCanvasFontCache", "Internals", 2, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    V8StringResource<> fontString;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isInCanvasFontCache", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
        fontString = info[1];
        if (!fontString.prepare())
            return;
    }
    v8SetReturnValueBool(info, impl->isInCanvasFontCache(document, fontString));
}

static void isInCanvasFontCacheMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::isInCanvasFontCacheMethod(info);
}

static void canvasFontCacheMaxFontsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueUnsigned(info, impl->canvasFontCacheMaxFonts());
}

static void canvasFontCacheMaxFontsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::canvasFontCacheMaxFontsMethod(info);
}

static void dictionaryTestMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValue(info, impl->dictionaryTest());
}

static void dictionaryTestMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::dictionaryTestMethod(info);
}

static void unionTypesTestMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValue(info, impl->unionTypesTest());
}

static void unionTypesTestMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::unionTypesTestMethod(info);
}

static void setScrollChainMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setScrollChain", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    ScrollState* scrollState;
    HeapVector<Member<Element>> elements;
    {
        scrollState = V8ScrollState::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!scrollState) {
            exceptionState.throwTypeError("parameter 1 is not of type 'ScrollState'.");
            exceptionState.throwIfNeeded();
            return;
        }
        elements = (toMemberNativeArray<Element>(info[1], 2, info.GetIsolate(), exceptionState));
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setScrollChain(scrollState, elements, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setScrollChainMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setScrollChainMethod(info);
}

static void forceBlinkGCWithoutV8GCMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    impl->forceBlinkGCWithoutV8GC();
}

static void forceBlinkGCWithoutV8GCMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::forceBlinkGCWithoutV8GCMethod(info);
}

static void selectedHTMLForClipboardMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueString(info, impl->selectedHTMLForClipboard(), info.GetIsolate());
}

static void selectedHTMLForClipboardMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::selectedHTMLForClipboardMethod(info);
}

static void selectedTextForClipboardMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueString(info, impl->selectedTextForClipboard(), info.GetIsolate());
}

static void selectedTextForClipboardMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::selectedTextForClipboardMethod(info);
}

static void setVisualViewportOffsetMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setVisualViewportOffset", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    int x;
    int y;
    {
        x = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setVisualViewportOffset(x, y);
}

static void setVisualViewportOffsetMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setVisualViewportOffsetMethod(info);
}

static void visualViewportHeightMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueInt(info, impl->visualViewportHeight());
}

static void visualViewportHeightMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::visualViewportHeightMethod(info);
}

static void visualViewportWidthMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueInt(info, impl->visualViewportWidth());
}

static void visualViewportWidthMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::visualViewportWidthMethod(info);
}

static void visualViewportScrollXMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValue(info, impl->visualViewportScrollX());
}

static void visualViewportScrollXMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::visualViewportScrollXMethod(info);
}

static void visualViewportScrollYMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValue(info, impl->visualViewportScrollY());
}

static void visualViewportScrollYMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::visualViewportScrollYMethod(info);
}

static void magnifyScaleAroundAnchorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "magnifyScaleAroundAnchor", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    float offset;
    float x;
    float y;
    {
        offset = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValue(info, impl->magnifyScaleAroundAnchor(offset, x, y));
}

static void magnifyScaleAroundAnchorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::magnifyScaleAroundAnchorMethod(info);
}

static void isUseCountedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "isUseCounted", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    int useCounterId;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        useCounterId = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueBool(info, impl->isUseCounted(document, useCounterId));
}

static void isUseCountedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::isUseCountedMethod(info);
}

static void isCSSPropertyUseCountedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isCSSPropertyUseCounted", "Internals", 2, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    V8StringResource<> propertyName;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isCSSPropertyUseCounted", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
        propertyName = info[1];
        if (!propertyName.prepare())
            return;
    }
    v8SetReturnValueBool(info, impl->isCSSPropertyUseCounted(document, propertyName));
}

static void isCSSPropertyUseCountedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::isCSSPropertyUseCountedMethod(info);
}

static void unscopeableMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueString(info, impl->unscopeableMethod(), info.GetIsolate());
}

static void unscopeableMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::unscopeableMethodMethod(info);
}

static void focusRingRectsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "focusRingRects", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("focusRingRects", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
    }
    v8SetReturnValue(info, impl->focusRingRects(element));
}

static void focusRingRectsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::focusRingRectsMethod(info);
}

static void outlineRectsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "outlineRects", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Element* element;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("outlineRects", "Internals", "parameter 1 is not of type 'Element'."));
            return;
        }
    }
    v8SetReturnValue(info, impl->outlineRects(element));
}

static void outlineRectsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::outlineRectsMethod(info);
}

static void setCapsLockStateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setCapsLockState", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setCapsLockState(enabled);
}

static void setCapsLockStateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setCapsLockStateMethod(info);
}

static void setScrollbarVisibilityInScrollableAreaMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setScrollbarVisibilityInScrollableArea", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    bool visible;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
        visible = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValue(info, impl->setScrollbarVisibilityInScrollableArea(node, visible));
}

static void setScrollbarVisibilityInScrollableAreaMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setScrollbarVisibilityInScrollableAreaMethod(info);
}

static void monotonicTimeToZeroBasedDocumentTimeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "monotonicTimeToZeroBasedDocumentTime", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    double platformTime;
    {
        platformTime = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    double result = impl->monotonicTimeToZeroBasedDocumentTime(platformTime, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void monotonicTimeToZeroBasedDocumentTimeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::monotonicTimeToZeroBasedDocumentTimeMethod(info);
}

static void setMediaElementNetworkStateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMediaElementNetworkState", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    HTMLMediaElement* element;
    int state;
    {
        element = V8HTMLMediaElement::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            exceptionState.throwTypeError("parameter 1 is not of type 'HTMLMediaElement'.");
            exceptionState.throwIfNeeded();
            return;
        }
        state = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMediaElementNetworkState(element, state);
}

static void setMediaElementNetworkStateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::setMediaElementNetworkStateMethod(info);
}

static void triggerAutoplayViewportCheckMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "triggerAutoplayViewportCheck", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    HTMLMediaElement* mediaElement;
    {
        mediaElement = V8HTMLMediaElement::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!mediaElement) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("triggerAutoplayViewportCheck", "Internals", "parameter 1 is not of type 'HTMLMediaElement'."));
            return;
        }
    }
    impl->triggerAutoplayViewportCheck(mediaElement);
}

static void triggerAutoplayViewportCheckMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::triggerAutoplayViewportCheckMethod(info);
}

static void getScrollAnimationStateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getScrollAnimationState", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getScrollAnimationState", "Internals", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    v8SetReturnValueString(info, impl->getScrollAnimationState(node), info.GetIsolate());
}

static void getScrollAnimationStateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::getScrollAnimationStateMethod(info);
}

static void getProgrammaticScrollAnimationStateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getProgrammaticScrollAnimationState", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getProgrammaticScrollAnimationState", "Internals", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    v8SetReturnValueString(info, impl->getProgrammaticScrollAnimationState(node), info.GetIsolate());
}

static void getProgrammaticScrollAnimationStateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::getProgrammaticScrollAnimationStateMethod(info);
}

static void visualRectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "visualRect", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("visualRect", "Internals", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    v8SetReturnValue(info, impl->visualRect(node));
}

static void visualRectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::visualRectMethod(info);
}

static void frobulateMethodPartialMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueBool(info, InternalsFrobulateInterfaceBindings::frobulateMethodPartial(*impl));
}

static void frobulateMethodPartialMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::frobulateMethodPartialMethod(info);
}

static void frobulateStaticMethodPartialMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8SetReturnValueBool(info, InternalsFrobulateInterfaceBindings::frobulateStaticMethodPartial());
}

static void frobulateStaticMethodPartialMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::frobulateStaticMethodPartialMethod(info);
}

static void keysMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "keys", "Internals", info.Holder(), info.GetIsolate());
    Internals* impl = V8Internals::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    Iterator* result = impl->keysForBinding(scriptState, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void keysMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::keysMethod(info);
}

static void valuesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "values", "Internals", info.Holder(), info.GetIsolate());
    Internals* impl = V8Internals::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    Iterator* result = impl->valuesForBinding(scriptState, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void valuesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::valuesMethod(info);
}

static void entriesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "entries", "Internals", info.Holder(), info.GetIsolate());
    Internals* impl = V8Internals::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    Iterator* result = impl->entriesForBinding(scriptState, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void entriesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::entriesMethod(info);
}

static void forEachMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "forEach", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    ScriptValue callback;
    ScriptValue thisArg;
    {
        if (!info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        callback = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
        thisArg = ScriptValue(ScriptState::current(info.GetIsolate()), info[1]);
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    impl->forEachForBinding(scriptState, ScriptValue(scriptState, info.Holder()), callback, thisArg, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void forEachMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::forEachMethod(info);
}

static void iteratorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "iterator", "Internals", info.Holder(), info.GetIsolate());
    Internals* impl = V8Internals::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    Iterator* result = impl->iterator(scriptState, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void iteratorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsV8Internal::iteratorMethod(info);
}

} // namespace InternalsV8Internal

const V8DOMConfiguration::AccessorConfiguration V8InternalsAccessors[] = {
    {"pagePopupWindow", InternalsV8Internal::pagePopupWindowAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"settings", InternalsV8Internal::settingsAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"runtimeFlags", InternalsV8Internal::runtimeFlagsAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"workerThreadCount", InternalsV8Internal::workerThreadCountAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cursorUpdatePending", InternalsV8Internal::cursorUpdatePendingAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"unscopeableAttribute", InternalsV8Internal::unscopeableAttributeAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"frobulate", InternalsV8Internal::frobulateAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"frobulateNoEnabledCheck", InternalsV8Internal::frobulateNoEnabledCheckAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8InternalsMethods[] = {
    {"address", InternalsV8Internal::addressMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"observeGC", InternalsV8Internal::observeGCMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"elementLayoutTreeAsText", InternalsV8Internal::elementLayoutTreeAsTextMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isPreloaded", InternalsV8Internal::isPreloadedMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isPreloadedBy", InternalsV8Internal::isPreloadedByMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isLoadingFromMemoryCache", InternalsV8Internal::isLoadingFromMemoryCacheMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isSharingStyle", InternalsV8Internal::isSharingStyleMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"computedStyleIncludingVisitedInfo", InternalsV8Internal::computedStyleIncludingVisitedInfoMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createUserAgentShadowRoot", InternalsV8Internal::createUserAgentShadowRootMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"shadowRoot", InternalsV8Internal::shadowRootMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"youngestShadowRoot", InternalsV8Internal::youngestShadowRootMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"oldestShadowRoot", InternalsV8Internal::oldestShadowRootMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"youngerShadowRoot", InternalsV8Internal::youngerShadowRootMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"shadowRootType", InternalsV8Internal::shadowRootTypeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"hasShadowInsertionPoint", InternalsV8Internal::hasShadowInsertionPointMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"hasContentElement", InternalsV8Internal::hasContentElementMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"countElementShadow", InternalsV8Internal::countElementShadowMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"shadowPseudoId", InternalsV8Internal::shadowPseudoIdMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isValidContentSelect", InternalsV8Internal::isValidContentSelectMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"treeScopeRootNode", InternalsV8Internal::treeScopeRootNodeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"parentTreeScope", InternalsV8Internal::parentTreeScopeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"hasSelectorForIdInShadow", InternalsV8Internal::hasSelectorForIdInShadowMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"hasSelectorForClassInShadow", InternalsV8Internal::hasSelectorForClassInShadowMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"hasSelectorForAttributeInShadow", InternalsV8Internal::hasSelectorForAttributeInShadowMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"compareTreeScopePosition", InternalsV8Internal::compareTreeScopePositionMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"updateStyleAndReturnAffectedElementCount", InternalsV8Internal::updateStyleAndReturnAffectedElementCountMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"needsLayoutCount", InternalsV8Internal::needsLayoutCountMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"hitTestCount", InternalsV8Internal::hitTestCountMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"hitTestCacheHits", InternalsV8Internal::hitTestCacheHitsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"elementFromPoint", InternalsV8Internal::elementFromPointMethodCallback, 0, 5, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"clearHitTestCache", InternalsV8Internal::clearHitTestCacheMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"pauseAnimations", InternalsV8Internal::pauseAnimationsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isCompositedAnimation", InternalsV8Internal::isCompositedAnimationMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"disableCompositedAnimation", InternalsV8Internal::disableCompositedAnimationMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"disableCSSAdditiveAnimations", InternalsV8Internal::disableCSSAdditiveAnimationsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"advanceTimeForImage", InternalsV8Internal::advanceTimeForImageMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"advanceImageAnimation", InternalsV8Internal::advanceImageAnimationMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"nextSiblingInFlatTree", InternalsV8Internal::nextSiblingInFlatTreeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"firstChildInFlatTree", InternalsV8Internal::firstChildInFlatTreeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"lastChildInFlatTree", InternalsV8Internal::lastChildInFlatTreeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"nextInFlatTree", InternalsV8Internal::nextInFlatTreeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"previousInFlatTree", InternalsV8Internal::previousInFlatTreeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"visiblePlaceholder", InternalsV8Internal::visiblePlaceholderMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"selectColorInColorChooser", InternalsV8Internal::selectColorInColorChooserMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"endColorChooser", InternalsV8Internal::endColorChooserMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"hasAutofocusRequest", InternalsV8Internal::hasAutofocusRequestMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"formControlStateOfHistoryItem", InternalsV8Internal::formControlStateOfHistoryItemMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setFormControlStateOfHistoryItem", InternalsV8Internal::setFormControlStateOfHistoryItemMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"absoluteCaretBounds", InternalsV8Internal::absoluteCaretBoundsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"boundingBox", InternalsV8Internal::boundingBoxMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"markerCountForNode", InternalsV8Internal::markerCountForNodeMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"activeMarkerCountForNode", InternalsV8Internal::activeMarkerCountForNodeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"markerRangeForNode", InternalsV8Internal::markerRangeForNodeMethodCallback, 0, 3, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"markerDescriptionForNode", InternalsV8Internal::markerDescriptionForNodeMethodCallback, 0, 3, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"addTextMatchMarker", InternalsV8Internal::addTextMatchMarkerMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setMarkersActive", InternalsV8Internal::setMarkersActiveMethodCallback, 0, 4, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setMarkedTextMatchesAreHighlighted", InternalsV8Internal::setMarkedTextMatchesAreHighlightedMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setFrameViewPosition", InternalsV8Internal::setFrameViewPositionMethodCallback, 0, 3, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"viewportAsText", InternalsV8Internal::viewportAsTextMethodCallback, 0, 4, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"elementShouldAutoComplete", InternalsV8Internal::elementShouldAutoCompleteMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"suggestedValue", InternalsV8Internal::suggestedValueMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setSuggestedValue", InternalsV8Internal::setSuggestedValueMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setEditingValue", InternalsV8Internal::setEditingValueMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setAutofilled", InternalsV8Internal::setAutofilledMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"rangeFromLocationAndLength", InternalsV8Internal::rangeFromLocationAndLengthMethodCallback, 0, 3, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"locationFromRange", InternalsV8Internal::locationFromRangeMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"lengthFromRange", InternalsV8Internal::lengthFromRangeMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"rangeAsText", InternalsV8Internal::rangeAsTextMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"touchPositionAdjustedToBestClickableNode", InternalsV8Internal::touchPositionAdjustedToBestClickableNodeMethodCallback, 0, 5, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"touchNodeAdjustedToBestClickableNode", InternalsV8Internal::touchNodeAdjustedToBestClickableNodeMethodCallback, 0, 5, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"touchPositionAdjustedToBestContextMenuNode", InternalsV8Internal::touchPositionAdjustedToBestContextMenuNodeMethodCallback, 0, 5, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"touchNodeAdjustedToBestContextMenuNode", InternalsV8Internal::touchNodeAdjustedToBestContextMenuNodeMethodCallback, 0, 5, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"bestZoomableAreaForTouchPoint", InternalsV8Internal::bestZoomableAreaForTouchPointMethodCallback, 0, 5, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"lastSpellCheckRequestSequence", InternalsV8Internal::lastSpellCheckRequestSequenceMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"lastSpellCheckProcessedSequence", InternalsV8Internal::lastSpellCheckProcessedSequenceMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"userPreferredLanguages", InternalsV8Internal::userPreferredLanguagesMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setUserPreferredLanguages", InternalsV8Internal::setUserPreferredLanguagesMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"activeDOMObjectCount", InternalsV8Internal::activeDOMObjectCountMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"wheelEventHandlerCount", InternalsV8Internal::wheelEventHandlerCountMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"scrollEventHandlerCount", InternalsV8Internal::scrollEventHandlerCountMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"touchStartOrMoveEventHandlerCount", InternalsV8Internal::touchStartOrMoveEventHandlerCountMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"touchEndOrCancelEventHandlerCount", InternalsV8Internal::touchEndOrCancelEventHandlerCountMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"touchEventTargetLayerRects", InternalsV8Internal::touchEventTargetLayerRectsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"executeCommand", InternalsV8Internal::executeCommandMethodCallback, 0, 3, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"htmlNamespace", InternalsV8Internal::htmlNamespaceMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"htmlTags", InternalsV8Internal::htmlTagsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"svgNamespace", InternalsV8Internal::svgNamespaceMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"svgTags", InternalsV8Internal::svgTagsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"nodesFromRect", InternalsV8Internal::nodesFromRectMethodCallback, 0, 9, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"hasSpellingMarker", InternalsV8Internal::hasSpellingMarkerMethodCallback, 0, 3, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"hasGrammarMarker", InternalsV8Internal::hasGrammarMarkerMethodCallback, 0, 3, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setSpellCheckingEnabled", InternalsV8Internal::setSpellCheckingEnabledMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"canHyphenate", InternalsV8Internal::canHyphenateMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setMockHyphenation", InternalsV8Internal::setMockHyphenationMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isOverwriteModeEnabled", InternalsV8Internal::isOverwriteModeEnabledMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"toggleOverwriteModeEnabled", InternalsV8Internal::toggleOverwriteModeEnabledMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"numberOfScrollableAreas", InternalsV8Internal::numberOfScrollableAreasMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isPageBoxVisible", InternalsV8Internal::isPageBoxVisibleMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"layerTreeAsText", InternalsV8Internal::layerTreeAsTextMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"elementLayerTreeAsText", InternalsV8Internal::elementLayerTreeAsTextMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"scrollsWithRespectTo", InternalsV8Internal::scrollsWithRespectToMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"scrollingStateTreeAsText", InternalsV8Internal::scrollingStateTreeAsTextMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"mainThreadScrollingReasons", InternalsV8Internal::mainThreadScrollingReasonsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"nonFastScrollableRects", InternalsV8Internal::nonFastScrollableRectsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"evictAllResources", InternalsV8Internal::evictAllResourcesMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"numberOfLiveNodes", InternalsV8Internal::numberOfLiveNodesMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"numberOfLiveDocuments", InternalsV8Internal::numberOfLiveDocumentsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"dumpRefCountedInstanceCounts", InternalsV8Internal::dumpRefCountedInstanceCountsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setMemoryCacheCapacities", InternalsV8Internal::setMemoryCacheCapacitiesMethodCallback, 0, 3, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"counterValue", InternalsV8Internal::counterValueMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"pageNumber", InternalsV8Internal::pageNumberMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"shortcutIconURLs", InternalsV8Internal::shortcutIconURLsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"allIconURLs", InternalsV8Internal::allIconURLsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"numberOfPages", InternalsV8Internal::numberOfPagesMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"pageProperty", InternalsV8Internal::pagePropertyMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"pageSizeAndMarginsInPixels", InternalsV8Internal::pageSizeAndMarginsInPixelsMethodCallback, 0, 7, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setPageScaleFactor", InternalsV8Internal::setPageScaleFactorMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setPageScaleFactorLimits", InternalsV8Internal::setPageScaleFactorLimitsMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setIsCursorVisible", InternalsV8Internal::setIsCursorVisibleMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"effectiveMediaVolume", InternalsV8Internal::effectiveMediaVolumeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"effectivePreload", InternalsV8Internal::effectivePreloadMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"mediaPlayerRemoteRouteAvailabilityChanged", InternalsV8Internal::mediaPlayerRemoteRouteAvailabilityChangedMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"mediaPlayerPlayingRemotelyChanged", InternalsV8Internal::mediaPlayerPlayingRemotelyChangedMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setAllowHiddenVolumeControls", InternalsV8Internal::setAllowHiddenVolumeControlsMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"registerURLSchemeAsBypassingContentSecurityPolicy", InternalsV8Internal::registerURLSchemeAsBypassingContentSecurityPolicyMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"removeURLSchemeRegisteredAsBypassingContentSecurityPolicy", InternalsV8Internal::removeURLSchemeRegisteredAsBypassingContentSecurityPolicyMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"typeConversions", InternalsV8Internal::typeConversionsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"privateScriptTest", InternalsV8Internal::privateScriptTestMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"getReferencedFilePaths", InternalsV8Internal::getReferencedFilePathsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"startTrackingRepaints", InternalsV8Internal::startTrackingRepaintsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"stopTrackingRepaints", InternalsV8Internal::stopTrackingRepaintsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"updateLayoutIgnorePendingStylesheetsAndRunPostLayoutTasks", InternalsV8Internal::updateLayoutIgnorePendingStylesheetsAndRunPostLayoutTasksMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"forceFullRepaint", InternalsV8Internal::forceFullRepaintMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"draggableRegions", InternalsV8Internal::draggableRegionsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"nonDraggableRegions", InternalsV8Internal::nonDraggableRegionsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"getCurrentCursorInfo", InternalsV8Internal::getCurrentCursorInfoMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"markerTextForListItem", InternalsV8Internal::markerTextForListItemMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"deserializeBuffer", InternalsV8Internal::deserializeBufferMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"serializeObject", InternalsV8Internal::serializeObjectMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"forceReload", InternalsV8Internal::forceReloadMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"getImageSourceURL", InternalsV8Internal::getImageSourceURLMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"selectMenuListText", InternalsV8Internal::selectMenuListTextMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isSelectPopupVisible", InternalsV8Internal::isSelectPopupVisibleMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"selectPopupItemStyleIsRtl", InternalsV8Internal::selectPopupItemStyleIsRtlMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"selectPopupItemStyleFontHeight", InternalsV8Internal::selectPopupItemStyleFontHeightMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"resetTypeAheadSession", InternalsV8Internal::resetTypeAheadSessionMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"selectionBounds", InternalsV8Internal::selectionBoundsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"loseSharedGraphicsContext3D", InternalsV8Internal::loseSharedGraphicsContext3DMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"forceCompositingUpdate", InternalsV8Internal::forceCompositingUpdateMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setZoomFactor", InternalsV8Internal::setZoomFactorMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setShouldRevealPassword", InternalsV8Internal::setShouldRevealPasswordMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createResolvedPromise", InternalsV8Internal::createResolvedPromiseMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createRejectedPromise", InternalsV8Internal::createRejectedPromiseMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"addOneToPromise", InternalsV8Internal::addOneToPromiseMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"promiseCheck", InternalsV8Internal::promiseCheckMethodCallback, 0, 5, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"promiseCheckWithoutExceptionState", InternalsV8Internal::promiseCheckWithoutExceptionStateMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"promiseCheckRange", InternalsV8Internal::promiseCheckRangeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"promiseCheckOverload", InternalsV8Internal::promiseCheckOverloadMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setValueForUser", InternalsV8Internal::setValueForUserMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"textSurroundingNode", InternalsV8Internal::textSurroundingNodeMethodCallback, 0, 4, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setFocused", InternalsV8Internal::setFocusedMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setInitialFocus", InternalsV8Internal::setInitialFocusMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"ignoreLayoutWithPendingStylesheets", InternalsV8Internal::ignoreLayoutWithPendingStylesheetsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setNetworkConnectionInfoOverride", InternalsV8Internal::setNetworkConnectionInfoOverrideMethodCallback, 0, 3, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"clearNetworkConnectionInfoOverride", InternalsV8Internal::clearNetworkConnectionInfoOverrideMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"countHitRegions", InternalsV8Internal::countHitRegionsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isInCanvasFontCache", InternalsV8Internal::isInCanvasFontCacheMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"canvasFontCacheMaxFonts", InternalsV8Internal::canvasFontCacheMaxFontsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"dictionaryTest", InternalsV8Internal::dictionaryTestMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"unionTypesTest", InternalsV8Internal::unionTypesTestMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setScrollChain", InternalsV8Internal::setScrollChainMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"forceBlinkGCWithoutV8GC", InternalsV8Internal::forceBlinkGCWithoutV8GCMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"selectedHTMLForClipboard", InternalsV8Internal::selectedHTMLForClipboardMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"selectedTextForClipboard", InternalsV8Internal::selectedTextForClipboardMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setVisualViewportOffset", InternalsV8Internal::setVisualViewportOffsetMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"visualViewportHeight", InternalsV8Internal::visualViewportHeightMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"visualViewportWidth", InternalsV8Internal::visualViewportWidthMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"visualViewportScrollX", InternalsV8Internal::visualViewportScrollXMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"visualViewportScrollY", InternalsV8Internal::visualViewportScrollYMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"magnifyScaleAroundAnchor", InternalsV8Internal::magnifyScaleAroundAnchorMethodCallback, 0, 3, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isUseCounted", InternalsV8Internal::isUseCountedMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isCSSPropertyUseCounted", InternalsV8Internal::isCSSPropertyUseCountedMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"unscopeableMethod", InternalsV8Internal::unscopeableMethodMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"focusRingRects", InternalsV8Internal::focusRingRectsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"outlineRects", InternalsV8Internal::outlineRectsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setCapsLockState", InternalsV8Internal::setCapsLockStateMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setScrollbarVisibilityInScrollableArea", InternalsV8Internal::setScrollbarVisibilityInScrollableAreaMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"monotonicTimeToZeroBasedDocumentTime", InternalsV8Internal::monotonicTimeToZeroBasedDocumentTimeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setMediaElementNetworkState", InternalsV8Internal::setMediaElementNetworkStateMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"triggerAutoplayViewportCheck", InternalsV8Internal::triggerAutoplayViewportCheckMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"getScrollAnimationState", InternalsV8Internal::getScrollAnimationStateMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"getProgrammaticScrollAnimationState", InternalsV8Internal::getProgrammaticScrollAnimationStateMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"visualRect", InternalsV8Internal::visualRectMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"keys", InternalsV8Internal::keysMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"values", InternalsV8Internal::valuesMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"entries", InternalsV8Internal::entriesMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"forEach", InternalsV8Internal::forEachMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

void V8Internals::installV8InternalsTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8Internals::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8Internals::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    const V8DOMConfiguration::ConstantConfiguration V8InternalsConstants[] = {
        {"LAYER_TREE_INCLUDES_DEBUG_INFO", 1, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"LAYER_TREE_INCLUDES_PAINT_INVALIDATIONS", 2, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"LAYER_TREE_INCLUDES_PAINTING_PHASES", 4, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"LAYER_TREE_INCLUDES_ROOT_LAYER", 8, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"LAYER_TREE_INCLUDES_CLIP_AND_SCROLL_PARENTS", 16, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"LAYER_TREE_INCLUDES_COMPOSITING_REASONS", 32, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
    };
    V8DOMConfiguration::installConstants(isolate, interfaceTemplate, prototypeTemplate, V8InternalsConstants, WTF_ARRAY_LENGTH(V8InternalsConstants));
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8InternalsAccessors, WTF_ARRAY_LENGTH(V8InternalsAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8InternalsMethods, WTF_ARRAY_LENGTH(V8InternalsMethods));

    // Iterator (@@iterator)
    const V8DOMConfiguration::SymbolKeyedMethodConfiguration symbolKeyedIteratorConfiguration = { v8::Symbol::GetIterator, InternalsV8Internal::iteratorMethodCallback, 0, v8::DontDelete, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype };
    V8DOMConfiguration::installMethod(isolate, world, prototypeTemplate, signature, symbolKeyedIteratorConfiguration);
}

void V8Internals::installOriginTrialsSampleAPI(ScriptState* scriptState, v8::Local<v8::Object> instance)
{
    v8::Local<v8::FunctionTemplate> interfaceTemplate = V8Internals::wrapperTypeInfo.domTemplate(scriptState->isolate(), scriptState->world());
    v8::Local<v8::Signature> signature = v8::Signature::New(scriptState->isolate(), interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    V8PerContextData* perContextData = V8PerContextData::from(scriptState->context());
    v8::Local<v8::Object> prototype = perContextData->prototypeForType(&V8Internals::wrapperTypeInfo);
    v8::Local<v8::Function> interface = perContextData->constructorForType(&V8Internals::wrapperTypeInfo);
    ALLOW_UNUSED_LOCAL(interface);
    const V8DOMConfiguration::AccessorConfiguration accessorfrobulateBindingsConfiguration = \
        {"frobulateBindings", InternalsV8Internal::frobulateBindingsAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
    V8DOMConfiguration::installAccessor(scriptState->isolate(), scriptState->world(), instance, prototype, interface, signature, accessorfrobulateBindingsConfiguration);
    const V8DOMConfiguration::AccessorConfiguration accessorfrobulatePartialConfiguration = \
        {"frobulatePartial", InternalsV8Internal::frobulatePartialAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
    V8DOMConfiguration::installAccessor(scriptState->isolate(), scriptState->world(), instance, prototype, interface, signature, accessorfrobulatePartialConfiguration);
    const V8DOMConfiguration::AccessorConfiguration accessorfrobulateStaticPartialConfiguration = \
        {"frobulateStaticPartial", InternalsV8Internal::frobulateStaticPartialAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnInterface, V8DOMConfiguration::CheckHolder};
    V8DOMConfiguration::installAccessor(scriptState->isolate(), scriptState->world(), instance, prototype, interface, signature, accessorfrobulateStaticPartialConfiguration);
    const V8DOMConfiguration::ConstantConfiguration constantFrobulateConstConfiguration = {"FROBULATE_CONST", 1, 0, V8DOMConfiguration::ConstantTypeUnsignedShort};
    V8DOMConfiguration::installConstant(scriptState->isolate(), interface, prototype, constantFrobulateConstConfiguration);
    const V8DOMConfiguration::ConstantConfiguration constantFrobulateConstPartialConfiguration = {"FROBULATE_CONST_PARTIAL", 2, 0, V8DOMConfiguration::ConstantTypeUnsignedShort};
    V8DOMConfiguration::installConstant(scriptState->isolate(), interface, prototype, constantFrobulateConstPartialConfiguration);
    const V8DOMConfiguration::MethodConfiguration methodFrobulatemethodpartialConfiguration = {"frobulateMethodPartial", InternalsV8Internal::frobulateMethodPartialMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
    V8DOMConfiguration::installMethod(scriptState->isolate(), scriptState->world(), instance, prototype, interface, signature, methodFrobulatemethodpartialConfiguration);
    const V8DOMConfiguration::MethodConfiguration methodFrobulatestaticmethodpartialConfiguration = {"frobulateStaticMethodPartial", InternalsV8Internal::frobulateStaticMethodPartialMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnInterface};
    V8DOMConfiguration::installMethod(scriptState->isolate(), scriptState->world(), instance, prototype, interface, signature, methodFrobulatestaticmethodpartialConfiguration);
}

void V8Internals::installOriginTrialsSampleAPI(ScriptState* scriptState)
{
    installOriginTrialsSampleAPI(scriptState, v8::Local<v8::Object>());
}
v8::Local<v8::FunctionTemplate> V8Internals::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), V8Internals::installV8InternalsTemplateFunction);
}

bool V8Internals::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8Internals::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

Internals* V8Internals::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

void V8Internals::preparePrototypeAndInterfaceObject(v8::Local<v8::Context> context, const DOMWrapperWorld& world, v8::Local<v8::Object> prototypeObject, v8::Local<v8::Function> interfaceObject, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    v8::Isolate* isolate = context->GetIsolate();
    v8::Local<v8::Name> unscopablesSymbol(v8::Symbol::GetUnscopables(isolate));
    v8::Local<v8::Object> unscopeables;
    if (v8CallBoolean(prototypeObject->HasOwnProperty(context, unscopablesSymbol)))
        unscopeables = prototypeObject->Get(context, unscopablesSymbol).ToLocalChecked().As<v8::Object>();
    else
        unscopeables = v8::Object::New(isolate);
    unscopeables->CreateDataProperty(context, v8AtomicString(isolate, "unscopeableAttribute"), v8::True(isolate)).FromJust();
    unscopeables->CreateDataProperty(context, v8AtomicString(isolate, "unscopeableMethod"), v8::True(isolate)).FromJust();
    prototypeObject->CreateDataProperty(context, unscopablesSymbol, unscopeables).FromJust();
}

InstallTemplateFunction V8Internals::installV8InternalsTemplateFunction = (InstallTemplateFunction)&V8Internals::installV8InternalsTemplate;

void V8Internals::updateWrapperTypeInfo(InstallTemplateFunction installTemplateFunction, PreparePrototypeAndInterfaceObjectFunction preparePrototypeAndInterfaceObjectFunction)
{
    V8Internals::installV8InternalsTemplateFunction = installTemplateFunction;
    if (preparePrototypeAndInterfaceObjectFunction)
        V8Internals::wrapperTypeInfo.preparePrototypeAndInterfaceObjectFunction = preparePrototypeAndInterfaceObjectFunction;
}

} // namespace blink
