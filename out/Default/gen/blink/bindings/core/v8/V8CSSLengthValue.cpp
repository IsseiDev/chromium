// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8CSSLengthValue.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8CSSCalcDictionary.h"
#include "bindings/core/v8/V8CSSLengthValue.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8CSSLengthValue::wrapperTypeInfo = { gin::kEmbedderBlink, V8CSSLengthValue::domTemplate, V8CSSLengthValue::trace, V8CSSLengthValue::traceWrappers, 0, 0, V8CSSLengthValue::preparePrototypeAndInterfaceObject, nullptr, "CSSLengthValue", &V8CSSStyleValue::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in CSSLengthValue.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& CSSLengthValue::s_wrapperTypeInfo = V8CSSLengthValue::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, CSSLengthValue>::value,
    "CSSLengthValue inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace CSSLengthValueV8Internal {

static void addMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "add", "CSSLengthValue", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    CSSLengthValue* impl = V8CSSLengthValue::toImpl(info.Holder());
    CSSLengthValue* other;
    {
        other = V8CSSLengthValue::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!other) {
            exceptionState.throwTypeError("parameter 1 is not of type 'CSSLengthValue'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    CSSLengthValue* result = impl->add(other, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    // [NewObject] must always create a new wrapper.  Check that a wrapper
    // does not exist yet.
    DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
    v8SetReturnValue(info, result);
}

static void addMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    CSSLengthValueV8Internal::addMethod(info);
}

static void subtractMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "subtract", "CSSLengthValue", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    CSSLengthValue* impl = V8CSSLengthValue::toImpl(info.Holder());
    CSSLengthValue* other;
    {
        other = V8CSSLengthValue::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!other) {
            exceptionState.throwTypeError("parameter 1 is not of type 'CSSLengthValue'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    CSSLengthValue* result = impl->subtract(other, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    // [NewObject] must always create a new wrapper.  Check that a wrapper
    // does not exist yet.
    DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
    v8SetReturnValue(info, result);
}

static void subtractMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    CSSLengthValueV8Internal::subtractMethod(info);
}

static void multiplyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "multiply", "CSSLengthValue", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    CSSLengthValue* impl = V8CSSLengthValue::toImpl(info.Holder());
    double value;
    {
        value = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    CSSLengthValue* result = impl->multiply(value, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    // [NewObject] must always create a new wrapper.  Check that a wrapper
    // does not exist yet.
    DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
    v8SetReturnValue(info, result);
}

static void multiplyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    CSSLengthValueV8Internal::multiplyMethod(info);
}

static void divideMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "divide", "CSSLengthValue", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    CSSLengthValue* impl = V8CSSLengthValue::toImpl(info.Holder());
    double value;
    {
        value = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    CSSLengthValue* result = impl->divide(value, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    // [NewObject] must always create a new wrapper.  Check that a wrapper
    // does not exist yet.
    DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
    v8SetReturnValue(info, result);
}

static void divideMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    CSSLengthValueV8Internal::divideMethod(info);
}

static void from1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "from", "CSSLengthValue", info.Holder(), info.GetIsolate());
    V8StringResource<> cssText;
    {
        cssText = info[0];
        if (!cssText.prepare())
            return;
    }
    CSSLengthValue* result = CSSLengthValue::from(cssText, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    // [NewObject] must always create a new wrapper.  Check that a wrapper
    // does not exist yet.
    DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
    v8SetReturnValue(info, result, info.GetIsolate()->GetCurrentContext()->Global());
}

static void from2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "from", "CSSLengthValue", info.Holder(), info.GetIsolate());
    double value;
    V8StringResource<> type;
    {
        value = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = info[1];
        if (!type.prepare())
            return;
        const char* validValues[] = {
            "px",
            "percent",
            "em",
            "ex",
            "ch",
            "rem",
            "vw",
            "vh",
            "vmin",
            "vmax",
            "cm",
            "mm",
            "in",
            "pc",
            "pt",
        };
        if (!isValidEnum(type, validValues, WTF_ARRAY_LENGTH(validValues), "LengthType", exceptionState)) {
            exceptionState.throwIfNeeded();
            return;
        }
    }
    CSSLengthValue* result = CSSLengthValue::from(value, type, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    // [NewObject] must always create a new wrapper.  Check that a wrapper
    // does not exist yet.
    DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
    v8SetReturnValue(info, result, info.GetIsolate()->GetCurrentContext()->Global());
}

static void from3Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "from", "CSSLengthValue", info.Holder(), info.GetIsolate());
    CSSCalcDictionary dictionary;
    {
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('dictionary') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        V8CSSCalcDictionary::toImpl(info.GetIsolate(), info[0], dictionary, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    CSSLengthValue* result = CSSLengthValue::from(dictionary, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    // [NewObject] must always create a new wrapper.  Check that a wrapper
    // does not exist yet.
    DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
    v8SetReturnValue(info, result, info.GetIsolate()->GetCurrentContext()->Global());
}

static void fromMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "from", "CSSLengthValue", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 1:
        if (info[0]->IsObject()) {
            from3Method(info);
            return;
        }
        if (true) {
            from1Method(info);
            return;
        }
        break;
    case 2:
        if (true) {
            from2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 1) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void fromMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    CSSLengthValueV8Internal::fromMethod(info);
}

} // namespace CSSLengthValueV8Internal

const V8DOMConfiguration::MethodConfiguration V8CSSLengthValueMethods[] = {
    {"add", CSSLengthValueV8Internal::addMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"subtract", CSSLengthValueV8Internal::subtractMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"multiply", CSSLengthValueV8Internal::multiplyMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"divide", CSSLengthValueV8Internal::divideMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"from", CSSLengthValueV8Internal::fromMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnInterface},
};

static void installV8CSSLengthValueTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8CSSLengthValue::wrapperTypeInfo.interfaceName, V8CSSStyleValue::domTemplate(isolate, world), V8CSSLengthValue::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    if (RuntimeEnabledFeatures::cssTypedOMEnabled()) {
        V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8CSSLengthValueMethods, WTF_ARRAY_LENGTH(V8CSSLengthValueMethods));
    }
}

v8::Local<v8::FunctionTemplate> V8CSSLengthValue::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8CSSLengthValueTemplate);
}

bool V8CSSLengthValue::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8CSSLengthValue::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

CSSLengthValue* V8CSSLengthValue::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
