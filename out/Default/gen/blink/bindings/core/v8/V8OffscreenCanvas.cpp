// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8OffscreenCanvas.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ImageBitmap.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
WrapperTypeInfo V8OffscreenCanvas::wrapperTypeInfo = { gin::kEmbedderBlink, V8OffscreenCanvas::domTemplate, V8OffscreenCanvas::trace, V8OffscreenCanvas::traceWrappers, 0, 0, V8OffscreenCanvas::preparePrototypeAndInterfaceObject, nullptr, "OffscreenCanvas", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in OffscreenCanvas.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& OffscreenCanvas::s_wrapperTypeInfo = V8OffscreenCanvas::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, OffscreenCanvas>::value,
    "OffscreenCanvas inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace OffscreenCanvasV8Internal {

static void widthAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    OffscreenCanvas* impl = V8OffscreenCanvas::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->width());
}

static void widthAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OffscreenCanvasV8Internal::widthAttributeGetter(info);
}

static void widthAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "width", "OffscreenCanvas", holder, info.GetIsolate());
    OffscreenCanvas* impl = V8OffscreenCanvas::toImpl(holder);
    unsigned cppValue = toUInt32(info.GetIsolate(), v8Value, EnforceRange, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setWidth(cppValue);
}

static void widthAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    OffscreenCanvasV8Internal::widthAttributeSetter(v8Value, info);
}

static void heightAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    OffscreenCanvas* impl = V8OffscreenCanvas::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->height());
}

static void heightAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OffscreenCanvasV8Internal::heightAttributeGetter(info);
}

static void heightAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "height", "OffscreenCanvas", holder, info.GetIsolate());
    OffscreenCanvas* impl = V8OffscreenCanvas::toImpl(holder);
    unsigned cppValue = toUInt32(info.GetIsolate(), v8Value, EnforceRange, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setHeight(cppValue);
}

static void heightAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    OffscreenCanvasV8Internal::heightAttributeSetter(v8Value, info);
}

static void transferToImageBitmapMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "transferToImageBitmap", "OffscreenCanvas", info.Holder(), info.GetIsolate());
    OffscreenCanvas* impl = V8OffscreenCanvas::toImpl(info.Holder());
    ImageBitmap* result = impl->transferToImageBitmap(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void transferToImageBitmapMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OffscreenCanvasV8Internal::transferToImageBitmapMethod(info);
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ConstructionContext, "OffscreenCanvas", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    unsigned width;
    unsigned height;
    {
        width = toUInt32(info.GetIsolate(), info[0], EnforceRange, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toUInt32(info.GetIsolate(), info[1], EnforceRange, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    OffscreenCanvas* impl = OffscreenCanvas::create(width, height);
    v8::Local<v8::Object> wrapper = info.Holder();
    wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8OffscreenCanvas::wrapperTypeInfo, wrapper);
    v8SetReturnValue(info, wrapper);
}

} // namespace OffscreenCanvasV8Internal

const V8DOMConfiguration::AccessorConfiguration V8OffscreenCanvasAccessors[] = {
    {"width", OffscreenCanvasV8Internal::widthAttributeGetterCallback, OffscreenCanvasV8Internal::widthAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"height", OffscreenCanvasV8Internal::heightAttributeGetterCallback, OffscreenCanvasV8Internal::heightAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8OffscreenCanvasMethods[] = {
    {"transferToImageBitmap", OffscreenCanvasV8Internal::transferToImageBitmapMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

void V8OffscreenCanvas::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("OffscreenCanvas"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    OffscreenCanvasV8Internal::constructor(info);
}

void V8OffscreenCanvas::installV8OffscreenCanvasTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8OffscreenCanvas::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8OffscreenCanvas::internalFieldCount);
    interfaceTemplate->SetCallHandler(V8OffscreenCanvas::constructorCallback);
    interfaceTemplate->SetLength(2);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    if (RuntimeEnabledFeatures::experimentalCanvasFeaturesEnabled()) {
        V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8OffscreenCanvasAccessors, WTF_ARRAY_LENGTH(V8OffscreenCanvasAccessors));
        V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8OffscreenCanvasMethods, WTF_ARRAY_LENGTH(V8OffscreenCanvasMethods));
    }
}

v8::Local<v8::FunctionTemplate> V8OffscreenCanvas::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), V8OffscreenCanvas::installV8OffscreenCanvasTemplateFunction);
}

bool V8OffscreenCanvas::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8OffscreenCanvas::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

OffscreenCanvas* V8OffscreenCanvas::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

InstallTemplateFunction V8OffscreenCanvas::installV8OffscreenCanvasTemplateFunction = (InstallTemplateFunction)&V8OffscreenCanvas::installV8OffscreenCanvasTemplate;

void V8OffscreenCanvas::updateWrapperTypeInfo(InstallTemplateFunction installTemplateFunction, PreparePrototypeAndInterfaceObjectFunction preparePrototypeAndInterfaceObjectFunction)
{
    V8OffscreenCanvas::installV8OffscreenCanvasTemplateFunction = installTemplateFunction;
    if (preparePrototypeAndInterfaceObjectFunction)
        V8OffscreenCanvas::wrapperTypeInfo.preparePrototypeAndInterfaceObjectFunction = preparePrototypeAndInterfaceObjectFunction;
}

} // namespace blink
