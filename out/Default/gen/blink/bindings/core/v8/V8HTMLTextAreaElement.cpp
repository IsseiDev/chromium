// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8HTMLTextAreaElement.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8HTMLFormElement.h"
#include "bindings/core/v8/V8NodeList.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8ValidityState.h"
#include "core/HTMLNames.h"
#include "core/animation/ElementAnimation.h"
#include "core/dom/Document.h"
#include "core/dom/ElementFullscreen.h"
#include "core/dom/NameNodeList.h"
#include "core/dom/NodeList.h"
#include "core/dom/StaticNodeList.h"
#include "core/dom/custom/CEReactionsScope.h"
#include "core/dom/custom/V0CustomElementProcessingStack.h"
#include "core/frame/UseCounter.h"
#include "core/html/LabelsNodeList.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8HTMLTextAreaElement::wrapperTypeInfo = { gin::kEmbedderBlink, V8HTMLTextAreaElement::domTemplate, V8HTMLTextAreaElement::trace, V8HTMLTextAreaElement::traceWrappers, 0, 0, V8HTMLTextAreaElement::preparePrototypeAndInterfaceObject, nullptr, "HTMLTextAreaElement", &V8HTMLElement::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::NodeClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in HTMLTextAreaElement.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& HTMLTextAreaElement::s_wrapperTypeInfo = V8HTMLTextAreaElement::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, HTMLTextAreaElement>::value,
    "HTMLTextAreaElement inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace HTMLTextAreaElementV8Internal {

static void autofocusAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueBool(info, impl->fastHasAttribute(HTMLNames::autofocusAttr));
}

static void autofocusAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::autofocusAttributeGetter(info);
}

static void autofocusAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "autofocus", "HTMLTextAreaElement", holder, info.GetIsolate());
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    impl->setBooleanAttribute(HTMLNames::autofocusAttr, cppValue);
}

static void autofocusAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    HTMLTextAreaElementV8Internal::autofocusAttributeSetter(v8Value, info);
}

static void colsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->cols());
}

static void colsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::colsAttributeGetter(info);
}

static void colsAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "cols", "HTMLTextAreaElement", holder, info.GetIsolate());
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    unsigned cppValue = toUInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setCols(cppValue);
}

static void colsAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    HTMLTextAreaElementV8Internal::colsAttributeSetter(v8Value, info);
}

static void dirNameAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueString(info, impl->fastGetAttribute(HTMLNames::dirnameAttr), info.GetIsolate());
}

static void dirNameAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::dirNameAttributeGetter(info);
}

static void dirNameAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setAttribute(HTMLNames::dirnameAttr, cppValue);
}

static void dirNameAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    HTMLTextAreaElementV8Internal::dirNameAttributeSetter(v8Value, info);
}

static void disabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueBool(info, impl->fastHasAttribute(HTMLNames::disabledAttr));
}

static void disabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::disabledAttributeGetter(info);
}

static void disabledAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "disabled", "HTMLTextAreaElement", holder, info.GetIsolate());
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    impl->setBooleanAttribute(HTMLNames::disabledAttr, cppValue);
}

static void disabledAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    HTMLTextAreaElementV8Internal::disabledAttributeSetter(v8Value, info);
}

static void formAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->formOwner()), impl);
}

static void formAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::formAttributeGetter(info);
}

static void inputModeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueString(info, impl->fastGetAttribute(HTMLNames::inputmodeAttr), info.GetIsolate());
}

static void inputModeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::inputModeAttributeGetter(info);
}

static void inputModeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setAttribute(HTMLNames::inputmodeAttr, cppValue);
}

static void inputModeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    HTMLTextAreaElementV8Internal::inputModeAttributeSetter(v8Value, info);
}

static void maxLengthAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueInt(info, impl->maxLength());
}

static void maxLengthAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::maxLengthAttributeGetter(info);
}

static void maxLengthAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "maxLength", "HTMLTextAreaElement", holder, info.GetIsolate());
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    int cppValue = toInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setMaxLength(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void maxLengthAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    HTMLTextAreaElementV8Internal::maxLengthAttributeSetter(v8Value, info);
}

static void minLengthAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueInt(info, impl->minLength());
}

static void minLengthAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::minLengthAttributeGetter(info);
}

static void minLengthAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "minLength", "HTMLTextAreaElement", holder, info.GetIsolate());
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    int cppValue = toInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setMinLength(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void minLengthAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    HTMLTextAreaElementV8Internal::minLengthAttributeSetter(v8Value, info);
}

static void nameAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueString(info, impl->getNameAttribute(), info.GetIsolate());
}

static void nameAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::nameAttributeGetter(info);
}

static void nameAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setAttribute(HTMLNames::nameAttr, cppValue);
}

static void nameAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    HTMLTextAreaElementV8Internal::nameAttributeSetter(v8Value, info);
}

static void placeholderAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueString(info, impl->fastGetAttribute(HTMLNames::placeholderAttr), info.GetIsolate());
}

static void placeholderAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::placeholderAttributeGetter(info);
}

static void placeholderAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setAttribute(HTMLNames::placeholderAttr, cppValue);
}

static void placeholderAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    HTMLTextAreaElementV8Internal::placeholderAttributeSetter(v8Value, info);
}

static void readOnlyAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueBool(info, impl->fastHasAttribute(HTMLNames::readonlyAttr));
}

static void readOnlyAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::readOnlyAttributeGetter(info);
}

static void readOnlyAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "readOnly", "HTMLTextAreaElement", holder, info.GetIsolate());
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    impl->setBooleanAttribute(HTMLNames::readonlyAttr, cppValue);
}

static void readOnlyAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    HTMLTextAreaElementV8Internal::readOnlyAttributeSetter(v8Value, info);
}

static void requiredAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueBool(info, impl->fastHasAttribute(HTMLNames::requiredAttr));
}

static void requiredAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::requiredAttributeGetter(info);
}

static void requiredAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "required", "HTMLTextAreaElement", holder, info.GetIsolate());
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    impl->setBooleanAttribute(HTMLNames::requiredAttr, cppValue);
}

static void requiredAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    HTMLTextAreaElementV8Internal::requiredAttributeSetter(v8Value, info);
}

static void rowsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->rows());
}

static void rowsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::rowsAttributeGetter(info);
}

static void rowsAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "rows", "HTMLTextAreaElement", holder, info.GetIsolate());
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    unsigned cppValue = toUInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setRows(cppValue);
}

static void rowsAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    HTMLTextAreaElementV8Internal::rowsAttributeSetter(v8Value, info);
}

static void wrapAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueString(info, impl->fastGetAttribute(HTMLNames::wrapAttr), info.GetIsolate());
}

static void wrapAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::wrapAttributeGetter(info);
}

static void wrapAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setAttribute(HTMLNames::wrapAttr, cppValue);
}

static void wrapAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    HTMLTextAreaElementV8Internal::wrapAttributeSetter(v8Value, info);
}

static void typeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueString(info, impl->type(), info.GetIsolate());
}

static void typeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::typeAttributeGetter(info);
}

static void defaultValueAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueString(info, impl->defaultValue(), info.GetIsolate());
}

static void defaultValueAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::defaultValueAttributeGetter(info);
}

static void defaultValueAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setDefaultValue(cppValue);
}

static void defaultValueAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    HTMLTextAreaElementV8Internal::defaultValueAttributeSetter(v8Value, info);
}

static void valueAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueString(info, impl->value(), info.GetIsolate());
}

static void valueAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::valueAttributeGetter(info);
}

static void valueAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    V8StringResource<TreatNullAsNullString> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setValue(cppValue);
}

static void valueAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    HTMLTextAreaElementV8Internal::valueAttributeSetter(v8Value, info);
}

static void textLengthAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->textLength());
}

static void textLengthAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::textLengthAttributeGetter(info);
}

static void willValidateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueBool(info, impl->willValidate());
}

static void willValidateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::willValidateAttributeGetter(info);
}

static void validityAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->validity()), impl);
}

static void validityAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::validityAttributeGetter(info);
}

static void validationMessageAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueString(info, impl->validationMessage(), info.GetIsolate());
}

static void validationMessageAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::validationMessageAttributeGetter(info);
}

static void labelsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->labels()), impl);
}

static void labelsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::labelsAttributeGetter(info);
}

static void selectionStartAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueInt(info, impl->selectionStart());
}

static void selectionStartAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::selectionStartAttributeGetter(info);
}

static void selectionStartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "selectionStart", "HTMLTextAreaElement", holder, info.GetIsolate());
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    int cppValue = toInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setSelectionStart(cppValue);
}

static void selectionStartAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    HTMLTextAreaElementV8Internal::selectionStartAttributeSetter(v8Value, info);
}

static void selectionEndAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueInt(info, impl->selectionEnd());
}

static void selectionEndAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::selectionEndAttributeGetter(info);
}

static void selectionEndAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "selectionEnd", "HTMLTextAreaElement", holder, info.GetIsolate());
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    int cppValue = toInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setSelectionEnd(cppValue);
}

static void selectionEndAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    HTMLTextAreaElementV8Internal::selectionEndAttributeSetter(v8Value, info);
}

static void selectionDirectionAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueString(info, impl->selectionDirection(), info.GetIsolate());
}

static void selectionDirectionAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::selectionDirectionAttributeGetter(info);
}

static void selectionDirectionAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setSelectionDirection(cppValue);
}

static void selectionDirectionAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    HTMLTextAreaElementV8Internal::selectionDirectionAttributeSetter(v8Value, info);
}

static void autocapitalizeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    v8SetReturnValueString(info, impl->autocapitalize(), info.GetIsolate());
}

static void autocapitalizeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8HTMLTextAreaElement_Autocapitalize_AttributeGetter);
    HTMLTextAreaElementV8Internal::autocapitalizeAttributeGetter(info);
}

static void autocapitalizeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setAutocapitalize(cppValue);
}

static void autocapitalizeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8HTMLTextAreaElement_Autocapitalize_AttributeSetter);
    HTMLTextAreaElementV8Internal::autocapitalizeAttributeSetter(v8Value, info);
}

static void checkValidityMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(info.Holder());
    v8SetReturnValueBool(info, impl->checkValidity());
}

static void checkValidityMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::checkValidityMethod(info);
}

static void reportValidityMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(info.Holder());
    v8SetReturnValueBool(info, impl->reportValidity());
}

static void reportValidityMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::reportValidityMethod(info);
}

static void setCustomValidityMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setCustomValidity", "HTMLTextAreaElement", 1, info.Length()));
        return;
    }
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(info.Holder());
    V8StringResource<> error;
    {
        error = info[0];
        if (!error.prepare())
            return;
    }
    impl->setCustomValidity(error);
}

static void setCustomValidityMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::setCustomValidityMethod(info);
}

static void selectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(info.Holder());
    impl->select();
}

static void selectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::selectMethod(info);
}

static void setRangeText1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setRangeText", "HTMLTextAreaElement", info.Holder(), info.GetIsolate());
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(info.Holder());
    V8StringResource<> replacement;
    {
        replacement = info[0];
        if (!replacement.prepare())
            return;
    }
    impl->setRangeText(replacement, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setRangeText2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setRangeText", "HTMLTextAreaElement", info.Holder(), info.GetIsolate());
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(info.Holder());
    V8StringResource<> replacement;
    unsigned start;
    unsigned end;
    V8StringResource<> selectionMode;
    {
        replacement = info[0];
        if (!replacement.prepare())
            return;
        start = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        end = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        if (!info[3]->IsUndefined()) {
            selectionMode = info[3];
            if (!selectionMode.prepare())
                return;
            const char* validValues[] = {
                "select",
                "start",
                "end",
                "preserve",
            };
            if (!isValidEnum(selectionMode, validValues, WTF_ARRAY_LENGTH(validValues), "SelectionMode", exceptionState)) {
                exceptionState.throwIfNeeded();
                return;
            }
        } else {
            selectionMode = String("preserve");
        }
    }
    impl->setRangeText(replacement, start, end, selectionMode, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setRangeTextMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setRangeText", "HTMLTextAreaElement", info.Holder(), info.GetIsolate());
    switch (std::min(4, info.Length())) {
    case 1:
        if (true) {
            setRangeText1Method(info);
            return;
        }
        break;
    case 3:
        if (true) {
            setRangeText2Method(info);
            return;
        }
        break;
    case 4:
        if (true) {
            setRangeText2Method(info);
            return;
        }
        break;
    default:
        if (info.Length() >= 1) {
            setArityTypeError(exceptionState, "[1, 3, 4]", info.Length());
            exceptionState.throwIfNeeded();
            return;
        }
        break;
    }
    if (info.Length() < 1) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void setRangeTextMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::setRangeTextMethod(info);
}

static void setSelectionRangeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setSelectionRange", "HTMLTextAreaElement", info.Holder(), info.GetIsolate());
    HTMLTextAreaElement* impl = V8HTMLTextAreaElement::toImpl(info.Holder());
    int start;
    int end;
    V8StringResource<> direction;
    {
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        start = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        end = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        if (UNLIKELY(numArgsPassed <= 2)) {
            impl->setSelectionRange(start, end);
            return;
        }
        direction = info[2];
        if (!direction.prepare())
            return;
    }
    impl->setSelectionRange(start, end, direction);
}

static void setSelectionRangeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLTextAreaElementV8Internal::setSelectionRangeMethod(info);
}

} // namespace HTMLTextAreaElementV8Internal

const V8DOMConfiguration::AccessorConfiguration V8HTMLTextAreaElementAccessors[] = {
    {"autofocus", HTMLTextAreaElementV8Internal::autofocusAttributeGetterCallback, HTMLTextAreaElementV8Internal::autofocusAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cols", HTMLTextAreaElementV8Internal::colsAttributeGetterCallback, HTMLTextAreaElementV8Internal::colsAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"dirName", HTMLTextAreaElementV8Internal::dirNameAttributeGetterCallback, HTMLTextAreaElementV8Internal::dirNameAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"disabled", HTMLTextAreaElementV8Internal::disabledAttributeGetterCallback, HTMLTextAreaElementV8Internal::disabledAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"form", HTMLTextAreaElementV8Internal::formAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"maxLength", HTMLTextAreaElementV8Internal::maxLengthAttributeGetterCallback, HTMLTextAreaElementV8Internal::maxLengthAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"minLength", HTMLTextAreaElementV8Internal::minLengthAttributeGetterCallback, HTMLTextAreaElementV8Internal::minLengthAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"name", HTMLTextAreaElementV8Internal::nameAttributeGetterCallback, HTMLTextAreaElementV8Internal::nameAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"placeholder", HTMLTextAreaElementV8Internal::placeholderAttributeGetterCallback, HTMLTextAreaElementV8Internal::placeholderAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"readOnly", HTMLTextAreaElementV8Internal::readOnlyAttributeGetterCallback, HTMLTextAreaElementV8Internal::readOnlyAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"required", HTMLTextAreaElementV8Internal::requiredAttributeGetterCallback, HTMLTextAreaElementV8Internal::requiredAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"rows", HTMLTextAreaElementV8Internal::rowsAttributeGetterCallback, HTMLTextAreaElementV8Internal::rowsAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"wrap", HTMLTextAreaElementV8Internal::wrapAttributeGetterCallback, HTMLTextAreaElementV8Internal::wrapAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"type", HTMLTextAreaElementV8Internal::typeAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"defaultValue", HTMLTextAreaElementV8Internal::defaultValueAttributeGetterCallback, HTMLTextAreaElementV8Internal::defaultValueAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"value", HTMLTextAreaElementV8Internal::valueAttributeGetterCallback, HTMLTextAreaElementV8Internal::valueAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"textLength", HTMLTextAreaElementV8Internal::textLengthAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"willValidate", HTMLTextAreaElementV8Internal::willValidateAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"validity", HTMLTextAreaElementV8Internal::validityAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"validationMessage", HTMLTextAreaElementV8Internal::validationMessageAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"labels", HTMLTextAreaElementV8Internal::labelsAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"selectionStart", HTMLTextAreaElementV8Internal::selectionStartAttributeGetterCallback, HTMLTextAreaElementV8Internal::selectionStartAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"selectionEnd", HTMLTextAreaElementV8Internal::selectionEndAttributeGetterCallback, HTMLTextAreaElementV8Internal::selectionEndAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"selectionDirection", HTMLTextAreaElementV8Internal::selectionDirectionAttributeGetterCallback, HTMLTextAreaElementV8Internal::selectionDirectionAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"autocapitalize", HTMLTextAreaElementV8Internal::autocapitalizeAttributeGetterCallback, HTMLTextAreaElementV8Internal::autocapitalizeAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8HTMLTextAreaElementMethods[] = {
    {"checkValidity", HTMLTextAreaElementV8Internal::checkValidityMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"reportValidity", HTMLTextAreaElementV8Internal::reportValidityMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setCustomValidity", HTMLTextAreaElementV8Internal::setCustomValidityMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"select", HTMLTextAreaElementV8Internal::selectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setRangeText", HTMLTextAreaElementV8Internal::setRangeTextMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setSelectionRange", HTMLTextAreaElementV8Internal::setSelectionRangeMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8HTMLTextAreaElementTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8HTMLTextAreaElement::wrapperTypeInfo.interfaceName, V8HTMLElement::domTemplate(isolate, world), V8HTMLTextAreaElement::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8HTMLTextAreaElementAccessors, WTF_ARRAY_LENGTH(V8HTMLTextAreaElementAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8HTMLTextAreaElementMethods, WTF_ARRAY_LENGTH(V8HTMLTextAreaElementMethods));

    if (RuntimeEnabledFeatures::inputModeAttributeEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorinputModeConfiguration = \
        {"inputMode", HTMLTextAreaElementV8Internal::inputModeAttributeGetterCallback, HTMLTextAreaElementV8Internal::inputModeAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorinputModeConfiguration);
    }
}

v8::Local<v8::FunctionTemplate> V8HTMLTextAreaElement::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8HTMLTextAreaElementTemplate);
}

bool V8HTMLTextAreaElement::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8HTMLTextAreaElement::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

HTMLTextAreaElement* V8HTMLTextAreaElement::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
