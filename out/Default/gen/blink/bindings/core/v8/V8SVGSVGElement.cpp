// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8SVGSVGElement.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Element.h"
#include "bindings/core/v8/V8NodeList.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8SVGAngle.h"
#include "bindings/core/v8/V8SVGAnimatedLength.h"
#include "bindings/core/v8/V8SVGAnimatedPreserveAspectRatio.h"
#include "bindings/core/v8/V8SVGAnimatedRect.h"
#include "bindings/core/v8/V8SVGElement.h"
#include "bindings/core/v8/V8SVGLength.h"
#include "bindings/core/v8/V8SVGMatrix.h"
#include "bindings/core/v8/V8SVGNumber.h"
#include "bindings/core/v8/V8SVGPoint.h"
#include "bindings/core/v8/V8SVGRect.h"
#include "bindings/core/v8/V8SVGTransform.h"
#include "bindings/core/v8/V8SVGViewSpec.h"
#include "core/animation/ElementAnimation.h"
#include "core/dom/Document.h"
#include "core/dom/ElementFullscreen.h"
#include "core/dom/NameNodeList.h"
#include "core/dom/NodeList.h"
#include "core/dom/StaticNodeList.h"
#include "core/frame/Deprecation.h"
#include "core/frame/UseCounter.h"
#include "core/html/LabelsNodeList.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8SVGSVGElement::wrapperTypeInfo = { gin::kEmbedderBlink, V8SVGSVGElement::domTemplate, V8SVGSVGElement::trace, V8SVGSVGElement::traceWrappers, 0, 0, V8SVGSVGElement::preparePrototypeAndInterfaceObject, nullptr, "SVGSVGElement", &V8SVGGraphicsElement::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::NodeClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in SVGSVGElement.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& SVGSVGElement::s_wrapperTypeInfo = V8SVGSVGElement::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, SVGSVGElement>::value,
    "SVGSVGElement inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace SVGSVGElementV8Internal {

static void xAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->x()), impl);
}

static void xAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMSVGElement);
    SVGSVGElementV8Internal::xAttributeGetter(info);
}

static void yAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->y()), impl);
}

static void yAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMSVGElement);
    SVGSVGElementV8Internal::yAttributeGetter(info);
}

static void widthAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->width()), impl);
}

static void widthAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMSVGElement);
    SVGSVGElementV8Internal::widthAttributeGetter(info);
}

static void heightAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->height()), impl);
}

static void heightAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMSVGElement);
    SVGSVGElementV8Internal::heightAttributeGetter(info);
}

static void viewportAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->viewport()), impl);
}

static void viewportAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Deprecation::countDeprecationIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8SVGSVGElement_Viewport_AttributeGetter);
    SVGSVGElementV8Internal::viewportAttributeGetter(info);
}

static void useCurrentViewAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(holder);
    v8SetReturnValueBool(info, impl->useCurrentView());
}

static void useCurrentViewAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Deprecation::countDeprecationIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8SVGSVGElement_UseCurrentView_AttributeGetter);
    SVGSVGElementV8Internal::useCurrentViewAttributeGetter(info);
}

static void currentViewAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->currentView()), impl);
}

static void currentViewAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Deprecation::countDeprecationIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8SVGSVGElement_CurrentView_AttributeGetter);
    SVGSVGElementV8Internal::currentViewAttributeGetter(info);
}

static void currentScaleAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(holder);
    v8SetReturnValue(info, impl->currentScale());
}

static void currentScaleAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElementV8Internal::currentScaleAttributeGetter(info);
}

static void currentScaleAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "currentScale", "SVGSVGElement", holder, info.GetIsolate());
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(holder);
    float cppValue = toRestrictedFloat(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setCurrentScale(cppValue);
}

static void currentScaleAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    SVGSVGElementV8Internal::currentScaleAttributeSetter(v8Value, info);
}

static void currentTranslateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->currentTranslateFromJavascript()), impl);
}

static void currentTranslateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElementV8Internal::currentTranslateAttributeGetter(info);
}

static void viewBoxAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->viewBox()), impl);
}

static void viewBoxAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMFitToViewBox);
    SVGSVGElementV8Internal::viewBoxAttributeGetter(info);
}

static void preserveAspectRatioAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->preserveAspectRatio()), impl);
}

static void preserveAspectRatioAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMFitToViewBox);
    SVGSVGElementV8Internal::preserveAspectRatioAttributeGetter(info);
}

static void zoomAndPanAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->zoomAndPan());
}

static void zoomAndPanAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMZoomAndPan);
    SVGSVGElementV8Internal::zoomAndPanAttributeGetter(info);
}

static void zoomAndPanAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "zoomAndPan", "SVGSVGElement", holder, info.GetIsolate());
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(holder);
    unsigned cppValue = toUInt16(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setZoomAndPan(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void zoomAndPanAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMZoomAndPan);
    SVGSVGElementV8Internal::zoomAndPanAttributeSetter(v8Value, info);
}

static void suspendRedrawMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "suspendRedraw", "SVGSVGElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    unsigned maxWaitMilliseconds;
    {
        maxWaitMilliseconds = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueUnsigned(info, impl->suspendRedraw(maxWaitMilliseconds));
}

static void suspendRedrawMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVGSVGElementSuspendRedraw);
    SVGSVGElementV8Internal::suspendRedrawMethod(info);
}

static void unsuspendRedrawMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "unsuspendRedraw", "SVGSVGElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    unsigned suspendHandleId;
    {
        suspendHandleId = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->unsuspendRedraw(suspendHandleId);
}

static void unsuspendRedrawMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVGSVGElementUnsuspendRedraw);
    SVGSVGElementV8Internal::unsuspendRedrawMethod(info);
}

static void unsuspendRedrawAllMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    impl->unsuspendRedrawAll();
}

static void unsuspendRedrawAllMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVGSVGElementUnsuspendRedrawAll);
    SVGSVGElementV8Internal::unsuspendRedrawAllMethod(info);
}

static void forceRedrawMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    impl->forceRedraw();
}

static void forceRedrawMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVGSVGElementForceRedraw);
    SVGSVGElementV8Internal::forceRedrawMethod(info);
}

static void pauseAnimationsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    impl->pauseAnimations();
}

static void pauseAnimationsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVGSMILPausing);
    SVGSVGElementV8Internal::pauseAnimationsMethod(info);
}

static void unpauseAnimationsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    impl->unpauseAnimations();
}

static void unpauseAnimationsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVGSMILPausing);
    SVGSVGElementV8Internal::unpauseAnimationsMethod(info);
}

static void animationsPausedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    v8SetReturnValueBool(info, impl->animationsPaused());
}

static void animationsPausedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVGSMILPausing);
    SVGSVGElementV8Internal::animationsPausedMethod(info);
}

static void getCurrentTimeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    v8SetReturnValue(info, impl->getCurrentTime());
}

static void getCurrentTimeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVGSMILCurrentTime);
    SVGSVGElementV8Internal::getCurrentTimeMethod(info);
}

static void setCurrentTimeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setCurrentTime", "SVGSVGElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    float seconds;
    {
        seconds = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setCurrentTime(seconds);
}

static void setCurrentTimeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVGSMILCurrentTime);
    SVGSVGElementV8Internal::setCurrentTimeMethod(info);
}

static void getIntersectionListMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getIntersectionList", "SVGSVGElement", 2, info.Length()));
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    SVGRectTearOff* rect;
    SVGElement* referenceElement;
    {
        rect = V8SVGRect::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!rect) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getIntersectionList", "SVGSVGElement", "parameter 1 is not of type 'SVGRect'."));
            return;
        }
        referenceElement = V8SVGElement::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!referenceElement && !isUndefinedOrNull(info[1])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getIntersectionList", "SVGSVGElement", "parameter 2 is not of type 'SVGElement'."));
            return;
        }
    }
    v8SetReturnValueFast(info, impl->getIntersectionList(rect, referenceElement), impl);
}

static void getIntersectionListMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElementV8Internal::getIntersectionListMethod(info);
}

static void getEnclosureListMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getEnclosureList", "SVGSVGElement", 2, info.Length()));
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    SVGRectTearOff* rect;
    SVGElement* referenceElement;
    {
        rect = V8SVGRect::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!rect) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getEnclosureList", "SVGSVGElement", "parameter 1 is not of type 'SVGRect'."));
            return;
        }
        referenceElement = V8SVGElement::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!referenceElement && !isUndefinedOrNull(info[1])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getEnclosureList", "SVGSVGElement", "parameter 2 is not of type 'SVGElement'."));
            return;
        }
    }
    v8SetReturnValueFast(info, impl->getEnclosureList(rect, referenceElement), impl);
}

static void getEnclosureListMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElementV8Internal::getEnclosureListMethod(info);
}

static void checkIntersectionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "checkIntersection", "SVGSVGElement", 2, info.Length()));
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    SVGElement* element;
    SVGRectTearOff* rect;
    {
        element = V8SVGElement::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("checkIntersection", "SVGSVGElement", "parameter 1 is not of type 'SVGElement'."));
            return;
        }
        rect = V8SVGRect::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!rect) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("checkIntersection", "SVGSVGElement", "parameter 2 is not of type 'SVGRect'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->checkIntersection(element, rect));
}

static void checkIntersectionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElementV8Internal::checkIntersectionMethod(info);
}

static void checkEnclosureMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "checkEnclosure", "SVGSVGElement", 2, info.Length()));
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    SVGElement* element;
    SVGRectTearOff* rect;
    {
        element = V8SVGElement::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("checkEnclosure", "SVGSVGElement", "parameter 1 is not of type 'SVGElement'."));
            return;
        }
        rect = V8SVGRect::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!rect) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("checkEnclosure", "SVGSVGElement", "parameter 2 is not of type 'SVGRect'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->checkEnclosure(element, rect));
}

static void checkEnclosureMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElementV8Internal::checkEnclosureMethod(info);
}

static void deselectAllMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    impl->deselectAll();
}

static void deselectAllMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElementV8Internal::deselectAllMethod(info);
}

static void createSVGNumberMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    v8SetReturnValueFast(info, impl->createSVGNumber(), impl);
}

static void createSVGNumberMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8SVGSVGElement_CreateSVGNumber_Method);
    SVGSVGElementV8Internal::createSVGNumberMethod(info);
}

static void createSVGLengthMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    v8SetReturnValueFast(info, impl->createSVGLength(), impl);
}

static void createSVGLengthMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8SVGSVGElement_CreateSVGLength_Method);
    SVGSVGElementV8Internal::createSVGLengthMethod(info);
}

static void createSVGAngleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    v8SetReturnValueFast(info, impl->createSVGAngle(), impl);
}

static void createSVGAngleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8SVGSVGElement_CreateSVGAngle_Method);
    SVGSVGElementV8Internal::createSVGAngleMethod(info);
}

static void createSVGPointMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    v8SetReturnValueFast(info, impl->createSVGPoint(), impl);
}

static void createSVGPointMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8SVGSVGElement_CreateSVGPoint_Method);
    SVGSVGElementV8Internal::createSVGPointMethod(info);
}

static void createSVGMatrixMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    v8SetReturnValueFast(info, impl->createSVGMatrix(), impl);
}

static void createSVGMatrixMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8SVGSVGElement_CreateSVGMatrix_Method);
    SVGSVGElementV8Internal::createSVGMatrixMethod(info);
}

static void createSVGRectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    v8SetReturnValueFast(info, impl->createSVGRect(), impl);
}

static void createSVGRectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8SVGSVGElement_CreateSVGRect_Method);
    SVGSVGElementV8Internal::createSVGRectMethod(info);
}

static void createSVGTransformMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    v8SetReturnValueFast(info, impl->createSVGTransform(), impl);
}

static void createSVGTransformMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8SVGSVGElement_CreateSVGTransform_Method);
    SVGSVGElementV8Internal::createSVGTransformMethod(info);
}

static void createSVGTransformFromMatrixMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "createSVGTransformFromMatrix", "SVGSVGElement", 1, info.Length()));
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    SVGMatrixTearOff* matrix;
    {
        matrix = V8SVGMatrix::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!matrix) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("createSVGTransformFromMatrix", "SVGSVGElement", "parameter 1 is not of type 'SVGMatrix'."));
            return;
        }
    }
    v8SetReturnValueFast(info, impl->createSVGTransformFromMatrix(matrix), impl);
}

static void createSVGTransformFromMatrixMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8SVGSVGElement_CreateSVGTransformFromMatrix_Method);
    SVGSVGElementV8Internal::createSVGTransformFromMatrixMethod(info);
}

static void getElementByIdMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getElementById", "SVGSVGElement", 1, info.Length()));
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toImpl(info.Holder());
    V8StringResource<> elementId;
    {
        elementId = info[0];
        if (!elementId.prepare())
            return;
    }
    v8SetReturnValueFast(info, impl->getElementById(elementId), impl);
}

static void getElementByIdMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::V8SVGSVGElement_GetElementById_Method);
    SVGSVGElementV8Internal::getElementByIdMethod(info);
}

} // namespace SVGSVGElementV8Internal

const V8DOMConfiguration::AccessorConfiguration V8SVGSVGElementAccessors[] = {
    {"x", SVGSVGElementV8Internal::xAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"y", SVGSVGElementV8Internal::yAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"width", SVGSVGElementV8Internal::widthAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"height", SVGSVGElementV8Internal::heightAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"viewport", SVGSVGElementV8Internal::viewportAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"useCurrentView", SVGSVGElementV8Internal::useCurrentViewAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"currentView", SVGSVGElementV8Internal::currentViewAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"currentScale", SVGSVGElementV8Internal::currentScaleAttributeGetterCallback, SVGSVGElementV8Internal::currentScaleAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"currentTranslate", SVGSVGElementV8Internal::currentTranslateAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"viewBox", SVGSVGElementV8Internal::viewBoxAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"preserveAspectRatio", SVGSVGElementV8Internal::preserveAspectRatioAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"zoomAndPan", SVGSVGElementV8Internal::zoomAndPanAttributeGetterCallback, SVGSVGElementV8Internal::zoomAndPanAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8SVGSVGElementMethods[] = {
    {"suspendRedraw", SVGSVGElementV8Internal::suspendRedrawMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"unsuspendRedraw", SVGSVGElementV8Internal::unsuspendRedrawMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"unsuspendRedrawAll", SVGSVGElementV8Internal::unsuspendRedrawAllMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"forceRedraw", SVGSVGElementV8Internal::forceRedrawMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"getIntersectionList", SVGSVGElementV8Internal::getIntersectionListMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"getEnclosureList", SVGSVGElementV8Internal::getEnclosureListMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"checkIntersection", SVGSVGElementV8Internal::checkIntersectionMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"checkEnclosure", SVGSVGElementV8Internal::checkEnclosureMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"deselectAll", SVGSVGElementV8Internal::deselectAllMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createSVGNumber", SVGSVGElementV8Internal::createSVGNumberMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createSVGLength", SVGSVGElementV8Internal::createSVGLengthMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createSVGAngle", SVGSVGElementV8Internal::createSVGAngleMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createSVGPoint", SVGSVGElementV8Internal::createSVGPointMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createSVGMatrix", SVGSVGElementV8Internal::createSVGMatrixMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createSVGRect", SVGSVGElementV8Internal::createSVGRectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createSVGTransform", SVGSVGElementV8Internal::createSVGTransformMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createSVGTransformFromMatrix", SVGSVGElementV8Internal::createSVGTransformFromMatrixMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"getElementById", SVGSVGElementV8Internal::getElementByIdMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8SVGSVGElementTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8SVGSVGElement::wrapperTypeInfo.interfaceName, V8SVGGraphicsElement::domTemplate(isolate, world), V8SVGSVGElement::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    const V8DOMConfiguration::ConstantConfiguration V8SVGSVGElementConstants[] = {
        {"SVG_ZOOMANDPAN_UNKNOWN", 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_ZOOMANDPAN_DISABLE", 1, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_ZOOMANDPAN_MAGNIFY", 2, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
    };
    V8DOMConfiguration::installConstants(isolate, interfaceTemplate, prototypeTemplate, V8SVGSVGElementConstants, WTF_ARRAY_LENGTH(V8SVGSVGElementConstants));
    static_assert(0 == SVGSVGElement::kSvgZoomandpanUnknown, "the value of SVGSVGElement_kSvgZoomandpanUnknown does not match with implementation");
    static_assert(1 == SVGSVGElement::kSvgZoomandpanDisable, "the value of SVGSVGElement_kSvgZoomandpanDisable does not match with implementation");
    static_assert(2 == SVGSVGElement::kSvgZoomandpanMagnify, "the value of SVGSVGElement_kSvgZoomandpanMagnify does not match with implementation");
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8SVGSVGElementAccessors, WTF_ARRAY_LENGTH(V8SVGSVGElementAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8SVGSVGElementMethods, WTF_ARRAY_LENGTH(V8SVGSVGElementMethods));

    if (RuntimeEnabledFeatures::smilEnabled()) {
        const V8DOMConfiguration::MethodConfiguration pauseAnimationsMethodConfiguration = {"pauseAnimations", SVGSVGElementV8Internal::pauseAnimationsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, pauseAnimationsMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::smilEnabled()) {
        const V8DOMConfiguration::MethodConfiguration unpauseAnimationsMethodConfiguration = {"unpauseAnimations", SVGSVGElementV8Internal::unpauseAnimationsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, unpauseAnimationsMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::smilEnabled()) {
        const V8DOMConfiguration::MethodConfiguration animationsPausedMethodConfiguration = {"animationsPaused", SVGSVGElementV8Internal::animationsPausedMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, animationsPausedMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::smilEnabled()) {
        const V8DOMConfiguration::MethodConfiguration getCurrentTimeMethodConfiguration = {"getCurrentTime", SVGSVGElementV8Internal::getCurrentTimeMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, getCurrentTimeMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::smilEnabled()) {
        const V8DOMConfiguration::MethodConfiguration setCurrentTimeMethodConfiguration = {"setCurrentTime", SVGSVGElementV8Internal::setCurrentTimeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, setCurrentTimeMethodConfiguration);
    }
}

v8::Local<v8::FunctionTemplate> V8SVGSVGElement::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8SVGSVGElementTemplate);
}

bool V8SVGSVGElement::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8SVGSVGElement::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SVGSVGElement* V8SVGSVGElement::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
