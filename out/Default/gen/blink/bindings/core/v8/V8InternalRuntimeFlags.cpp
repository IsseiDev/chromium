// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8InternalRuntimeFlags.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8InternalRuntimeFlags::wrapperTypeInfo = { gin::kEmbedderBlink, V8InternalRuntimeFlags::domTemplate, V8InternalRuntimeFlags::trace, V8InternalRuntimeFlags::traceWrappers, 0, 0, V8InternalRuntimeFlags::preparePrototypeAndInterfaceObject, nullptr, "InternalRuntimeFlags", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in InternalRuntimeFlags.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& InternalRuntimeFlags::s_wrapperTypeInfo = V8InternalRuntimeFlags::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, InternalRuntimeFlags>::value,
    "InternalRuntimeFlags inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace InternalRuntimeFlagsV8Internal {

static void accelerated2dCanvasEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->accelerated2dCanvasEnabled());
}

static void accelerated2dCanvasEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::accelerated2dCanvasEnabledAttributeGetter(info);
}

static void accelerated2dCanvasEnabledAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "accelerated2dCanvasEnabled", "InternalRuntimeFlags", holder, info.GetIsolate());
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setAccelerated2dCanvasEnabled(cppValue);
}

static void accelerated2dCanvasEnabledAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    InternalRuntimeFlagsV8Internal::accelerated2dCanvasEnabledAttributeSetter(v8Value, info);
}

static void alwaysUseComplexTextEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->alwaysUseComplexTextEnabled());
}

static void alwaysUseComplexTextEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::alwaysUseComplexTextEnabledAttributeGetter(info);
}

static void audioOutputDevicesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->audioOutputDevicesEnabled());
}

static void audioOutputDevicesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::audioOutputDevicesEnabledAttributeGetter(info);
}

static void audioVideoTracksEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->audioVideoTracksEnabled());
}

static void audioVideoTracksEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::audioVideoTracksEnabledAttributeGetter(info);
}

static void auxclickEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->auxclickEnabled());
}

static void auxclickEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::auxclickEnabledAttributeGetter(info);
}

static void backgroundSyncEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->backgroundSyncEnabled());
}

static void backgroundSyncEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::backgroundSyncEnabledAttributeGetter(info);
}

static void backspaceDefaultHandlerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->backspaceDefaultHandlerEnabled());
}

static void backspaceDefaultHandlerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::backspaceDefaultHandlerEnabledAttributeGetter(info);
}

static void broadcastChannelEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->broadcastChannelEnabled());
}

static void broadcastChannelEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::broadcastChannelEnabledAttributeGetter(info);
}

static void budgetEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->budgetEnabled());
}

static void budgetEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::budgetEnabledAttributeGetter(info);
}

static void canvas2dFixedRenderingModeEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->canvas2dFixedRenderingModeEnabled());
}

static void canvas2dFixedRenderingModeEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::canvas2dFixedRenderingModeEnabledAttributeGetter(info);
}

static void enableCanvas2dDynamicRenderingModeSwitchingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->enableCanvas2dDynamicRenderingModeSwitchingEnabled());
}

static void enableCanvas2dDynamicRenderingModeSwitchingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::enableCanvas2dDynamicRenderingModeSwitchingEnabledAttributeGetter(info);
}

static void canvas2dImageChromiumEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->canvas2dImageChromiumEnabled());
}

static void canvas2dImageChromiumEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::canvas2dImageChromiumEnabledAttributeGetter(info);
}

static void clientHintsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->clientHintsEnabled());
}

static void clientHintsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::clientHintsEnabledAttributeGetter(info);
}

static void compositeOpaqueScrollersEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->compositeOpaqueScrollersEnabled());
}

static void compositeOpaqueScrollersEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::compositeOpaqueScrollersEnabledAttributeGetter(info);
}

static void colorCorrectRenderingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->colorCorrectRenderingEnabled());
}

static void colorCorrectRenderingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::colorCorrectRenderingEnabledAttributeGetter(info);
}

static void colorCorrectRenderingEnabledAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "colorCorrectRenderingEnabled", "InternalRuntimeFlags", holder, info.GetIsolate());
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setColorCorrectRenderingEnabled(cppValue);
}

static void colorCorrectRenderingEnabledAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    InternalRuntimeFlagsV8Internal::colorCorrectRenderingEnabledAttributeSetter(v8Value, info);
}

static void compositedSelectionUpdateEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->compositedSelectionUpdateEnabled());
}

static void compositedSelectionUpdateEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::compositedSelectionUpdateEnabledAttributeGetter(info);
}

static void compositorWorkerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->compositorWorkerEnabled());
}

static void compositorWorkerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::compositorWorkerEnabledAttributeGetter(info);
}

static void contextMenuEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->contextMenuEnabled());
}

static void contextMenuEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::contextMenuEnabledAttributeGetter(info);
}

static void corsRFC1918EnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->corsRFC1918Enabled());
}

static void corsRFC1918EnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::corsRFC1918EnabledAttributeGetter(info);
}

static void credentialManagerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->credentialManagerEnabled());
}

static void credentialManagerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::credentialManagerEnabledAttributeGetter(info);
}

static void css3TextEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->css3TextEnabled());
}

static void css3TextEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::css3TextEnabledAttributeGetter(info);
}

static void css3TextDecorationsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->css3TextDecorationsEnabled());
}

static void css3TextDecorationsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::css3TextDecorationsEnabledAttributeGetter(info);
}

static void cssApplyAtRulesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssApplyAtRulesEnabled());
}

static void cssApplyAtRulesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssApplyAtRulesEnabledAttributeGetter(info);
}

static void cssAdditiveAnimationsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssAdditiveAnimationsEnabled());
}

static void cssAdditiveAnimationsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssAdditiveAnimationsEnabledAttributeGetter(info);
}

static void cssBackdropFilterEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssBackdropFilterEnabled());
}

static void cssBackdropFilterEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssBackdropFilterEnabledAttributeGetter(info);
}

static void cssBoxReflectFilterEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssBoxReflectFilterEnabled());
}

static void cssBoxReflectFilterEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssBoxReflectFilterEnabledAttributeGetter(info);
}

static void cssHexAlphaColorEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssHexAlphaColorEnabled());
}

static void cssHexAlphaColorEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssHexAlphaColorEnabledAttributeGetter(info);
}

static void cssContainmentEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssContainmentEnabled());
}

static void cssContainmentEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssContainmentEnabledAttributeGetter(info);
}

static void cssFontDisplayEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssFontDisplayEnabled());
}

static void cssFontDisplayEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssFontDisplayEnabledAttributeGetter(info);
}

static void cssFontSizeAdjustEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssFontSizeAdjustEnabled());
}

static void cssFontSizeAdjustEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssFontSizeAdjustEnabledAttributeGetter(info);
}

static void cssGridLayoutEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssGridLayoutEnabled());
}

static void cssGridLayoutEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssGridLayoutEnabledAttributeGetter(info);
}

static void cssHyphensEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssHyphensEnabled());
}

static void cssHyphensEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssHyphensEnabledAttributeGetter(info);
}

static void cssInBodyDoesNotBlockPaintEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssInBodyDoesNotBlockPaintEnabled());
}

static void cssInBodyDoesNotBlockPaintEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssInBodyDoesNotBlockPaintEnabledAttributeGetter(info);
}

static void cssIndependentTransformPropertiesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssIndependentTransformPropertiesEnabled());
}

static void cssIndependentTransformPropertiesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssIndependentTransformPropertiesEnabledAttributeGetter(info);
}

static void cssMaskSourceTypeEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssMaskSourceTypeEnabled());
}

static void cssMaskSourceTypeEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssMaskSourceTypeEnabledAttributeGetter(info);
}

static void cssomSmoothScrollEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssomSmoothScrollEnabled());
}

static void cssomSmoothScrollEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssomSmoothScrollEnabledAttributeGetter(info);
}

static void cssPaintAPIEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssPaintAPIEnabled());
}

static void cssPaintAPIEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssPaintAPIEnabledAttributeGetter(info);
}

static void cssPropertyDEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssPropertyDEnabled());
}

static void cssPropertyDEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssPropertyDEnabledAttributeGetter(info);
}

static void cssSnapSizeEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssSnapSizeEnabled());
}

static void cssSnapSizeEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssSnapSizeEnabledAttributeGetter(info);
}

static void cssStickyPositionEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssStickyPositionEnabled());
}

static void cssStickyPositionEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssStickyPositionEnabledAttributeGetter(info);
}

static void cssTouchActionPanDirectionsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssTouchActionPanDirectionsEnabled());
}

static void cssTouchActionPanDirectionsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssTouchActionPanDirectionsEnabledAttributeGetter(info);
}

static void cssTypedOMEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssTypedOMEnabled());
}

static void cssTypedOMEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssTypedOMEnabledAttributeGetter(info);
}

static void cssVariablesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssVariablesEnabled());
}

static void cssVariablesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssVariablesEnabledAttributeGetter(info);
}

static void cssViewportEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssViewportEnabled());
}

static void cssViewportEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssViewportEnabledAttributeGetter(info);
}

static void cssScrollSnapPointsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssScrollSnapPointsEnabled());
}

static void cssScrollSnapPointsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::cssScrollSnapPointsEnabledAttributeGetter(info);
}

static void customElementsV1EnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->customElementsV1Enabled());
}

static void customElementsV1EnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::customElementsV1EnabledAttributeGetter(info);
}

static void customSchemeHandlerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->customSchemeHandlerEnabled());
}

static void customSchemeHandlerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::customSchemeHandlerEnabledAttributeGetter(info);
}

static void databaseEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->databaseEnabled());
}

static void databaseEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::databaseEnabledAttributeGetter(info);
}

static void decodeToYUVEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->decodeToYUVEnabled());
}

static void decodeToYUVEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::decodeToYUVEnabledAttributeGetter(info);
}

static void deviceLightEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->deviceLightEnabled());
}

static void deviceLightEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::deviceLightEnabledAttributeGetter(info);
}

static void displayList2dCanvasEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->displayList2dCanvasEnabled());
}

static void displayList2dCanvasEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::displayList2dCanvasEnabledAttributeGetter(info);
}

static void documentWriteEvaluatorEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->documentWriteEvaluatorEnabled());
}

static void documentWriteEvaluatorEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::documentWriteEvaluatorEnabledAttributeGetter(info);
}

static void dOMConvenienceAPIEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->dOMConvenienceAPIEnabled());
}

static void dOMConvenienceAPIEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::dOMConvenienceAPIEnabledAttributeGetter(info);
}

static void durableStorageEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->durableStorageEnabled());
}

static void durableStorageEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::durableStorageEnabledAttributeGetter(info);
}

static void fontCacheScalingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->fontCacheScalingEnabled());
}

static void fontCacheScalingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::fontCacheScalingEnabledAttributeGetter(info);
}

static void forceDisplayList2dCanvasEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->forceDisplayList2dCanvasEnabled());
}

static void forceDisplayList2dCanvasEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::forceDisplayList2dCanvasEnabledAttributeGetter(info);
}

static void forceDisable2dCanvasCopyOnWriteEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->forceDisable2dCanvasCopyOnWriteEnabled());
}

static void forceDisable2dCanvasCopyOnWriteEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::forceDisable2dCanvasCopyOnWriteEnabledAttributeGetter(info);
}

static void execCommandInJavaScriptEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->execCommandInJavaScriptEnabled());
}

static void execCommandInJavaScriptEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::execCommandInJavaScriptEnabledAttributeGetter(info);
}

static void computedAccessibilityInfoEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->computedAccessibilityInfoEnabled());
}

static void computedAccessibilityInfoEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::computedAccessibilityInfoEnabledAttributeGetter(info);
}

static void experimentalCanvasFeaturesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->experimentalCanvasFeaturesEnabled());
}

static void experimentalCanvasFeaturesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::experimentalCanvasFeaturesEnabledAttributeGetter(info);
}

static void experimentalContentSecurityPolicyFeaturesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->experimentalContentSecurityPolicyFeaturesEnabled());
}

static void experimentalContentSecurityPolicyFeaturesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::experimentalContentSecurityPolicyFeaturesEnabledAttributeGetter(info);
}

static void experimentalV8ExtrasEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->experimentalV8ExtrasEnabled());
}

static void experimentalV8ExtrasEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::experimentalV8ExtrasEnabledAttributeGetter(info);
}

static void fastMobileScrollingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->fastMobileScrollingEnabled());
}

static void fastMobileScrollingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::fastMobileScrollingEnabledAttributeGetter(info);
}

static void featurePolicyEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->featurePolicyEnabled());
}

static void featurePolicyEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::featurePolicyEnabledAttributeGetter(info);
}

static void fileAPIBlobCloseEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->fileAPIBlobCloseEnabled());
}

static void fileAPIBlobCloseEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::fileAPIBlobCloseEnabledAttributeGetter(info);
}

static void fileSystemEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->fileSystemEnabled());
}

static void fileSystemEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::fileSystemEnabledAttributeGetter(info);
}

static void foreignFetchEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->foreignFetchEnabled());
}

static void foreignFetchEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::foreignFetchEnabledAttributeGetter(info);
}

static void fullscreenUnprefixedEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->fullscreenUnprefixedEnabled());
}

static void fullscreenUnprefixedEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::fullscreenUnprefixedEnabledAttributeGetter(info);
}

static void frameTimingSupportEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->frameTimingSupportEnabled());
}

static void frameTimingSupportEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::frameTimingSupportEnabledAttributeGetter(info);
}

static void geometryInterfacesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->geometryInterfacesEnabled());
}

static void geometryInterfacesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::geometryInterfacesEnabledAttributeGetter(info);
}

static void getUserMediaEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->getUserMediaEnabled());
}

static void getUserMediaEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::getUserMediaEnabledAttributeGetter(info);
}

static void globalCacheStorageEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->globalCacheStorageEnabled());
}

static void globalCacheStorageEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::globalCacheStorageEnabledAttributeGetter(info);
}

static void iDBObserverEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->iDBObserverEnabled());
}

static void iDBObserverEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::iDBObserverEnabledAttributeGetter(info);
}

static void imageCaptureEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->imageCaptureEnabled());
}

static void imageCaptureEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::imageCaptureEnabledAttributeGetter(info);
}

static void imageOrientationEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->imageOrientationEnabled());
}

static void imageOrientationEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::imageOrientationEnabledAttributeGetter(info);
}

static void indexedDBExperimentalEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->indexedDBExperimentalEnabled());
}

static void indexedDBExperimentalEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::indexedDBExperimentalEnabledAttributeGetter(info);
}

static void inertTopControlsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->inertTopControlsEnabled());
}

static void inertTopControlsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::inertTopControlsEnabledAttributeGetter(info);
}

static void inputEventEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->inputEventEnabled());
}

static void inputEventEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::inputEventEnabledAttributeGetter(info);
}

static void inputModeAttributeEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->inputModeAttributeEnabled());
}

static void inputModeAttributeEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::inputModeAttributeEnabledAttributeGetter(info);
}

static void inputMultipleFieldsUIEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->inputMultipleFieldsUIEnabled());
}

static void inputMultipleFieldsUIEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::inputMultipleFieldsUIEnabledAttributeGetter(info);
}

static void installedAppEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->installedAppEnabled());
}

static void installedAppEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::installedAppEnabledAttributeGetter(info);
}

static void intersectionObserverEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->intersectionObserverEnabled());
}

static void intersectionObserverEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::intersectionObserverEnabledAttributeGetter(info);
}

static void langAttributeAwareFormControlUIEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->langAttributeAwareFormControlUIEnabled());
}

static void langAttributeAwareFormControlUIEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::langAttributeAwareFormControlUIEnabledAttributeGetter(info);
}

static void layoutNGEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->layoutNGEnabled());
}

static void layoutNGEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::layoutNGEnabledAttributeGetter(info);
}

static void linkServiceWorkerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->linkServiceWorkerEnabled());
}

static void linkServiceWorkerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::linkServiceWorkerEnabledAttributeGetter(info);
}

static void fractionalScrollOffsetsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->fractionalScrollOffsetsEnabled());
}

static void fractionalScrollOffsetsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::fractionalScrollOffsetsEnabledAttributeGetter(info);
}

static void loadingWithMojoEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->loadingWithMojoEnabled());
}

static void loadingWithMojoEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::loadingWithMojoEnabledAttributeGetter(info);
}

static void mediaCaptureEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaCaptureEnabled());
}

static void mediaCaptureEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::mediaCaptureEnabledAttributeGetter(info);
}

static void mediaCaptureFromCanvasEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaCaptureFromCanvasEnabled());
}

static void mediaCaptureFromCanvasEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::mediaCaptureFromCanvasEnabledAttributeGetter(info);
}

static void mediaCaptureFromVideoEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaCaptureFromVideoEnabled());
}

static void mediaCaptureFromVideoEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::mediaCaptureFromVideoEnabledAttributeGetter(info);
}

static void mediaConstraintsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaConstraintsEnabled());
}

static void mediaConstraintsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::mediaConstraintsEnabledAttributeGetter(info);
}

static void mediaDocumentDownloadButtonEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaDocumentDownloadButtonEnabled());
}

static void mediaDocumentDownloadButtonEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::mediaDocumentDownloadButtonEnabledAttributeGetter(info);
}

static void mediaGetSettingsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaGetSettingsEnabled());
}

static void mediaGetSettingsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::mediaGetSettingsEnabledAttributeGetter(info);
}

static void mediaSessionEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaSessionEnabled());
}

static void mediaSessionEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::mediaSessionEnabledAttributeGetter(info);
}

static void mediaSourceExperimentalEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaSourceExperimentalEnabled());
}

static void mediaSourceExperimentalEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::mediaSourceExperimentalEnabledAttributeGetter(info);
}

static void mediaSourceNewAbortAndDurationEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaSourceNewAbortAndDurationEnabled());
}

static void mediaSourceNewAbortAndDurationEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::mediaSourceNewAbortAndDurationEnabledAttributeGetter(info);
}

static void mediaStreamSpeechEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaStreamSpeechEnabled());
}

static void mediaStreamSpeechEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::mediaStreamSpeechEnabledAttributeGetter(info);
}

static void memoryInfoInWorkersEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->memoryInfoInWorkersEnabled());
}

static void memoryInfoInWorkersEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::memoryInfoInWorkersEnabledAttributeGetter(info);
}

static void mobileLayoutThemeEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mobileLayoutThemeEnabled());
}

static void mobileLayoutThemeEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::mobileLayoutThemeEnabledAttributeGetter(info);
}

static void moduleScriptsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->moduleScriptsEnabled());
}

static void moduleScriptsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::moduleScriptsEnabledAttributeGetter(info);
}

static void navigatorContentUtilsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->navigatorContentUtilsEnabled());
}

static void navigatorContentUtilsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::navigatorContentUtilsEnabledAttributeGetter(info);
}

static void webNFCEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webNFCEnabled());
}

static void webNFCEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::webNFCEnabledAttributeGetter(info);
}

static void networkInformationEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->networkInformationEnabled());
}

static void networkInformationEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::networkInformationEnabledAttributeGetter(info);
}

static void netInfoDownlinkMaxEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->netInfoDownlinkMaxEnabled());
}

static void netInfoDownlinkMaxEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::netInfoDownlinkMaxEnabledAttributeGetter(info);
}

static void newMediaPlaybackUiEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->newMediaPlaybackUiEnabled());
}

static void newMediaPlaybackUiEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::newMediaPlaybackUiEnabledAttributeGetter(info);
}

static void notificationConstructorEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->notificationConstructorEnabled());
}

static void notificationConstructorEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::notificationConstructorEnabledAttributeGetter(info);
}

static void notificationBadgeEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->notificationBadgeEnabled());
}

static void notificationBadgeEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::notificationBadgeEnabledAttributeGetter(info);
}

static void notificationInlineRepliesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->notificationInlineRepliesEnabled());
}

static void notificationInlineRepliesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::notificationInlineRepliesEnabledAttributeGetter(info);
}

static void notificationsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->notificationsEnabled());
}

static void notificationsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::notificationsEnabledAttributeGetter(info);
}

static void onDeviceChangeEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->onDeviceChangeEnabled());
}

static void onDeviceChangeEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::onDeviceChangeEnabledAttributeGetter(info);
}

static void orientationEventEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->orientationEventEnabled());
}

static void orientationEventEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::orientationEventEnabledAttributeGetter(info);
}

static void originTrialsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->originTrialsEnabled());
}

static void originTrialsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::originTrialsEnabledAttributeGetter(info);
}

static void originTrialsSampleAPIEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->originTrialsSampleAPIEnabled());
}

static void originTrialsSampleAPIEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::originTrialsSampleAPIEnabledAttributeGetter(info);
}

static void forceOverlayFullscreenVideoEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->forceOverlayFullscreenVideoEnabled());
}

static void forceOverlayFullscreenVideoEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::forceOverlayFullscreenVideoEnabledAttributeGetter(info);
}

static void overlayScrollbarsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->overlayScrollbarsEnabled());
}

static void overlayScrollbarsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::overlayScrollbarsEnabledAttributeGetter(info);
}

static void hideScrollbarsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->hideScrollbarsEnabled());
}

static void hideScrollbarsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::hideScrollbarsEnabledAttributeGetter(info);
}

static void hideScrollbarsEnabledAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "hideScrollbarsEnabled", "InternalRuntimeFlags", holder, info.GetIsolate());
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setHideScrollbarsEnabled(cppValue);
}

static void hideScrollbarsEnabledAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    InternalRuntimeFlagsV8Internal::hideScrollbarsEnabledAttributeSetter(v8Value, info);
}

static void pagePopupEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->pagePopupEnabled());
}

static void pagePopupEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::pagePopupEnabledAttributeGetter(info);
}

static void paintOptimizationsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->paintOptimizationsEnabled());
}

static void paintOptimizationsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::paintOptimizationsEnabledAttributeGetter(info);
}

static void passiveDocumentEventListenersEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->passiveDocumentEventListenersEnabled());
}

static void passiveDocumentEventListenersEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::passiveDocumentEventListenersEnabledAttributeGetter(info);
}

static void passiveEventListenersDueToFlingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->passiveEventListenersDueToFlingEnabled());
}

static void passiveEventListenersDueToFlingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::passiveEventListenersDueToFlingEnabledAttributeGetter(info);
}

static void passPaintVisualRectToCompositorEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->passPaintVisualRectToCompositorEnabled());
}

static void passPaintVisualRectToCompositorEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::passPaintVisualRectToCompositorEnabledAttributeGetter(info);
}

static void pathOpsSVGClippingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->pathOpsSVGClippingEnabled());
}

static void pathOpsSVGClippingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::pathOpsSVGClippingEnabledAttributeGetter(info);
}

static void paymentRequestEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->paymentRequestEnabled());
}

static void paymentRequestEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::paymentRequestEnabledAttributeGetter(info);
}

static void performanceObserverEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->performanceObserverEnabled());
}

static void performanceObserverEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::performanceObserverEnabledAttributeGetter(info);
}

static void permissionDelegationEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->permissionDelegationEnabled());
}

static void permissionDelegationEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::permissionDelegationEnabledAttributeGetter(info);
}

static void permissionsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->permissionsEnabled());
}

static void permissionsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::permissionsEnabledAttributeGetter(info);
}

static void permissionsRequestRevokeEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->permissionsRequestRevokeEnabled());
}

static void permissionsRequestRevokeEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::permissionsRequestRevokeEnabledAttributeGetter(info);
}

static void pointerEventEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->pointerEventEnabled());
}

static void pointerEventEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::pointerEventEnabledAttributeGetter(info);
}

static void preciseMemoryInfoEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->preciseMemoryInfoEnabled());
}

static void preciseMemoryInfoEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::preciseMemoryInfoEnabledAttributeGetter(info);
}

static void prefixedVideoFullscreenEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->prefixedVideoFullscreenEnabled());
}

static void prefixedVideoFullscreenEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::prefixedVideoFullscreenEnabledAttributeGetter(info);
}

static void presentationEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->presentationEnabled());
}

static void presentationEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::presentationEnabledAttributeGetter(info);
}

static void presentationReceiverEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->presentationReceiverEnabled());
}

static void presentationReceiverEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::presentationReceiverEnabledAttributeGetter(info);
}

static void pushMessagingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->pushMessagingEnabled());
}

static void pushMessagingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::pushMessagingEnabledAttributeGetter(info);
}

static void quotaPromiseEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->quotaPromiseEnabled());
}

static void quotaPromiseEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::quotaPromiseEnabledAttributeGetter(info);
}

static void reducedReferrerGranularityEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->reducedReferrerGranularityEnabled());
}

static void reducedReferrerGranularityEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::reducedReferrerGranularityEnabledAttributeGetter(info);
}

static void referrerPolicyHeaderEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->referrerPolicyHeaderEnabled());
}

static void referrerPolicyHeaderEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::referrerPolicyHeaderEnabledAttributeGetter(info);
}

static void remotePlaybackEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->remotePlaybackEnabled());
}

static void remotePlaybackEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::remotePlaybackEnabledAttributeGetter(info);
}

static void renderingPipelineThrottlingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->renderingPipelineThrottlingEnabled());
}

static void renderingPipelineThrottlingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::renderingPipelineThrottlingEnabledAttributeGetter(info);
}

static void renderUnicodeControlCharactersEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->renderUnicodeControlCharactersEnabled());
}

static void renderUnicodeControlCharactersEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::renderUnicodeControlCharactersEnabledAttributeGetter(info);
}

static void requestIdleCallbackEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->requestIdleCallbackEnabled());
}

static void requestIdleCallbackEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::requestIdleCallbackEnabledAttributeGetter(info);
}

static void resizeObserverEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->resizeObserverEnabled());
}

static void resizeObserverEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::resizeObserverEnabledAttributeGetter(info);
}

static void rTCPeerConnectionNewGetStatsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->rTCPeerConnectionNewGetStatsEnabled());
}

static void rTCPeerConnectionNewGetStatsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::rTCPeerConnectionNewGetStatsEnabledAttributeGetter(info);
}

static void sandboxBlocksModalsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->sandboxBlocksModalsEnabled());
}

static void sandboxBlocksModalsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::sandboxBlocksModalsEnabledAttributeGetter(info);
}

static void scriptedSpeechEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->scriptedSpeechEnabled());
}

static void scriptedSpeechEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::scriptedSpeechEnabledAttributeGetter(info);
}

static void scrollAnchoringEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->scrollAnchoringEnabled());
}

static void scrollAnchoringEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::scrollAnchoringEnabledAttributeGetter(info);
}

static void scrollAnchoringEnabledAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "scrollAnchoringEnabled", "InternalRuntimeFlags", holder, info.GetIsolate());
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setScrollAnchoringEnabled(cppValue);
}

static void scrollAnchoringEnabledAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    InternalRuntimeFlagsV8Internal::scrollAnchoringEnabledAttributeSetter(v8Value, info);
}

static void scrollTopLeftInteropEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->scrollTopLeftInteropEnabled());
}

static void scrollTopLeftInteropEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::scrollTopLeftInteropEnabledAttributeGetter(info);
}

static void sensorEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->sensorEnabled());
}

static void sensorEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::sensorEnabledAttributeGetter(info);
}

static void serviceWorkerClientAttributesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->serviceWorkerClientAttributesEnabled());
}

static void serviceWorkerClientAttributesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::serviceWorkerClientAttributesEnabledAttributeGetter(info);
}

static void serviceWorkerClientsGetIDEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->serviceWorkerClientsGetIDEnabled());
}

static void serviceWorkerClientsGetIDEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::serviceWorkerClientsGetIDEnabledAttributeGetter(info);
}

static void serviceWorkerWindowClientNavigateEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->serviceWorkerWindowClientNavigateEnabled());
}

static void serviceWorkerWindowClientNavigateEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::serviceWorkerWindowClientNavigateEnabledAttributeGetter(info);
}

static void setRootScrollerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->setRootScrollerEnabled());
}

static void setRootScrollerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::setRootScrollerEnabledAttributeGetter(info);
}

static void shadowDOMV1EnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->shadowDOMV1Enabled());
}

static void shadowDOMV1EnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::shadowDOMV1EnabledAttributeGetter(info);
}

static void sharedArrayBufferEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->sharedArrayBufferEnabled());
}

static void sharedArrayBufferEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::sharedArrayBufferEnabledAttributeGetter(info);
}

static void sharedWorkerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->sharedWorkerEnabled());
}

static void sharedWorkerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::sharedWorkerEnabledAttributeGetter(info);
}

static void slimmingPaintInvalidationEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->slimmingPaintInvalidationEnabled());
}

static void slimmingPaintInvalidationEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::slimmingPaintInvalidationEnabledAttributeGetter(info);
}

static void slimmingPaintV2EnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->slimmingPaintV2Enabled());
}

static void slimmingPaintV2EnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::slimmingPaintV2EnabledAttributeGetter(info);
}

static void slimmingPaintStrictCullRectClippingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->slimmingPaintStrictCullRectClippingEnabled());
}

static void slimmingPaintStrictCullRectClippingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::slimmingPaintStrictCullRectClippingEnabledAttributeGetter(info);
}

static void slimmingPaintUnderInvalidationCheckingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->slimmingPaintUnderInvalidationCheckingEnabled());
}

static void slimmingPaintUnderInvalidationCheckingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::slimmingPaintUnderInvalidationCheckingEnabledAttributeGetter(info);
}

static void slimmingPaintUnderInvalidationCheckingEnabledAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "slimmingPaintUnderInvalidationCheckingEnabled", "InternalRuntimeFlags", holder, info.GetIsolate());
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setSlimmingPaintUnderInvalidationCheckingEnabled(cppValue);
}

static void slimmingPaintUnderInvalidationCheckingEnabledAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    InternalRuntimeFlagsV8Internal::slimmingPaintUnderInvalidationCheckingEnabledAttributeSetter(v8Value, info);
}

static void stableBlinkFeaturesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->stableBlinkFeaturesEnabled());
}

static void stableBlinkFeaturesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::stableBlinkFeaturesEnabledAttributeGetter(info);
}

static void stackedCSSPropertyAnimationsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->stackedCSSPropertyAnimationsEnabled());
}

static void stackedCSSPropertyAnimationsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::stackedCSSPropertyAnimationsEnabledAttributeGetter(info);
}

static void styleSharingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->styleSharingEnabled());
}

static void styleSharingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::styleSharingEnabledAttributeGetter(info);
}

static void styleMatchedPropertiesCacheEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->styleMatchedPropertiesCacheEnabled());
}

static void styleMatchedPropertiesCacheEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::styleMatchedPropertiesCacheEnabledAttributeGetter(info);
}

static void experimentalStreamEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->experimentalStreamEnabled());
}

static void experimentalStreamEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::experimentalStreamEnabledAttributeGetter(info);
}

static void speculativeLaunchServiceWorkerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->speculativeLaunchServiceWorkerEnabled());
}

static void speculativeLaunchServiceWorkerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::speculativeLaunchServiceWorkerEnabledAttributeGetter(info);
}

static void storageEstimateEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->storageEstimateEnabled());
}

static void storageEstimateEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::storageEstimateEnabledAttributeGetter(info);
}

static void suboriginsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->suboriginsEnabled());
}

static void suboriginsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::suboriginsEnabledAttributeGetter(info);
}

static void timerThrottlingForBackgroundTabsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->timerThrottlingForBackgroundTabsEnabled());
}

static void timerThrottlingForBackgroundTabsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::timerThrottlingForBackgroundTabsEnabledAttributeGetter(info);
}

static void touchEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->touchEnabled());
}

static void touchEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::touchEnabledAttributeGetter(info);
}

static void traceWrappablesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->traceWrappablesEnabled());
}

static void traceWrappablesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::traceWrappablesEnabledAttributeGetter(info);
}

static void trustedEventsDefaultActionEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->trustedEventsDefaultActionEnabled());
}

static void trustedEventsDefaultActionEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::trustedEventsDefaultActionEnabledAttributeGetter(info);
}

static void unsafeES3APIsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->unsafeES3APIsEnabled());
}

static void unsafeES3APIsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::unsafeES3APIsEnabledAttributeGetter(info);
}

static void unsandboxedAuxiliaryEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->unsandboxedAuxiliaryEnabled());
}

static void unsandboxedAuxiliaryEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::unsandboxedAuxiliaryEnabledAttributeGetter(info);
}

static void userSelectAllEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->userSelectAllEnabled());
}

static void userSelectAllEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::userSelectAllEnabledAttributeGetter(info);
}

static void webAnimationsAPIEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webAnimationsAPIEnabled());
}

static void webAnimationsAPIEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::webAnimationsAPIEnabledAttributeGetter(info);
}

static void webAnimationsSVGEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webAnimationsSVGEnabled());
}

static void webAnimationsSVGEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::webAnimationsSVGEnabledAttributeGetter(info);
}

static void webBluetoothEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webBluetoothEnabled());
}

static void webBluetoothEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::webBluetoothEnabledAttributeGetter(info);
}

static void webGLDraftExtensionsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webGLDraftExtensionsEnabled());
}

static void webGLDraftExtensionsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::webGLDraftExtensionsEnabledAttributeGetter(info);
}

static void webGLImageChromiumEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webGLImageChromiumEnabled());
}

static void webGLImageChromiumEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::webGLImageChromiumEnabledAttributeGetter(info);
}

static void webUSBEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webUSBEnabled());
}

static void webUSBEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::webUSBEnabledAttributeGetter(info);
}

static void webVREnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webVREnabled());
}

static void webVREnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::webVREnabledAttributeGetter(info);
}

static void webVTTRegionsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webVTTRegionsEnabled());
}

static void webVTTRegionsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::webVTTRegionsEnabledAttributeGetter(info);
}

static void v8IdleTasksEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->v8IdleTasksEnabled());
}

static void v8IdleTasksEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::v8IdleTasksEnabledAttributeGetter(info);
}

static void visibilityChangeOnUnloadEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->visibilityChangeOnUnloadEnabled());
}

static void visibilityChangeOnUnloadEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::visibilityChangeOnUnloadEnabledAttributeGetter(info);
}

static void xsltEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->xsltEnabled());
}

static void xsltEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::xsltEnabledAttributeGetter(info);
}

static void smilEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->smilEnabled());
}

static void smilEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::smilEnabledAttributeGetter(info);
}

static void scrollCustomizationEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->scrollCustomizationEnabled());
}

static void scrollCustomizationEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::scrollCustomizationEnabledAttributeGetter(info);
}

static void scrollRestorationEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->scrollRestorationEnabled());
}

static void scrollRestorationEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::scrollRestorationEnabledAttributeGetter(info);
}

static void autoplayMutedVideosEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->autoplayMutedVideosEnabled());
}

static void autoplayMutedVideosEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::autoplayMutedVideosEnabledAttributeGetter(info);
}

static void autoplayMutedVideosEnabledAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "autoplayMutedVideosEnabled", "InternalRuntimeFlags", holder, info.GetIsolate());
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setAutoplayMutedVideosEnabled(cppValue);
}

static void autoplayMutedVideosEnabledAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    InternalRuntimeFlagsV8Internal::autoplayMutedVideosEnabledAttributeSetter(v8Value, info);
}

static void visualViewportAPIEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->visualViewportAPIEnabled());
}

static void visualViewportAPIEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::visualViewportAPIEnabledAttributeGetter(info);
}

static void wakeLockEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->wakeLockEnabled());
}

static void wakeLockEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::wakeLockEnabledAttributeGetter(info);
}

static void webFontsInterventionV2With2GEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webFontsInterventionV2With2GEnabled());
}

static void webFontsInterventionV2With2GEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::webFontsInterventionV2With2GEnabledAttributeGetter(info);
}

static void webFontsInterventionV2WithSlow2GEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webFontsInterventionV2WithSlow2GEnabled());
}

static void webFontsInterventionV2WithSlow2GEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::webFontsInterventionV2WithSlow2GEnabledAttributeGetter(info);
}

static void webFontsInterventionTriggerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webFontsInterventionTriggerEnabled());
}

static void webFontsInterventionTriggerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::webFontsInterventionTriggerEnabledAttributeGetter(info);
}

static void webShareEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webShareEnabled());
}

static void webShareEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::webShareEnabledAttributeGetter(info);
}

static void workletEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->workletEnabled());
}

static void workletEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::workletEnabledAttributeGetter(info);
}

static void weakMemoryCacheEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->weakMemoryCacheEnabled());
}

static void weakMemoryCacheEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::weakMemoryCacheEnabledAttributeGetter(info);
}

static void doNotUnlockSharedBufferEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->doNotUnlockSharedBufferEnabled());
}

static void doNotUnlockSharedBufferEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::doNotUnlockSharedBufferEnabledAttributeGetter(info);
}

static void parseHTMLOnMainThreadEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->parseHTMLOnMainThreadEnabled());
}

static void parseHTMLOnMainThreadEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::parseHTMLOnMainThreadEnabledAttributeGetter(info);
}

static void sendBeaconThrowForBlobWithNonSimpleTypeEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->sendBeaconThrowForBlobWithNonSimpleTypeEnabled());
}

static void sendBeaconThrowForBlobWithNonSimpleTypeEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalRuntimeFlagsV8Internal::sendBeaconThrowForBlobWithNonSimpleTypeEnabledAttributeGetter(info);
}

} // namespace InternalRuntimeFlagsV8Internal

const V8DOMConfiguration::AccessorConfiguration V8InternalRuntimeFlagsAccessors[] = {
    {"accelerated2dCanvasEnabled", InternalRuntimeFlagsV8Internal::accelerated2dCanvasEnabledAttributeGetterCallback, InternalRuntimeFlagsV8Internal::accelerated2dCanvasEnabledAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"alwaysUseComplexTextEnabled", InternalRuntimeFlagsV8Internal::alwaysUseComplexTextEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"audioOutputDevicesEnabled", InternalRuntimeFlagsV8Internal::audioOutputDevicesEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"audioVideoTracksEnabled", InternalRuntimeFlagsV8Internal::audioVideoTracksEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"auxclickEnabled", InternalRuntimeFlagsV8Internal::auxclickEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"backgroundSyncEnabled", InternalRuntimeFlagsV8Internal::backgroundSyncEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"backspaceDefaultHandlerEnabled", InternalRuntimeFlagsV8Internal::backspaceDefaultHandlerEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"broadcastChannelEnabled", InternalRuntimeFlagsV8Internal::broadcastChannelEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"budgetEnabled", InternalRuntimeFlagsV8Internal::budgetEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"canvas2dFixedRenderingModeEnabled", InternalRuntimeFlagsV8Internal::canvas2dFixedRenderingModeEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"enableCanvas2dDynamicRenderingModeSwitchingEnabled", InternalRuntimeFlagsV8Internal::enableCanvas2dDynamicRenderingModeSwitchingEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"canvas2dImageChromiumEnabled", InternalRuntimeFlagsV8Internal::canvas2dImageChromiumEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"clientHintsEnabled", InternalRuntimeFlagsV8Internal::clientHintsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"compositeOpaqueScrollersEnabled", InternalRuntimeFlagsV8Internal::compositeOpaqueScrollersEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"colorCorrectRenderingEnabled", InternalRuntimeFlagsV8Internal::colorCorrectRenderingEnabledAttributeGetterCallback, InternalRuntimeFlagsV8Internal::colorCorrectRenderingEnabledAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"compositedSelectionUpdateEnabled", InternalRuntimeFlagsV8Internal::compositedSelectionUpdateEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"compositorWorkerEnabled", InternalRuntimeFlagsV8Internal::compositorWorkerEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"contextMenuEnabled", InternalRuntimeFlagsV8Internal::contextMenuEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"corsRFC1918Enabled", InternalRuntimeFlagsV8Internal::corsRFC1918EnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"credentialManagerEnabled", InternalRuntimeFlagsV8Internal::credentialManagerEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"css3TextEnabled", InternalRuntimeFlagsV8Internal::css3TextEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"css3TextDecorationsEnabled", InternalRuntimeFlagsV8Internal::css3TextDecorationsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssApplyAtRulesEnabled", InternalRuntimeFlagsV8Internal::cssApplyAtRulesEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssAdditiveAnimationsEnabled", InternalRuntimeFlagsV8Internal::cssAdditiveAnimationsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssBackdropFilterEnabled", InternalRuntimeFlagsV8Internal::cssBackdropFilterEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssBoxReflectFilterEnabled", InternalRuntimeFlagsV8Internal::cssBoxReflectFilterEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssHexAlphaColorEnabled", InternalRuntimeFlagsV8Internal::cssHexAlphaColorEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssContainmentEnabled", InternalRuntimeFlagsV8Internal::cssContainmentEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssFontDisplayEnabled", InternalRuntimeFlagsV8Internal::cssFontDisplayEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssFontSizeAdjustEnabled", InternalRuntimeFlagsV8Internal::cssFontSizeAdjustEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssGridLayoutEnabled", InternalRuntimeFlagsV8Internal::cssGridLayoutEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssHyphensEnabled", InternalRuntimeFlagsV8Internal::cssHyphensEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssInBodyDoesNotBlockPaintEnabled", InternalRuntimeFlagsV8Internal::cssInBodyDoesNotBlockPaintEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssIndependentTransformPropertiesEnabled", InternalRuntimeFlagsV8Internal::cssIndependentTransformPropertiesEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssMaskSourceTypeEnabled", InternalRuntimeFlagsV8Internal::cssMaskSourceTypeEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssomSmoothScrollEnabled", InternalRuntimeFlagsV8Internal::cssomSmoothScrollEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssPaintAPIEnabled", InternalRuntimeFlagsV8Internal::cssPaintAPIEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssPropertyDEnabled", InternalRuntimeFlagsV8Internal::cssPropertyDEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssSnapSizeEnabled", InternalRuntimeFlagsV8Internal::cssSnapSizeEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssStickyPositionEnabled", InternalRuntimeFlagsV8Internal::cssStickyPositionEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssTouchActionPanDirectionsEnabled", InternalRuntimeFlagsV8Internal::cssTouchActionPanDirectionsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssTypedOMEnabled", InternalRuntimeFlagsV8Internal::cssTypedOMEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssVariablesEnabled", InternalRuntimeFlagsV8Internal::cssVariablesEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssViewportEnabled", InternalRuntimeFlagsV8Internal::cssViewportEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssScrollSnapPointsEnabled", InternalRuntimeFlagsV8Internal::cssScrollSnapPointsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"customElementsV1Enabled", InternalRuntimeFlagsV8Internal::customElementsV1EnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"customSchemeHandlerEnabled", InternalRuntimeFlagsV8Internal::customSchemeHandlerEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"databaseEnabled", InternalRuntimeFlagsV8Internal::databaseEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"decodeToYUVEnabled", InternalRuntimeFlagsV8Internal::decodeToYUVEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"deviceLightEnabled", InternalRuntimeFlagsV8Internal::deviceLightEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"displayList2dCanvasEnabled", InternalRuntimeFlagsV8Internal::displayList2dCanvasEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"documentWriteEvaluatorEnabled", InternalRuntimeFlagsV8Internal::documentWriteEvaluatorEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"dOMConvenienceAPIEnabled", InternalRuntimeFlagsV8Internal::dOMConvenienceAPIEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"durableStorageEnabled", InternalRuntimeFlagsV8Internal::durableStorageEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"fontCacheScalingEnabled", InternalRuntimeFlagsV8Internal::fontCacheScalingEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"forceDisplayList2dCanvasEnabled", InternalRuntimeFlagsV8Internal::forceDisplayList2dCanvasEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"forceDisable2dCanvasCopyOnWriteEnabled", InternalRuntimeFlagsV8Internal::forceDisable2dCanvasCopyOnWriteEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"execCommandInJavaScriptEnabled", InternalRuntimeFlagsV8Internal::execCommandInJavaScriptEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"computedAccessibilityInfoEnabled", InternalRuntimeFlagsV8Internal::computedAccessibilityInfoEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"experimentalCanvasFeaturesEnabled", InternalRuntimeFlagsV8Internal::experimentalCanvasFeaturesEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"experimentalContentSecurityPolicyFeaturesEnabled", InternalRuntimeFlagsV8Internal::experimentalContentSecurityPolicyFeaturesEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"experimentalV8ExtrasEnabled", InternalRuntimeFlagsV8Internal::experimentalV8ExtrasEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"fastMobileScrollingEnabled", InternalRuntimeFlagsV8Internal::fastMobileScrollingEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"featurePolicyEnabled", InternalRuntimeFlagsV8Internal::featurePolicyEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"fileAPIBlobCloseEnabled", InternalRuntimeFlagsV8Internal::fileAPIBlobCloseEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"fileSystemEnabled", InternalRuntimeFlagsV8Internal::fileSystemEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"foreignFetchEnabled", InternalRuntimeFlagsV8Internal::foreignFetchEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"fullscreenUnprefixedEnabled", InternalRuntimeFlagsV8Internal::fullscreenUnprefixedEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"frameTimingSupportEnabled", InternalRuntimeFlagsV8Internal::frameTimingSupportEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"geometryInterfacesEnabled", InternalRuntimeFlagsV8Internal::geometryInterfacesEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"getUserMediaEnabled", InternalRuntimeFlagsV8Internal::getUserMediaEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"globalCacheStorageEnabled", InternalRuntimeFlagsV8Internal::globalCacheStorageEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"iDBObserverEnabled", InternalRuntimeFlagsV8Internal::iDBObserverEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"imageCaptureEnabled", InternalRuntimeFlagsV8Internal::imageCaptureEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"imageOrientationEnabled", InternalRuntimeFlagsV8Internal::imageOrientationEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"indexedDBExperimentalEnabled", InternalRuntimeFlagsV8Internal::indexedDBExperimentalEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"inertTopControlsEnabled", InternalRuntimeFlagsV8Internal::inertTopControlsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"inputEventEnabled", InternalRuntimeFlagsV8Internal::inputEventEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"inputModeAttributeEnabled", InternalRuntimeFlagsV8Internal::inputModeAttributeEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"inputMultipleFieldsUIEnabled", InternalRuntimeFlagsV8Internal::inputMultipleFieldsUIEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"installedAppEnabled", InternalRuntimeFlagsV8Internal::installedAppEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"intersectionObserverEnabled", InternalRuntimeFlagsV8Internal::intersectionObserverEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"langAttributeAwareFormControlUIEnabled", InternalRuntimeFlagsV8Internal::langAttributeAwareFormControlUIEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"layoutNGEnabled", InternalRuntimeFlagsV8Internal::layoutNGEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"linkServiceWorkerEnabled", InternalRuntimeFlagsV8Internal::linkServiceWorkerEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"fractionalScrollOffsetsEnabled", InternalRuntimeFlagsV8Internal::fractionalScrollOffsetsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"loadingWithMojoEnabled", InternalRuntimeFlagsV8Internal::loadingWithMojoEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaCaptureEnabled", InternalRuntimeFlagsV8Internal::mediaCaptureEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaCaptureFromCanvasEnabled", InternalRuntimeFlagsV8Internal::mediaCaptureFromCanvasEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaCaptureFromVideoEnabled", InternalRuntimeFlagsV8Internal::mediaCaptureFromVideoEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaConstraintsEnabled", InternalRuntimeFlagsV8Internal::mediaConstraintsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaDocumentDownloadButtonEnabled", InternalRuntimeFlagsV8Internal::mediaDocumentDownloadButtonEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaGetSettingsEnabled", InternalRuntimeFlagsV8Internal::mediaGetSettingsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaSessionEnabled", InternalRuntimeFlagsV8Internal::mediaSessionEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaSourceExperimentalEnabled", InternalRuntimeFlagsV8Internal::mediaSourceExperimentalEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaSourceNewAbortAndDurationEnabled", InternalRuntimeFlagsV8Internal::mediaSourceNewAbortAndDurationEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaStreamSpeechEnabled", InternalRuntimeFlagsV8Internal::mediaStreamSpeechEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"memoryInfoInWorkersEnabled", InternalRuntimeFlagsV8Internal::memoryInfoInWorkersEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mobileLayoutThemeEnabled", InternalRuntimeFlagsV8Internal::mobileLayoutThemeEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"moduleScriptsEnabled", InternalRuntimeFlagsV8Internal::moduleScriptsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"navigatorContentUtilsEnabled", InternalRuntimeFlagsV8Internal::navigatorContentUtilsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webNFCEnabled", InternalRuntimeFlagsV8Internal::webNFCEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"networkInformationEnabled", InternalRuntimeFlagsV8Internal::networkInformationEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"netInfoDownlinkMaxEnabled", InternalRuntimeFlagsV8Internal::netInfoDownlinkMaxEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"newMediaPlaybackUiEnabled", InternalRuntimeFlagsV8Internal::newMediaPlaybackUiEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"notificationConstructorEnabled", InternalRuntimeFlagsV8Internal::notificationConstructorEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"notificationBadgeEnabled", InternalRuntimeFlagsV8Internal::notificationBadgeEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"notificationInlineRepliesEnabled", InternalRuntimeFlagsV8Internal::notificationInlineRepliesEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"notificationsEnabled", InternalRuntimeFlagsV8Internal::notificationsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onDeviceChangeEnabled", InternalRuntimeFlagsV8Internal::onDeviceChangeEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"orientationEventEnabled", InternalRuntimeFlagsV8Internal::orientationEventEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"originTrialsEnabled", InternalRuntimeFlagsV8Internal::originTrialsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"originTrialsSampleAPIEnabled", InternalRuntimeFlagsV8Internal::originTrialsSampleAPIEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"forceOverlayFullscreenVideoEnabled", InternalRuntimeFlagsV8Internal::forceOverlayFullscreenVideoEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"overlayScrollbarsEnabled", InternalRuntimeFlagsV8Internal::overlayScrollbarsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"hideScrollbarsEnabled", InternalRuntimeFlagsV8Internal::hideScrollbarsEnabledAttributeGetterCallback, InternalRuntimeFlagsV8Internal::hideScrollbarsEnabledAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"pagePopupEnabled", InternalRuntimeFlagsV8Internal::pagePopupEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"paintOptimizationsEnabled", InternalRuntimeFlagsV8Internal::paintOptimizationsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"passiveDocumentEventListenersEnabled", InternalRuntimeFlagsV8Internal::passiveDocumentEventListenersEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"passiveEventListenersDueToFlingEnabled", InternalRuntimeFlagsV8Internal::passiveEventListenersDueToFlingEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"passPaintVisualRectToCompositorEnabled", InternalRuntimeFlagsV8Internal::passPaintVisualRectToCompositorEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"pathOpsSVGClippingEnabled", InternalRuntimeFlagsV8Internal::pathOpsSVGClippingEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"paymentRequestEnabled", InternalRuntimeFlagsV8Internal::paymentRequestEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"performanceObserverEnabled", InternalRuntimeFlagsV8Internal::performanceObserverEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"permissionDelegationEnabled", InternalRuntimeFlagsV8Internal::permissionDelegationEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"permissionsEnabled", InternalRuntimeFlagsV8Internal::permissionsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"permissionsRequestRevokeEnabled", InternalRuntimeFlagsV8Internal::permissionsRequestRevokeEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"pointerEventEnabled", InternalRuntimeFlagsV8Internal::pointerEventEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"preciseMemoryInfoEnabled", InternalRuntimeFlagsV8Internal::preciseMemoryInfoEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"prefixedVideoFullscreenEnabled", InternalRuntimeFlagsV8Internal::prefixedVideoFullscreenEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"presentationEnabled", InternalRuntimeFlagsV8Internal::presentationEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"presentationReceiverEnabled", InternalRuntimeFlagsV8Internal::presentationReceiverEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"pushMessagingEnabled", InternalRuntimeFlagsV8Internal::pushMessagingEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"quotaPromiseEnabled", InternalRuntimeFlagsV8Internal::quotaPromiseEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"reducedReferrerGranularityEnabled", InternalRuntimeFlagsV8Internal::reducedReferrerGranularityEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"referrerPolicyHeaderEnabled", InternalRuntimeFlagsV8Internal::referrerPolicyHeaderEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"remotePlaybackEnabled", InternalRuntimeFlagsV8Internal::remotePlaybackEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"renderingPipelineThrottlingEnabled", InternalRuntimeFlagsV8Internal::renderingPipelineThrottlingEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"renderUnicodeControlCharactersEnabled", InternalRuntimeFlagsV8Internal::renderUnicodeControlCharactersEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"requestIdleCallbackEnabled", InternalRuntimeFlagsV8Internal::requestIdleCallbackEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"resizeObserverEnabled", InternalRuntimeFlagsV8Internal::resizeObserverEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"rTCPeerConnectionNewGetStatsEnabled", InternalRuntimeFlagsV8Internal::rTCPeerConnectionNewGetStatsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"sandboxBlocksModalsEnabled", InternalRuntimeFlagsV8Internal::sandboxBlocksModalsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"scriptedSpeechEnabled", InternalRuntimeFlagsV8Internal::scriptedSpeechEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"scrollAnchoringEnabled", InternalRuntimeFlagsV8Internal::scrollAnchoringEnabledAttributeGetterCallback, InternalRuntimeFlagsV8Internal::scrollAnchoringEnabledAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"scrollTopLeftInteropEnabled", InternalRuntimeFlagsV8Internal::scrollTopLeftInteropEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"sensorEnabled", InternalRuntimeFlagsV8Internal::sensorEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"serviceWorkerClientAttributesEnabled", InternalRuntimeFlagsV8Internal::serviceWorkerClientAttributesEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"serviceWorkerClientsGetIDEnabled", InternalRuntimeFlagsV8Internal::serviceWorkerClientsGetIDEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"serviceWorkerWindowClientNavigateEnabled", InternalRuntimeFlagsV8Internal::serviceWorkerWindowClientNavigateEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"setRootScrollerEnabled", InternalRuntimeFlagsV8Internal::setRootScrollerEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"shadowDOMV1Enabled", InternalRuntimeFlagsV8Internal::shadowDOMV1EnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"sharedArrayBufferEnabled", InternalRuntimeFlagsV8Internal::sharedArrayBufferEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"sharedWorkerEnabled", InternalRuntimeFlagsV8Internal::sharedWorkerEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"slimmingPaintInvalidationEnabled", InternalRuntimeFlagsV8Internal::slimmingPaintInvalidationEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"slimmingPaintV2Enabled", InternalRuntimeFlagsV8Internal::slimmingPaintV2EnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"slimmingPaintStrictCullRectClippingEnabled", InternalRuntimeFlagsV8Internal::slimmingPaintStrictCullRectClippingEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"slimmingPaintUnderInvalidationCheckingEnabled", InternalRuntimeFlagsV8Internal::slimmingPaintUnderInvalidationCheckingEnabledAttributeGetterCallback, InternalRuntimeFlagsV8Internal::slimmingPaintUnderInvalidationCheckingEnabledAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"stableBlinkFeaturesEnabled", InternalRuntimeFlagsV8Internal::stableBlinkFeaturesEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"stackedCSSPropertyAnimationsEnabled", InternalRuntimeFlagsV8Internal::stackedCSSPropertyAnimationsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"styleSharingEnabled", InternalRuntimeFlagsV8Internal::styleSharingEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"styleMatchedPropertiesCacheEnabled", InternalRuntimeFlagsV8Internal::styleMatchedPropertiesCacheEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"experimentalStreamEnabled", InternalRuntimeFlagsV8Internal::experimentalStreamEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"speculativeLaunchServiceWorkerEnabled", InternalRuntimeFlagsV8Internal::speculativeLaunchServiceWorkerEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"storageEstimateEnabled", InternalRuntimeFlagsV8Internal::storageEstimateEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"suboriginsEnabled", InternalRuntimeFlagsV8Internal::suboriginsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"timerThrottlingForBackgroundTabsEnabled", InternalRuntimeFlagsV8Internal::timerThrottlingForBackgroundTabsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"touchEnabled", InternalRuntimeFlagsV8Internal::touchEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"traceWrappablesEnabled", InternalRuntimeFlagsV8Internal::traceWrappablesEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"trustedEventsDefaultActionEnabled", InternalRuntimeFlagsV8Internal::trustedEventsDefaultActionEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"unsafeES3APIsEnabled", InternalRuntimeFlagsV8Internal::unsafeES3APIsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"unsandboxedAuxiliaryEnabled", InternalRuntimeFlagsV8Internal::unsandboxedAuxiliaryEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"userSelectAllEnabled", InternalRuntimeFlagsV8Internal::userSelectAllEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webAnimationsAPIEnabled", InternalRuntimeFlagsV8Internal::webAnimationsAPIEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webAnimationsSVGEnabled", InternalRuntimeFlagsV8Internal::webAnimationsSVGEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webBluetoothEnabled", InternalRuntimeFlagsV8Internal::webBluetoothEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webGLDraftExtensionsEnabled", InternalRuntimeFlagsV8Internal::webGLDraftExtensionsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webGLImageChromiumEnabled", InternalRuntimeFlagsV8Internal::webGLImageChromiumEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webUSBEnabled", InternalRuntimeFlagsV8Internal::webUSBEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webVREnabled", InternalRuntimeFlagsV8Internal::webVREnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webVTTRegionsEnabled", InternalRuntimeFlagsV8Internal::webVTTRegionsEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"v8IdleTasksEnabled", InternalRuntimeFlagsV8Internal::v8IdleTasksEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"visibilityChangeOnUnloadEnabled", InternalRuntimeFlagsV8Internal::visibilityChangeOnUnloadEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"xsltEnabled", InternalRuntimeFlagsV8Internal::xsltEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"smilEnabled", InternalRuntimeFlagsV8Internal::smilEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"scrollCustomizationEnabled", InternalRuntimeFlagsV8Internal::scrollCustomizationEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"scrollRestorationEnabled", InternalRuntimeFlagsV8Internal::scrollRestorationEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"autoplayMutedVideosEnabled", InternalRuntimeFlagsV8Internal::autoplayMutedVideosEnabledAttributeGetterCallback, InternalRuntimeFlagsV8Internal::autoplayMutedVideosEnabledAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"visualViewportAPIEnabled", InternalRuntimeFlagsV8Internal::visualViewportAPIEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"wakeLockEnabled", InternalRuntimeFlagsV8Internal::wakeLockEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webFontsInterventionV2With2GEnabled", InternalRuntimeFlagsV8Internal::webFontsInterventionV2With2GEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webFontsInterventionV2WithSlow2GEnabled", InternalRuntimeFlagsV8Internal::webFontsInterventionV2WithSlow2GEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webFontsInterventionTriggerEnabled", InternalRuntimeFlagsV8Internal::webFontsInterventionTriggerEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webShareEnabled", InternalRuntimeFlagsV8Internal::webShareEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"workletEnabled", InternalRuntimeFlagsV8Internal::workletEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"weakMemoryCacheEnabled", InternalRuntimeFlagsV8Internal::weakMemoryCacheEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"doNotUnlockSharedBufferEnabled", InternalRuntimeFlagsV8Internal::doNotUnlockSharedBufferEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"parseHTMLOnMainThreadEnabled", InternalRuntimeFlagsV8Internal::parseHTMLOnMainThreadEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"sendBeaconThrowForBlobWithNonSimpleTypeEnabled", InternalRuntimeFlagsV8Internal::sendBeaconThrowForBlobWithNonSimpleTypeEnabledAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static void installV8InternalRuntimeFlagsTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8InternalRuntimeFlags::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8InternalRuntimeFlags::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8InternalRuntimeFlagsAccessors, WTF_ARRAY_LENGTH(V8InternalRuntimeFlagsAccessors));
}

v8::Local<v8::FunctionTemplate> V8InternalRuntimeFlags::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8InternalRuntimeFlagsTemplate);
}

bool V8InternalRuntimeFlags::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8InternalRuntimeFlags::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

InternalRuntimeFlags* V8InternalRuntimeFlags::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
