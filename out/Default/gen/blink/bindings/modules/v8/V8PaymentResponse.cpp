// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8PaymentResponse.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8PaymentAddress.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8PaymentResponse::wrapperTypeInfo = { gin::kEmbedderBlink, V8PaymentResponse::domTemplate, V8PaymentResponse::trace, V8PaymentResponse::traceWrappers, 0, 0, V8PaymentResponse::preparePrototypeAndInterfaceObject, nullptr, "PaymentResponse", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in PaymentResponse.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& PaymentResponse::s_wrapperTypeInfo = V8PaymentResponse::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, PaymentResponse>::value,
    "PaymentResponse inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace PaymentResponseV8Internal {

static void methodNameAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaymentResponse* impl = V8PaymentResponse::toImpl(holder);
    v8SetReturnValueString(info, impl->methodName(), info.GetIsolate());
}

static void methodNameAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaymentResponseV8Internal::methodNameAttributeGetter(info);
}

static void payerEmailAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaymentResponse* impl = V8PaymentResponse::toImpl(holder);
    v8SetReturnValueStringOrNull(info, impl->payerEmail(), info.GetIsolate());
}

static void payerEmailAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaymentResponseV8Internal::payerEmailAttributeGetter(info);
}

static void payerPhoneAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaymentResponse* impl = V8PaymentResponse::toImpl(holder);
    v8SetReturnValueStringOrNull(info, impl->payerPhone(), info.GetIsolate());
}

static void payerPhoneAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaymentResponseV8Internal::payerPhoneAttributeGetter(info);
}

static void detailsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaymentResponse* impl = V8PaymentResponse::toImpl(holder);
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ExceptionState exceptionState(ExceptionState::GetterContext, "details", "PaymentResponse", holder, info.GetIsolate());
    ScriptValue cppValue(impl->details(scriptState, exceptionState));
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    v8SetReturnValue(info, cppValue.v8Value());
}

static void detailsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaymentResponseV8Internal::detailsAttributeGetter(info);
}

static void shippingAddressAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaymentResponse* impl = V8PaymentResponse::toImpl(holder);
    PaymentAddress* cppValue(WTF::getPtr(impl->shippingAddress()));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "shippingAddress"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void shippingAddressAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaymentResponseV8Internal::shippingAddressAttributeGetter(info);
}

static void shippingOptionAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaymentResponse* impl = V8PaymentResponse::toImpl(holder);
    v8SetReturnValueStringOrNull(info, impl->shippingOption(), info.GetIsolate());
}

static void shippingOptionAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaymentResponseV8Internal::shippingOptionAttributeGetter(info);
}

static void completeMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    PaymentResponse* impl = V8PaymentResponse::toImpl(info.Holder());
    V8StringResource<> paymentResult;
    {
        if (!info[0]->IsUndefined()) {
            paymentResult = info[0];
            if (!paymentResult.prepare(exceptionState))
                return;
            const char* validValues[] = {
                "success",
                "fail",
                "",
            };
            if (!isValidEnum(paymentResult, validValues, WTF_ARRAY_LENGTH(validValues), "PaymentComplete", exceptionState)) {
                return;
            }
        } else {
            paymentResult = String("");
        }
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->complete(scriptState, paymentResult);
    v8SetReturnValue(info, result.v8Value());
}

static void completeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "complete", "PaymentResponse", info.Holder(), info.GetIsolate());
    completeMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void completeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaymentResponseV8Internal::completeMethod(info);
}

} // namespace PaymentResponseV8Internal

const V8DOMConfiguration::AccessorConfiguration V8PaymentResponseAccessors[] = {
    {"methodName", PaymentResponseV8Internal::methodNameAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"payerEmail", PaymentResponseV8Internal::payerEmailAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"payerPhone", PaymentResponseV8Internal::payerPhoneAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"details", PaymentResponseV8Internal::detailsAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"shippingAddress", PaymentResponseV8Internal::shippingAddressAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"shippingOption", PaymentResponseV8Internal::shippingOptionAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8PaymentResponseMethods[] = {
    {"complete", PaymentResponseV8Internal::completeMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8PaymentResponseTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8PaymentResponse::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8PaymentResponse::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    if (RuntimeEnabledFeatures::paymentRequestEnabled()) {
        V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8PaymentResponseAccessors, WTF_ARRAY_LENGTH(V8PaymentResponseAccessors));
        V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8PaymentResponseMethods, WTF_ARRAY_LENGTH(V8PaymentResponseMethods));
    }
}

v8::Local<v8::FunctionTemplate> V8PaymentResponse::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8PaymentResponseTemplate);
}

bool V8PaymentResponse::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8PaymentResponse::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

PaymentResponse* V8PaymentResponse::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
