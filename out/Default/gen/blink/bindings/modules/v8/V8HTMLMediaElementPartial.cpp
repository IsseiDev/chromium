// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8HTMLMediaElementPartial.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8EventListenerList.h"
#include "bindings/core/v8/V8HTMLMediaElement.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8MediaKeys.h"
#include "bindings/modules/v8/V8MediaSession.h"
#include "bindings/modules/v8/V8MediaStream.h"
#include "bindings/modules/v8/V8RemotePlayback.h"
#include "core/HTMLNames.h"
#include "core/dom/Document.h"
#include "core/dom/custom/CEReactionsScope.h"
#include "core/dom/custom/V0CustomElementProcessingStack.h"
#include "modules/audio_output_devices/HTMLMediaElementAudioOutputDevice.h"
#include "modules/encryptedmedia/HTMLMediaElementEncryptedMedia.h"
#include "modules/mediacapturefromelement/HTMLMediaElementCapture.h"
#include "modules/mediasession/HTMLMediaElementMediaSession.h"
#include "modules/remoteplayback/HTMLMediaElementRemotePlayback.h"
#include "modules/srcobject/HTMLMediaElementSrcObject.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

namespace HTMLMediaElementPartialV8Internal {

static void sinkIdAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    v8SetReturnValueString(info, HTMLMediaElementAudioOutputDevice::sinkId(*impl), info.GetIsolate());
}

static void sinkIdAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLMediaElementPartialV8Internal::sinkIdAttributeGetter(info);
}

static void mediaKeysAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    v8SetReturnValueFast(info, HTMLMediaElementEncryptedMedia::mediaKeys(*impl), impl);
}

static void mediaKeysAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLMediaElementPartialV8Internal::mediaKeysAttributeGetter(info);
}

static void onencryptedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    EventListener* cppValue(HTMLMediaElementEncryptedMedia::onencrypted(*impl));
    v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
}

static void onencryptedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLMediaElementPartialV8Internal::onencryptedAttributeGetter(info);
}

static void onencryptedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    HTMLMediaElementEncryptedMedia::setOnencrypted(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onencryptedAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    HTMLMediaElementPartialV8Internal::onencryptedAttributeSetter(v8Value, info);
}

static void sessionAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    v8SetReturnValueFast(info, HTMLMediaElementMediaSession::session(*impl), impl);
}

static void sessionAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLMediaElementPartialV8Internal::sessionAttributeGetter(info);
}

static void sessionAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "session", "HTMLMediaElement", holder, info.GetIsolate());
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    MediaSession* cppValue = V8MediaSession::toImplWithTypeCheck(info.GetIsolate(), v8Value);
    if (!cppValue && !isUndefinedOrNull(v8Value)) {
        exceptionState.throwTypeError("The provided value is not of type 'MediaSession'.");
        exceptionState.throwIfNeeded();
        return;
    }
    HTMLMediaElementMediaSession::setSession(*impl, cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void sessionAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    HTMLMediaElementPartialV8Internal::sessionAttributeSetter(v8Value, info);
}

static void remoteAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    v8SetReturnValueFast(info, HTMLMediaElementRemotePlayback::remote(*impl), impl);
}

static void remoteAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLMediaElementPartialV8Internal::remoteAttributeGetter(info);
}

static void disableRemotePlaybackAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    v8SetReturnValueBool(info, HTMLMediaElementRemotePlayback::fastHasAttribute(HTMLNames::disableremoteplaybackAttr, *impl));
}

static void disableRemotePlaybackAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLMediaElementPartialV8Internal::disableRemotePlaybackAttributeGetter(info);
}

static void disableRemotePlaybackAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "disableRemotePlayback", "HTMLMediaElement", holder, info.GetIsolate());
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    HTMLMediaElementRemotePlayback::setBooleanAttribute(HTMLNames::disableremoteplaybackAttr, *impl, cppValue);
}

static void disableRemotePlaybackAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    CEReactionsScope ceReactionsScope;
    V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    HTMLMediaElementPartialV8Internal::disableRemotePlaybackAttributeSetter(v8Value, info);
}

static void srcObjectAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    v8SetReturnValueFast(info, HTMLMediaElementSrcObject::srcObject(*impl), impl);
}

static void srcObjectAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLMediaElementPartialV8Internal::srcObjectAttributeGetter(info);
}

static void srcObjectAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "srcObject", "HTMLMediaElement", holder, info.GetIsolate());
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    MediaStream* cppValue = V8MediaStream::toImplWithTypeCheck(info.GetIsolate(), v8Value);
    if (!cppValue && !isUndefinedOrNull(v8Value)) {
        exceptionState.throwTypeError("The provided value is not of type 'MediaStream'.");
        exceptionState.throwIfNeeded();
        return;
    }
    HTMLMediaElementSrcObject::setSrcObject(*impl, cppValue);
}

static void srcObjectAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    HTMLMediaElementPartialV8Internal::srcObjectAttributeSetter(v8Value, info);
}

static void setSinkIdMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(info.Holder());
    V8StringResource<> sinkId;
    {
        sinkId = info[0];
        if (!sinkId.prepare(exceptionState))
            return;
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = HTMLMediaElementAudioOutputDevice::setSinkId(scriptState, *impl, sinkId);
    v8SetReturnValue(info, result.v8Value());
}

static void setSinkIdMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setSinkId", "HTMLMediaElement", info.Holder(), info.GetIsolate());
    setSinkIdMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void setSinkIdMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLMediaElementPartialV8Internal::setSinkIdMethod(info);
}

static void setMediaKeysMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        v8SetReturnValue(info, ScriptPromise::rejectRaw(ScriptState::current(info.GetIsolate()), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setMediaKeys", "HTMLMediaElement", 1, info.Length())));
        return;
    }
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(info.Holder());
    MediaKeys* mediaKeys;
    {
        mediaKeys = V8MediaKeys::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!mediaKeys && !isUndefinedOrNull(info[0])) {
            v8SetReturnValue(info, ScriptPromise::rejectRaw(ScriptState::current(info.GetIsolate()), V8ThrowException::createTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("setMediaKeys", "HTMLMediaElement", "parameter 1 is not of type 'MediaKeys'."))));
            return;
        }
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = HTMLMediaElementEncryptedMedia::setMediaKeys(scriptState, *impl, mediaKeys);
    v8SetReturnValue(info, result.v8Value());
}

static void setMediaKeysMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLMediaElementPartialV8Internal::setMediaKeysMethod(info);
}

static void captureStreamMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "captureStream", "HTMLMediaElement", info.Holder(), info.GetIsolate());
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(info.Holder());
    MediaStream* result = HTMLMediaElementCapture::captureStream(*impl, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueFast(info, result, impl);
}

static void captureStreamMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HTMLMediaElementPartialV8Internal::captureStreamMethod(info);
}

} // namespace HTMLMediaElementPartialV8Internal

const V8DOMConfiguration::AccessorConfiguration V8HTMLMediaElementAccessors[] = {
    {"mediaKeys", HTMLMediaElementPartialV8Internal::mediaKeysAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onencrypted", HTMLMediaElementPartialV8Internal::onencryptedAttributeGetterCallback, HTMLMediaElementPartialV8Internal::onencryptedAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"disableRemotePlayback", HTMLMediaElementPartialV8Internal::disableRemotePlaybackAttributeGetterCallback, HTMLMediaElementPartialV8Internal::disableRemotePlaybackAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"srcObject", HTMLMediaElementPartialV8Internal::srcObjectAttributeGetterCallback, HTMLMediaElementPartialV8Internal::srcObjectAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8HTMLMediaElementMethods[] = {
    {"setMediaKeys", HTMLMediaElementPartialV8Internal::setMediaKeysMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

void V8HTMLMediaElementPartial::installV8HTMLMediaElementTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8HTMLMediaElement::installV8HTMLMediaElementTemplate(isolate, world, interfaceTemplate);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8HTMLMediaElementAccessors, WTF_ARRAY_LENGTH(V8HTMLMediaElementAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8HTMLMediaElementMethods, WTF_ARRAY_LENGTH(V8HTMLMediaElementMethods));

    if (RuntimeEnabledFeatures::audioOutputDevicesEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorsinkIdConfiguration = \
        {"sinkId", HTMLMediaElementPartialV8Internal::sinkIdAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorsinkIdConfiguration);
    }

    if (RuntimeEnabledFeatures::mediaSessionEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorsessionConfiguration = \
        {"session", HTMLMediaElementPartialV8Internal::sessionAttributeGetterCallback, HTMLMediaElementPartialV8Internal::sessionAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorsessionConfiguration);
    }

    if (RuntimeEnabledFeatures::remotePlaybackEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorremoteConfiguration = \
        {"remote", HTMLMediaElementPartialV8Internal::remoteAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorremoteConfiguration);
    }

    if (RuntimeEnabledFeatures::audioOutputDevicesEnabled()) {
        const V8DOMConfiguration::MethodConfiguration setSinkIdMethodConfiguration = {"setSinkId", HTMLMediaElementPartialV8Internal::setSinkIdMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, setSinkIdMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::mediaCaptureFromVideoEnabled()) {
        const V8DOMConfiguration::MethodConfiguration captureStreamMethodConfiguration = {"captureStream", HTMLMediaElementPartialV8Internal::captureStreamMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, captureStreamMethodConfiguration);
    }
}

void V8HTMLMediaElementPartial::preparePrototypeAndInterfaceObject(v8::Local<v8::Context> context, const DOMWrapperWorld& world, v8::Local<v8::Object> prototypeObject, v8::Local<v8::Function> interfaceObject, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    V8HTMLMediaElement::preparePrototypeAndInterfaceObject(context, world, prototypeObject, interfaceObject, interfaceTemplate);
}

void V8HTMLMediaElementPartial::initialize()
{
    // Should be invoked from ModulesInitializer.
    V8HTMLMediaElement::updateWrapperTypeInfo(
        &V8HTMLMediaElementPartial::installV8HTMLMediaElementTemplate,
        &V8HTMLMediaElementPartial::preparePrototypeAndInterfaceObject);
}

} // namespace blink
