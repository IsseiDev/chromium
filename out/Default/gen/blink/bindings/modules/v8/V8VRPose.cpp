// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8VRPose.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Float32Array.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/dom/FlexibleArrayBufferView.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8VRPose::wrapperTypeInfo = { gin::kEmbedderBlink, V8VRPose::domTemplate, V8VRPose::trace, V8VRPose::traceWrappers, 0, 0, V8VRPose::preparePrototypeAndInterfaceObject, nullptr, "VRPose", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in VRPose.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& VRPose::s_wrapperTypeInfo = V8VRPose::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, VRPose>::value,
    "VRPose inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace VRPoseV8Internal {

static void timeStampAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    VRPose* impl = V8VRPose::toImpl(holder);
    v8SetReturnValue(info, impl->timeStamp());
}

static void timeStampAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRPoseV8Internal::timeStampAttributeGetter(info);
}

static void positionAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    VRPose* impl = V8VRPose::toImpl(holder);
    DOMFloat32Array* cppValue(WTF::getPtr(impl->position()));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "position"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void positionAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRPoseV8Internal::positionAttributeGetter(info);
}

static void linearVelocityAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    VRPose* impl = V8VRPose::toImpl(holder);
    DOMFloat32Array* cppValue(WTF::getPtr(impl->linearVelocity()));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "linearVelocity"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void linearVelocityAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRPoseV8Internal::linearVelocityAttributeGetter(info);
}

static void linearAccelerationAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    VRPose* impl = V8VRPose::toImpl(holder);
    DOMFloat32Array* cppValue(WTF::getPtr(impl->linearAcceleration()));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "linearAcceleration"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void linearAccelerationAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRPoseV8Internal::linearAccelerationAttributeGetter(info);
}

static void orientationAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    VRPose* impl = V8VRPose::toImpl(holder);
    DOMFloat32Array* cppValue(WTF::getPtr(impl->orientation()));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "orientation"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void orientationAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRPoseV8Internal::orientationAttributeGetter(info);
}

static void angularVelocityAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    VRPose* impl = V8VRPose::toImpl(holder);
    DOMFloat32Array* cppValue(WTF::getPtr(impl->angularVelocity()));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "angularVelocity"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void angularVelocityAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRPoseV8Internal::angularVelocityAttributeGetter(info);
}

static void angularAccelerationAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    VRPose* impl = V8VRPose::toImpl(holder);
    DOMFloat32Array* cppValue(WTF::getPtr(impl->angularAcceleration()));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "angularAcceleration"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void angularAccelerationAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRPoseV8Internal::angularAccelerationAttributeGetter(info);
}

} // namespace VRPoseV8Internal

const V8DOMConfiguration::AccessorConfiguration V8VRPoseAccessors[] = {
    {"timeStamp", VRPoseV8Internal::timeStampAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"position", VRPoseV8Internal::positionAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"linearVelocity", VRPoseV8Internal::linearVelocityAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"linearAcceleration", VRPoseV8Internal::linearAccelerationAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"orientation", VRPoseV8Internal::orientationAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"angularVelocity", VRPoseV8Internal::angularVelocityAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"angularAcceleration", VRPoseV8Internal::angularAccelerationAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static void installV8VRPoseTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8VRPose::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8VRPose::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    if (RuntimeEnabledFeatures::webVREnabled()) {
        V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8VRPoseAccessors, WTF_ARRAY_LENGTH(V8VRPoseAccessors));
    }
}

v8::Local<v8::FunctionTemplate> V8VRPose::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8VRPoseTemplate);
}

bool V8VRPose::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8VRPose::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

VRPose* V8VRPose::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
