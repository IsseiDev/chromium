// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8VRDisplay.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8FrameRequestCallback.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8VRDisplayCapabilities.h"
#include "bindings/modules/v8/V8VREyeParameters.h"
#include "bindings/modules/v8/V8VRLayer.h"
#include "bindings/modules/v8/V8VRPose.h"
#include "bindings/modules/v8/V8VRStageParameters.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8VRDisplay::wrapperTypeInfo = { gin::kEmbedderBlink, V8VRDisplay::domTemplate, V8VRDisplay::trace, V8VRDisplay::traceWrappers, 0, 0, V8VRDisplay::preparePrototypeAndInterfaceObject, nullptr, "VRDisplay", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in VRDisplay.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& VRDisplay::s_wrapperTypeInfo = V8VRDisplay::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, VRDisplay>::value,
    "VRDisplay inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace VRDisplayV8Internal {

static void displayIdAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    VRDisplay* impl = V8VRDisplay::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->displayId());
}

static void displayIdAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::displayIdAttributeGetter(info);
}

static void displayNameAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    VRDisplay* impl = V8VRDisplay::toImpl(holder);
    v8SetReturnValueString(info, impl->displayName(), info.GetIsolate());
}

static void displayNameAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::displayNameAttributeGetter(info);
}

static void isConnectedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    VRDisplay* impl = V8VRDisplay::toImpl(holder);
    v8SetReturnValueBool(info, impl->isConnected());
}

static void isConnectedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::isConnectedAttributeGetter(info);
}

static void isPresentingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    VRDisplay* impl = V8VRDisplay::toImpl(holder);
    v8SetReturnValueBool(info, impl->isPresenting());
}

static void isPresentingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::isPresentingAttributeGetter(info);
}

static void capabilitiesAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    VRDisplay* impl = V8VRDisplay::toImpl(holder);
    VRDisplayCapabilities* cppValue(WTF::getPtr(impl->capabilities()));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "capabilities"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void capabilitiesAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::capabilitiesAttributeGetter(info);
}

static void stageParametersAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    VRDisplay* impl = V8VRDisplay::toImpl(holder);
    VRStageParameters* cppValue(WTF::getPtr(impl->stageParameters()));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "stageParameters"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void stageParametersAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::stageParametersAttributeGetter(info);
}

static void getPoseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());
    v8SetReturnValue(info, impl->getPose());
}

static void getPoseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::getPoseMethod(info);
}

static void getImmediatePoseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());
    v8SetReturnValue(info, impl->getImmediatePose());
}

static void getImmediatePoseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::getImmediatePoseMethod(info);
}

static void resetPoseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());
    impl->resetPose();
}

static void resetPoseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::resetPoseMethod(info);
}

static void getEyeParametersMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getEyeParameters", "VRDisplay", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());
    V8StringResource<> whichEye;
    {
        whichEye = info[0];
        if (!whichEye.prepare())
            return;
        const char* validValues[] = {
            "left",
            "right",
        };
        if (!isValidEnum(whichEye, validValues, WTF_ARRAY_LENGTH(validValues), "VREye", exceptionState)) {
            exceptionState.throwIfNeeded();
            return;
        }
    }
    v8SetReturnValue(info, impl->getEyeParameters(whichEye));
}

static void getEyeParametersMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::getEyeParametersMethod(info);
}

static void requestAnimationFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "requestAnimationFrame", "VRDisplay", 1, info.Length()));
        return;
    }
    VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());
    FrameRequestCallback* callback;
    {
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("requestAnimationFrame", "VRDisplay", "The callback provided as parameter 1 is not a function."));
            return;
        }
        callback = V8FrameRequestCallback::create(v8::Local<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));
    }
    v8SetReturnValueInt(info, impl->requestAnimationFrame(callback));
}

static void requestAnimationFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::requestAnimationFrameMethod(info);
}

static void cancelAnimationFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "cancelAnimationFrame", "VRDisplay", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());
    int handle;
    {
        handle = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->cancelAnimationFrame(handle);
}

static void cancelAnimationFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::cancelAnimationFrameMethod(info);
}

static void requestPresentMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());
    HeapVector<VRLayer> layers;
    {
        layers = toImplArray<HeapVector<VRLayer>>(info[0], 1, info.GetIsolate(), exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->requestPresent(scriptState, layers);
    v8SetReturnValue(info, result.v8Value());
}

static void requestPresentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "requestPresent", "VRDisplay", info.Holder(), info.GetIsolate());
    requestPresentMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void requestPresentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::requestPresentMethod(info);
}

static void exitPresentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->exitPresent(scriptState);
    v8SetReturnValue(info, result.v8Value());
}

static void exitPresentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::exitPresentMethod(info);
}

static void getLayersMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());
    v8SetReturnValue(info, toV8(impl->getLayers(), info.Holder(), info.GetIsolate()));
}

static void getLayersMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::getLayersMethod(info);
}

static void submitFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());
    VRPose* pose;
    {
        if (!info[0]->IsUndefined()) {
            pose = V8VRPose::toImplWithTypeCheck(info.GetIsolate(), info[0]);
            if (!pose) {
                V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("submitFrame", "VRDisplay", "parameter 1 is not of type 'VRPose'."));
                return;
            }
        } else {
            pose = nullptr;
        }
    }
    impl->submitFrame(pose);
}

static void submitFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    VRDisplayV8Internal::submitFrameMethod(info);
}

} // namespace VRDisplayV8Internal

const V8DOMConfiguration::AccessorConfiguration V8VRDisplayAccessors[] = {
    {"displayId", VRDisplayV8Internal::displayIdAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"displayName", VRDisplayV8Internal::displayNameAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"isConnected", VRDisplayV8Internal::isConnectedAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"isPresenting", VRDisplayV8Internal::isPresentingAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"capabilities", VRDisplayV8Internal::capabilitiesAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"stageParameters", VRDisplayV8Internal::stageParametersAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8VRDisplayMethods[] = {
    {"getPose", VRDisplayV8Internal::getPoseMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"getImmediatePose", VRDisplayV8Internal::getImmediatePoseMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"resetPose", VRDisplayV8Internal::resetPoseMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"getEyeParameters", VRDisplayV8Internal::getEyeParametersMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"requestAnimationFrame", VRDisplayV8Internal::requestAnimationFrameMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"cancelAnimationFrame", VRDisplayV8Internal::cancelAnimationFrameMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"requestPresent", VRDisplayV8Internal::requestPresentMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"exitPresent", VRDisplayV8Internal::exitPresentMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"getLayers", VRDisplayV8Internal::getLayersMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"submitFrame", VRDisplayV8Internal::submitFrameMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8VRDisplayTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8VRDisplay::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8VRDisplay::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    if (RuntimeEnabledFeatures::webVREnabled()) {
        V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8VRDisplayAccessors, WTF_ARRAY_LENGTH(V8VRDisplayAccessors));
        V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8VRDisplayMethods, WTF_ARRAY_LENGTH(V8VRDisplayMethods));
    }
}

v8::Local<v8::FunctionTemplate> V8VRDisplay::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8VRDisplayTemplate);
}

bool V8VRDisplay::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8VRDisplay::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

VRDisplay* V8VRDisplay::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
