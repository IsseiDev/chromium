// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8PaymentItem.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/modules/v8/V8PaymentCurrencyAmount.h"

namespace blink {

void V8PaymentItem::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, PaymentItem& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        exceptionState.throwTypeError("Missing required member(s): amount, label.");
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> amountValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "amount")).ToLocal(&amountValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (amountValue.IsEmpty() || amountValue->IsUndefined()) {
        exceptionState.throwTypeError("required member amount is undefined.");
        return;
    } else {
        PaymentCurrencyAmount amount;
        V8PaymentCurrencyAmount::toImpl(isolate, amountValue, amount, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setAmount(amount);
    }

    v8::Local<v8::Value> labelValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "label")).ToLocal(&labelValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (labelValue.IsEmpty() || labelValue->IsUndefined()) {
        exceptionState.throwTypeError("required member label is undefined.");
        return;
    } else {
        V8StringResource<> label = labelValue;
        if (!label.prepare(exceptionState))
            return;
        impl.setLabel(label);
    }
}

v8::Local<v8::Value> PaymentItem::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8PaymentItem(*this, v8Object, creationContext, isolate))
        return v8::Local<v8::Value>();
    return v8Object;
}

bool toV8PaymentItem(const PaymentItem& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasAmount()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "amount"), toV8(impl.amount(), creationContext, isolate))))
            return false;
    } else {
        ASSERT_NOT_REACHED();
    }

    if (impl.hasLabel()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "label"), v8String(isolate, impl.label()))))
            return false;
    } else {
        ASSERT_NOT_REACHED();
    }

    return true;
}

PaymentItem NativeValueTraits<PaymentItem>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    PaymentItem impl;
    V8PaymentItem::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
