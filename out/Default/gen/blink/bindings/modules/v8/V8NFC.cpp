// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8NFC.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8ArrayBuffer.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/StringOrArrayBufferOrNFCMessage.h"
#include "bindings/modules/v8/V8MessageCallback.h"
#include "bindings/modules/v8/V8NFCMessage.h"
#include "bindings/modules/v8/V8NFCPushOptions.h"
#include "bindings/modules/v8/V8NFCWatchOptions.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8NFC::wrapperTypeInfo = { gin::kEmbedderBlink, V8NFC::domTemplate, V8NFC::trace, V8NFC::traceWrappers, 0, 0, V8NFC::preparePrototypeAndInterfaceObject, nullptr, "NFC", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in NFC.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& NFC::s_wrapperTypeInfo = V8NFC::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, NFC>::value,
    "NFC inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace NFCV8Internal {

static void pushMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    NFC* impl = V8NFC::toImpl(info.Holder());
    StringOrArrayBufferOrNFCMessage message;
    NFCPushOptions options;
    {
        V8StringOrArrayBufferOrNFCMessage::toImpl(info.GetIsolate(), info[0], message, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;
        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('options') is not an object.");
            return;
        }
        V8NFCPushOptions::toImpl(info.GetIsolate(), info[1], options, exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->push(scriptState, message, options);
    v8SetReturnValue(info, result.v8Value());
}

static void pushMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "push", "NFC", info.Holder(), info.GetIsolate());
    pushMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void pushMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    NFCV8Internal::pushMethod(info);
}

static void cancelPushMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    NFC* impl = V8NFC::toImpl(info.Holder());
    V8StringResource<> target;
    {
        if (!info[0]->IsUndefined()) {
            target = info[0];
            if (!target.prepare(exceptionState))
                return;
            const char* validValues[] = {
                "tag",
                "peer",
                "any",
            };
            if (!isValidEnum(target, validValues, WTF_ARRAY_LENGTH(validValues), "NFCPushTarget", exceptionState)) {
                return;
            }
        } else {
            target = String("any");
        }
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->cancelPush(scriptState, target);
    v8SetReturnValue(info, result.v8Value());
}

static void cancelPushMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "cancelPush", "NFC", info.Holder(), info.GetIsolate());
    cancelPushMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void cancelPushMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    NFCV8Internal::cancelPushMethod(info);
}

static void watchMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    NFC* impl = V8NFC::toImpl(info.Holder());
    MessageCallback* callback;
    NFCWatchOptions options;
    {
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");
            return;
        }
        callback = V8MessageCallback::create(v8::Local<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));
        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('options') is not an object.");
            return;
        }
        V8NFCWatchOptions::toImpl(info.GetIsolate(), info[1], options, exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->watch(scriptState, callback, options);
    v8SetReturnValue(info, result.v8Value());
}

static void watchMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "watch", "NFC", info.Holder(), info.GetIsolate());
    watchMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void watchMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    NFCV8Internal::watchMethod(info);
}

static void cancelWatchMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    NFC* impl = V8NFC::toImpl(info.Holder());
    int id;
    {
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        if (UNLIKELY(numArgsPassed <= 0)) {
            ScriptState* scriptState = ScriptState::forReceiverObject(info);
            ScriptPromise result = impl->cancelWatch(scriptState);
            v8SetReturnValue(info, result.v8Value());
            return;
        }
        id = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->cancelWatch(scriptState, id);
    v8SetReturnValue(info, result.v8Value());
}

static void cancelWatchMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "cancelWatch", "NFC", info.Holder(), info.GetIsolate());
    cancelWatchMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void cancelWatchMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    NFCV8Internal::cancelWatchMethod(info);
}

} // namespace NFCV8Internal

const V8DOMConfiguration::MethodConfiguration V8NFCMethods[] = {
    {"push", NFCV8Internal::pushMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"cancelPush", NFCV8Internal::cancelPushMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"watch", NFCV8Internal::watchMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"cancelWatch", NFCV8Internal::cancelWatchMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8NFCTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8NFC::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8NFC::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    if (RuntimeEnabledFeatures::webNFCEnabled()) {
        V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8NFCMethods, WTF_ARRAY_LENGTH(V8NFCMethods));
    }
}

v8::Local<v8::FunctionTemplate> V8NFC::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8NFCTemplate);
}

bool V8NFC::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8NFC::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

NFC* V8NFC::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
