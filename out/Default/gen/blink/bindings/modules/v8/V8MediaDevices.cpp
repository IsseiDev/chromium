// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8MediaDevices.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8EventListenerList.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8MediaStreamConstraints.h"
#include "bindings/modules/v8/V8MediaTrackSupportedConstraints.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8MediaDevices::wrapperTypeInfo = { gin::kEmbedderBlink, V8MediaDevices::domTemplate, V8MediaDevices::trace, V8MediaDevices::traceWrappers, V8MediaDevices::toActiveScriptWrappable, 0, V8MediaDevices::preparePrototypeAndInterfaceObject, nullptr, "MediaDevices", &V8EventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in MediaDevices.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& MediaDevices::s_wrapperTypeInfo = V8MediaDevices::wrapperTypeInfo;

namespace MediaDevicesV8Internal {

static void ondevicechangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    MediaDevices* impl = V8MediaDevices::toImpl(holder);
    EventListener* cppValue(WTF::getPtr(impl->ondevicechange()));
    v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
}

static void ondevicechangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    MediaDevicesV8Internal::ondevicechangeAttributeGetter(info);
}

static void ondevicechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    MediaDevices* impl = V8MediaDevices::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->ondevicechange(), v8Value, V8MediaDevices::eventListenerCacheIndex);
    impl->setOndevicechange(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondevicechangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    MediaDevicesV8Internal::ondevicechangeAttributeSetter(v8Value, info);
}

static void enumerateDevicesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    MediaDevices* impl = V8MediaDevices::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->enumerateDevices(scriptState);
    v8SetReturnValue(info, result.v8Value());
}

static void enumerateDevicesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::MediaDevicesEnumerateDevices);
    MediaDevicesV8Internal::enumerateDevicesMethod(info);
}

static void getSupportedConstraintsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    MediaDevices* impl = V8MediaDevices::toImpl(info.Holder());
    MediaTrackSupportedConstraints result;
    impl->getSupportedConstraints(result);
    v8SetReturnValue(info, result);
}

static void getSupportedConstraintsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    MediaDevicesV8Internal::getSupportedConstraintsMethod(info);
}

static void getUserMediaMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    MediaDevices* impl = V8MediaDevices::toImpl(info.Holder());
    MediaStreamConstraints options;
    {
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('options') is not an object.");
            return;
        }
        V8MediaStreamConstraints::toImpl(info.GetIsolate(), info[0], options, exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->getUserMedia(scriptState, options, exceptionState);
    if (exceptionState.hadException()) {
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void getUserMediaMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getUserMedia", "MediaDevices", info.Holder(), info.GetIsolate());
    getUserMediaMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void getUserMediaMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::GetUserMediaPromise);
    MediaDevicesV8Internal::getUserMediaMethod(info);
}

} // namespace MediaDevicesV8Internal

const V8DOMConfiguration::MethodConfiguration V8MediaDevicesMethods[] = {
    {"enumerateDevices", MediaDevicesV8Internal::enumerateDevicesMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8MediaDevicesTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8MediaDevices::wrapperTypeInfo.interfaceName, V8EventTarget::domTemplate(isolate, world), V8MediaDevices::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8MediaDevicesMethods, WTF_ARRAY_LENGTH(V8MediaDevicesMethods));

    if (RuntimeEnabledFeatures::onDeviceChangeEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorondevicechangeConfiguration = \
        {"ondevicechange", MediaDevicesV8Internal::ondevicechangeAttributeGetterCallback, MediaDevicesV8Internal::ondevicechangeAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorondevicechangeConfiguration);
    }

    if (RuntimeEnabledFeatures::mediaConstraintsEnabled()) {
        const V8DOMConfiguration::MethodConfiguration getSupportedConstraintsMethodConfiguration = {"getSupportedConstraints", MediaDevicesV8Internal::getSupportedConstraintsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, getSupportedConstraintsMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::getUserMediaEnabled()) {
        const V8DOMConfiguration::MethodConfiguration getUserMediaMethodConfiguration = {"getUserMedia", MediaDevicesV8Internal::getUserMediaMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, getUserMediaMethodConfiguration);
    }
}

v8::Local<v8::FunctionTemplate> V8MediaDevices::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8MediaDevicesTemplate);
}

bool V8MediaDevices::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8MediaDevices::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

MediaDevices* V8MediaDevices::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

ActiveScriptWrappable* V8MediaDevices::toActiveScriptWrappable(v8::Local<v8::Object> wrapper)
{
    return toImpl(wrapper);
}

} // namespace blink
