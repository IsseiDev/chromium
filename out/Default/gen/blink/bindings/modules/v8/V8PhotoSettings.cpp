// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8PhotoSettings.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/modules/v8/V8Point2D.h"

namespace blink {

void V8PhotoSettings::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, PhotoSettings& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> focusModeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "focusMode")).ToLocal(&focusModeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (focusModeValue.IsEmpty() || focusModeValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> focusMode = focusModeValue;
        if (!focusMode.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "unavailable",
            "manual",
            "single-shot",
            "continuous",
        };
        if (!isValidEnum(focusMode, validValues, WTF_ARRAY_LENGTH(validValues), "FocusMode", exceptionState))
            return;
        impl.setFocusMode(focusMode);
    }

    v8::Local<v8::Value> imageHeightValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "imageHeight")).ToLocal(&imageHeightValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (imageHeightValue.IsEmpty() || imageHeightValue->IsUndefined()) {
        // Do nothing.
    } else {
        unsigned imageHeight = toUInt32(isolate, imageHeightValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setImageHeight(imageHeight);
    }

    v8::Local<v8::Value> imageWidthValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "imageWidth")).ToLocal(&imageWidthValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (imageWidthValue.IsEmpty() || imageWidthValue->IsUndefined()) {
        // Do nothing.
    } else {
        unsigned imageWidth = toUInt32(isolate, imageWidthValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setImageWidth(imageWidth);
    }

    v8::Local<v8::Value> pointsOfInterestValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "pointsOfInterest")).ToLocal(&pointsOfInterestValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (pointsOfInterestValue.IsEmpty() || pointsOfInterestValue->IsUndefined()) {
        // Do nothing.
    } else {
        HeapVector<Point2D> pointsOfInterest = toImplArray<HeapVector<Point2D>>(pointsOfInterestValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setPointsOfInterest(pointsOfInterest);
    }

    v8::Local<v8::Value> zoomValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "zoom")).ToLocal(&zoomValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (zoomValue.IsEmpty() || zoomValue->IsUndefined()) {
        // Do nothing.
    } else {
        unsigned zoom = toUInt32(isolate, zoomValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setZoom(zoom);
    }
}

v8::Local<v8::Value> PhotoSettings::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8PhotoSettings(*this, v8Object, creationContext, isolate))
        return v8::Local<v8::Value>();
    return v8Object;
}

bool toV8PhotoSettings(const PhotoSettings& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasFocusMode()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "focusMode"), v8String(isolate, impl.focusMode()))))
            return false;
    }

    if (impl.hasImageHeight()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "imageHeight"), v8::Integer::NewFromUnsigned(isolate, impl.imageHeight()))))
            return false;
    }

    if (impl.hasImageWidth()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "imageWidth"), v8::Integer::NewFromUnsigned(isolate, impl.imageWidth()))))
            return false;
    }

    if (impl.hasPointsOfInterest()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "pointsOfInterest"), toV8(impl.pointsOfInterest(), creationContext, isolate))))
            return false;
    }

    if (impl.hasZoom()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "zoom"), v8::Integer::NewFromUnsigned(isolate, impl.zoom()))))
            return false;
    }

    return true;
}

PhotoSettings NativeValueTraits<PhotoSettings>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    PhotoSettings impl;
    V8PhotoSettings::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
