// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8WaveShaperNode.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Float32Array.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/dom/FlexibleArrayBufferView.h"
#include "core/inspector/ConsoleMessage.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8WaveShaperNode::wrapperTypeInfo = { gin::kEmbedderBlink, V8WaveShaperNode::domTemplate, V8WaveShaperNode::trace, V8WaveShaperNode::traceWrappers, 0, 0, V8WaveShaperNode::preparePrototypeAndInterfaceObject, nullptr, "WaveShaperNode", &V8AudioNode::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in WaveShaperNode.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& WaveShaperNode::s_wrapperTypeInfo = V8WaveShaperNode::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, WaveShaperNode>::value,
    "WaveShaperNode inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace WaveShaperNodeV8Internal {

static void curveAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WaveShaperNode* impl = V8WaveShaperNode::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->curve()), impl);
}

static void curveAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WaveShaperNodeV8Internal::curveAttributeGetter(info);
}

static void curveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "curve", "WaveShaperNode", holder, info.GetIsolate());
    WaveShaperNode* impl = V8WaveShaperNode::toImpl(holder);
    DOMFloat32Array* cppValue = v8Value->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(v8Value)) : 0;
    if (!cppValue && !isUndefinedOrNull(v8Value)) {
        exceptionState.throwTypeError("The provided value is not of type 'Float32Array'.");
        exceptionState.throwIfNeeded();
        return;
    }
    impl->setCurve(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void curveAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    WaveShaperNodeV8Internal::curveAttributeSetter(v8Value, info);
}

static void oversampleAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WaveShaperNode* impl = V8WaveShaperNode::toImpl(holder);
    v8SetReturnValueString(info, impl->oversample(), info.GetIsolate());
}

static void oversampleAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WaveShaperNodeV8Internal::oversampleAttributeGetter(info);
}

static void oversampleAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "oversample", "WaveShaperNode", holder, info.GetIsolate());
    WaveShaperNode* impl = V8WaveShaperNode::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    const char* validValues[] = {
        "none",
        "2x",
        "4x",
    };
    if (!isValidEnum(cppValue, validValues, WTF_ARRAY_LENGTH(validValues), "OverSampleType", exceptionState)) {
        currentExecutionContext(info.GetIsolate())->addConsoleMessage(ConsoleMessage::create(JSMessageSource, WarningMessageLevel, exceptionState.message()));
        return;
    }
    impl->setOversample(cppValue);
}

static void oversampleAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    WaveShaperNodeV8Internal::oversampleAttributeSetter(v8Value, info);
}

} // namespace WaveShaperNodeV8Internal

const V8DOMConfiguration::AccessorConfiguration V8WaveShaperNodeAccessors[] = {
    {"curve", WaveShaperNodeV8Internal::curveAttributeGetterCallback, WaveShaperNodeV8Internal::curveAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"oversample", WaveShaperNodeV8Internal::oversampleAttributeGetterCallback, WaveShaperNodeV8Internal::oversampleAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static void installV8WaveShaperNodeTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8WaveShaperNode::wrapperTypeInfo.interfaceName, V8AudioNode::domTemplate(isolate, world), V8WaveShaperNode::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8WaveShaperNodeAccessors, WTF_ARRAY_LENGTH(V8WaveShaperNodeAccessors));
}

v8::Local<v8::FunctionTemplate> V8WaveShaperNode::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8WaveShaperNodeTemplate);
}

bool V8WaveShaperNode::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8WaveShaperNode::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

WaveShaperNode* V8WaveShaperNode::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
