// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "BooleanOrMediaTrackConstraints.h"

#include "bindings/core/v8/ToV8.h"

namespace blink {

BooleanOrMediaTrackConstraints::BooleanOrMediaTrackConstraints()
    : m_type(SpecificTypeNone)
{
}

bool BooleanOrMediaTrackConstraints::getAsBoolean() const
{
    ASSERT(isBoolean());
    return m_boolean;
}

void BooleanOrMediaTrackConstraints::setBoolean(bool value)
{
    ASSERT(isNull());
    m_boolean = value;
    m_type = SpecificTypeBoolean;
}

BooleanOrMediaTrackConstraints BooleanOrMediaTrackConstraints::fromBoolean(bool value)
{
    BooleanOrMediaTrackConstraints container;
    container.setBoolean(value);
    return container;
}

const MediaTrackConstraints& BooleanOrMediaTrackConstraints::getAsMediaTrackConstraints() const
{
    ASSERT(isMediaTrackConstraints());
    return m_mediaTrackConstraints;
}

void BooleanOrMediaTrackConstraints::setMediaTrackConstraints(const MediaTrackConstraints& value)
{
    ASSERT(isNull());
    m_mediaTrackConstraints = value;
    m_type = SpecificTypeMediaTrackConstraints;
}

BooleanOrMediaTrackConstraints BooleanOrMediaTrackConstraints::fromMediaTrackConstraints(const MediaTrackConstraints& value)
{
    BooleanOrMediaTrackConstraints container;
    container.setMediaTrackConstraints(value);
    return container;
}

BooleanOrMediaTrackConstraints::BooleanOrMediaTrackConstraints(const BooleanOrMediaTrackConstraints&) = default;
BooleanOrMediaTrackConstraints::~BooleanOrMediaTrackConstraints() = default;
BooleanOrMediaTrackConstraints& BooleanOrMediaTrackConstraints::operator=(const BooleanOrMediaTrackConstraints&) = default;

DEFINE_TRACE(BooleanOrMediaTrackConstraints)
{
    visitor->trace(m_mediaTrackConstraints);
}

void V8BooleanOrMediaTrackConstraints::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, BooleanOrMediaTrackConstraints& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (isUndefinedOrNull(v8Value)) {
        MediaTrackConstraints cppValue;
        V8MediaTrackConstraints::toImpl(isolate, v8Value, cppValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setMediaTrackConstraints(cppValue);
        return;
    }

    if (v8Value->IsObject()) {
        MediaTrackConstraints cppValue;
        V8MediaTrackConstraints::toImpl(isolate, v8Value, cppValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setMediaTrackConstraints(cppValue);
        return;
    }

    if (v8Value->IsBoolean()) {
        impl.setBoolean(v8Value.As<v8::Boolean>()->Value());
        return;
    }

    {
        impl.setBoolean(v8Value->BooleanValue());
        return;
    }
}

v8::Local<v8::Value> toV8(const BooleanOrMediaTrackConstraints& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case BooleanOrMediaTrackConstraints::SpecificTypeNone:
        return v8::Null(isolate);
    case BooleanOrMediaTrackConstraints::SpecificTypeBoolean:
        return v8Boolean(impl.getAsBoolean(), isolate);
    case BooleanOrMediaTrackConstraints::SpecificTypeMediaTrackConstraints:
        return toV8(impl.getAsMediaTrackConstraints(), creationContext, isolate);
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

BooleanOrMediaTrackConstraints NativeValueTraits<BooleanOrMediaTrackConstraints>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    BooleanOrMediaTrackConstraints impl;
    V8BooleanOrMediaTrackConstraints::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
