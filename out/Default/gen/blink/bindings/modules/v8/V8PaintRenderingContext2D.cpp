// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8PaintRenderingContext2D.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8HTMLCanvasElement.h"
#include "bindings/core/v8/V8HTMLImageElement.h"
#include "bindings/core/v8/V8HTMLVideoElement.h"
#include "bindings/core/v8/V8ImageBitmap.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8SVGMatrix.h"
#include "bindings/modules/v8/StringOrCanvasGradientOrCanvasPattern.h"
#include "bindings/modules/v8/V8CanvasGradient.h"
#include "bindings/modules/v8/V8CanvasPattern.h"
#include "bindings/modules/v8/V8Path2D.h"
#include "core/dom/Document.h"
#include "core/inspector/ConsoleMessage.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8PaintRenderingContext2D::wrapperTypeInfo = { gin::kEmbedderBlink, V8PaintRenderingContext2D::domTemplate, V8PaintRenderingContext2D::trace, V8PaintRenderingContext2D::traceWrappers, 0, 0, V8PaintRenderingContext2D::preparePrototypeAndInterfaceObject, nullptr, "PaintRenderingContext2D", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in PaintRenderingContext2D.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& PaintRenderingContext2D::s_wrapperTypeInfo = V8PaintRenderingContext2D::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, PaintRenderingContext2D>::value,
    "PaintRenderingContext2D inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace PaintRenderingContext2DV8Internal {

static void currentTransformAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->currentTransform()), impl);
}

static void currentTransformAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::currentTransformAttributeGetter(info);
}

static void currentTransformAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "currentTransform", "PaintRenderingContext2D", holder, info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    SVGMatrixTearOff* cppValue = V8SVGMatrix::toImplWithTypeCheck(info.GetIsolate(), v8Value);
    if (!cppValue) {
        exceptionState.throwTypeError("The provided value is not of type 'SVGMatrix'.");
        exceptionState.throwIfNeeded();
        return;
    }
    impl->setCurrentTransform(cppValue);
}

static void currentTransformAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::currentTransformAttributeSetter(v8Value, info);
}

static void globalAlphaAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    v8SetReturnValue(info, impl->globalAlpha());
}

static void globalAlphaAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::globalAlphaAttributeGetter(info);
}

static void globalAlphaAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "globalAlpha", "PaintRenderingContext2D", holder, info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setGlobalAlpha(cppValue);
}

static void globalAlphaAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::globalAlphaAttributeSetter(v8Value, info);
}

static void globalCompositeOperationAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    v8SetReturnValueString(info, impl->globalCompositeOperation(), info.GetIsolate());
}

static void globalCompositeOperationAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::globalCompositeOperationAttributeGetter(info);
}

static void globalCompositeOperationAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setGlobalCompositeOperation(cppValue);
}

static void globalCompositeOperationAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::globalCompositeOperationAttributeSetter(v8Value, info);
}

static void imageSmoothingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    v8SetReturnValueBool(info, impl->imageSmoothingEnabled());
}

static void imageSmoothingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::imageSmoothingEnabledAttributeGetter(info);
}

static void imageSmoothingEnabledAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "imageSmoothingEnabled", "PaintRenderingContext2D", holder, info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setImageSmoothingEnabled(cppValue);
}

static void imageSmoothingEnabledAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::imageSmoothingEnabledAttributeSetter(v8Value, info);
}

static void imageSmoothingQualityAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    v8SetReturnValueString(info, impl->imageSmoothingQuality(), info.GetIsolate());
}

static void imageSmoothingQualityAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::imageSmoothingQualityAttributeGetter(info);
}

static void imageSmoothingQualityAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "imageSmoothingQuality", "PaintRenderingContext2D", holder, info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    const char* validValues[] = {
        "low",
        "medium",
        "high",
    };
    if (!isValidEnum(cppValue, validValues, WTF_ARRAY_LENGTH(validValues), "ImageSmoothingQuality", exceptionState)) {
        currentExecutionContext(info.GetIsolate())->addConsoleMessage(ConsoleMessage::create(JSMessageSource, WarningMessageLevel, exceptionState.message()));
        return;
    }
    impl->setImageSmoothingQuality(cppValue);
}

static void imageSmoothingQualityAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::imageSmoothingQualityAttributeSetter(v8Value, info);
}

static void strokeStyleAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    StringOrCanvasGradientOrCanvasPattern result;
    impl->strokeStyle(result);
    v8SetReturnValue(info, result);
}

static void strokeStyleAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::strokeStyleAttributeGetter(info);
}

static void strokeStyleAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "strokeStyle", "PaintRenderingContext2D", holder, info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    StringOrCanvasGradientOrCanvasPattern cppValue;
    V8StringOrCanvasGradientOrCanvasPattern::toImpl(info.GetIsolate(), v8Value, cppValue, UnionTypeConversionMode::NotNullable, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setStrokeStyle(cppValue);
}

static void strokeStyleAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::strokeStyleAttributeSetter(v8Value, info);
}

static void fillStyleAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    StringOrCanvasGradientOrCanvasPattern result;
    impl->fillStyle(result);
    v8SetReturnValue(info, result);
}

static void fillStyleAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::fillStyleAttributeGetter(info);
}

static void fillStyleAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "fillStyle", "PaintRenderingContext2D", holder, info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    StringOrCanvasGradientOrCanvasPattern cppValue;
    V8StringOrCanvasGradientOrCanvasPattern::toImpl(info.GetIsolate(), v8Value, cppValue, UnionTypeConversionMode::NotNullable, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setFillStyle(cppValue);
}

static void fillStyleAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::fillStyleAttributeSetter(v8Value, info);
}

static void shadowOffsetXAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    v8SetReturnValue(info, impl->shadowOffsetX());
}

static void shadowOffsetXAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::shadowOffsetXAttributeGetter(info);
}

static void shadowOffsetXAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "shadowOffsetX", "PaintRenderingContext2D", holder, info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setShadowOffsetX(cppValue);
}

static void shadowOffsetXAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::shadowOffsetXAttributeSetter(v8Value, info);
}

static void shadowOffsetYAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    v8SetReturnValue(info, impl->shadowOffsetY());
}

static void shadowOffsetYAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::shadowOffsetYAttributeGetter(info);
}

static void shadowOffsetYAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "shadowOffsetY", "PaintRenderingContext2D", holder, info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setShadowOffsetY(cppValue);
}

static void shadowOffsetYAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::shadowOffsetYAttributeSetter(v8Value, info);
}

static void shadowBlurAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    v8SetReturnValue(info, impl->shadowBlur());
}

static void shadowBlurAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::shadowBlurAttributeGetter(info);
}

static void shadowBlurAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "shadowBlur", "PaintRenderingContext2D", holder, info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setShadowBlur(cppValue);
}

static void shadowBlurAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::shadowBlurAttributeSetter(v8Value, info);
}

static void shadowColorAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    v8SetReturnValueString(info, impl->shadowColor(), info.GetIsolate());
}

static void shadowColorAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::shadowColorAttributeGetter(info);
}

static void shadowColorAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setShadowColor(cppValue);
}

static void shadowColorAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::shadowColorAttributeSetter(v8Value, info);
}

static void lineWidthAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    v8SetReturnValue(info, impl->lineWidth());
}

static void lineWidthAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::lineWidthAttributeGetter(info);
}

static void lineWidthAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "lineWidth", "PaintRenderingContext2D", holder, info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setLineWidth(cppValue);
}

static void lineWidthAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::lineWidthAttributeSetter(v8Value, info);
}

static void lineCapAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    v8SetReturnValueString(info, impl->lineCap(), info.GetIsolate());
}

static void lineCapAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::lineCapAttributeGetter(info);
}

static void lineCapAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setLineCap(cppValue);
}

static void lineCapAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::lineCapAttributeSetter(v8Value, info);
}

static void lineJoinAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    v8SetReturnValueString(info, impl->lineJoin(), info.GetIsolate());
}

static void lineJoinAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::lineJoinAttributeGetter(info);
}

static void lineJoinAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setLineJoin(cppValue);
}

static void lineJoinAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::lineJoinAttributeSetter(v8Value, info);
}

static void miterLimitAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    v8SetReturnValue(info, impl->miterLimit());
}

static void miterLimitAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::miterLimitAttributeGetter(info);
}

static void miterLimitAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "miterLimit", "PaintRenderingContext2D", holder, info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setMiterLimit(cppValue);
}

static void miterLimitAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::miterLimitAttributeSetter(v8Value, info);
}

static void lineDashOffsetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    v8SetReturnValue(info, impl->lineDashOffset());
}

static void lineDashOffsetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::lineDashOffsetAttributeGetter(info);
}

static void lineDashOffsetAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "lineDashOffset", "PaintRenderingContext2D", holder, info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(holder);
    double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setLineDashOffset(cppValue);
}

static void lineDashOffsetAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    PaintRenderingContext2DV8Internal::lineDashOffsetAttributeSetter(v8Value, info);
}

static void saveMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    impl->save();
}

static void saveMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::saveMethod(info);
}

static void restoreMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    impl->restore();
}

static void restoreMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::restoreMethod(info);
}

static void scaleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "scale", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    double x;
    double y;
    {
        x = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->scale(x, y);
}

static void scaleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::scaleMethod(info);
}

static void rotateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "rotate", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    double angle;
    {
        angle = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->rotate(angle);
}

static void rotateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::rotateMethod(info);
}

static void translateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "translate", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    double x;
    double y;
    {
        x = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->translate(x, y);
}

static void translateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::translateMethod(info);
}

static void transformMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "transform", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 6)) {
        setMinimumArityTypeError(exceptionState, 6, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    double a;
    double b;
    double c;
    double d;
    double e;
    double f;
    {
        a = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        b = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        c = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        d = toDouble(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        e = toDouble(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        f = toDouble(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->transform(a, b, c, d, e, f);
}

static void transformMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::transformMethod(info);
}

static void setTransformMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTransform", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 6)) {
        setMinimumArityTypeError(exceptionState, 6, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    double a;
    double b;
    double c;
    double d;
    double e;
    double f;
    {
        a = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        b = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        c = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        d = toDouble(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        e = toDouble(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        f = toDouble(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setTransform(a, b, c, d, e, f);
}

static void setTransformMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::setTransformMethod(info);
}

static void resetTransformMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    impl->resetTransform();
}

static void resetTransformMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::resetTransformMethod(info);
}

static void createLinearGradientMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createLinearGradient", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    double x0;
    double y0;
    double x1;
    double y1;
    {
        x0 = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y0 = toRestrictedDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x1 = toRestrictedDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y1 = toRestrictedDouble(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValue(info, impl->createLinearGradient(x0, y0, x1, y1));
}

static void createLinearGradientMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::createLinearGradientMethod(info);
}

static void createRadialGradientMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createRadialGradient", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 6)) {
        setMinimumArityTypeError(exceptionState, 6, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    double x0;
    double y0;
    double r0;
    double x1;
    double y1;
    double r1;
    {
        x0 = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y0 = toRestrictedDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        r0 = toRestrictedDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x1 = toRestrictedDouble(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y1 = toRestrictedDouble(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        r1 = toRestrictedDouble(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    CanvasGradient* result = impl->createRadialGradient(x0, y0, r0, x1, y1, r1, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void createRadialGradientMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::createRadialGradientMethod(info);
}

static void createPatternMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createPattern", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap image;
    V8StringResource<TreatNullAsNullString> repetitionType;
    {
        V8HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::toImpl(info.GetIsolate(), info[0], image, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        repetitionType = info[1];
        if (!repetitionType.prepare())
            return;
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    CanvasPattern* result = impl->createPattern(executionContext, image, repetitionType, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void createPatternMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::createPatternMethod(info);
}

static void clearRectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clearRect", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    double x;
    double y;
    double width;
    double height;
    {
        x = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toDouble(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->clearRect(x, y, width, height);
}

static void clearRectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::clearRectMethod(info);
}

static void fillRectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "fillRect", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    double x;
    double y;
    double width;
    double height;
    {
        x = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toDouble(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->fillRect(x, y, width, height);
}

static void fillRectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::fillRectMethod(info);
}

static void strokeRectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "strokeRect", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    double x;
    double y;
    double width;
    double height;
    {
        x = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toDouble(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->strokeRect(x, y, width, height);
}

static void strokeRectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::strokeRectMethod(info);
}

static void beginPathMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    impl->beginPath();
}

static void beginPathMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::beginPathMethod(info);
}

static void fill1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "fill", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    V8StringResource<> winding;
    {
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        if (UNLIKELY(numArgsPassed <= 0)) {
            impl->fill();
            return;
        }
        winding = info[0];
        if (!winding.prepare())
            return;
        const char* validValues[] = {
            "nonzero",
            "evenodd",
        };
        if (!isValidEnum(winding, validValues, WTF_ARRAY_LENGTH(validValues), "CanvasFillRule", exceptionState)) {
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->fill(winding);
}

static void fill2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "fill", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    Path2D* path;
    V8StringResource<> winding;
    {
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        path = V8Path2D::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!path) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Path2D'.");
            exceptionState.throwIfNeeded();
            return;
        }
        if (UNLIKELY(numArgsPassed <= 1)) {
            impl->fill(path);
            return;
        }
        winding = info[1];
        if (!winding.prepare())
            return;
        const char* validValues[] = {
            "nonzero",
            "evenodd",
        };
        if (!isValidEnum(winding, validValues, WTF_ARRAY_LENGTH(validValues), "CanvasFillRule", exceptionState)) {
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->fill(path, winding);
}

static void fillMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "fill", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 0:
        if (true) {
            fill1Method(info);
            return;
        }
        break;
    case 1:
        if (info[0]->IsUndefined()) {
            fill1Method(info);
            return;
        }
        if (V8Path2D::hasInstance(info[0], info.GetIsolate())) {
            fill2Method(info);
            return;
        }
        if (true) {
            fill1Method(info);
            return;
        }
        break;
    case 2:
        if (true) {
            fill2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void fillMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::fillMethod(info);
}

static void stroke1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    impl->stroke();
}

static void stroke2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    Path2D* path;
    {
        path = V8Path2D::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!path) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("stroke", "PaintRenderingContext2D", "parameter 1 is not of type 'Path2D'."));
            return;
        }
    }
    impl->stroke(path);
}

static void strokeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "stroke", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    switch (std::min(1, info.Length())) {
    case 0:
        if (true) {
            stroke1Method(info);
            return;
        }
        break;
    case 1:
        if (true) {
            stroke2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void strokeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::strokeMethod(info);
}

static void clip1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clip", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    V8StringResource<> winding;
    {
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        if (UNLIKELY(numArgsPassed <= 0)) {
            impl->clip();
            return;
        }
        winding = info[0];
        if (!winding.prepare())
            return;
        const char* validValues[] = {
            "nonzero",
            "evenodd",
        };
        if (!isValidEnum(winding, validValues, WTF_ARRAY_LENGTH(validValues), "CanvasFillRule", exceptionState)) {
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->clip(winding);
}

static void clip2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clip", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    Path2D* path;
    V8StringResource<> winding;
    {
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        path = V8Path2D::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!path) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Path2D'.");
            exceptionState.throwIfNeeded();
            return;
        }
        if (UNLIKELY(numArgsPassed <= 1)) {
            impl->clip(path);
            return;
        }
        winding = info[1];
        if (!winding.prepare())
            return;
        const char* validValues[] = {
            "nonzero",
            "evenodd",
        };
        if (!isValidEnum(winding, validValues, WTF_ARRAY_LENGTH(validValues), "CanvasFillRule", exceptionState)) {
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->clip(path, winding);
}

static void clipMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clip", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 0:
        if (true) {
            clip1Method(info);
            return;
        }
        break;
    case 1:
        if (info[0]->IsUndefined()) {
            clip1Method(info);
            return;
        }
        if (V8Path2D::hasInstance(info[0], info.GetIsolate())) {
            clip2Method(info);
            return;
        }
        if (true) {
            clip1Method(info);
            return;
        }
        break;
    case 2:
        if (true) {
            clip2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void clipMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::clipMethod(info);
}

static void isPointInPath1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "isPointInPath", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    double x;
    double y;
    V8StringResource<> winding;
    {
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        x = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        if (UNLIKELY(numArgsPassed <= 2)) {
            v8SetReturnValueBool(info, impl->isPointInPath(x, y));
            return;
        }
        winding = info[2];
        if (!winding.prepare())
            return;
        const char* validValues[] = {
            "nonzero",
            "evenodd",
        };
        if (!isValidEnum(winding, validValues, WTF_ARRAY_LENGTH(validValues), "CanvasFillRule", exceptionState)) {
            exceptionState.throwIfNeeded();
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isPointInPath(x, y, winding));
}

static void isPointInPath2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "isPointInPath", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    Path2D* path;
    double x;
    double y;
    V8StringResource<> winding;
    {
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        path = V8Path2D::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!path) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Path2D'.");
            exceptionState.throwIfNeeded();
            return;
        }
        x = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        if (UNLIKELY(numArgsPassed <= 3)) {
            v8SetReturnValueBool(info, impl->isPointInPath(path, x, y));
            return;
        }
        winding = info[3];
        if (!winding.prepare())
            return;
        const char* validValues[] = {
            "nonzero",
            "evenodd",
        };
        if (!isValidEnum(winding, validValues, WTF_ARRAY_LENGTH(validValues), "CanvasFillRule", exceptionState)) {
            exceptionState.throwIfNeeded();
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isPointInPath(path, x, y, winding));
}

static void isPointInPathMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "isPointInPath", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    switch (std::min(4, info.Length())) {
    case 2:
        if (true) {
            isPointInPath1Method(info);
            return;
        }
        break;
    case 3:
        if (V8Path2D::hasInstance(info[0], info.GetIsolate())) {
            isPointInPath2Method(info);
            return;
        }
        if (true) {
            isPointInPath1Method(info);
            return;
        }
        break;
    case 4:
        if (true) {
            isPointInPath2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void isPointInPathMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::isPointInPathMethod(info);
}

static void isPointInStroke1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "isPointInStroke", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    double x;
    double y;
    {
        x = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueBool(info, impl->isPointInStroke(x, y));
}

static void isPointInStroke2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "isPointInStroke", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    Path2D* path;
    double x;
    double y;
    {
        path = V8Path2D::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!path) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Path2D'.");
            exceptionState.throwIfNeeded();
            return;
        }
        x = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueBool(info, impl->isPointInStroke(path, x, y));
}

static void isPointInStrokeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "isPointInStroke", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    switch (std::min(3, info.Length())) {
    case 2:
        if (true) {
            isPointInStroke1Method(info);
            return;
        }
        break;
    case 3:
        if (true) {
            isPointInStroke2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void isPointInStrokeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::isPointInStrokeMethod(info);
}

static void drawImage1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "drawImage", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap image;
    double x;
    double y;
    {
        V8HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::toImpl(info.GetIsolate(), info[0], image, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    impl->drawImage(executionContext, image, x, y, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void drawImage2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "drawImage", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap image;
    double x;
    double y;
    double width;
    double height;
    {
        V8HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::toImpl(info.GetIsolate(), info[0], image, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toDouble(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toDouble(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    impl->drawImage(executionContext, image, x, y, width, height, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void drawImage3Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "drawImage", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap image;
    double sx;
    double sy;
    double sw;
    double sh;
    double dx;
    double dy;
    double dw;
    double dh;
    {
        V8HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::toImpl(info.GetIsolate(), info[0], image, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        sx = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        sy = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        sw = toDouble(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        sh = toDouble(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        dx = toDouble(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        dy = toDouble(info.GetIsolate(), info[6], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        dw = toDouble(info.GetIsolate(), info[7], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        dh = toDouble(info.GetIsolate(), info[8], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    impl->drawImage(executionContext, image, sx, sy, sw, sh, dx, dy, dw, dh, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void drawImageMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "drawImage", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    switch (std::min(9, info.Length())) {
    case 3:
        if (true) {
            drawImage1Method(info);
            return;
        }
        break;
    case 5:
        if (true) {
            drawImage2Method(info);
            return;
        }
        break;
    case 9:
        if (true) {
            drawImage3Method(info);
            return;
        }
        break;
    default:
        if (info.Length() >= 3) {
            setArityTypeError(exceptionState, "[3, 5, 9]", info.Length());
            exceptionState.throwIfNeeded();
            return;
        }
        break;
    }
    if (info.Length() < 3) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void drawImageMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::drawImageMethod(info);
}

static void setLineDashMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setLineDash", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    Vector<double> dash;
    {
        dash = toImplArray<Vector<double>>(info[0], 1, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setLineDash(dash);
}

static void setLineDashMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::setLineDashMethod(info);
}

static void getLineDashMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    v8SetReturnValue(info, toV8(impl->getLineDash(), info.Holder(), info.GetIsolate()));
}

static void getLineDashMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::getLineDashMethod(info);
}

static void closePathMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    impl->closePath();
}

static void closePathMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::closePathMethod(info);
}

static void moveToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "moveTo", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    float x;
    float y;
    {
        x = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->moveTo(x, y);
}

static void moveToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::moveToMethod(info);
}

static void lineToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "lineTo", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    float x;
    float y;
    {
        x = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->lineTo(x, y);
}

static void lineToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::lineToMethod(info);
}

static void quadraticCurveToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "quadraticCurveTo", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    float cpx;
    float cpy;
    float x;
    float y;
    {
        cpx = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        cpy = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->quadraticCurveTo(cpx, cpy, x, y);
}

static void quadraticCurveToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::quadraticCurveToMethod(info);
}

static void bezierCurveToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bezierCurveTo", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 6)) {
        setMinimumArityTypeError(exceptionState, 6, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    float cp1x;
    float cp1y;
    float cp2x;
    float cp2y;
    float x;
    float y;
    {
        cp1x = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        cp1y = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        cp2x = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        cp2y = toFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x = toFloat(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toFloat(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
}

static void bezierCurveToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::bezierCurveToMethod(info);
}

static void arcToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "arcTo", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 5)) {
        setMinimumArityTypeError(exceptionState, 5, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    float x1;
    float y1;
    float x2;
    float y2;
    float radius;
    {
        x1 = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y1 = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x2 = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y2 = toFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        radius = toFloat(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->arcTo(x1, y1, x2, y2, radius, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void arcToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::arcToMethod(info);
}

static void rectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "rect", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    float x;
    float y;
    float width;
    float height;
    {
        x = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->rect(x, y, width, height);
}

static void rectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::rectMethod(info);
}

static void arcMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "arc", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 5)) {
        setMinimumArityTypeError(exceptionState, 5, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    float x;
    float y;
    float radius;
    float startAngle;
    float endAngle;
    bool anticlockwise;
    {
        x = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        radius = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        startAngle = toFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        endAngle = toFloat(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        anticlockwise = toBoolean(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->arc(x, y, radius, startAngle, endAngle, anticlockwise, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void arcMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::arcMethod(info);
}

static void ellipseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "ellipse", "PaintRenderingContext2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 7)) {
        setMinimumArityTypeError(exceptionState, 7, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PaintRenderingContext2D* impl = V8PaintRenderingContext2D::toImpl(info.Holder());
    float x;
    float y;
    float radiusX;
    float radiusY;
    float rotation;
    float startAngle;
    float endAngle;
    bool anticlockwise;
    {
        x = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        radiusX = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        radiusY = toFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        rotation = toFloat(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        startAngle = toFloat(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        endAngle = toFloat(info.GetIsolate(), info[6], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        anticlockwise = toBoolean(info.GetIsolate(), info[7], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void ellipseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PaintRenderingContext2DV8Internal::ellipseMethod(info);
}

} // namespace PaintRenderingContext2DV8Internal

const V8DOMConfiguration::AccessorConfiguration V8PaintRenderingContext2DAccessors[] = {
    {"globalAlpha", PaintRenderingContext2DV8Internal::globalAlphaAttributeGetterCallback, PaintRenderingContext2DV8Internal::globalAlphaAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"globalCompositeOperation", PaintRenderingContext2DV8Internal::globalCompositeOperationAttributeGetterCallback, PaintRenderingContext2DV8Internal::globalCompositeOperationAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"imageSmoothingEnabled", PaintRenderingContext2DV8Internal::imageSmoothingEnabledAttributeGetterCallback, PaintRenderingContext2DV8Internal::imageSmoothingEnabledAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"strokeStyle", PaintRenderingContext2DV8Internal::strokeStyleAttributeGetterCallback, PaintRenderingContext2DV8Internal::strokeStyleAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"fillStyle", PaintRenderingContext2DV8Internal::fillStyleAttributeGetterCallback, PaintRenderingContext2DV8Internal::fillStyleAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"shadowOffsetX", PaintRenderingContext2DV8Internal::shadowOffsetXAttributeGetterCallback, PaintRenderingContext2DV8Internal::shadowOffsetXAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"shadowOffsetY", PaintRenderingContext2DV8Internal::shadowOffsetYAttributeGetterCallback, PaintRenderingContext2DV8Internal::shadowOffsetYAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"shadowBlur", PaintRenderingContext2DV8Internal::shadowBlurAttributeGetterCallback, PaintRenderingContext2DV8Internal::shadowBlurAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"shadowColor", PaintRenderingContext2DV8Internal::shadowColorAttributeGetterCallback, PaintRenderingContext2DV8Internal::shadowColorAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"lineWidth", PaintRenderingContext2DV8Internal::lineWidthAttributeGetterCallback, PaintRenderingContext2DV8Internal::lineWidthAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"lineCap", PaintRenderingContext2DV8Internal::lineCapAttributeGetterCallback, PaintRenderingContext2DV8Internal::lineCapAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"lineJoin", PaintRenderingContext2DV8Internal::lineJoinAttributeGetterCallback, PaintRenderingContext2DV8Internal::lineJoinAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"miterLimit", PaintRenderingContext2DV8Internal::miterLimitAttributeGetterCallback, PaintRenderingContext2DV8Internal::miterLimitAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"lineDashOffset", PaintRenderingContext2DV8Internal::lineDashOffsetAttributeGetterCallback, PaintRenderingContext2DV8Internal::lineDashOffsetAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8PaintRenderingContext2DMethods[] = {
    {"save", PaintRenderingContext2DV8Internal::saveMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"restore", PaintRenderingContext2DV8Internal::restoreMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"scale", PaintRenderingContext2DV8Internal::scaleMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"rotate", PaintRenderingContext2DV8Internal::rotateMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"translate", PaintRenderingContext2DV8Internal::translateMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"transform", PaintRenderingContext2DV8Internal::transformMethodCallback, 0, 6, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setTransform", PaintRenderingContext2DV8Internal::setTransformMethodCallback, 0, 6, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"resetTransform", PaintRenderingContext2DV8Internal::resetTransformMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createLinearGradient", PaintRenderingContext2DV8Internal::createLinearGradientMethodCallback, 0, 4, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createRadialGradient", PaintRenderingContext2DV8Internal::createRadialGradientMethodCallback, 0, 6, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createPattern", PaintRenderingContext2DV8Internal::createPatternMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"clearRect", PaintRenderingContext2DV8Internal::clearRectMethodCallback, 0, 4, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"fillRect", PaintRenderingContext2DV8Internal::fillRectMethodCallback, 0, 4, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"strokeRect", PaintRenderingContext2DV8Internal::strokeRectMethodCallback, 0, 4, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"beginPath", PaintRenderingContext2DV8Internal::beginPathMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"fill", PaintRenderingContext2DV8Internal::fillMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"stroke", PaintRenderingContext2DV8Internal::strokeMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"clip", PaintRenderingContext2DV8Internal::clipMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isPointInPath", PaintRenderingContext2DV8Internal::isPointInPathMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isPointInStroke", PaintRenderingContext2DV8Internal::isPointInStrokeMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"drawImage", PaintRenderingContext2DV8Internal::drawImageMethodCallback, 0, 3, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setLineDash", PaintRenderingContext2DV8Internal::setLineDashMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"getLineDash", PaintRenderingContext2DV8Internal::getLineDashMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"closePath", PaintRenderingContext2DV8Internal::closePathMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"moveTo", PaintRenderingContext2DV8Internal::moveToMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"lineTo", PaintRenderingContext2DV8Internal::lineToMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"quadraticCurveTo", PaintRenderingContext2DV8Internal::quadraticCurveToMethodCallback, 0, 4, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"bezierCurveTo", PaintRenderingContext2DV8Internal::bezierCurveToMethodCallback, 0, 6, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"arcTo", PaintRenderingContext2DV8Internal::arcToMethodCallback, 0, 5, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"rect", PaintRenderingContext2DV8Internal::rectMethodCallback, 0, 4, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"arc", PaintRenderingContext2DV8Internal::arcMethodCallback, 0, 5, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"ellipse", PaintRenderingContext2DV8Internal::ellipseMethodCallback, 0, 7, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8PaintRenderingContext2DTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8PaintRenderingContext2D::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8PaintRenderingContext2D::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    if (RuntimeEnabledFeatures::cssPaintAPIEnabled()) {
        V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8PaintRenderingContext2DAccessors, WTF_ARRAY_LENGTH(V8PaintRenderingContext2DAccessors));
        V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8PaintRenderingContext2DMethods, WTF_ARRAY_LENGTH(V8PaintRenderingContext2DMethods));
    }

    if (RuntimeEnabledFeatures::experimentalCanvasFeaturesEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorcurrentTransformConfiguration = \
        {"currentTransform", PaintRenderingContext2DV8Internal::currentTransformAttributeGetterCallback, PaintRenderingContext2DV8Internal::currentTransformAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorcurrentTransformConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorimageSmoothingQualityConfiguration = \
        {"imageSmoothingQuality", PaintRenderingContext2DV8Internal::imageSmoothingQualityAttributeGetterCallback, PaintRenderingContext2DV8Internal::imageSmoothingQualityAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorimageSmoothingQualityConfiguration);
    }
}

v8::Local<v8::FunctionTemplate> V8PaintRenderingContext2D::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8PaintRenderingContext2DTemplate);
}

bool V8PaintRenderingContext2D::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8PaintRenderingContext2D::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

PaintRenderingContext2D* V8PaintRenderingContext2D::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
