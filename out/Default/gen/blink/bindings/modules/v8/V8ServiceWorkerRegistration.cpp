// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8ServiceWorkerRegistration.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8EventListenerList.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8GetNotificationOptions.h"
#include "bindings/modules/v8/V8NotificationOptions.h"
#include "bindings/modules/v8/V8PushManager.h"
#include "bindings/modules/v8/V8ServiceWorker.h"
#include "bindings/modules/v8/V8SyncManager.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "modules/background_sync/ServiceWorkerRegistrationSync.h"
#include "modules/notifications/ServiceWorkerRegistrationNotifications.h"
#include "modules/push_messaging/ServiceWorkerRegistrationPush.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8ServiceWorkerRegistration::wrapperTypeInfo = { gin::kEmbedderBlink, V8ServiceWorkerRegistration::domTemplate, V8ServiceWorkerRegistration::trace, V8ServiceWorkerRegistration::traceWrappers, V8ServiceWorkerRegistration::toActiveScriptWrappable, 0, V8ServiceWorkerRegistration::preparePrototypeAndInterfaceObject, nullptr, "ServiceWorkerRegistration", &V8EventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in ServiceWorkerRegistration.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& ServiceWorkerRegistration::s_wrapperTypeInfo = V8ServiceWorkerRegistration::wrapperTypeInfo;

namespace ServiceWorkerRegistrationV8Internal {

static void installingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);
    ServiceWorker* cppValue(WTF::getPtr(impl->installing()));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "installing"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void installingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ServiceWorkerRegistrationV8Internal::installingAttributeGetter(info);
}

static void waitingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);
    ServiceWorker* cppValue(WTF::getPtr(impl->waiting()));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "waiting"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void waitingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ServiceWorkerRegistrationV8Internal::waitingAttributeGetter(info);
}

static void activeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);
    ServiceWorker* cppValue(WTF::getPtr(impl->active()));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "active"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void activeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ServiceWorkerRegistrationV8Internal::activeAttributeGetter(info);
}

static void scopeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);
    v8SetReturnValueString(info, impl->scope(), info.GetIsolate());
}

static void scopeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ServiceWorkerRegistrationV8Internal::scopeAttributeGetter(info);
}

static void onupdatefoundAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);
    EventListener* cppValue(WTF::getPtr(impl->onupdatefound()));
    v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
}

static void onupdatefoundAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ServiceWorkerRegistrationV8Internal::onupdatefoundAttributeGetter(info);
}

static void onupdatefoundAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onupdatefound(), v8Value, V8ServiceWorkerRegistration::eventListenerCacheIndex);
    impl->setOnupdatefound(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onupdatefoundAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    ServiceWorkerRegistrationV8Internal::onupdatefoundAttributeSetter(v8Value, info);
}

static void syncAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);
    SyncManager* cppValue(ServiceWorkerRegistrationSync::sync(*impl));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "sync"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void syncAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::BackgroundSync);
    ServiceWorkerRegistrationV8Internal::syncAttributeGetter(info);
}

static void pushManagerAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);
    PushManager* cppValue(ServiceWorkerRegistrationPush::pushManager(*impl));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "pushManager"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void pushManagerAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ServiceWorkerRegistrationV8Internal::pushManagerAttributeGetter(info);
}

static void updateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->update(scriptState);
    v8SetReturnValue(info, result.v8Value());
}

static void updateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ServiceWorkerRegistrationV8Internal::updateMethod(info);
}

static void unregisterMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = impl->unregister(scriptState);
    v8SetReturnValue(info, result.v8Value());
}

static void unregisterMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ServiceWorkerRegistrationV8Internal::unregisterMethod(info);
}

static void showNotificationMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(info.Holder());
    V8StringResource<> title;
    NotificationOptions options;
    {
        title = info[0];
        if (!title.prepare(exceptionState))
            return;
        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('options') is not an object.");
            return;
        }
        V8NotificationOptions::toImpl(info.GetIsolate(), info[1], options, exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = ServiceWorkerRegistrationNotifications::showNotification(scriptState, *impl, title, options, exceptionState);
    if (exceptionState.hadException()) {
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void showNotificationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "showNotification", "ServiceWorkerRegistration", info.Holder(), info.GetIsolate());
    showNotificationMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void showNotificationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ServiceWorkerRegistrationV8Internal::showNotificationMethod(info);
}

static void getNotificationsMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(info.Holder());
    GetNotificationOptions filter;
    {
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('filter') is not an object.");
            return;
        }
        V8GetNotificationOptions::toImpl(info.GetIsolate(), info[0], filter, exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::forReceiverObject(info);
    ScriptPromise result = ServiceWorkerRegistrationNotifications::getNotifications(scriptState, *impl, filter);
    v8SetReturnValue(info, result.v8Value());
}

static void getNotificationsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getNotifications", "ServiceWorkerRegistration", info.Holder(), info.GetIsolate());
    getNotificationsMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void getNotificationsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ServiceWorkerRegistrationV8Internal::getNotificationsMethod(info);
}

} // namespace ServiceWorkerRegistrationV8Internal

const V8DOMConfiguration::AccessorConfiguration V8ServiceWorkerRegistrationAccessors[] = {
    {"installing", ServiceWorkerRegistrationV8Internal::installingAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"waiting", ServiceWorkerRegistrationV8Internal::waitingAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"active", ServiceWorkerRegistrationV8Internal::activeAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"scope", ServiceWorkerRegistrationV8Internal::scopeAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onupdatefound", ServiceWorkerRegistrationV8Internal::onupdatefoundAttributeGetterCallback, ServiceWorkerRegistrationV8Internal::onupdatefoundAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8ServiceWorkerRegistrationMethods[] = {
    {"update", ServiceWorkerRegistrationV8Internal::updateMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"unregister", ServiceWorkerRegistrationV8Internal::unregisterMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8ServiceWorkerRegistrationTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8ServiceWorkerRegistration::wrapperTypeInfo.interfaceName, V8EventTarget::domTemplate(isolate, world), V8ServiceWorkerRegistration::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8ServiceWorkerRegistrationAccessors, WTF_ARRAY_LENGTH(V8ServiceWorkerRegistrationAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8ServiceWorkerRegistrationMethods, WTF_ARRAY_LENGTH(V8ServiceWorkerRegistrationMethods));

    if (RuntimeEnabledFeatures::backgroundSyncEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorsyncConfiguration = \
        {"sync", ServiceWorkerRegistrationV8Internal::syncAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorsyncConfiguration);
    }

    if (RuntimeEnabledFeatures::pushMessagingEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorpushManagerConfiguration = \
        {"pushManager", ServiceWorkerRegistrationV8Internal::pushManagerAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorpushManagerConfiguration);
    }

    if (RuntimeEnabledFeatures::notificationsEnabled()) {
        const V8DOMConfiguration::MethodConfiguration showNotificationMethodConfiguration = {"showNotification", ServiceWorkerRegistrationV8Internal::showNotificationMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, showNotificationMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::notificationsEnabled()) {
        const V8DOMConfiguration::MethodConfiguration getNotificationsMethodConfiguration = {"getNotifications", ServiceWorkerRegistrationV8Internal::getNotificationsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, getNotificationsMethodConfiguration);
    }
}

v8::Local<v8::FunctionTemplate> V8ServiceWorkerRegistration::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8ServiceWorkerRegistrationTemplate);
}

bool V8ServiceWorkerRegistration::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8ServiceWorkerRegistration::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

ServiceWorkerRegistration* V8ServiceWorkerRegistration::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

ActiveScriptWrappable* V8ServiceWorkerRegistration::toActiveScriptWrappable(v8::Local<v8::Object> wrapper)
{
    return toImpl(wrapper);
}

} // namespace blink
