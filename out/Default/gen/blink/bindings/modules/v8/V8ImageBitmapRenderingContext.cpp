// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8ImageBitmapRenderingContext.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8GCController.h"
#include "bindings/core/v8/V8HTMLCanvasElement.h"
#include "bindings/core/v8/V8ImageBitmap.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/dom/Element.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8ImageBitmapRenderingContext::wrapperTypeInfo = { gin::kEmbedderBlink, V8ImageBitmapRenderingContext::domTemplate, V8ImageBitmapRenderingContext::trace, V8ImageBitmapRenderingContext::traceWrappers, 0, V8ImageBitmapRenderingContext::visitDOMWrapper, V8ImageBitmapRenderingContext::preparePrototypeAndInterfaceObject, nullptr, "ImageBitmapRenderingContext", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in ImageBitmapRenderingContext.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& ImageBitmapRenderingContext::s_wrapperTypeInfo = V8ImageBitmapRenderingContext::wrapperTypeInfo;

static_assert(
    !std::is_base_of<ActiveScriptWrappable, ImageBitmapRenderingContext>::value,
    "ImageBitmapRenderingContext inherits from ActiveScriptWrappable, but does not specify "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace ImageBitmapRenderingContextV8Internal {

static void canvasAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ImageBitmapRenderingContext* impl = V8ImageBitmapRenderingContext::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->canvas()), impl);
}

static void canvasAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ImageBitmapRenderingContextV8Internal::canvasAttributeGetter(info);
}

static void transferFromImageBitmapMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "transferFromImageBitmap", "ImageBitmapRenderingContext", 1, info.Length()));
        return;
    }
    ImageBitmapRenderingContext* impl = V8ImageBitmapRenderingContext::toImpl(info.Holder());
    ImageBitmap* bitmap;
    {
        bitmap = V8ImageBitmap::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!bitmap) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("transferFromImageBitmap", "ImageBitmapRenderingContext", "parameter 1 is not of type 'ImageBitmap'."));
            return;
        }
    }
    impl->transferFromImageBitmap(bitmap);
}

static void transferFromImageBitmapMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ImageBitmapRenderingContextV8Internal::transferFromImageBitmapMethod(info);
}

} // namespace ImageBitmapRenderingContextV8Internal

void V8ImageBitmapRenderingContext::visitDOMWrapper(v8::Isolate* isolate, ScriptWrappable* scriptWrappable, const v8::Persistent<v8::Object>& wrapper)
{
    ImageBitmapRenderingContext* impl = scriptWrappable->toImpl<ImageBitmapRenderingContext>();
    // The canvas() method may return a reference or a pointer.
    if (Node* owner = WTF::getPtr(impl->canvas())) {
        Node* root = V8GCController::opaqueRootForGC(isolate, owner);
        isolate->SetReferenceFromGroup(v8::UniqueId(reinterpret_cast<intptr_t>(root)), wrapper);
        return;
    }
}

const V8DOMConfiguration::AccessorConfiguration V8ImageBitmapRenderingContextAccessors[] = {
    {"canvas", ImageBitmapRenderingContextV8Internal::canvasAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8ImageBitmapRenderingContextMethods[] = {
    {"transferFromImageBitmap", ImageBitmapRenderingContextV8Internal::transferFromImageBitmapMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8ImageBitmapRenderingContextTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8ImageBitmapRenderingContext::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8ImageBitmapRenderingContext::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    if (RuntimeEnabledFeatures::experimentalCanvasFeaturesEnabled()) {
        V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8ImageBitmapRenderingContextAccessors, WTF_ARRAY_LENGTH(V8ImageBitmapRenderingContextAccessors));
        V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8ImageBitmapRenderingContextMethods, WTF_ARRAY_LENGTH(V8ImageBitmapRenderingContextMethods));
    }
}

v8::Local<v8::FunctionTemplate> V8ImageBitmapRenderingContext::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8ImageBitmapRenderingContextTemplate);
}

bool V8ImageBitmapRenderingContext::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8ImageBitmapRenderingContext::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

ImageBitmapRenderingContext* V8ImageBitmapRenderingContext::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
