// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8WorkerNavigatorPartial.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8WorkerNavigator.h"
#include "bindings/modules/v8/V8NetworkInformation.h"
#include "bindings/modules/v8/V8Permissions.h"
#include "bindings/modules/v8/V8StorageManager.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "core/origin_trials/OriginTrials.h"
#include "modules/netinfo/WorkerNavigatorNetworkInformation.h"
#include "modules/permissions/WorkerNavigatorPermissions.h"
#include "modules/quota/WorkerNavigatorStorageQuota.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

namespace WorkerNavigatorPartialV8Internal {

static void connectionAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerNavigator* impl = V8WorkerNavigator::toImpl(holder);
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    NetworkInformation* cppValue(WorkerNavigatorNetworkInformation::connection(executionContext, *impl));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "connection"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void connectionAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::NetInfo);
    WorkerNavigatorPartialV8Internal::connectionAttributeGetter(info);
}

static void permissionsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerNavigator* impl = V8WorkerNavigator::toImpl(holder);
    Permissions* cppValue(WorkerNavigatorPermissions::permissions(*impl));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "permissions"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void permissionsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WorkerNavigatorPartialV8Internal::permissionsAttributeGetter(info);
}

static void storageAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerNavigator* impl = V8WorkerNavigator::toImpl(holder);
    StorageManager* cppValue(WorkerNavigatorStorageQuota::storage(*impl));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue, holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "storage"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void storageAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WorkerNavigatorPartialV8Internal::storageAttributeGetter(info);
}

} // namespace WorkerNavigatorPartialV8Internal

void V8WorkerNavigatorPartial::installV8WorkerNavigatorTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8WorkerNavigator::installV8WorkerNavigatorTemplate(isolate, world, interfaceTemplate);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.

    if (RuntimeEnabledFeatures::networkInformationEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorconnectionConfiguration = \
        {"connection", WorkerNavigatorPartialV8Internal::connectionAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorconnectionConfiguration);
    }

    if (RuntimeEnabledFeatures::permissionsEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorpermissionsConfiguration = \
        {"permissions", WorkerNavigatorPartialV8Internal::permissionsAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorpermissionsConfiguration);
    }
}

void V8WorkerNavigatorPartial::installDurableStorage(ScriptState* scriptState, v8::Local<v8::Object> instance)
{
    v8::Local<v8::FunctionTemplate> interfaceTemplate = V8WorkerNavigator::wrapperTypeInfo.domTemplate(scriptState->isolate(), scriptState->world());
    v8::Local<v8::Signature> signature = v8::Signature::New(scriptState->isolate(), interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    V8PerContextData* perContextData = V8PerContextData::from(scriptState->context());
    v8::Local<v8::Object> prototype = perContextData->prototypeForType(&V8WorkerNavigator::wrapperTypeInfo);
    v8::Local<v8::Function> interface = perContextData->constructorForType(&V8WorkerNavigator::wrapperTypeInfo);
    ALLOW_UNUSED_LOCAL(interface);
    const V8DOMConfiguration::AccessorConfiguration accessorstorageConfiguration = \
        {"storage", WorkerNavigatorPartialV8Internal::storageAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
    V8DOMConfiguration::installAccessor(scriptState->isolate(), scriptState->world(), instance, prototype, interface, signature, accessorstorageConfiguration);
}

void V8WorkerNavigatorPartial::installDurableStorage(ScriptState* scriptState)
{
    installDurableStorage(scriptState, v8::Local<v8::Object>());
}
void V8WorkerNavigatorPartial::preparePrototypeAndInterfaceObject(v8::Local<v8::Context> context, const DOMWrapperWorld& world, v8::Local<v8::Object> prototypeObject, v8::Local<v8::Function> interfaceObject, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    V8WorkerNavigator::preparePrototypeAndInterfaceObject(context, world, prototypeObject, interfaceObject, interfaceTemplate);
}

void V8WorkerNavigatorPartial::initialize()
{
    // Should be invoked from ModulesInitializer.
    V8WorkerNavigator::updateWrapperTypeInfo(
        &V8WorkerNavigatorPartial::installV8WorkerNavigatorTemplate,
        &V8WorkerNavigatorPartial::preparePrototypeAndInterfaceObject);
}

} // namespace blink
