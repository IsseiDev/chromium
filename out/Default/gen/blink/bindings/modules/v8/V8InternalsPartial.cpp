// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8InternalsPartial.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Document.h"
#include "bindings/core/v8/V8Internals.h"
#include "bindings/core/v8/V8Navigator.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8RTCCertificate.h"
#include "bindings/modules/v8/V8ServiceWorker.h"
#include "core/dom/Document.h"
#include "modules/accessibility/testing/InternalsAccessibility.h"
#include "modules/navigatorcontentutils/testing/InternalsNavigatorContentUtils.h"
#include "modules/peerconnection/testing/InternalsRTCCertificate.h"
#include "modules/serviceworkers/testing/InternalsServiceWorker.h"
#include "modules/speech/testing/InternalsSpeechSynthesis.h"
#include "modules/vibration/testing/InternalsVibration.h"
#include "modules/webaudio/testing/InternalsWebAudio.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

namespace InternalsPartialV8Internal {

static void numberOfLiveAXObjectsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueUnsigned(info, InternalsAccessibility::numberOfLiveAXObjects(*impl));
}

static void numberOfLiveAXObjectsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsPartialV8Internal::numberOfLiveAXObjectsMethod(info);
}

static void setNavigatorContentUtilsClientMockMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setNavigatorContentUtilsClientMock", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("setNavigatorContentUtilsClientMock", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    InternalsNavigatorContentUtils::setNavigatorContentUtilsClientMock(*impl, document);
}

static void setNavigatorContentUtilsClientMockMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsPartialV8Internal::setNavigatorContentUtilsClientMockMethod(info);
}

static void rtcCertificateEqualsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "rtcCertificateEquals", "Internals", 2, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    RTCCertificate* a;
    RTCCertificate* b;
    {
        a = V8RTCCertificate::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!a) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("rtcCertificateEquals", "Internals", "parameter 1 is not of type 'RTCCertificate'."));
            return;
        }
        b = V8RTCCertificate::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!b) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("rtcCertificateEquals", "Internals", "parameter 2 is not of type 'RTCCertificate'."));
            return;
        }
    }
    v8SetReturnValueBool(info, InternalsRTCCertificate::rtcCertificateEquals(*impl, a, b));
}

static void rtcCertificateEqualsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsPartialV8Internal::rtcCertificateEqualsMethod(info);
}

static void terminateServiceWorkerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "terminateServiceWorker", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    ServiceWorker* worker;
    {
        worker = V8ServiceWorker::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!worker) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("terminateServiceWorker", "Internals", "parameter 1 is not of type 'ServiceWorker'."));
            return;
        }
    }
    InternalsServiceWorker::terminateServiceWorker(*impl, worker);
}

static void terminateServiceWorkerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsPartialV8Internal::terminateServiceWorkerMethod(info);
}

static void enableMockSpeechSynthesizerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "enableMockSpeechSynthesizer", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("enableMockSpeechSynthesizer", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    InternalsSpeechSynthesis::enableMockSpeechSynthesizer(*impl, document);
}

static void enableMockSpeechSynthesizerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsPartialV8Internal::enableMockSpeechSynthesizerMethod(info);
}

static void isVibratingMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isVibrating", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Navigator* navigator;
    {
        navigator = V8Navigator::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!navigator) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isVibrating", "Internals", "parameter 1 is not of type 'Navigator'."));
            return;
        }
    }
    v8SetReturnValueBool(info, InternalsVibration::isVibrating(*impl, navigator));
}

static void isVibratingMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsPartialV8Internal::isVibratingMethod(info);
}

static void pendingVibrationPatternMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(info.GetIsolate(), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "pendingVibrationPattern", "Internals", 1, info.Length()));
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Navigator* navigator;
    {
        navigator = V8Navigator::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!navigator) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("pendingVibrationPattern", "Internals", "parameter 1 is not of type 'Navigator'."));
            return;
        }
    }
    v8SetReturnValue(info, toV8(InternalsVibration::pendingVibrationPattern(*impl, navigator), info.Holder(), info.GetIsolate()));
}

static void pendingVibrationPatternMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsPartialV8Internal::pendingVibrationPatternMethod(info);
}

static void audioHandlerCountMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueUnsigned(info, InternalsWebAudio::audioHandlerCount(*impl));
}

static void audioHandlerCountMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InternalsPartialV8Internal::audioHandlerCountMethod(info);
}

} // namespace InternalsPartialV8Internal

const V8DOMConfiguration::MethodConfiguration V8InternalsMethods[] = {
    {"numberOfLiveAXObjects", InternalsPartialV8Internal::numberOfLiveAXObjectsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setNavigatorContentUtilsClientMock", InternalsPartialV8Internal::setNavigatorContentUtilsClientMockMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"rtcCertificateEquals", InternalsPartialV8Internal::rtcCertificateEqualsMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"terminateServiceWorker", InternalsPartialV8Internal::terminateServiceWorkerMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"enableMockSpeechSynthesizer", InternalsPartialV8Internal::enableMockSpeechSynthesizerMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"isVibrating", InternalsPartialV8Internal::isVibratingMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"pendingVibrationPattern", InternalsPartialV8Internal::pendingVibrationPatternMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"audioHandlerCount", InternalsPartialV8Internal::audioHandlerCountMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

void V8InternalsPartial::installV8InternalsTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8Internals::installV8InternalsTemplate(isolate, world, interfaceTemplate);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8InternalsMethods, WTF_ARRAY_LENGTH(V8InternalsMethods));
}

void V8InternalsPartial::preparePrototypeAndInterfaceObject(v8::Local<v8::Context> context, const DOMWrapperWorld& world, v8::Local<v8::Object> prototypeObject, v8::Local<v8::Function> interfaceObject, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    V8Internals::preparePrototypeAndInterfaceObject(context, world, prototypeObject, interfaceObject, interfaceTemplate);
}

void V8InternalsPartial::initialize()
{
    // Should be invoked from ModulesInitializer.
    V8Internals::updateWrapperTypeInfo(
        &V8InternalsPartial::installV8InternalsTemplate,
        &V8InternalsPartial::preparePrototypeAndInterfaceObject);
}

} // namespace blink
