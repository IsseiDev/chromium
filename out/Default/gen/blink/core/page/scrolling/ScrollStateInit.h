// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef ScrollStateInit_h
#define ScrollStateInit_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/core/v8/Nullable.h"
#include "core/CoreExport.h"
#include "platform/heap/Handle.h"

namespace blink {

class CORE_EXPORT ScrollStateInit : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    ScrollStateInit();
    virtual ~ScrollStateInit();

    bool hasDeltaGranularity() const { return !m_deltaGranularity.isNull(); }
    double deltaGranularity() const { return m_deltaGranularity.get(); }
    void setDeltaGranularity(double value) { m_deltaGranularity = value; }

    bool hasDeltaX() const { return !m_deltaX.isNull(); }
    double deltaX() const { return m_deltaX.get(); }
    void setDeltaX(double value) { m_deltaX = value; }

    bool hasDeltaY() const { return !m_deltaY.isNull(); }
    double deltaY() const { return m_deltaY.get(); }
    void setDeltaY(double value) { m_deltaY = value; }

    bool hasFromUserInput() const { return !m_fromUserInput.isNull(); }
    bool fromUserInput() const { return m_fromUserInput.get(); }
    void setFromUserInput(bool value) { m_fromUserInput = value; }

    bool hasIsBeginning() const { return !m_isBeginning.isNull(); }
    bool isBeginning() const { return m_isBeginning.get(); }
    void setIsBeginning(bool value) { m_isBeginning = value; }

    bool hasIsDirectManipulation() const { return !m_isDirectManipulation.isNull(); }
    bool isDirectManipulation() const { return m_isDirectManipulation.get(); }
    void setIsDirectManipulation(bool value) { m_isDirectManipulation = value; }

    bool hasIsEnding() const { return !m_isEnding.isNull(); }
    bool isEnding() const { return m_isEnding.get(); }
    void setIsEnding(bool value) { m_isEnding = value; }

    bool hasIsInInertialPhase() const { return !m_isInInertialPhase.isNull(); }
    bool isInInertialPhase() const { return m_isInInertialPhase.get(); }
    void setIsInInertialPhase(bool value) { m_isInInertialPhase = value; }

    bool hasPositionX() const { return !m_positionX.isNull(); }
    int positionX() const { return m_positionX.get(); }
    void setPositionX(int value) { m_positionX = value; }

    bool hasPositionY() const { return !m_positionY.isNull(); }
    int positionY() const { return m_positionY.get(); }
    void setPositionY(int value) { m_positionY = value; }

    bool hasShouldPropagate() const { return !m_shouldPropagate.isNull(); }
    bool shouldPropagate() const { return m_shouldPropagate.get(); }
    void setShouldPropagate(bool value) { m_shouldPropagate = value; }

    bool hasVelocityX() const { return !m_velocityX.isNull(); }
    double velocityX() const { return m_velocityX.get(); }
    void setVelocityX(double value) { m_velocityX = value; }

    bool hasVelocityY() const { return !m_velocityY.isNull(); }
    double velocityY() const { return m_velocityY.get(); }
    void setVelocityY(double value) { m_velocityY = value; }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<double> m_deltaGranularity;
    Nullable<double> m_deltaX;
    Nullable<double> m_deltaY;
    Nullable<bool> m_fromUserInput;
    Nullable<bool> m_isBeginning;
    Nullable<bool> m_isDirectManipulation;
    Nullable<bool> m_isEnding;
    Nullable<bool> m_isInInertialPhase;
    Nullable<int> m_positionX;
    Nullable<int> m_positionY;
    Nullable<bool> m_shouldPropagate;
    Nullable<double> m_velocityX;
    Nullable<double> m_velocityY;

    friend class V8ScrollStateInit;
};

} // namespace blink

#endif // ScrollStateInit_h
