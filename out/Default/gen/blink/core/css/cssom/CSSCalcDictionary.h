// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef CSSCalcDictionary_h
#define CSSCalcDictionary_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/core/v8/Nullable.h"
#include "core/CoreExport.h"
#include "platform/heap/Handle.h"

namespace blink {

class CORE_EXPORT CSSCalcDictionary : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    CSSCalcDictionary();
    virtual ~CSSCalcDictionary();

    bool hasCh() const { return !m_ch.isNull(); }
    double ch() const { return m_ch.get(); }
    void setCh(double value) { m_ch = value; }
    void setChToNull() { m_ch = Nullable<double>(); }

    bool hasCm() const { return !m_cm.isNull(); }
    double cm() const { return m_cm.get(); }
    void setCm(double value) { m_cm = value; }
    void setCmToNull() { m_cm = Nullable<double>(); }

    bool hasEm() const { return !m_em.isNull(); }
    double em() const { return m_em.get(); }
    void setEm(double value) { m_em = value; }
    void setEmToNull() { m_em = Nullable<double>(); }

    bool hasEx() const { return !m_ex.isNull(); }
    double ex() const { return m_ex.get(); }
    void setEx(double value) { m_ex = value; }
    void setExToNull() { m_ex = Nullable<double>(); }

    bool hasIn() const { return !m_in.isNull(); }
    double in() const { return m_in.get(); }
    void setIn(double value) { m_in = value; }
    void setInToNull() { m_in = Nullable<double>(); }

    bool hasMm() const { return !m_mm.isNull(); }
    double mm() const { return m_mm.get(); }
    void setMm(double value) { m_mm = value; }
    void setMmToNull() { m_mm = Nullable<double>(); }

    bool hasPc() const { return !m_pc.isNull(); }
    double pc() const { return m_pc.get(); }
    void setPc(double value) { m_pc = value; }
    void setPcToNull() { m_pc = Nullable<double>(); }

    bool hasPercent() const { return !m_percent.isNull(); }
    double percent() const { return m_percent.get(); }
    void setPercent(double value) { m_percent = value; }
    void setPercentToNull() { m_percent = Nullable<double>(); }

    bool hasPt() const { return !m_pt.isNull(); }
    double pt() const { return m_pt.get(); }
    void setPt(double value) { m_pt = value; }
    void setPtToNull() { m_pt = Nullable<double>(); }

    bool hasPx() const { return !m_px.isNull(); }
    double px() const { return m_px.get(); }
    void setPx(double value) { m_px = value; }
    void setPxToNull() { m_px = Nullable<double>(); }

    bool hasRem() const { return !m_rem.isNull(); }
    double rem() const { return m_rem.get(); }
    void setRem(double value) { m_rem = value; }
    void setRemToNull() { m_rem = Nullable<double>(); }

    bool hasVh() const { return !m_vh.isNull(); }
    double vh() const { return m_vh.get(); }
    void setVh(double value) { m_vh = value; }
    void setVhToNull() { m_vh = Nullable<double>(); }

    bool hasVmax() const { return !m_vmax.isNull(); }
    double vmax() const { return m_vmax.get(); }
    void setVmax(double value) { m_vmax = value; }
    void setVmaxToNull() { m_vmax = Nullable<double>(); }

    bool hasVmin() const { return !m_vmin.isNull(); }
    double vmin() const { return m_vmin.get(); }
    void setVmin(double value) { m_vmin = value; }
    void setVminToNull() { m_vmin = Nullable<double>(); }

    bool hasVw() const { return !m_vw.isNull(); }
    double vw() const { return m_vw.get(); }
    void setVw(double value) { m_vw = value; }
    void setVwToNull() { m_vw = Nullable<double>(); }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<double> m_ch;
    Nullable<double> m_cm;
    Nullable<double> m_em;
    Nullable<double> m_ex;
    Nullable<double> m_in;
    Nullable<double> m_mm;
    Nullable<double> m_pc;
    Nullable<double> m_percent;
    Nullable<double> m_pt;
    Nullable<double> m_px;
    Nullable<double> m_rem;
    Nullable<double> m_vh;
    Nullable<double> m_vmax;
    Nullable<double> m_vmin;
    Nullable<double> m_vw;

    friend class V8CSSCalcDictionary;
};

} // namespace blink

#endif // CSSCalcDictionary_h
