// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef TouchInit_h
#define TouchInit_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/core/v8/Nullable.h"
#include "core/CoreExport.h"
#include "core/events/EventTarget.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class CORE_EXPORT TouchInit : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    TouchInit();
    virtual ~TouchInit();

    bool hasClientX() const { return !m_clientX.isNull(); }
    double clientX() const { return m_clientX.get(); }
    void setClientX(double value) { m_clientX = value; }

    bool hasClientY() const { return !m_clientY.isNull(); }
    double clientY() const { return m_clientY.get(); }
    void setClientY(double value) { m_clientY = value; }

    bool hasForce() const { return !m_force.isNull(); }
    float force() const { return m_force.get(); }
    void setForce(float value) { m_force = value; }

    bool hasIdentifier() const { return !m_identifier.isNull(); }
    int identifier() const { return m_identifier.get(); }
    void setIdentifier(int value) { m_identifier = value; }

    bool hasPageX() const { return !m_pageX.isNull(); }
    double pageX() const { return m_pageX.get(); }
    void setPageX(double value) { m_pageX = value; }

    bool hasPageY() const { return !m_pageY.isNull(); }
    double pageY() const { return m_pageY.get(); }
    void setPageY(double value) { m_pageY = value; }

    bool hasRadiusX() const { return !m_radiusX.isNull(); }
    float radiusX() const { return m_radiusX.get(); }
    void setRadiusX(float value) { m_radiusX = value; }

    bool hasRadiusY() const { return !m_radiusY.isNull(); }
    float radiusY() const { return m_radiusY.get(); }
    void setRadiusY(float value) { m_radiusY = value; }

    bool hasRegion() const { return !m_region.isNull(); }
    String region() const { return m_region; }
    void setRegion(String value) { m_region = value; }
    void setRegionToNull() { m_region = String(); }

    bool hasRotationAngle() const { return !m_rotationAngle.isNull(); }
    float rotationAngle() const { return m_rotationAngle.get(); }
    void setRotationAngle(float value) { m_rotationAngle = value; }

    bool hasScreenX() const { return !m_screenX.isNull(); }
    double screenX() const { return m_screenX.get(); }
    void setScreenX(double value) { m_screenX = value; }

    bool hasScreenY() const { return !m_screenY.isNull(); }
    double screenY() const { return m_screenY.get(); }
    void setScreenY(double value) { m_screenY = value; }

    bool hasTarget() const { return m_target; }
    EventTarget* target() const { return m_target; }
    void setTarget(EventTarget* value) { m_target = value; }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<double> m_clientX;
    Nullable<double> m_clientY;
    Nullable<float> m_force;
    Nullable<int> m_identifier;
    Nullable<double> m_pageX;
    Nullable<double> m_pageY;
    Nullable<float> m_radiusX;
    Nullable<float> m_radiusY;
    String m_region;
    Nullable<float> m_rotationAngle;
    Nullable<double> m_screenX;
    Nullable<double> m_screenY;
    Member<EventTarget> m_target;

    friend class V8TouchInit;
};

} // namespace blink

#endif // TouchInit_h
