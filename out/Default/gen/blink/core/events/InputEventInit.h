// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef InputEventInit_h
#define InputEventInit_h

#include "bindings/core/v8/Nullable.h"
#include "core/CoreExport.h"
#include "core/dom/Range.h"
#include "core/events/UIEventInit.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"
#include "wtf/text/WTFString.h"

namespace blink {

class CORE_EXPORT InputEventInit : public UIEventInit {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    InputEventInit();
    virtual ~InputEventInit();

    bool hasData() const { return !m_data.isNull(); }
    String data() const { return m_data; }
    void setData(String value) { m_data = value; }

    bool hasInputType() const { return !m_inputType.isNull(); }
    String inputType() const { return m_inputType; }
    void setInputType(String value) { m_inputType = value; }

    bool hasIsComposing() const { return !m_isComposing.isNull(); }
    bool isComposing() const { return m_isComposing.get(); }
    void setIsComposing(bool value) { m_isComposing = value; }

    bool hasRanges() const { return !m_ranges.isNull(); }
    const HeapVector<Member<Range>>& ranges() const { return m_ranges.get(); }
    void setRanges(const HeapVector<Member<Range>>& value) { m_ranges = value; }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    String m_data;
    String m_inputType;
    Nullable<bool> m_isComposing;
    Nullable<HeapVector<Member<Range>>> m_ranges;

    friend class V8InputEventInit;
};

} // namespace blink

#endif // InputEventInit_h
