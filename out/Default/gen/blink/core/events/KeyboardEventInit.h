// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef KeyboardEventInit_h
#define KeyboardEventInit_h

#include "bindings/core/v8/Nullable.h"
#include "core/CoreExport.h"
#include "core/events/EventModifierInit.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class CORE_EXPORT KeyboardEventInit : public EventModifierInit {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    KeyboardEventInit();
    virtual ~KeyboardEventInit();

    bool hasCode() const { return !m_code.isNull(); }
    String code() const { return m_code; }
    void setCode(String value) { m_code = value; }

    bool hasKey() const { return !m_key.isNull(); }
    String key() const { return m_key; }
    void setKey(String value) { m_key = value; }

    bool hasLocation() const { return !m_location.isNull(); }
    unsigned location() const { return m_location.get(); }
    void setLocation(unsigned value) { m_location = value; }

    bool hasRepeat() const { return !m_repeat.isNull(); }
    bool repeat() const { return m_repeat.get(); }
    void setRepeat(bool value) { m_repeat = value; }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    String m_code;
    String m_key;
    Nullable<unsigned> m_location;
    Nullable<bool> m_repeat;

    friend class V8KeyboardEventInit;
};

} // namespace blink

#endif // KeyboardEventInit_h
