// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef ImageBitmapOptions_h
#define ImageBitmapOptions_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/core/v8/Nullable.h"
#include "core/CoreExport.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class CORE_EXPORT ImageBitmapOptions : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    ImageBitmapOptions();
    virtual ~ImageBitmapOptions();

    bool hasColorSpaceConversion() const { return !m_colorSpaceConversion.isNull(); }
    String colorSpaceConversion() const { return m_colorSpaceConversion; }
    void setColorSpaceConversion(String value) { m_colorSpaceConversion = value; }

    bool hasImageOrientation() const { return !m_imageOrientation.isNull(); }
    String imageOrientation() const { return m_imageOrientation; }
    void setImageOrientation(String value) { m_imageOrientation = value; }

    bool hasPremultiplyAlpha() const { return !m_premultiplyAlpha.isNull(); }
    String premultiplyAlpha() const { return m_premultiplyAlpha; }
    void setPremultiplyAlpha(String value) { m_premultiplyAlpha = value; }

    bool hasResizeHeight() const { return !m_resizeHeight.isNull(); }
    unsigned resizeHeight() const { return m_resizeHeight.get(); }
    void setResizeHeight(unsigned value) { m_resizeHeight = value; }
    void setResizeHeightToNull() { m_resizeHeight = Nullable<unsigned>(); }

    bool hasResizeQuality() const { return !m_resizeQuality.isNull(); }
    String resizeQuality() const { return m_resizeQuality; }
    void setResizeQuality(String value) { m_resizeQuality = value; }

    bool hasResizeWidth() const { return !m_resizeWidth.isNull(); }
    unsigned resizeWidth() const { return m_resizeWidth.get(); }
    void setResizeWidth(unsigned value) { m_resizeWidth = value; }
    void setResizeWidthToNull() { m_resizeWidth = Nullable<unsigned>(); }

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    String m_colorSpaceConversion;
    String m_imageOrientation;
    String m_premultiplyAlpha;
    Nullable<unsigned> m_resizeHeight;
    String m_resizeQuality;
    Nullable<unsigned> m_resizeWidth;

    friend class V8ImageBitmapOptions;
};

} // namespace blink

#endif // ImageBitmapOptions_h
