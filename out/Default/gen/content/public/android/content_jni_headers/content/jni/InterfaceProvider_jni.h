// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/InterfaceProvider

#ifndef org_chromium_content_browser_InterfaceProvider_JNI
#define org_chromium_content_browser_InterfaceProvider_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kInterfaceProviderClassPath[] =
    "org/chromium/content/browser/InterfaceProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_InterfaceProvider_clazz __attribute__((unused)) = 0;
#define InterfaceProvider_clazz(env) base::android::LazyGetClass(env, kInterfaceProviderClassPath, &g_InterfaceProvider_clazz)

}  // namespace

namespace content {

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_InterfaceProvider_nativeGetInterface(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeInterfaceProviderAndroid,
    jstring name,
    jint handle) {
  InterfaceProviderAndroid* native =
      reinterpret_cast<InterfaceProviderAndroid*>(nativeInterfaceProviderAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetInterface");
  return native->GetInterface(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, name), handle);
}

static base::subtle::AtomicWord g_InterfaceProvider_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_InterfaceProvider_create(JNIEnv* env, jlong
    nativeInterfaceProviderAndroid) {
  CHECK_CLAZZ(env, InterfaceProvider_clazz(env),
      InterfaceProvider_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, InterfaceProvider_clazz(env),
      "create",

"("
"J"
")"
"Lorg/chromium/content/browser/InterfaceProvider;",
      &g_InterfaceProvider_create);

  jobject ret =
      env->CallStaticObjectMethod(InterfaceProvider_clazz(env),
          method_id, nativeInterfaceProviderAndroid);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_InterfaceProvider_destroy = 0;
static void Java_InterfaceProvider_destroy(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      InterfaceProvider_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, InterfaceProvider_clazz(env),
      "destroy",

"("
")"
"V",
      &g_InterfaceProvider_destroy);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsInterfaceProvider[] = {
    { "nativeGetInterface",
"("
"J"
"Ljava/lang/String;"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_InterfaceProvider_nativeGetInterface)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsInterfaceProviderSize =
      arraysize(kMethodsInterfaceProvider);

  if (env->RegisterNatives(InterfaceProvider_clazz(env),
                           kMethodsInterfaceProvider,
                           kMethodsInterfaceProviderSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, InterfaceProvider_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace content

#endif  // org_chromium_content_browser_InterfaceProvider_JNI
