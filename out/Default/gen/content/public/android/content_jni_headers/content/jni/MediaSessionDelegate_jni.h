// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/MediaSessionDelegate

#ifndef org_chromium_content_browser_MediaSessionDelegate_JNI
#define org_chromium_content_browser_MediaSessionDelegate_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kMediaSessionDelegateClassPath[] =
    "org/chromium/content/browser/MediaSessionDelegate";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MediaSessionDelegate_clazz __attribute__((unused)) =
    0;
#define MediaSessionDelegate_clazz(env) base::android::LazyGetClass(env, kMediaSessionDelegateClassPath, &g_MediaSessionDelegate_clazz)

}  // namespace

namespace content {

// Step 2: method stubs.
extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_MediaSessionDelegate_nativeOnSuspend(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeMediaSessionDelegateAndroid,
    jboolean temporary) {
  MediaSessionDelegateAndroid* native =
      reinterpret_cast<MediaSessionDelegateAndroid*>(nativeMediaSessionDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSuspend");
  return native->OnSuspend(env, base::android::JavaParamRef<jobject>(env,
      jcaller), temporary);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_MediaSessionDelegate_nativeOnResume(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeMediaSessionDelegateAndroid) {
  MediaSessionDelegateAndroid* native =
      reinterpret_cast<MediaSessionDelegateAndroid*>(nativeMediaSessionDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnResume");
  return native->OnResume(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_MediaSessionDelegate_nativeOnSetVolumeMultiplier(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeMediaSessionDelegateAndroid,
    jdouble volumeMultiplier) {
  MediaSessionDelegateAndroid* native =
      reinterpret_cast<MediaSessionDelegateAndroid*>(nativeMediaSessionDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSetVolumeMultiplier");
  return native->OnSetVolumeMultiplier(env,
      base::android::JavaParamRef<jobject>(env, jcaller), volumeMultiplier);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_MediaSessionDelegate_nativeRecordSessionDuck(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeMediaSessionDelegateAndroid) {
  MediaSessionDelegateAndroid* native =
      reinterpret_cast<MediaSessionDelegateAndroid*>(nativeMediaSessionDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RecordSessionDuck");
  return native->RecordSessionDuck(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_MediaSessionDelegate_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_MediaSessionDelegate_create(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context,
    jlong nativeMediaSessionDelegateAndroid) {
  CHECK_CLAZZ(env, MediaSessionDelegate_clazz(env),
      MediaSessionDelegate_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaSessionDelegate_clazz(env),
      "create",

"("
"Landroid/content/Context;"
"J"
")"
"Lorg/chromium/content/browser/MediaSessionDelegate;",
      &g_MediaSessionDelegate_create);

  jobject ret =
      env->CallStaticObjectMethod(MediaSessionDelegate_clazz(env),
          method_id, context.obj(), nativeMediaSessionDelegateAndroid);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_MediaSessionDelegate_tearDown = 0;
static void Java_MediaSessionDelegate_tearDown(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      MediaSessionDelegate_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, MediaSessionDelegate_clazz(env),
      "tearDown",

"("
")"
"V",
      &g_MediaSessionDelegate_tearDown);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_MediaSessionDelegate_requestAudioFocus = 0;
static jboolean Java_MediaSessionDelegate_requestAudioFocus(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jboolean transientFocus) {
  CHECK_CLAZZ(env, obj.obj(),
      MediaSessionDelegate_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, MediaSessionDelegate_clazz(env),
      "requestAudioFocus",

"("
"Z"
")"
"Z",
      &g_MediaSessionDelegate_requestAudioFocus);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, transientFocus);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaSessionDelegate_abandonAudioFocus = 0;
static void Java_MediaSessionDelegate_abandonAudioFocus(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      MediaSessionDelegate_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, MediaSessionDelegate_clazz(env),
      "abandonAudioFocus",

"("
")"
"V",
      &g_MediaSessionDelegate_abandonAudioFocus);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsMediaSessionDelegate[] = {
    { "nativeOnSuspend",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_MediaSessionDelegate_nativeOnSuspend)
    },
    { "nativeOnResume",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_MediaSessionDelegate_nativeOnResume)
    },
    { "nativeOnSetVolumeMultiplier",
"("
"J"
"D"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_MediaSessionDelegate_nativeOnSetVolumeMultiplier)
    },
    { "nativeRecordSessionDuck",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_MediaSessionDelegate_nativeRecordSessionDuck)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsMediaSessionDelegateSize =
      arraysize(kMethodsMediaSessionDelegate);

  if (env->RegisterNatives(MediaSessionDelegate_clazz(env),
                           kMethodsMediaSessionDelegate,
                           kMethodsMediaSessionDelegateSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, MediaSessionDelegate_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace content

#endif  // org_chromium_content_browser_MediaSessionDelegate_JNI
