// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ContentViewCore

#ifndef org_chromium_content_browser_ContentViewCore_JNI
#define org_chromium_content_browser_ContentViewCore_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kContentViewCoreClassPath[] =
    "org/chromium/content/browser/ContentViewCore";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ContentViewCore_clazz __attribute__((unused)) = 0;
#define ContentViewCore_clazz(env) base::android::LazyGetClass(env, kContentViewCoreClassPath, &g_ContentViewCore_clazz)

}  // namespace

namespace content {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    const base::android::JavaParamRef<jobject>& webContents,
    const base::android::JavaParamRef<jobject>& viewAndroidDelegate,
    jlong windowAndroidPtr,
    const base::android::JavaParamRef<jobject>& retainedObjectSet);

extern "C" __attribute__((visibility("default")))
jlong Java_org_chromium_content_browser_ContentViewCore_nativeInit(JNIEnv* env,
    jobject jcaller,
    jobject webContents,
    jobject viewAndroidDelegate,
    jlong windowAndroidPtr,
    jobject retainedObjectSet) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, webContents),
      base::android::JavaParamRef<jobject>(env, viewAndroidDelegate),
      windowAndroidPtr, base::android::JavaParamRef<jobject>(env,
      retainedObjectSet));
}

static base::android::ScopedJavaLocalRef<jobject> FromWebContentsAndroid(JNIEnv*
    env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

extern "C" __attribute__((visibility("default")))
jobject
    Java_org_chromium_content_browser_ContentViewCore_nativeFromWebContentsAndroid(JNIEnv*
    env, jclass jcaller,
    jobject webContents) {
  return FromWebContentsAndroid(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env,
      webContents)).Release();
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeUpdateWindowAndroid(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong windowAndroidPtr) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateWindowAndroid");
  return native->UpdateWindowAndroid(env,
      base::android::JavaParamRef<jobject>(env, jcaller), windowAndroidPtr);
}

extern "C" __attribute__((visibility("default")))
jobject
    Java_org_chromium_content_browser_ContentViewCore_nativeGetWebContentsAndroid(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetWebContentsAndroid", NULL);
  return native->GetWebContentsAndroid(env,
      base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

extern "C" __attribute__((visibility("default")))
jobject
    Java_org_chromium_content_browser_ContentViewCore_nativeGetJavaWindowAndroid(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetJavaWindowAndroid", NULL);
  return native->GetJavaWindowAndroid(env,
      base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeOnJavaContentViewCoreDestroyed(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnJavaContentViewCoreDestroyed");
  return native->OnJavaContentViewCoreDestroyed(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_content_browser_ContentViewCore_nativeSetFocus(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jboolean focused) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetFocus");
  return native->SetFocus(env, base::android::JavaParamRef<jobject>(env,
      jcaller), focused);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeSendOrientationChangeEvent(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jint orientation) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendOrientationChangeEvent");
  return native->SendOrientationChangeEvent(env,
      base::android::JavaParamRef<jobject>(env, jcaller), orientation);
}

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_content_browser_ContentViewCore_nativeOnTouchEvent(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jobject event,
    jlong timeMs,
    jint action,
    jint pointerCount,
    jint historySize,
    jint actionIndex,
    jfloat x0,
    jfloat y0,
    jfloat x1,
    jfloat y1,
    jint pointerId0,
    jint pointerId1,
    jfloat touchMajor0,
    jfloat touchMajor1,
    jfloat touchMinor0,
    jfloat touchMinor1,
    jfloat orientation0,
    jfloat orientation1,
    jfloat tilt0,
    jfloat tilt1,
    jfloat rawX,
    jfloat rawY,
    jint androidToolType0,
    jint androidToolType1,
    jint androidButtonState,
    jint androidMetaState,
    jboolean isTouchHandleEvent) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnTouchEvent", false);
  return native->OnTouchEvent(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, event), timeMs,
      action, pointerCount, historySize, actionIndex, x0, y0, x1, y1,
      pointerId0, pointerId1, touchMajor0, touchMajor1, touchMinor0,
      touchMinor1, orientation0, orientation1, tilt0, tilt1, rawX, rawY,
      androidToolType0, androidToolType1, androidButtonState, androidMetaState,
      isTouchHandleEvent);
}

extern "C" __attribute__((visibility("default")))
jint
    Java_org_chromium_content_browser_ContentViewCore_nativeSendMouseMoveEvent(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jint toolType) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendMouseMoveEvent", 0);
  return native->SendMouseMoveEvent(env,
      base::android::JavaParamRef<jobject>(env, jcaller), timeMs, x, y,
      toolType);
}

extern "C" __attribute__((visibility("default")))
jint
    Java_org_chromium_content_browser_ContentViewCore_nativeSendMouseWheelEvent(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jfloat ticksX,
    jfloat ticksY,
    jfloat pixelsPerTick) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendMouseWheelEvent", 0);
  return native->SendMouseWheelEvent(env,
      base::android::JavaParamRef<jobject>(env, jcaller), timeMs, x, y, ticksX,
      ticksY, pixelsPerTick);
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_content_browser_ContentViewCore_nativeScrollBegin(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jfloat hintX,
    jfloat hintY,
    jboolean targetViewport) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollBegin");
  return native->ScrollBegin(env, base::android::JavaParamRef<jobject>(env,
      jcaller), timeMs, x, y, hintX, hintY, targetViewport);
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_content_browser_ContentViewCore_nativeScrollEnd(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollEnd");
  return native->ScrollEnd(env, base::android::JavaParamRef<jobject>(env,
      jcaller), timeMs);
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_content_browser_ContentViewCore_nativeScrollBy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jfloat deltaX,
    jfloat deltaY) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollBy");
  return native->ScrollBy(env, base::android::JavaParamRef<jobject>(env,
      jcaller), timeMs, x, y, deltaX, deltaY);
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_content_browser_ContentViewCore_nativeFlingStart(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jfloat vx,
    jfloat vy,
    jboolean targetViewport) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "FlingStart");
  return native->FlingStart(env, base::android::JavaParamRef<jobject>(env,
      jcaller), timeMs, x, y, vx, vy, targetViewport);
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_content_browser_ContentViewCore_nativeFlingCancel(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "FlingCancel");
  return native->FlingCancel(env, base::android::JavaParamRef<jobject>(env,
      jcaller), timeMs);
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_content_browser_ContentViewCore_nativeSingleTap(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SingleTap");
  return native->SingleTap(env, base::android::JavaParamRef<jobject>(env,
      jcaller), timeMs, x, y);
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_content_browser_ContentViewCore_nativeDoubleTap(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "DoubleTap");
  return native->DoubleTap(env, base::android::JavaParamRef<jobject>(env,
      jcaller), timeMs, x, y);
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_content_browser_ContentViewCore_nativeLongPress(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "LongPress");
  return native->LongPress(env, base::android::JavaParamRef<jobject>(env,
      jcaller), timeMs, x, y);
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_content_browser_ContentViewCore_nativePinchBegin(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "PinchBegin");
  return native->PinchBegin(env, base::android::JavaParamRef<jobject>(env,
      jcaller), timeMs, x, y);
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_content_browser_ContentViewCore_nativePinchEnd(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "PinchEnd");
  return native->PinchEnd(env, base::android::JavaParamRef<jobject>(env,
      jcaller), timeMs);
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_content_browser_ContentViewCore_nativePinchBy(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat anchorX,
    jfloat anchorY,
    jfloat deltaScale) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "PinchBy");
  return native->PinchBy(env, base::android::JavaParamRef<jobject>(env,
      jcaller), timeMs, anchorX, anchorY, deltaScale);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeSelectBetweenCoordinates(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jfloat x1,
    jfloat y1,
    jfloat x2,
    jfloat y2) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SelectBetweenCoordinates");
  return native->SelectBetweenCoordinates(env,
      base::android::JavaParamRef<jobject>(env, jcaller), x1, y1, x2, y2);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeDismissTextHandles(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "DismissTextHandles");
  return native->DismissTextHandles(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeSetTextHandlesTemporarilyHidden(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jboolean hidden) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetTextHandlesTemporarilyHidden");
  return native->SetTextHandlesTemporarilyHidden(env,
      base::android::JavaParamRef<jobject>(env, jcaller), hidden);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeResetGestureDetection(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ResetGestureDetection");
  return native->ResetGestureDetection(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeSetDoubleTapSupportEnabled(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jboolean enabled) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetDoubleTapSupportEnabled");
  return native->SetDoubleTapSupportEnabled(env,
      base::android::JavaParamRef<jobject>(env, jcaller), enabled);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeSetMultiTouchZoomSupportEnabled(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jboolean enabled) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetMultiTouchZoomSupportEnabled");
  return native->SetMultiTouchZoomSupportEnabled(env,
      base::android::JavaParamRef<jobject>(env, jcaller), enabled);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeSelectPopupMenuItems(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong nativeSelectPopupSourceFrame,
    jintArray indices) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SelectPopupMenuItems");
  return native->SelectPopupMenuItems(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      nativeSelectPopupSourceFrame, base::android::JavaParamRef<jintArray>(env,
      indices));
}

extern "C" __attribute__((visibility("default")))
jlong
    Java_org_chromium_content_browser_ContentViewCore_nativeGetNativeImeAdapter(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetNativeImeAdapter", 0);
  return native->GetNativeImeAdapter(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
jint
    Java_org_chromium_content_browser_ContentViewCore_nativeGetCurrentRenderProcessId(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCurrentRenderProcessId", 0);
  return native->GetCurrentRenderProcessId(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeSetAllowJavascriptInterfacesInspection(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jboolean allow) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native,
      "SetAllowJavascriptInterfacesInspection");
  return native->SetAllowJavascriptInterfacesInspection(env,
      base::android::JavaParamRef<jobject>(env, jcaller), allow);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeAddJavascriptInterface(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jobject object,
    jstring name,
    jclass requiredAnnotation) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddJavascriptInterface");
  return native->AddJavascriptInterface(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, object),
      base::android::JavaParamRef<jstring>(env, name),
      base::android::JavaParamRef<jclass>(env, requiredAnnotation));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeRemoveJavascriptInterface(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jstring name) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveJavascriptInterface");
  return native->RemoveJavascriptInterface(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, name));
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_content_browser_ContentViewCore_nativeWasResized(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "WasResized");
  return native->WasResized(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeSetAccessibilityEnabled(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jboolean enabled) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetAccessibilityEnabled");
  return native->SetAccessibilityEnabled(env,
      base::android::JavaParamRef<jobject>(env, jcaller), enabled);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeSetTextTrackSettings(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jboolean textTracksEnabled,
    jstring textTrackBackgroundColor,
    jstring textTrackFontFamily,
    jstring textTrackFontStyle,
    jstring textTrackFontVariant,
    jstring textTrackTextColor,
    jstring textTrackTextShadow,
    jstring textTrackTextSize) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetTextTrackSettings");
  return native->SetTextTrackSettings(env,
      base::android::JavaParamRef<jobject>(env, jcaller), textTracksEnabled,
      base::android::JavaParamRef<jstring>(env, textTrackBackgroundColor),
      base::android::JavaParamRef<jstring>(env, textTrackFontFamily),
      base::android::JavaParamRef<jstring>(env, textTrackFontStyle),
      base::android::JavaParamRef<jstring>(env, textTrackFontVariant),
      base::android::JavaParamRef<jstring>(env, textTrackTextColor),
      base::android::JavaParamRef<jstring>(env, textTrackTextShadow),
      base::android::JavaParamRef<jstring>(env, textTrackTextSize));
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeExtractSmartClipData(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jint x,
    jint y,
    jint w,
    jint h) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ExtractSmartClipData");
  return native->ExtractSmartClipData(env,
      base::android::JavaParamRef<jobject>(env, jcaller), x, y, w, h);
}

extern "C" __attribute__((visibility("default")))
void
    Java_org_chromium_content_browser_ContentViewCore_nativeSetBackgroundOpaque(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jboolean opaque) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetBackgroundOpaque");
  return native->SetBackgroundOpaque(env,
      base::android::JavaParamRef<jobject>(env, jcaller), opaque);
}

extern "C" __attribute__((visibility("default")))
jboolean
    Java_org_chromium_content_browser_ContentViewCore_nativeIsTouchDragDropEnabled(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsTouchDragDropEnabled", false);
  return native->IsTouchDragDropEnabled(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

extern "C" __attribute__((visibility("default")))
void Java_org_chromium_content_browser_ContentViewCore_nativeOnDragEvent(JNIEnv*
    env,
    jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jint action,
    jint x,
    jint y,
    jint screenX,
    jint screenY,
    jobjectArray mimeTypes,
    jstring content) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDragEvent");
  return native->OnDragEvent(env, base::android::JavaParamRef<jobject>(env,
      jcaller), action, x, y, screenX, screenY,
      base::android::JavaParamRef<jobjectArray>(env, mimeTypes),
      base::android::JavaParamRef<jstring>(env, content));
}

static base::subtle::AtomicWord g_ContentViewCore_getContext = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ContentViewCore_getContext(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "getContext",

"("
")"
"Landroid/content/Context;",
      &g_ContentViewCore_getContext);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_ContentViewCore_onNativeContentViewCoreDestroyed = 0;
static void Java_ContentViewCore_onNativeContentViewCoreDestroyed(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, jlong
    nativeContentViewCore) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onNativeContentViewCoreDestroyed",

"("
"J"
")"
"V",
      &g_ContentViewCore_onNativeContentViewCoreDestroyed);

     env->CallVoidMethod(obj.obj(),
          method_id, nativeContentViewCore);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onBackgroundColorChanged = 0;
static void Java_ContentViewCore_onBackgroundColorChanged(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper color) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onBackgroundColorChanged",

"("
"I"
")"
"V",
      &g_ContentViewCore_onBackgroundColorChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(color));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_getViewportWidthPix = 0;
static jint Java_ContentViewCore_getViewportWidthPix(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "getViewportWidthPix",

"("
")"
"I",
      &g_ContentViewCore_getViewportWidthPix);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_getViewportHeightPix = 0;
static jint Java_ContentViewCore_getViewportHeightPix(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "getViewportHeightPix",

"("
")"
"I",
      &g_ContentViewCore_getViewportHeightPix);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_ContentViewCore_getViewportHeightWithOSKHiddenPix = 0;
static jint Java_ContentViewCore_getViewportHeightWithOSKHiddenPix(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "getViewportHeightWithOSKHiddenPix",

"("
")"
"I",
      &g_ContentViewCore_getViewportHeightWithOSKHiddenPix);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_getPhysicalBackingWidthPix =
    0;
static jint Java_ContentViewCore_getPhysicalBackingWidthPix(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "getPhysicalBackingWidthPix",

"("
")"
"I",
      &g_ContentViewCore_getPhysicalBackingWidthPix);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_getPhysicalBackingHeightPix =
    0;
static jint Java_ContentViewCore_getPhysicalBackingHeightPix(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "getPhysicalBackingHeightPix",

"("
")"
"I",
      &g_ContentViewCore_getPhysicalBackingHeightPix);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_doTopControlsShrinkBlinkSize =
    0;
static jboolean Java_ContentViewCore_doTopControlsShrinkBlinkSize(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "doTopControlsShrinkBlinkSize",

"("
")"
"Z",
      &g_ContentViewCore_doTopControlsShrinkBlinkSize);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_getTopControlsHeightPix = 0;
static jint Java_ContentViewCore_getTopControlsHeightPix(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "getTopControlsHeightPix",

"("
")"
"I",
      &g_ContentViewCore_getTopControlsHeightPix);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_getBottomControlsHeightPix =
    0;
static jint Java_ContentViewCore_getBottomControlsHeightPix(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "getBottomControlsHeightPix",

"("
")"
"I",
      &g_ContentViewCore_getBottomControlsHeightPix);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_ContentViewCore_requestDisallowInterceptTouchEvent = 0;
static void Java_ContentViewCore_requestDisallowInterceptTouchEvent(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "requestDisallowInterceptTouchEvent",

"("
")"
"V",
      &g_ContentViewCore_requestDisallowInterceptTouchEvent);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onFlingStartEventConsumed = 0;
static void Java_ContentViewCore_onFlingStartEventConsumed(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper vx,
    JniIntWrapper vy) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onFlingStartEventConsumed",

"("
"I"
"I"
")"
"V",
      &g_ContentViewCore_onFlingStartEventConsumed);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(vx), as_jint(vy));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onFlingCancelEventAck = 0;
static void Java_ContentViewCore_onFlingCancelEventAck(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onFlingCancelEventAck",

"("
")"
"V",
      &g_ContentViewCore_onFlingCancelEventAck);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onScrollBeginEventAck = 0;
static void Java_ContentViewCore_onScrollBeginEventAck(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onScrollBeginEventAck",

"("
")"
"V",
      &g_ContentViewCore_onScrollBeginEventAck);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onScrollUpdateGestureConsumed
    = 0;
static void Java_ContentViewCore_onScrollUpdateGestureConsumed(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onScrollUpdateGestureConsumed",

"("
")"
"V",
      &g_ContentViewCore_onScrollUpdateGestureConsumed);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onScrollEndEventAck = 0;
static void Java_ContentViewCore_onScrollEndEventAck(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onScrollEndEventAck",

"("
")"
"V",
      &g_ContentViewCore_onScrollEndEventAck);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onPinchBeginEventAck = 0;
static void Java_ContentViewCore_onPinchBeginEventAck(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onPinchBeginEventAck",

"("
")"
"V",
      &g_ContentViewCore_onPinchBeginEventAck);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onPinchEndEventAck = 0;
static void Java_ContentViewCore_onPinchEndEventAck(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onPinchEndEventAck",

"("
")"
"V",
      &g_ContentViewCore_onPinchEndEventAck);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onSingleTapEventAck = 0;
static void Java_ContentViewCore_onSingleTapEventAck(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jboolean consumed,
    JniIntWrapper x,
    JniIntWrapper y) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onSingleTapEventAck",

"("
"Z"
"I"
"I"
")"
"V",
      &g_ContentViewCore_onSingleTapEventAck);

     env->CallVoidMethod(obj.obj(),
          method_id, consumed, as_jint(x), as_jint(y));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onShowUnhandledTapUIIfNeeded =
    0;
static void Java_ContentViewCore_onShowUnhandledTapUIIfNeeded(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper x,
    JniIntWrapper y) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onShowUnhandledTapUIIfNeeded",

"("
"I"
"I"
")"
"V",
      &g_ContentViewCore_onShowUnhandledTapUIIfNeeded);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(x), as_jint(y));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_filterTapOrPressEvent = 0;
static jboolean Java_ContentViewCore_filterTapOrPressEvent(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper type,
    JniIntWrapper x,
    JniIntWrapper y) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "filterTapOrPressEvent",

"("
"I"
"I"
"I"
")"
"Z",
      &g_ContentViewCore_filterTapOrPressEvent);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, as_jint(type), as_jint(x), as_jint(y));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_hidePopupsAndPreserveSelection
    = 0;
static void Java_ContentViewCore_hidePopupsAndPreserveSelection(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "hidePopupsAndPreserveSelection",

"("
")"
"V",
      &g_ContentViewCore_hidePopupsAndPreserveSelection);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onSelectionEvent = 0;
static void Java_ContentViewCore_onSelectionEvent(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper eventType,
    JniIntWrapper xAnchor,
    JniIntWrapper yAnchor,
    JniIntWrapper left,
    JniIntWrapper top,
    JniIntWrapper right,
    JniIntWrapper bottom) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onSelectionEvent",

"("
"I"
"I"
"I"
"I"
"I"
"I"
"I"
")"
"V",
      &g_ContentViewCore_onSelectionEvent);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(eventType), as_jint(xAnchor), as_jint(yAnchor),
              as_jint(left), as_jint(top), as_jint(right), as_jint(bottom));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_updateFrameInfo = 0;
static void Java_ContentViewCore_updateFrameInfo(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jfloat scrollOffsetX,
    jfloat scrollOffsetY,
    jfloat pageScaleFactor,
    jfloat minPageScaleFactor,
    jfloat maxPageScaleFactor,
    jfloat contentWidth,
    jfloat contentHeight,
    jfloat viewportWidth,
    jfloat viewportHeight,
    jfloat topControlsHeightDp,
    jfloat topControlsShownRatio,
    jfloat bottomControlsHeightDp,
    jfloat bottomControlsShownRatio,
    jboolean isMobileOptimizedHint,
    jboolean hasInsertionMarker,
    jboolean isInsertionMarkerVisible,
    jfloat insertionMarkerHorizontal,
    jfloat insertionMarkerTop,
    jfloat insertionMarkerBottom) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "updateFrameInfo",

"("
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"Z"
"Z"
"Z"
"F"
"F"
"F"
")"
"V",
      &g_ContentViewCore_updateFrameInfo);

     env->CallVoidMethod(obj.obj(),
          method_id, scrollOffsetX, scrollOffsetY, pageScaleFactor,
              minPageScaleFactor, maxPageScaleFactor, contentWidth,
              contentHeight, viewportWidth, viewportHeight, topControlsHeightDp,
              topControlsShownRatio, bottomControlsHeightDp,
              bottomControlsShownRatio, isMobileOptimizedHint,
              hasInsertionMarker, isInsertionMarkerVisible,
              insertionMarkerHorizontal, insertionMarkerTop,
              insertionMarkerBottom);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_updateImeAdapter = 0;
static void Java_ContentViewCore_updateImeAdapter(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jlong nativeImeAdapterAndroid,
    JniIntWrapper textInputType,
    JniIntWrapper textInputFlags,
    const base::android::JavaRefOrBare<jstring>& text,
    JniIntWrapper selectionStart,
    JniIntWrapper selectionEnd,
    JniIntWrapper compositionStart,
    JniIntWrapper compositionEnd,
    jboolean showImeIfNeeded,
    jboolean isNonImeChange) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "updateImeAdapter",

"("
"J"
"I"
"I"
"Ljava/lang/String;"
"I"
"I"
"I"
"I"
"Z"
"Z"
")"
"V",
      &g_ContentViewCore_updateImeAdapter);

     env->CallVoidMethod(obj.obj(),
          method_id, nativeImeAdapterAndroid, as_jint(textInputType),
              as_jint(textInputFlags), text.obj(), as_jint(selectionStart),
              as_jint(selectionEnd), as_jint(compositionStart),
              as_jint(compositionEnd), showImeIfNeeded, isNonImeChange);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_forceUpdateImeAdapter = 0;
static void Java_ContentViewCore_forceUpdateImeAdapter(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jlong nativeImeAdapterAndroid) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "forceUpdateImeAdapter",

"("
"J"
")"
"V",
      &g_ContentViewCore_forceUpdateImeAdapter);

     env->CallVoidMethod(obj.obj(),
          method_id, nativeImeAdapterAndroid);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_setTitle = 0;
static void Java_ContentViewCore_setTitle(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& title) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "setTitle",

"("
"Ljava/lang/String;"
")"
"V",
      &g_ContentViewCore_setTitle);

     env->CallVoidMethod(obj.obj(),
          method_id, title.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_showSelectPopup = 0;
static void Java_ContentViewCore_showSelectPopup(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& anchorView,
    jlong nativeSelectPopupSourceFrame,
    const base::android::JavaRefOrBare<jobjectArray>& items,
    const base::android::JavaRefOrBare<jintArray>& enabled,
    jboolean multiple,
    const base::android::JavaRefOrBare<jintArray>& selectedIndices,
    jboolean rightAligned) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "showSelectPopup",

"("
"Landroid/view/View;"
"J"
"[Ljava/lang/String;"
"[I"
"Z"
"[I"
"Z"
")"
"V",
      &g_ContentViewCore_showSelectPopup);

     env->CallVoidMethod(obj.obj(),
          method_id, anchorView.obj(), nativeSelectPopupSourceFrame,
              items.obj(), enabled.obj(), multiple, selectedIndices.obj(),
              rightAligned);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_hideSelectPopup = 0;
static void Java_ContentViewCore_hideSelectPopup(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "hideSelectPopup",

"("
")"
"V",
      &g_ContentViewCore_hideSelectPopup);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_showDisambiguationPopup = 0;
static void Java_ContentViewCore_showDisambiguationPopup(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& targetRect,
    const base::android::JavaRefOrBare<jobject>& zoomedBitmap) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "showDisambiguationPopup",

"("
"Landroid/graphics/Rect;"
"Landroid/graphics/Bitmap;"
")"
"V",
      &g_ContentViewCore_showDisambiguationPopup);

     env->CallVoidMethod(obj.obj(),
          method_id, targetRect.obj(), zoomedBitmap.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_createMotionEventSynthesizer =
    0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ContentViewCore_createMotionEventSynthesizer(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "createMotionEventSynthesizer",

"("
")"
"Lorg/chromium/content/browser/MotionEventSynthesizer;",
      &g_ContentViewCore_createMotionEventSynthesizer);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ContentViewCore_onOverscrollRefreshStart = 0;
static jboolean Java_ContentViewCore_onOverscrollRefreshStart(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onOverscrollRefreshStart",

"("
")"
"Z",
      &g_ContentViewCore_onOverscrollRefreshStart);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_onOverscrollRefreshUpdate = 0;
static void Java_ContentViewCore_onOverscrollRefreshUpdate(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jfloat delta) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onOverscrollRefreshUpdate",

"("
"F"
")"
"V",
      &g_ContentViewCore_onOverscrollRefreshUpdate);

     env->CallVoidMethod(obj.obj(),
          method_id, delta);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onOverscrollRefreshRelease =
    0;
static void Java_ContentViewCore_onOverscrollRefreshRelease(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jboolean allowRefresh) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onOverscrollRefreshRelease",

"("
"Z"
")"
"V",
      &g_ContentViewCore_onOverscrollRefreshRelease);

     env->CallVoidMethod(obj.obj(),
          method_id, allowRefresh);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onOverscrollRefreshReset = 0;
static void Java_ContentViewCore_onOverscrollRefreshReset(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onOverscrollRefreshReset",

"("
")"
"V",
      &g_ContentViewCore_onOverscrollRefreshReset);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onSelectionChanged = 0;
static void Java_ContentViewCore_onSelectionChanged(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& text) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onSelectionChanged",

"("
"Ljava/lang/String;"
")"
"V",
      &g_ContentViewCore_onSelectionChanged);

     env->CallVoidMethod(obj.obj(),
          method_id, text.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_showPastePopupWithFeedback =
    0;
static jboolean Java_ContentViewCore_showPastePopupWithFeedback(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper x,
    JniIntWrapper y) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "showPastePopupWithFeedback",

"("
"I"
"I"
")"
"Z",
      &g_ContentViewCore_showPastePopupWithFeedback);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, as_jint(x), as_jint(y));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_performLongPressHapticFeedback
    = 0;
static void Java_ContentViewCore_performLongPressHapticFeedback(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "performLongPressHapticFeedback",

"("
")"
"V",
      &g_ContentViewCore_performLongPressHapticFeedback);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onRenderProcessChange = 0;
static void Java_ContentViewCore_onRenderProcessChange(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onRenderProcessChange",

"("
")"
"V",
      &g_ContentViewCore_onRenderProcessChange);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_hasFocus = 0;
static jboolean Java_ContentViewCore_hasFocus(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "hasFocus",

"("
")"
"Z",
      &g_ContentViewCore_hasFocus);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_startContentIntent = 0;
static void Java_ContentViewCore_startContentIntent(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& contentUrl,
    jboolean isMainFrame) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "startContentIntent",

"("
"Ljava/lang/String;"
"Z"
")"
"V",
      &g_ContentViewCore_startContentIntent);

     env->CallVoidMethod(obj.obj(),
          method_id, contentUrl.obj(), isMainFrame);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_createRect = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ContentViewCore_createRect(JNIEnv* env, JniIntWrapper x,
    JniIntWrapper y,
    JniIntWrapper right,
    JniIntWrapper bottom) {
  CHECK_CLAZZ(env, ContentViewCore_clazz(env),
      ContentViewCore_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ContentViewCore_clazz(env),
      "createRect",

"("
"I"
"I"
"I"
"I"
")"
"Landroid/graphics/Rect;",
      &g_ContentViewCore_createRect);

  jobject ret =
      env->CallStaticObjectMethod(ContentViewCore_clazz(env),
          method_id, as_jint(x), as_jint(y), as_jint(right), as_jint(bottom));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ContentViewCore_onSmartClipDataExtracted = 0;
static void Java_ContentViewCore_onSmartClipDataExtracted(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& text,
    const base::android::JavaRefOrBare<jstring>& html,
    const base::android::JavaRefOrBare<jobject>& clipRect) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onSmartClipDataExtracted",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Landroid/graphics/Rect;"
")"
"V",
      &g_ContentViewCore_onSmartClipDataExtracted);

     env->CallVoidMethod(obj.obj(),
          method_id, text.obj(), html.obj(), clipRect.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_shouldBlockMediaRequest = 0;
static jboolean Java_ContentViewCore_shouldBlockMediaRequest(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& url) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "shouldBlockMediaRequest",

"("
"Ljava/lang/String;"
")"
"Z",
      &g_ContentViewCore_shouldBlockMediaRequest);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, url.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_onNativeFlingStopped = 0;
static void Java_ContentViewCore_onNativeFlingStopped(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "onNativeFlingStopped",

"("
")"
"V",
      &g_ContentViewCore_onNativeFlingStopped);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_ContentViewCore_isFullscreenRequiredForOrientationLock = 0;
static jboolean
    Java_ContentViewCore_isFullscreenRequiredForOrientationLock(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      ContentViewCore_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, ContentViewCore_clazz(env),
      "isFullscreenRequiredForOrientationLock",

"("
")"
"Z",
      &g_ContentViewCore_isFullscreenRequiredForOrientationLock);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsContentViewCore[] = {
    { "nativeInit",
"("
"Lorg/chromium/content_public/browser/WebContents;"
"Lorg/chromium/ui/base/ViewAndroidDelegate;"
"J"
"Ljava/util/HashSet;"
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeInit)
    },
    { "nativeFromWebContentsAndroid",
"("
"Lorg/chromium/content_public/browser/WebContents;"
")"
"Lorg/chromium/content/browser/ContentViewCore;",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeFromWebContentsAndroid)
    },
    { "nativeUpdateWindowAndroid",
"("
"J"
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeUpdateWindowAndroid)
    },
    { "nativeGetWebContentsAndroid",
"("
"J"
")"
"Lorg/chromium/content_public/browser/WebContents;",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeGetWebContentsAndroid)
    },
    { "nativeGetJavaWindowAndroid",
"("
"J"
")"
"Lorg/chromium/ui/base/WindowAndroid;",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeGetJavaWindowAndroid)
    },
    { "nativeOnJavaContentViewCoreDestroyed",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeOnJavaContentViewCoreDestroyed)
    },
    { "nativeSetFocus",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeSetFocus)
    },
    { "nativeSendOrientationChangeEvent",
"("
"J"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeSendOrientationChangeEvent)
    },
    { "nativeOnTouchEvent",
"("
"J"
"Landroid/view/MotionEvent;"
"J"
"I"
"I"
"I"
"I"
"F"
"F"
"F"
"F"
"I"
"I"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"I"
"I"
"I"
"I"
"Z"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeOnTouchEvent)
    },
    { "nativeSendMouseMoveEvent",
"("
"J"
"J"
"F"
"F"
"I"
")"
"I",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeSendMouseMoveEvent)
    },
    { "nativeSendMouseWheelEvent",
"("
"J"
"J"
"F"
"F"
"F"
"F"
"F"
")"
"I",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeSendMouseWheelEvent)
    },
    { "nativeScrollBegin",
"("
"J"
"J"
"F"
"F"
"F"
"F"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeScrollBegin)
    },
    { "nativeScrollEnd",
"("
"J"
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeScrollEnd)
    },
    { "nativeScrollBy",
"("
"J"
"J"
"F"
"F"
"F"
"F"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeScrollBy)
    },
    { "nativeFlingStart",
"("
"J"
"J"
"F"
"F"
"F"
"F"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeFlingStart)
    },
    { "nativeFlingCancel",
"("
"J"
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeFlingCancel)
    },
    { "nativeSingleTap",
"("
"J"
"J"
"F"
"F"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeSingleTap)
    },
    { "nativeDoubleTap",
"("
"J"
"J"
"F"
"F"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeDoubleTap)
    },
    { "nativeLongPress",
"("
"J"
"J"
"F"
"F"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeLongPress)
    },
    { "nativePinchBegin",
"("
"J"
"J"
"F"
"F"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativePinchBegin)
    },
    { "nativePinchEnd",
"("
"J"
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativePinchEnd)
    },
    { "nativePinchBy",
"("
"J"
"J"
"F"
"F"
"F"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativePinchBy)
    },
    { "nativeSelectBetweenCoordinates",
"("
"J"
"F"
"F"
"F"
"F"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeSelectBetweenCoordinates)
    },
    { "nativeDismissTextHandles",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeDismissTextHandles)
    },
    { "nativeSetTextHandlesTemporarilyHidden",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeSetTextHandlesTemporarilyHidden)
    },
    { "nativeResetGestureDetection",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeResetGestureDetection)
    },
    { "nativeSetDoubleTapSupportEnabled",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeSetDoubleTapSupportEnabled)
    },
    { "nativeSetMultiTouchZoomSupportEnabled",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeSetMultiTouchZoomSupportEnabled)
    },
    { "nativeSelectPopupMenuItems",
"("
"J"
"J"
"[I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeSelectPopupMenuItems)
    },
    { "nativeGetNativeImeAdapter",
"("
"J"
")"
"J",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeGetNativeImeAdapter)
    },
    { "nativeGetCurrentRenderProcessId",
"("
"J"
")"
"I",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeGetCurrentRenderProcessId)
    },
    { "nativeSetAllowJavascriptInterfacesInspection",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeSetAllowJavascriptInterfacesInspection)
    },
    { "nativeAddJavascriptInterface",
"("
"J"
"Ljava/lang/Object;"
"Ljava/lang/String;"
"Ljava/lang/Class;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeAddJavascriptInterface)
    },
    { "nativeRemoveJavascriptInterface",
"("
"J"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeRemoveJavascriptInterface)
    },
    { "nativeWasResized",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeWasResized)
    },
    { "nativeSetAccessibilityEnabled",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeSetAccessibilityEnabled)
    },
    { "nativeSetTextTrackSettings",
"("
"J"
"Z"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeSetTextTrackSettings)
    },
    { "nativeExtractSmartClipData",
"("
"J"
"I"
"I"
"I"
"I"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeExtractSmartClipData)
    },
    { "nativeSetBackgroundOpaque",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeSetBackgroundOpaque)
    },
    { "nativeIsTouchDragDropEnabled",
"("
"J"
")"
"Z",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeIsTouchDragDropEnabled)
    },
    { "nativeOnDragEvent",
"("
"J"
"I"
"I"
"I"
"I"
"I"
"[Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewCore_nativeOnDragEvent)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsContentViewCoreSize = arraysize(kMethodsContentViewCore);

  if (env->RegisterNatives(ContentViewCore_clazz(env),
                           kMethodsContentViewCore,
                           kMethodsContentViewCoreSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ContentViewCore_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace content

#endif  // org_chromium_content_browser_ContentViewCore_JNI
