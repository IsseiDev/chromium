// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/input/PopupTouchHandleDrawable

#ifndef org_chromium_content_browser_input_PopupTouchHandleDrawable_JNI
#define org_chromium_content_browser_input_PopupTouchHandleDrawable_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kPopupTouchHandleDrawableClassPath[] =
    "org/chromium/content/browser/input/PopupTouchHandleDrawable";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_PopupTouchHandleDrawable_clazz
    __attribute__((unused)) = 0;
#define PopupTouchHandleDrawable_clazz(env) base::android::LazyGetClass(env, kPopupTouchHandleDrawableClassPath, &g_PopupTouchHandleDrawable_clazz)

}  // namespace

namespace content {

// Step 2: method stubs.

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_PopupTouchHandleDrawable_create(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& contentViewCore) {
  CHECK_CLAZZ(env, PopupTouchHandleDrawable_clazz(env),
      PopupTouchHandleDrawable_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, PopupTouchHandleDrawable_clazz(env),
      "create",

"("
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"Lorg/chromium/content/browser/input/PopupTouchHandleDrawable;",
      &g_PopupTouchHandleDrawable_create);

  jobject ret =
      env->CallStaticObjectMethod(PopupTouchHandleDrawable_clazz(env),
          method_id, contentViewCore.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_setOrientation = 0;
static void Java_PopupTouchHandleDrawable_setOrientation(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper orientation,
    jboolean mirrorVertical,
    jboolean mirrorHorizontal) {
  CHECK_CLAZZ(env, obj.obj(),
      PopupTouchHandleDrawable_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PopupTouchHandleDrawable_clazz(env),
      "setOrientation",

"("
"I"
"Z"
"Z"
")"
"V",
      &g_PopupTouchHandleDrawable_setOrientation);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(orientation), mirrorVertical, mirrorHorizontal);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_destroy = 0;
static void Java_PopupTouchHandleDrawable_destroy(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      PopupTouchHandleDrawable_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PopupTouchHandleDrawable_clazz(env),
      "destroy",

"("
")"
"V",
      &g_PopupTouchHandleDrawable_destroy);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_show = 0;
static void Java_PopupTouchHandleDrawable_show(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      PopupTouchHandleDrawable_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PopupTouchHandleDrawable_clazz(env),
      "show",

"("
")"
"V",
      &g_PopupTouchHandleDrawable_show);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_hide = 0;
static void Java_PopupTouchHandleDrawable_hide(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      PopupTouchHandleDrawable_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PopupTouchHandleDrawable_clazz(env),
      "hide",

"("
")"
"V",
      &g_PopupTouchHandleDrawable_hide);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_setOrigin = 0;
static void Java_PopupTouchHandleDrawable_setOrigin(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jfloat originX,
    jfloat originY) {
  CHECK_CLAZZ(env, obj.obj(),
      PopupTouchHandleDrawable_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PopupTouchHandleDrawable_clazz(env),
      "setOrigin",

"("
"F"
"F"
")"
"V",
      &g_PopupTouchHandleDrawable_setOrigin);

     env->CallVoidMethod(obj.obj(),
          method_id, originX, originY);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_setVisible = 0;
static void Java_PopupTouchHandleDrawable_setVisible(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, jboolean visible) {
  CHECK_CLAZZ(env, obj.obj(),
      PopupTouchHandleDrawable_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PopupTouchHandleDrawable_clazz(env),
      "setVisible",

"("
"Z"
")"
"V",
      &g_PopupTouchHandleDrawable_setVisible);

     env->CallVoidMethod(obj.obj(),
          method_id, visible);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_getPositionX = 0;
static jint Java_PopupTouchHandleDrawable_getPositionX(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      PopupTouchHandleDrawable_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PopupTouchHandleDrawable_clazz(env),
      "getPositionX",

"("
")"
"I",
      &g_PopupTouchHandleDrawable_getPositionX);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_PopupTouchHandleDrawable_getHandleHorizontalPaddingRatio = 0;
static jfloat
    Java_PopupTouchHandleDrawable_getHandleHorizontalPaddingRatio(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      PopupTouchHandleDrawable_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PopupTouchHandleDrawable_clazz(env),
      "getHandleHorizontalPaddingRatio",

"("
")"
"F",
      &g_PopupTouchHandleDrawable_getHandleHorizontalPaddingRatio);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_getPositionY = 0;
static jint Java_PopupTouchHandleDrawable_getPositionY(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      PopupTouchHandleDrawable_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PopupTouchHandleDrawable_clazz(env),
      "getPositionY",

"("
")"
"I",
      &g_PopupTouchHandleDrawable_getPositionY);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_getVisibleWidth = 0;
static jint Java_PopupTouchHandleDrawable_getVisibleWidth(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      PopupTouchHandleDrawable_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PopupTouchHandleDrawable_clazz(env),
      "getVisibleWidth",

"("
")"
"I",
      &g_PopupTouchHandleDrawable_getVisibleWidth);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_getVisibleHeight = 0;
static jint Java_PopupTouchHandleDrawable_getVisibleHeight(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      PopupTouchHandleDrawable_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PopupTouchHandleDrawable_clazz(env),
      "getVisibleHeight",

"("
")"
"I",
      &g_PopupTouchHandleDrawable_getVisibleHeight);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

}  // namespace content

#endif  // org_chromium_content_browser_input_PopupTouchHandleDrawable_JNI
