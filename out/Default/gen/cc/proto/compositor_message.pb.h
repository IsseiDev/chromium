// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compositor_message.proto

#ifndef PROTOBUF_compositor_5fmessage_2eproto__INCLUDED
#define PROTOBUF_compositor_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "compositor_message_to_impl.pb.h"
#include "compositor_message_to_main.pb.h"
// @@protoc_insertion_point(includes)
#include "cc/proto/cc_proto_export.h"

namespace cc {
namespace proto {

// Internal implementation detail -- do not call these.
void CC_PROTO_EXPORT protobuf_AddDesc_compositor_5fmessage_2eproto();
void protobuf_AssignDesc_compositor_5fmessage_2eproto();
void protobuf_ShutdownFile_compositor_5fmessage_2eproto();

class CompositorMessage;

// ===================================================================

class CC_PROTO_EXPORT CompositorMessage : public ::google::protobuf::MessageLite {
public:
CompositorMessage();
virtual ~CompositorMessage();

CompositorMessage(const CompositorMessage& from);

inline CompositorMessage& operator=(const CompositorMessage& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _unknown_fields_.GetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

inline ::std::string* mutable_unknown_fields() {
return _unknown_fields_.MutableNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

static const CompositorMessage& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Returns the internal default instance pointer. This function can
// return NULL thus should not be used by the user. This is intended
// for Protobuf internal code. Please use default_instance() declared
// above instead.
static inline const CompositorMessage* internal_default_instance() {
return default_instance_;
}
#endif

GOOGLE_ATTRIBUTE_NOINLINE void Swap(CompositorMessage* other);

// implements Message ----------------------------------------------

inline CompositorMessage* New() const { return New(NULL); }

CompositorMessage* New(::google::protobuf::Arena* arena) const;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
void CopyFrom(const CompositorMessage& from);
void MergeFrom(const CompositorMessage& from);
void Clear();
bool IsInitialized() const;

int ByteSize() const;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input);
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const;
void DiscardUnknownFields();
int GetCachedSize() const { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(CompositorMessage* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return _arena_ptr_;
}
inline ::google::protobuf::Arena* MaybeArenaPtr() const {
return _arena_ptr_;
}
public:

::std::string GetTypeName() const;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional .cc.proto.CompositorMessageToMain to_main = 1;
bool has_to_main() const;
void clear_to_main();
static const int kToMainFieldNumber = 1;
const ::cc::proto::CompositorMessageToMain& to_main() const;
::cc::proto::CompositorMessageToMain* mutable_to_main();
::cc::proto::CompositorMessageToMain* release_to_main();
void set_allocated_to_main(::cc::proto::CompositorMessageToMain* to_main);

// optional .cc.proto.CompositorMessageToImpl to_impl = 2;
bool has_to_impl() const;
void clear_to_impl();
static const int kToImplFieldNumber = 2;
const ::cc::proto::CompositorMessageToImpl& to_impl() const;
::cc::proto::CompositorMessageToImpl* mutable_to_impl();
::cc::proto::CompositorMessageToImpl* release_to_impl();
void set_allocated_to_impl(::cc::proto::CompositorMessageToImpl* to_impl);

// @@protoc_insertion_point(class_scope:cc.proto.CompositorMessage)
private:
inline void set_has_to_main();
inline void clear_has_to_main();
inline void set_has_to_impl();
inline void clear_has_to_impl();

::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
::google::protobuf::Arena* _arena_ptr_;

::google::protobuf::uint32 _has_bits_[1];
mutable int _cached_size_;
::cc::proto::CompositorMessageToMain* to_main_;
::cc::proto::CompositorMessageToImpl* to_impl_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
friend void CC_PROTO_EXPORT protobuf_AddDesc_compositor_5fmessage_2eproto_impl();
#else
friend void CC_PROTO_EXPORT protobuf_AddDesc_compositor_5fmessage_2eproto();
#endif
friend void protobuf_AssignDesc_compositor_5fmessage_2eproto();
friend void protobuf_ShutdownFile_compositor_5fmessage_2eproto();

void InitAsDefaultInstance();
static CompositorMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CompositorMessage

// optional .cc.proto.CompositorMessageToMain to_main = 1;
inline bool CompositorMessage::has_to_main() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompositorMessage::set_has_to_main() {
_has_bits_[0] |= 0x00000001u;
}
inline void CompositorMessage::clear_has_to_main() {
_has_bits_[0] &= ~0x00000001u;
}
inline void CompositorMessage::clear_to_main() {
if (to_main_ != NULL) to_main_->::cc::proto::CompositorMessageToMain::Clear();
clear_has_to_main();
}
inline const ::cc::proto::CompositorMessageToMain& CompositorMessage::to_main() const {
// @@protoc_insertion_point(field_get:cc.proto.CompositorMessage.to_main)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
return to_main_ != NULL ? *to_main_ : *default_instance().to_main_;
#else
return to_main_ != NULL ? *to_main_ : *default_instance_->to_main_;
#endif
}
inline ::cc::proto::CompositorMessageToMain* CompositorMessage::mutable_to_main() {
set_has_to_main();
if (to_main_ == NULL) {
to_main_ = new ::cc::proto::CompositorMessageToMain;
}
// @@protoc_insertion_point(field_mutable:cc.proto.CompositorMessage.to_main)
return to_main_;
}
inline ::cc::proto::CompositorMessageToMain* CompositorMessage::release_to_main() {
// @@protoc_insertion_point(field_release:cc.proto.CompositorMessage.to_main)
clear_has_to_main();
::cc::proto::CompositorMessageToMain* temp = to_main_;
to_main_ = NULL;
return temp;
}
inline void CompositorMessage::set_allocated_to_main(::cc::proto::CompositorMessageToMain* to_main) {
delete to_main_;
to_main_ = to_main;
if (to_main) {
set_has_to_main();
} else {
clear_has_to_main();
}
// @@protoc_insertion_point(field_set_allocated:cc.proto.CompositorMessage.to_main)
}

// optional .cc.proto.CompositorMessageToImpl to_impl = 2;
inline bool CompositorMessage::has_to_impl() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompositorMessage::set_has_to_impl() {
_has_bits_[0] |= 0x00000002u;
}
inline void CompositorMessage::clear_has_to_impl() {
_has_bits_[0] &= ~0x00000002u;
}
inline void CompositorMessage::clear_to_impl() {
if (to_impl_ != NULL) to_impl_->::cc::proto::CompositorMessageToImpl::Clear();
clear_has_to_impl();
}
inline const ::cc::proto::CompositorMessageToImpl& CompositorMessage::to_impl() const {
// @@protoc_insertion_point(field_get:cc.proto.CompositorMessage.to_impl)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
return to_impl_ != NULL ? *to_impl_ : *default_instance().to_impl_;
#else
return to_impl_ != NULL ? *to_impl_ : *default_instance_->to_impl_;
#endif
}
inline ::cc::proto::CompositorMessageToImpl* CompositorMessage::mutable_to_impl() {
set_has_to_impl();
if (to_impl_ == NULL) {
to_impl_ = new ::cc::proto::CompositorMessageToImpl;
}
// @@protoc_insertion_point(field_mutable:cc.proto.CompositorMessage.to_impl)
return to_impl_;
}
inline ::cc::proto::CompositorMessageToImpl* CompositorMessage::release_to_impl() {
// @@protoc_insertion_point(field_release:cc.proto.CompositorMessage.to_impl)
clear_has_to_impl();
::cc::proto::CompositorMessageToImpl* temp = to_impl_;
to_impl_ = NULL;
return temp;
}
inline void CompositorMessage::set_allocated_to_impl(::cc::proto::CompositorMessageToImpl* to_impl) {
delete to_impl_;
to_impl_ = to_impl;
if (to_impl) {
set_has_to_impl();
} else {
clear_has_to_impl();
}
// @@protoc_insertion_point(field_set_allocated:cc.proto.CompositorMessage.to_impl)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_compositor_5fmessage_2eproto__INCLUDED
