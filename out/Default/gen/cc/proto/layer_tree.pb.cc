// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layer_tree.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "layer_tree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_layer_5ftree_2eproto() {
  delete LayerTree::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_layer_5ftree_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_layer_5ftree_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_layer_2eproto();
  ::cc::proto::protobuf_AddDesc_layer_5fselection_5fbound_2eproto();
  ::cc::proto::protobuf_AddDesc_property_5ftree_2eproto();
  ::cc::proto::protobuf_AddDesc_size_2eproto();
  ::cc::proto::protobuf_AddDesc_vector2df_2eproto();
  LayerTree::default_instance_ = new LayerTree();
  LayerTree::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_layer_5ftree_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_layer_5ftree_2eproto_once_);
void protobuf_AddDesc_layer_5ftree_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_layer_5ftree_2eproto_once_,
                 &protobuf_AddDesc_layer_5ftree_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_layer_5ftree_2eproto {
  StaticDescriptorInitializer_layer_5ftree_2eproto() {
    protobuf_AddDesc_layer_5ftree_2eproto();
  }
} static_descriptor_initializer_layer_5ftree_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForLayerTree(
    LayerTree* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerTree::kLayersThatShouldPushPropertiesFieldNumber;
const int LayerTree::kInPaintLayerContentsFieldNumber;
const int LayerTree::kOverscrollElasticityLayerIdFieldNumber;
const int LayerTree::kPageScaleLayerIdFieldNumber;
const int LayerTree::kInnerViewportScrollLayerIdFieldNumber;
const int LayerTree::kOuterViewportScrollLayerIdFieldNumber;
const int LayerTree::kNeedsFullTreeSyncFieldNumber;
const int LayerTree::kNeedsMetaInfoRecomputationFieldNumber;
const int LayerTree::kHudLayerIdFieldNumber;
const int LayerTree::kTopControlsShrinkBlinkSizeFieldNumber;
const int LayerTree::kTopControlsHeightFieldNumber;
const int LayerTree::kTopControlsShownRatioFieldNumber;
const int LayerTree::kDeviceScaleFactorFieldNumber;
const int LayerTree::kPaintedDeviceScaleFactorFieldNumber;
const int LayerTree::kPageScaleFactorFieldNumber;
const int LayerTree::kMinPageScaleFactorFieldNumber;
const int LayerTree::kMaxPageScaleFactorFieldNumber;
const int LayerTree::kDeviceViewportSizeFieldNumber;
const int LayerTree::kBackgroundColorFieldNumber;
const int LayerTree::kHasTransparentBackgroundFieldNumber;
const int LayerTree::kHaveScrollEventHandlersFieldNumber;
const int LayerTree::kTouchStartOrMoveEventListenerPropertiesFieldNumber;
const int LayerTree::kWheelEventListenerPropertiesFieldNumber;
const int LayerTree::kTouchEndOrCancelEventListenerPropertiesFieldNumber;
const int LayerTree::kRootLayerFieldNumber;
const int LayerTree::kSelectionFieldNumber;
const int LayerTree::kPropertyTreesFieldNumber;
const int LayerTree::kElasticOverscrollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerTree::LayerTree()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.LayerTree)
}

void LayerTree::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  device_viewport_size_ = const_cast< ::cc::proto::Size*>(
      ::cc::proto::Size::internal_default_instance());
#else
  device_viewport_size_ = const_cast< ::cc::proto::Size*>(&::cc::proto::Size::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  root_layer_ = const_cast< ::cc::proto::LayerNode*>(
      ::cc::proto::LayerNode::internal_default_instance());
#else
  root_layer_ = const_cast< ::cc::proto::LayerNode*>(&::cc::proto::LayerNode::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  selection_ = const_cast< ::cc::proto::LayerSelection*>(
      ::cc::proto::LayerSelection::internal_default_instance());
#else
  selection_ = const_cast< ::cc::proto::LayerSelection*>(&::cc::proto::LayerSelection::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  property_trees_ = const_cast< ::cc::proto::PropertyTrees*>(
      ::cc::proto::PropertyTrees::internal_default_instance());
#else
  property_trees_ = const_cast< ::cc::proto::PropertyTrees*>(&::cc::proto::PropertyTrees::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  elastic_overscroll_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  elastic_overscroll_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
}

LayerTree::LayerTree(const LayerTree& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.LayerTree)
}

void LayerTree::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  in_paint_layer_contents_ = false;
  overscroll_elasticity_layer_id_ = 0;
  page_scale_layer_id_ = 0;
  inner_viewport_scroll_layer_id_ = 0;
  outer_viewport_scroll_layer_id_ = 0;
  needs_full_tree_sync_ = false;
  needs_meta_info_recomputation_ = false;
  hud_layer_id_ = 0;
  top_controls_shrink_blink_size_ = false;
  top_controls_height_ = 0;
  top_controls_shown_ratio_ = 0;
  device_scale_factor_ = 0;
  painted_device_scale_factor_ = 0;
  page_scale_factor_ = 0;
  min_page_scale_factor_ = 0;
  max_page_scale_factor_ = 0;
  device_viewport_size_ = NULL;
  background_color_ = 0u;
  has_transparent_background_ = false;
  have_scroll_event_handlers_ = false;
  touch_start_or_move_event_listener_properties_ = 0u;
  wheel_event_listener_properties_ = 0u;
  touch_end_or_cancel_event_listener_properties_ = 0u;
  root_layer_ = NULL;
  selection_ = NULL;
  property_trees_ = NULL;
  elastic_overscroll_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerTree::~LayerTree() {
  // @@protoc_insertion_point(destructor:cc.proto.LayerTree)
  SharedDtor();
}

void LayerTree::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete device_viewport_size_;
    delete root_layer_;
    delete selection_;
    delete property_trees_;
    delete elastic_overscroll_;
  }
}

void LayerTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LayerTree& LayerTree::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_layer_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_layer_5ftree_2eproto();
#endif
  return *default_instance_;
}

LayerTree* LayerTree::default_instance_ = NULL;

LayerTree* LayerTree::New(::google::protobuf::Arena* arena) const {
  LayerTree* n = new LayerTree;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayerTree::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.LayerTree)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LayerTree, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LayerTree*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 254u) {
    ZR_(overscroll_elasticity_layer_id_, needs_meta_info_recomputation_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(top_controls_shrink_blink_size_, min_page_scale_factor_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(max_page_scale_factor_, touch_end_or_cancel_event_listener_properties_);
    if (has_device_viewport_size()) {
      if (device_viewport_size_ != NULL) device_viewport_size_->::cc::proto::Size::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 251658240u) {
    if (has_root_layer()) {
      if (root_layer_ != NULL) root_layer_->::cc::proto::LayerNode::Clear();
    }
    if (has_selection()) {
      if (selection_ != NULL) selection_->::cc::proto::LayerSelection::Clear();
    }
    if (has_property_trees()) {
      if (property_trees_ != NULL) property_trees_->::cc::proto::PropertyTrees::Clear();
    }
    if (has_elastic_overscroll()) {
      if (elastic_overscroll_ != NULL) elastic_overscroll_->::cc::proto::Vector2dF::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  layers_that_should_push_properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LayerTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForLayerTree, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.LayerTree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 layers_that_should_push_properties = 1;
      case 1: {
        if (tag == 8) {
         parse_layers_that_should_push_properties:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_layers_that_should_push_properties())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_layers_that_should_push_properties())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_layers_that_should_push_properties;
        if (input->ExpectTag(16)) goto parse_in_paint_layer_contents;
        break;
      }

      // optional bool in_paint_layer_contents = 2;
      case 2: {
        if (tag == 16) {
         parse_in_paint_layer_contents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_paint_layer_contents_)));
          set_has_in_paint_layer_contents();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_overscroll_elasticity_layer_id;
        break;
      }

      // optional int32 overscroll_elasticity_layer_id = 3;
      case 3: {
        if (tag == 24) {
         parse_overscroll_elasticity_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overscroll_elasticity_layer_id_)));
          set_has_overscroll_elasticity_layer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page_scale_layer_id;
        break;
      }

      // optional int32 page_scale_layer_id = 4;
      case 4: {
        if (tag == 32) {
         parse_page_scale_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_scale_layer_id_)));
          set_has_page_scale_layer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_inner_viewport_scroll_layer_id;
        break;
      }

      // optional int32 inner_viewport_scroll_layer_id = 5;
      case 5: {
        if (tag == 40) {
         parse_inner_viewport_scroll_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inner_viewport_scroll_layer_id_)));
          set_has_inner_viewport_scroll_layer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_outer_viewport_scroll_layer_id;
        break;
      }

      // optional int32 outer_viewport_scroll_layer_id = 6;
      case 6: {
        if (tag == 48) {
         parse_outer_viewport_scroll_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outer_viewport_scroll_layer_id_)));
          set_has_outer_viewport_scroll_layer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_needs_full_tree_sync;
        break;
      }

      // optional bool needs_full_tree_sync = 7;
      case 7: {
        if (tag == 56) {
         parse_needs_full_tree_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_full_tree_sync_)));
          set_has_needs_full_tree_sync();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_needs_meta_info_recomputation;
        break;
      }

      // optional bool needs_meta_info_recomputation = 8;
      case 8: {
        if (tag == 64) {
         parse_needs_meta_info_recomputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_meta_info_recomputation_)));
          set_has_needs_meta_info_recomputation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hud_layer_id;
        break;
      }

      // optional int32 hud_layer_id = 9;
      case 9: {
        if (tag == 72) {
         parse_hud_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hud_layer_id_)));
          set_has_hud_layer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_top_controls_shrink_blink_size;
        break;
      }

      // optional bool top_controls_shrink_blink_size = 10;
      case 10: {
        if (tag == 80) {
         parse_top_controls_shrink_blink_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &top_controls_shrink_blink_size_)));
          set_has_top_controls_shrink_blink_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_top_controls_height;
        break;
      }

      // optional float top_controls_height = 11;
      case 11: {
        if (tag == 93) {
         parse_top_controls_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_controls_height_)));
          set_has_top_controls_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_top_controls_shown_ratio;
        break;
      }

      // optional float top_controls_shown_ratio = 12;
      case 12: {
        if (tag == 101) {
         parse_top_controls_shown_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_controls_shown_ratio_)));
          set_has_top_controls_shown_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_device_scale_factor;
        break;
      }

      // optional float device_scale_factor = 13;
      case 13: {
        if (tag == 109) {
         parse_device_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &device_scale_factor_)));
          set_has_device_scale_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_painted_device_scale_factor;
        break;
      }

      // optional float painted_device_scale_factor = 14;
      case 14: {
        if (tag == 117) {
         parse_painted_device_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &painted_device_scale_factor_)));
          set_has_painted_device_scale_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_page_scale_factor;
        break;
      }

      // optional float page_scale_factor = 15;
      case 15: {
        if (tag == 125) {
         parse_page_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &page_scale_factor_)));
          set_has_page_scale_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_min_page_scale_factor;
        break;
      }

      // optional float min_page_scale_factor = 16;
      case 16: {
        if (tag == 133) {
         parse_min_page_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_page_scale_factor_)));
          set_has_min_page_scale_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_max_page_scale_factor;
        break;
      }

      // optional float max_page_scale_factor = 17;
      case 17: {
        if (tag == 141) {
         parse_max_page_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_page_scale_factor_)));
          set_has_max_page_scale_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_device_viewport_size;
        break;
      }

      // optional .cc.proto.Size device_viewport_size = 18;
      case 18: {
        if (tag == 146) {
         parse_device_viewport_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_viewport_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_background_color;
        break;
      }

      // optional uint32 background_color = 21;
      case 21: {
        if (tag == 168) {
         parse_background_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &background_color_)));
          set_has_background_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_has_transparent_background;
        break;
      }

      // optional bool has_transparent_background = 22;
      case 22: {
        if (tag == 176) {
         parse_has_transparent_background:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_transparent_background_)));
          set_has_has_transparent_background();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_have_scroll_event_handlers;
        break;
      }

      // optional bool have_scroll_event_handlers = 23;
      case 23: {
        if (tag == 184) {
         parse_have_scroll_event_handlers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_scroll_event_handlers_)));
          set_has_have_scroll_event_handlers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_touch_start_or_move_event_listener_properties;
        break;
      }

      // optional uint32 touch_start_or_move_event_listener_properties = 24;
      case 24: {
        if (tag == 192) {
         parse_touch_start_or_move_event_listener_properties:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &touch_start_or_move_event_listener_properties_)));
          set_has_touch_start_or_move_event_listener_properties();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_wheel_event_listener_properties;
        break;
      }

      // optional uint32 wheel_event_listener_properties = 25;
      case 25: {
        if (tag == 200) {
         parse_wheel_event_listener_properties:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wheel_event_listener_properties_)));
          set_has_wheel_event_listener_properties();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_touch_end_or_cancel_event_listener_properties;
        break;
      }

      // optional uint32 touch_end_or_cancel_event_listener_properties = 26;
      case 26: {
        if (tag == 208) {
         parse_touch_end_or_cancel_event_listener_properties:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &touch_end_or_cancel_event_listener_properties_)));
          set_has_touch_end_or_cancel_event_listener_properties();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_root_layer;
        break;
      }

      // optional .cc.proto.LayerNode root_layer = 27;
      case 27: {
        if (tag == 218) {
         parse_root_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_selection;
        break;
      }

      // optional .cc.proto.LayerSelection selection = 29;
      case 29: {
        if (tag == 234) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_property_trees;
        break;
      }

      // optional .cc.proto.PropertyTrees property_trees = 30;
      case 30: {
        if (tag == 242) {
         parse_property_trees:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property_trees()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_elastic_overscroll;
        break;
      }

      // optional .cc.proto.Vector2dF elastic_overscroll = 31;
      case 31: {
        if (tag == 250) {
         parse_elastic_overscroll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elastic_overscroll()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.LayerTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.LayerTree)
  return false;
#undef DO_
}

void LayerTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.LayerTree)
  // repeated int32 layers_that_should_push_properties = 1;
  for (int i = 0; i < this->layers_that_should_push_properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->layers_that_should_push_properties(i), output);
  }

  // optional bool in_paint_layer_contents = 2;
  if (has_in_paint_layer_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->in_paint_layer_contents(), output);
  }

  // optional int32 overscroll_elasticity_layer_id = 3;
  if (has_overscroll_elasticity_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->overscroll_elasticity_layer_id(), output);
  }

  // optional int32 page_scale_layer_id = 4;
  if (has_page_scale_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_scale_layer_id(), output);
  }

  // optional int32 inner_viewport_scroll_layer_id = 5;
  if (has_inner_viewport_scroll_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->inner_viewport_scroll_layer_id(), output);
  }

  // optional int32 outer_viewport_scroll_layer_id = 6;
  if (has_outer_viewport_scroll_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->outer_viewport_scroll_layer_id(), output);
  }

  // optional bool needs_full_tree_sync = 7;
  if (has_needs_full_tree_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->needs_full_tree_sync(), output);
  }

  // optional bool needs_meta_info_recomputation = 8;
  if (has_needs_meta_info_recomputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->needs_meta_info_recomputation(), output);
  }

  // optional int32 hud_layer_id = 9;
  if (has_hud_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hud_layer_id(), output);
  }

  // optional bool top_controls_shrink_blink_size = 10;
  if (has_top_controls_shrink_blink_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->top_controls_shrink_blink_size(), output);
  }

  // optional float top_controls_height = 11;
  if (has_top_controls_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->top_controls_height(), output);
  }

  // optional float top_controls_shown_ratio = 12;
  if (has_top_controls_shown_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->top_controls_shown_ratio(), output);
  }

  // optional float device_scale_factor = 13;
  if (has_device_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->device_scale_factor(), output);
  }

  // optional float painted_device_scale_factor = 14;
  if (has_painted_device_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->painted_device_scale_factor(), output);
  }

  // optional float page_scale_factor = 15;
  if (has_page_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->page_scale_factor(), output);
  }

  // optional float min_page_scale_factor = 16;
  if (has_min_page_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->min_page_scale_factor(), output);
  }

  // optional float max_page_scale_factor = 17;
  if (has_max_page_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->max_page_scale_factor(), output);
  }

  // optional .cc.proto.Size device_viewport_size = 18;
  if (has_device_viewport_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, *this->device_viewport_size_, output);
  }

  // optional uint32 background_color = 21;
  if (has_background_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->background_color(), output);
  }

  // optional bool has_transparent_background = 22;
  if (has_has_transparent_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->has_transparent_background(), output);
  }

  // optional bool have_scroll_event_handlers = 23;
  if (has_have_scroll_event_handlers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->have_scroll_event_handlers(), output);
  }

  // optional uint32 touch_start_or_move_event_listener_properties = 24;
  if (has_touch_start_or_move_event_listener_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->touch_start_or_move_event_listener_properties(), output);
  }

  // optional uint32 wheel_event_listener_properties = 25;
  if (has_wheel_event_listener_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->wheel_event_listener_properties(), output);
  }

  // optional uint32 touch_end_or_cancel_event_listener_properties = 26;
  if (has_touch_end_or_cancel_event_listener_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->touch_end_or_cancel_event_listener_properties(), output);
  }

  // optional .cc.proto.LayerNode root_layer = 27;
  if (has_root_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, *this->root_layer_, output);
  }

  // optional .cc.proto.LayerSelection selection = 29;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, *this->selection_, output);
  }

  // optional .cc.proto.PropertyTrees property_trees = 30;
  if (has_property_trees()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, *this->property_trees_, output);
  }

  // optional .cc.proto.Vector2dF elastic_overscroll = 31;
  if (has_elastic_overscroll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, *this->elastic_overscroll_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.LayerTree)
}

int LayerTree::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.LayerTree)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 254u) {
    // optional bool in_paint_layer_contents = 2;
    if (has_in_paint_layer_contents()) {
      total_size += 1 + 1;
    }

    // optional int32 overscroll_elasticity_layer_id = 3;
    if (has_overscroll_elasticity_layer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overscroll_elasticity_layer_id());
    }

    // optional int32 page_scale_layer_id = 4;
    if (has_page_scale_layer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_scale_layer_id());
    }

    // optional int32 inner_viewport_scroll_layer_id = 5;
    if (has_inner_viewport_scroll_layer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inner_viewport_scroll_layer_id());
    }

    // optional int32 outer_viewport_scroll_layer_id = 6;
    if (has_outer_viewport_scroll_layer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outer_viewport_scroll_layer_id());
    }

    // optional bool needs_full_tree_sync = 7;
    if (has_needs_full_tree_sync()) {
      total_size += 1 + 1;
    }

    // optional bool needs_meta_info_recomputation = 8;
    if (has_needs_meta_info_recomputation()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 hud_layer_id = 9;
    if (has_hud_layer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hud_layer_id());
    }

    // optional bool top_controls_shrink_blink_size = 10;
    if (has_top_controls_shrink_blink_size()) {
      total_size += 1 + 1;
    }

    // optional float top_controls_height = 11;
    if (has_top_controls_height()) {
      total_size += 1 + 4;
    }

    // optional float top_controls_shown_ratio = 12;
    if (has_top_controls_shown_ratio()) {
      total_size += 1 + 4;
    }

    // optional float device_scale_factor = 13;
    if (has_device_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional float painted_device_scale_factor = 14;
    if (has_painted_device_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional float page_scale_factor = 15;
    if (has_page_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional float min_page_scale_factor = 16;
    if (has_min_page_scale_factor()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float max_page_scale_factor = 17;
    if (has_max_page_scale_factor()) {
      total_size += 2 + 4;
    }

    // optional .cc.proto.Size device_viewport_size = 18;
    if (has_device_viewport_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_viewport_size_);
    }

    // optional uint32 background_color = 21;
    if (has_background_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->background_color());
    }

    // optional bool has_transparent_background = 22;
    if (has_has_transparent_background()) {
      total_size += 2 + 1;
    }

    // optional bool have_scroll_event_handlers = 23;
    if (has_have_scroll_event_handlers()) {
      total_size += 2 + 1;
    }

    // optional uint32 touch_start_or_move_event_listener_properties = 24;
    if (has_touch_start_or_move_event_listener_properties()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->touch_start_or_move_event_listener_properties());
    }

    // optional uint32 wheel_event_listener_properties = 25;
    if (has_wheel_event_listener_properties()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wheel_event_listener_properties());
    }

    // optional uint32 touch_end_or_cancel_event_listener_properties = 26;
    if (has_touch_end_or_cancel_event_listener_properties()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->touch_end_or_cancel_event_listener_properties());
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional .cc.proto.LayerNode root_layer = 27;
    if (has_root_layer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->root_layer_);
    }

    // optional .cc.proto.LayerSelection selection = 29;
    if (has_selection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->selection_);
    }

    // optional .cc.proto.PropertyTrees property_trees = 30;
    if (has_property_trees()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->property_trees_);
    }

    // optional .cc.proto.Vector2dF elastic_overscroll = 31;
    if (has_elastic_overscroll()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->elastic_overscroll_);
    }

  }
  // repeated int32 layers_that_should_push_properties = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->layers_that_should_push_properties_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->layers_that_should_push_properties(i));
    }
    total_size += 1 * this->layers_that_should_push_properties_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerTree::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LayerTree*>(&from));
}

void LayerTree::MergeFrom(const LayerTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.LayerTree)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  layers_that_should_push_properties_.MergeFrom(from.layers_that_should_push_properties_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_in_paint_layer_contents()) {
      set_in_paint_layer_contents(from.in_paint_layer_contents());
    }
    if (from.has_overscroll_elasticity_layer_id()) {
      set_overscroll_elasticity_layer_id(from.overscroll_elasticity_layer_id());
    }
    if (from.has_page_scale_layer_id()) {
      set_page_scale_layer_id(from.page_scale_layer_id());
    }
    if (from.has_inner_viewport_scroll_layer_id()) {
      set_inner_viewport_scroll_layer_id(from.inner_viewport_scroll_layer_id());
    }
    if (from.has_outer_viewport_scroll_layer_id()) {
      set_outer_viewport_scroll_layer_id(from.outer_viewport_scroll_layer_id());
    }
    if (from.has_needs_full_tree_sync()) {
      set_needs_full_tree_sync(from.needs_full_tree_sync());
    }
    if (from.has_needs_meta_info_recomputation()) {
      set_needs_meta_info_recomputation(from.needs_meta_info_recomputation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hud_layer_id()) {
      set_hud_layer_id(from.hud_layer_id());
    }
    if (from.has_top_controls_shrink_blink_size()) {
      set_top_controls_shrink_blink_size(from.top_controls_shrink_blink_size());
    }
    if (from.has_top_controls_height()) {
      set_top_controls_height(from.top_controls_height());
    }
    if (from.has_top_controls_shown_ratio()) {
      set_top_controls_shown_ratio(from.top_controls_shown_ratio());
    }
    if (from.has_device_scale_factor()) {
      set_device_scale_factor(from.device_scale_factor());
    }
    if (from.has_painted_device_scale_factor()) {
      set_painted_device_scale_factor(from.painted_device_scale_factor());
    }
    if (from.has_page_scale_factor()) {
      set_page_scale_factor(from.page_scale_factor());
    }
    if (from.has_min_page_scale_factor()) {
      set_min_page_scale_factor(from.min_page_scale_factor());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_page_scale_factor()) {
      set_max_page_scale_factor(from.max_page_scale_factor());
    }
    if (from.has_device_viewport_size()) {
      mutable_device_viewport_size()->::cc::proto::Size::MergeFrom(from.device_viewport_size());
    }
    if (from.has_background_color()) {
      set_background_color(from.background_color());
    }
    if (from.has_has_transparent_background()) {
      set_has_transparent_background(from.has_transparent_background());
    }
    if (from.has_have_scroll_event_handlers()) {
      set_have_scroll_event_handlers(from.have_scroll_event_handlers());
    }
    if (from.has_touch_start_or_move_event_listener_properties()) {
      set_touch_start_or_move_event_listener_properties(from.touch_start_or_move_event_listener_properties());
    }
    if (from.has_wheel_event_listener_properties()) {
      set_wheel_event_listener_properties(from.wheel_event_listener_properties());
    }
    if (from.has_touch_end_or_cancel_event_listener_properties()) {
      set_touch_end_or_cancel_event_listener_properties(from.touch_end_or_cancel_event_listener_properties());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_root_layer()) {
      mutable_root_layer()->::cc::proto::LayerNode::MergeFrom(from.root_layer());
    }
    if (from.has_selection()) {
      mutable_selection()->::cc::proto::LayerSelection::MergeFrom(from.selection());
    }
    if (from.has_property_trees()) {
      mutable_property_trees()->::cc::proto::PropertyTrees::MergeFrom(from.property_trees());
    }
    if (from.has_elastic_overscroll()) {
      mutable_elastic_overscroll()->::cc::proto::Vector2dF::MergeFrom(from.elastic_overscroll());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void LayerTree::CopyFrom(const LayerTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.LayerTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerTree::IsInitialized() const {

  if (has_property_trees()) {
    if (!this->property_trees_->IsInitialized()) return false;
  }
  return true;
}

void LayerTree::Swap(LayerTree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayerTree::InternalSwap(LayerTree* other) {
  layers_that_should_push_properties_.UnsafeArenaSwap(&other->layers_that_should_push_properties_);
  std::swap(in_paint_layer_contents_, other->in_paint_layer_contents_);
  std::swap(overscroll_elasticity_layer_id_, other->overscroll_elasticity_layer_id_);
  std::swap(page_scale_layer_id_, other->page_scale_layer_id_);
  std::swap(inner_viewport_scroll_layer_id_, other->inner_viewport_scroll_layer_id_);
  std::swap(outer_viewport_scroll_layer_id_, other->outer_viewport_scroll_layer_id_);
  std::swap(needs_full_tree_sync_, other->needs_full_tree_sync_);
  std::swap(needs_meta_info_recomputation_, other->needs_meta_info_recomputation_);
  std::swap(hud_layer_id_, other->hud_layer_id_);
  std::swap(top_controls_shrink_blink_size_, other->top_controls_shrink_blink_size_);
  std::swap(top_controls_height_, other->top_controls_height_);
  std::swap(top_controls_shown_ratio_, other->top_controls_shown_ratio_);
  std::swap(device_scale_factor_, other->device_scale_factor_);
  std::swap(painted_device_scale_factor_, other->painted_device_scale_factor_);
  std::swap(page_scale_factor_, other->page_scale_factor_);
  std::swap(min_page_scale_factor_, other->min_page_scale_factor_);
  std::swap(max_page_scale_factor_, other->max_page_scale_factor_);
  std::swap(device_viewport_size_, other->device_viewport_size_);
  std::swap(background_color_, other->background_color_);
  std::swap(has_transparent_background_, other->has_transparent_background_);
  std::swap(have_scroll_event_handlers_, other->have_scroll_event_handlers_);
  std::swap(touch_start_or_move_event_listener_properties_, other->touch_start_or_move_event_listener_properties_);
  std::swap(wheel_event_listener_properties_, other->wheel_event_listener_properties_);
  std::swap(touch_end_or_cancel_event_listener_properties_, other->touch_end_or_cancel_event_listener_properties_);
  std::swap(root_layer_, other->root_layer_);
  std::swap(selection_, other->selection_);
  std::swap(property_trees_, other->property_trees_);
  std::swap(elastic_overscroll_, other->elastic_overscroll_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LayerTree::GetTypeName() const {
  return "cc.proto.LayerTree";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerTree

// repeated int32 layers_that_should_push_properties = 1;
int LayerTree::layers_that_should_push_properties_size() const {
  return layers_that_should_push_properties_.size();
}
void LayerTree::clear_layers_that_should_push_properties() {
  layers_that_should_push_properties_.Clear();
}
 ::google::protobuf::int32 LayerTree::layers_that_should_push_properties(int index) const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.layers_that_should_push_properties)
  return layers_that_should_push_properties_.Get(index);
}
 void LayerTree::set_layers_that_should_push_properties(int index, ::google::protobuf::int32 value) {
  layers_that_should_push_properties_.Set(index, value);
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.layers_that_should_push_properties)
}
 void LayerTree::add_layers_that_should_push_properties(::google::protobuf::int32 value) {
  layers_that_should_push_properties_.Add(value);
  // @@protoc_insertion_point(field_add:cc.proto.LayerTree.layers_that_should_push_properties)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LayerTree::layers_that_should_push_properties() const {
  // @@protoc_insertion_point(field_list:cc.proto.LayerTree.layers_that_should_push_properties)
  return layers_that_should_push_properties_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LayerTree::mutable_layers_that_should_push_properties() {
  // @@protoc_insertion_point(field_mutable_list:cc.proto.LayerTree.layers_that_should_push_properties)
  return &layers_that_should_push_properties_;
}

// optional bool in_paint_layer_contents = 2;
bool LayerTree::has_in_paint_layer_contents() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LayerTree::set_has_in_paint_layer_contents() {
  _has_bits_[0] |= 0x00000002u;
}
void LayerTree::clear_has_in_paint_layer_contents() {
  _has_bits_[0] &= ~0x00000002u;
}
void LayerTree::clear_in_paint_layer_contents() {
  in_paint_layer_contents_ = false;
  clear_has_in_paint_layer_contents();
}
 bool LayerTree::in_paint_layer_contents() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.in_paint_layer_contents)
  return in_paint_layer_contents_;
}
 void LayerTree::set_in_paint_layer_contents(bool value) {
  set_has_in_paint_layer_contents();
  in_paint_layer_contents_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.in_paint_layer_contents)
}

// optional int32 overscroll_elasticity_layer_id = 3;
bool LayerTree::has_overscroll_elasticity_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LayerTree::set_has_overscroll_elasticity_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
void LayerTree::clear_has_overscroll_elasticity_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void LayerTree::clear_overscroll_elasticity_layer_id() {
  overscroll_elasticity_layer_id_ = 0;
  clear_has_overscroll_elasticity_layer_id();
}
 ::google::protobuf::int32 LayerTree::overscroll_elasticity_layer_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.overscroll_elasticity_layer_id)
  return overscroll_elasticity_layer_id_;
}
 void LayerTree::set_overscroll_elasticity_layer_id(::google::protobuf::int32 value) {
  set_has_overscroll_elasticity_layer_id();
  overscroll_elasticity_layer_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.overscroll_elasticity_layer_id)
}

// optional int32 page_scale_layer_id = 4;
bool LayerTree::has_page_scale_layer_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LayerTree::set_has_page_scale_layer_id() {
  _has_bits_[0] |= 0x00000008u;
}
void LayerTree::clear_has_page_scale_layer_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void LayerTree::clear_page_scale_layer_id() {
  page_scale_layer_id_ = 0;
  clear_has_page_scale_layer_id();
}
 ::google::protobuf::int32 LayerTree::page_scale_layer_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.page_scale_layer_id)
  return page_scale_layer_id_;
}
 void LayerTree::set_page_scale_layer_id(::google::protobuf::int32 value) {
  set_has_page_scale_layer_id();
  page_scale_layer_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.page_scale_layer_id)
}

// optional int32 inner_viewport_scroll_layer_id = 5;
bool LayerTree::has_inner_viewport_scroll_layer_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LayerTree::set_has_inner_viewport_scroll_layer_id() {
  _has_bits_[0] |= 0x00000010u;
}
void LayerTree::clear_has_inner_viewport_scroll_layer_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void LayerTree::clear_inner_viewport_scroll_layer_id() {
  inner_viewport_scroll_layer_id_ = 0;
  clear_has_inner_viewport_scroll_layer_id();
}
 ::google::protobuf::int32 LayerTree::inner_viewport_scroll_layer_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.inner_viewport_scroll_layer_id)
  return inner_viewport_scroll_layer_id_;
}
 void LayerTree::set_inner_viewport_scroll_layer_id(::google::protobuf::int32 value) {
  set_has_inner_viewport_scroll_layer_id();
  inner_viewport_scroll_layer_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.inner_viewport_scroll_layer_id)
}

// optional int32 outer_viewport_scroll_layer_id = 6;
bool LayerTree::has_outer_viewport_scroll_layer_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LayerTree::set_has_outer_viewport_scroll_layer_id() {
  _has_bits_[0] |= 0x00000020u;
}
void LayerTree::clear_has_outer_viewport_scroll_layer_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void LayerTree::clear_outer_viewport_scroll_layer_id() {
  outer_viewport_scroll_layer_id_ = 0;
  clear_has_outer_viewport_scroll_layer_id();
}
 ::google::protobuf::int32 LayerTree::outer_viewport_scroll_layer_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.outer_viewport_scroll_layer_id)
  return outer_viewport_scroll_layer_id_;
}
 void LayerTree::set_outer_viewport_scroll_layer_id(::google::protobuf::int32 value) {
  set_has_outer_viewport_scroll_layer_id();
  outer_viewport_scroll_layer_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.outer_viewport_scroll_layer_id)
}

// optional bool needs_full_tree_sync = 7;
bool LayerTree::has_needs_full_tree_sync() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LayerTree::set_has_needs_full_tree_sync() {
  _has_bits_[0] |= 0x00000040u;
}
void LayerTree::clear_has_needs_full_tree_sync() {
  _has_bits_[0] &= ~0x00000040u;
}
void LayerTree::clear_needs_full_tree_sync() {
  needs_full_tree_sync_ = false;
  clear_has_needs_full_tree_sync();
}
 bool LayerTree::needs_full_tree_sync() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.needs_full_tree_sync)
  return needs_full_tree_sync_;
}
 void LayerTree::set_needs_full_tree_sync(bool value) {
  set_has_needs_full_tree_sync();
  needs_full_tree_sync_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.needs_full_tree_sync)
}

// optional bool needs_meta_info_recomputation = 8;
bool LayerTree::has_needs_meta_info_recomputation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LayerTree::set_has_needs_meta_info_recomputation() {
  _has_bits_[0] |= 0x00000080u;
}
void LayerTree::clear_has_needs_meta_info_recomputation() {
  _has_bits_[0] &= ~0x00000080u;
}
void LayerTree::clear_needs_meta_info_recomputation() {
  needs_meta_info_recomputation_ = false;
  clear_has_needs_meta_info_recomputation();
}
 bool LayerTree::needs_meta_info_recomputation() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.needs_meta_info_recomputation)
  return needs_meta_info_recomputation_;
}
 void LayerTree::set_needs_meta_info_recomputation(bool value) {
  set_has_needs_meta_info_recomputation();
  needs_meta_info_recomputation_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.needs_meta_info_recomputation)
}

// optional int32 hud_layer_id = 9;
bool LayerTree::has_hud_layer_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LayerTree::set_has_hud_layer_id() {
  _has_bits_[0] |= 0x00000100u;
}
void LayerTree::clear_has_hud_layer_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void LayerTree::clear_hud_layer_id() {
  hud_layer_id_ = 0;
  clear_has_hud_layer_id();
}
 ::google::protobuf::int32 LayerTree::hud_layer_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.hud_layer_id)
  return hud_layer_id_;
}
 void LayerTree::set_hud_layer_id(::google::protobuf::int32 value) {
  set_has_hud_layer_id();
  hud_layer_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.hud_layer_id)
}

// optional bool top_controls_shrink_blink_size = 10;
bool LayerTree::has_top_controls_shrink_blink_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LayerTree::set_has_top_controls_shrink_blink_size() {
  _has_bits_[0] |= 0x00000200u;
}
void LayerTree::clear_has_top_controls_shrink_blink_size() {
  _has_bits_[0] &= ~0x00000200u;
}
void LayerTree::clear_top_controls_shrink_blink_size() {
  top_controls_shrink_blink_size_ = false;
  clear_has_top_controls_shrink_blink_size();
}
 bool LayerTree::top_controls_shrink_blink_size() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.top_controls_shrink_blink_size)
  return top_controls_shrink_blink_size_;
}
 void LayerTree::set_top_controls_shrink_blink_size(bool value) {
  set_has_top_controls_shrink_blink_size();
  top_controls_shrink_blink_size_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.top_controls_shrink_blink_size)
}

// optional float top_controls_height = 11;
bool LayerTree::has_top_controls_height() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LayerTree::set_has_top_controls_height() {
  _has_bits_[0] |= 0x00000400u;
}
void LayerTree::clear_has_top_controls_height() {
  _has_bits_[0] &= ~0x00000400u;
}
void LayerTree::clear_top_controls_height() {
  top_controls_height_ = 0;
  clear_has_top_controls_height();
}
 float LayerTree::top_controls_height() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.top_controls_height)
  return top_controls_height_;
}
 void LayerTree::set_top_controls_height(float value) {
  set_has_top_controls_height();
  top_controls_height_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.top_controls_height)
}

// optional float top_controls_shown_ratio = 12;
bool LayerTree::has_top_controls_shown_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LayerTree::set_has_top_controls_shown_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
void LayerTree::clear_has_top_controls_shown_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
void LayerTree::clear_top_controls_shown_ratio() {
  top_controls_shown_ratio_ = 0;
  clear_has_top_controls_shown_ratio();
}
 float LayerTree::top_controls_shown_ratio() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.top_controls_shown_ratio)
  return top_controls_shown_ratio_;
}
 void LayerTree::set_top_controls_shown_ratio(float value) {
  set_has_top_controls_shown_ratio();
  top_controls_shown_ratio_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.top_controls_shown_ratio)
}

// optional float device_scale_factor = 13;
bool LayerTree::has_device_scale_factor() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LayerTree::set_has_device_scale_factor() {
  _has_bits_[0] |= 0x00001000u;
}
void LayerTree::clear_has_device_scale_factor() {
  _has_bits_[0] &= ~0x00001000u;
}
void LayerTree::clear_device_scale_factor() {
  device_scale_factor_ = 0;
  clear_has_device_scale_factor();
}
 float LayerTree::device_scale_factor() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.device_scale_factor)
  return device_scale_factor_;
}
 void LayerTree::set_device_scale_factor(float value) {
  set_has_device_scale_factor();
  device_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.device_scale_factor)
}

// optional float painted_device_scale_factor = 14;
bool LayerTree::has_painted_device_scale_factor() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LayerTree::set_has_painted_device_scale_factor() {
  _has_bits_[0] |= 0x00002000u;
}
void LayerTree::clear_has_painted_device_scale_factor() {
  _has_bits_[0] &= ~0x00002000u;
}
void LayerTree::clear_painted_device_scale_factor() {
  painted_device_scale_factor_ = 0;
  clear_has_painted_device_scale_factor();
}
 float LayerTree::painted_device_scale_factor() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.painted_device_scale_factor)
  return painted_device_scale_factor_;
}
 void LayerTree::set_painted_device_scale_factor(float value) {
  set_has_painted_device_scale_factor();
  painted_device_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.painted_device_scale_factor)
}

// optional float page_scale_factor = 15;
bool LayerTree::has_page_scale_factor() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void LayerTree::set_has_page_scale_factor() {
  _has_bits_[0] |= 0x00004000u;
}
void LayerTree::clear_has_page_scale_factor() {
  _has_bits_[0] &= ~0x00004000u;
}
void LayerTree::clear_page_scale_factor() {
  page_scale_factor_ = 0;
  clear_has_page_scale_factor();
}
 float LayerTree::page_scale_factor() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.page_scale_factor)
  return page_scale_factor_;
}
 void LayerTree::set_page_scale_factor(float value) {
  set_has_page_scale_factor();
  page_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.page_scale_factor)
}

// optional float min_page_scale_factor = 16;
bool LayerTree::has_min_page_scale_factor() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void LayerTree::set_has_min_page_scale_factor() {
  _has_bits_[0] |= 0x00008000u;
}
void LayerTree::clear_has_min_page_scale_factor() {
  _has_bits_[0] &= ~0x00008000u;
}
void LayerTree::clear_min_page_scale_factor() {
  min_page_scale_factor_ = 0;
  clear_has_min_page_scale_factor();
}
 float LayerTree::min_page_scale_factor() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.min_page_scale_factor)
  return min_page_scale_factor_;
}
 void LayerTree::set_min_page_scale_factor(float value) {
  set_has_min_page_scale_factor();
  min_page_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.min_page_scale_factor)
}

// optional float max_page_scale_factor = 17;
bool LayerTree::has_max_page_scale_factor() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void LayerTree::set_has_max_page_scale_factor() {
  _has_bits_[0] |= 0x00010000u;
}
void LayerTree::clear_has_max_page_scale_factor() {
  _has_bits_[0] &= ~0x00010000u;
}
void LayerTree::clear_max_page_scale_factor() {
  max_page_scale_factor_ = 0;
  clear_has_max_page_scale_factor();
}
 float LayerTree::max_page_scale_factor() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.max_page_scale_factor)
  return max_page_scale_factor_;
}
 void LayerTree::set_max_page_scale_factor(float value) {
  set_has_max_page_scale_factor();
  max_page_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.max_page_scale_factor)
}

// optional .cc.proto.Size device_viewport_size = 18;
bool LayerTree::has_device_viewport_size() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void LayerTree::set_has_device_viewport_size() {
  _has_bits_[0] |= 0x00020000u;
}
void LayerTree::clear_has_device_viewport_size() {
  _has_bits_[0] &= ~0x00020000u;
}
void LayerTree::clear_device_viewport_size() {
  if (device_viewport_size_ != NULL) device_viewport_size_->::cc::proto::Size::Clear();
  clear_has_device_viewport_size();
}
const ::cc::proto::Size& LayerTree::device_viewport_size() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.device_viewport_size)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return device_viewport_size_ != NULL ? *device_viewport_size_ : *default_instance().device_viewport_size_;
#else
  return device_viewport_size_ != NULL ? *device_viewport_size_ : *default_instance_->device_viewport_size_;
#endif
}
::cc::proto::Size* LayerTree::mutable_device_viewport_size() {
  set_has_device_viewport_size();
  if (device_viewport_size_ == NULL) {
    device_viewport_size_ = new ::cc::proto::Size;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.LayerTree.device_viewport_size)
  return device_viewport_size_;
}
::cc::proto::Size* LayerTree::release_device_viewport_size() {
  // @@protoc_insertion_point(field_release:cc.proto.LayerTree.device_viewport_size)
  clear_has_device_viewport_size();
  ::cc::proto::Size* temp = device_viewport_size_;
  device_viewport_size_ = NULL;
  return temp;
}
void LayerTree::set_allocated_device_viewport_size(::cc::proto::Size* device_viewport_size) {
  delete device_viewport_size_;
  device_viewport_size_ = device_viewport_size;
  if (device_viewport_size) {
    set_has_device_viewport_size();
  } else {
    clear_has_device_viewport_size();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.LayerTree.device_viewport_size)
}

// optional uint32 background_color = 21;
bool LayerTree::has_background_color() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void LayerTree::set_has_background_color() {
  _has_bits_[0] |= 0x00040000u;
}
void LayerTree::clear_has_background_color() {
  _has_bits_[0] &= ~0x00040000u;
}
void LayerTree::clear_background_color() {
  background_color_ = 0u;
  clear_has_background_color();
}
 ::google::protobuf::uint32 LayerTree::background_color() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.background_color)
  return background_color_;
}
 void LayerTree::set_background_color(::google::protobuf::uint32 value) {
  set_has_background_color();
  background_color_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.background_color)
}

// optional bool has_transparent_background = 22;
bool LayerTree::has_has_transparent_background() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void LayerTree::set_has_has_transparent_background() {
  _has_bits_[0] |= 0x00080000u;
}
void LayerTree::clear_has_has_transparent_background() {
  _has_bits_[0] &= ~0x00080000u;
}
void LayerTree::clear_has_transparent_background() {
  has_transparent_background_ = false;
  clear_has_has_transparent_background();
}
 bool LayerTree::has_transparent_background() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.has_transparent_background)
  return has_transparent_background_;
}
 void LayerTree::set_has_transparent_background(bool value) {
  set_has_has_transparent_background();
  has_transparent_background_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.has_transparent_background)
}

// optional bool have_scroll_event_handlers = 23;
bool LayerTree::has_have_scroll_event_handlers() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void LayerTree::set_has_have_scroll_event_handlers() {
  _has_bits_[0] |= 0x00100000u;
}
void LayerTree::clear_has_have_scroll_event_handlers() {
  _has_bits_[0] &= ~0x00100000u;
}
void LayerTree::clear_have_scroll_event_handlers() {
  have_scroll_event_handlers_ = false;
  clear_has_have_scroll_event_handlers();
}
 bool LayerTree::have_scroll_event_handlers() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.have_scroll_event_handlers)
  return have_scroll_event_handlers_;
}
 void LayerTree::set_have_scroll_event_handlers(bool value) {
  set_has_have_scroll_event_handlers();
  have_scroll_event_handlers_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.have_scroll_event_handlers)
}

// optional uint32 touch_start_or_move_event_listener_properties = 24;
bool LayerTree::has_touch_start_or_move_event_listener_properties() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void LayerTree::set_has_touch_start_or_move_event_listener_properties() {
  _has_bits_[0] |= 0x00200000u;
}
void LayerTree::clear_has_touch_start_or_move_event_listener_properties() {
  _has_bits_[0] &= ~0x00200000u;
}
void LayerTree::clear_touch_start_or_move_event_listener_properties() {
  touch_start_or_move_event_listener_properties_ = 0u;
  clear_has_touch_start_or_move_event_listener_properties();
}
 ::google::protobuf::uint32 LayerTree::touch_start_or_move_event_listener_properties() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.touch_start_or_move_event_listener_properties)
  return touch_start_or_move_event_listener_properties_;
}
 void LayerTree::set_touch_start_or_move_event_listener_properties(::google::protobuf::uint32 value) {
  set_has_touch_start_or_move_event_listener_properties();
  touch_start_or_move_event_listener_properties_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.touch_start_or_move_event_listener_properties)
}

// optional uint32 wheel_event_listener_properties = 25;
bool LayerTree::has_wheel_event_listener_properties() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void LayerTree::set_has_wheel_event_listener_properties() {
  _has_bits_[0] |= 0x00400000u;
}
void LayerTree::clear_has_wheel_event_listener_properties() {
  _has_bits_[0] &= ~0x00400000u;
}
void LayerTree::clear_wheel_event_listener_properties() {
  wheel_event_listener_properties_ = 0u;
  clear_has_wheel_event_listener_properties();
}
 ::google::protobuf::uint32 LayerTree::wheel_event_listener_properties() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.wheel_event_listener_properties)
  return wheel_event_listener_properties_;
}
 void LayerTree::set_wheel_event_listener_properties(::google::protobuf::uint32 value) {
  set_has_wheel_event_listener_properties();
  wheel_event_listener_properties_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.wheel_event_listener_properties)
}

// optional uint32 touch_end_or_cancel_event_listener_properties = 26;
bool LayerTree::has_touch_end_or_cancel_event_listener_properties() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void LayerTree::set_has_touch_end_or_cancel_event_listener_properties() {
  _has_bits_[0] |= 0x00800000u;
}
void LayerTree::clear_has_touch_end_or_cancel_event_listener_properties() {
  _has_bits_[0] &= ~0x00800000u;
}
void LayerTree::clear_touch_end_or_cancel_event_listener_properties() {
  touch_end_or_cancel_event_listener_properties_ = 0u;
  clear_has_touch_end_or_cancel_event_listener_properties();
}
 ::google::protobuf::uint32 LayerTree::touch_end_or_cancel_event_listener_properties() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.touch_end_or_cancel_event_listener_properties)
  return touch_end_or_cancel_event_listener_properties_;
}
 void LayerTree::set_touch_end_or_cancel_event_listener_properties(::google::protobuf::uint32 value) {
  set_has_touch_end_or_cancel_event_listener_properties();
  touch_end_or_cancel_event_listener_properties_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTree.touch_end_or_cancel_event_listener_properties)
}

// optional .cc.proto.LayerNode root_layer = 27;
bool LayerTree::has_root_layer() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void LayerTree::set_has_root_layer() {
  _has_bits_[0] |= 0x01000000u;
}
void LayerTree::clear_has_root_layer() {
  _has_bits_[0] &= ~0x01000000u;
}
void LayerTree::clear_root_layer() {
  if (root_layer_ != NULL) root_layer_->::cc::proto::LayerNode::Clear();
  clear_has_root_layer();
}
const ::cc::proto::LayerNode& LayerTree::root_layer() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.root_layer)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return root_layer_ != NULL ? *root_layer_ : *default_instance().root_layer_;
#else
  return root_layer_ != NULL ? *root_layer_ : *default_instance_->root_layer_;
#endif
}
::cc::proto::LayerNode* LayerTree::mutable_root_layer() {
  set_has_root_layer();
  if (root_layer_ == NULL) {
    root_layer_ = new ::cc::proto::LayerNode;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.LayerTree.root_layer)
  return root_layer_;
}
::cc::proto::LayerNode* LayerTree::release_root_layer() {
  // @@protoc_insertion_point(field_release:cc.proto.LayerTree.root_layer)
  clear_has_root_layer();
  ::cc::proto::LayerNode* temp = root_layer_;
  root_layer_ = NULL;
  return temp;
}
void LayerTree::set_allocated_root_layer(::cc::proto::LayerNode* root_layer) {
  delete root_layer_;
  root_layer_ = root_layer;
  if (root_layer) {
    set_has_root_layer();
  } else {
    clear_has_root_layer();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.LayerTree.root_layer)
}

// optional .cc.proto.LayerSelection selection = 29;
bool LayerTree::has_selection() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void LayerTree::set_has_selection() {
  _has_bits_[0] |= 0x02000000u;
}
void LayerTree::clear_has_selection() {
  _has_bits_[0] &= ~0x02000000u;
}
void LayerTree::clear_selection() {
  if (selection_ != NULL) selection_->::cc::proto::LayerSelection::Clear();
  clear_has_selection();
}
const ::cc::proto::LayerSelection& LayerTree::selection() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.selection)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return selection_ != NULL ? *selection_ : *default_instance().selection_;
#else
  return selection_ != NULL ? *selection_ : *default_instance_->selection_;
#endif
}
::cc::proto::LayerSelection* LayerTree::mutable_selection() {
  set_has_selection();
  if (selection_ == NULL) {
    selection_ = new ::cc::proto::LayerSelection;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.LayerTree.selection)
  return selection_;
}
::cc::proto::LayerSelection* LayerTree::release_selection() {
  // @@protoc_insertion_point(field_release:cc.proto.LayerTree.selection)
  clear_has_selection();
  ::cc::proto::LayerSelection* temp = selection_;
  selection_ = NULL;
  return temp;
}
void LayerTree::set_allocated_selection(::cc::proto::LayerSelection* selection) {
  delete selection_;
  selection_ = selection;
  if (selection) {
    set_has_selection();
  } else {
    clear_has_selection();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.LayerTree.selection)
}

// optional .cc.proto.PropertyTrees property_trees = 30;
bool LayerTree::has_property_trees() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void LayerTree::set_has_property_trees() {
  _has_bits_[0] |= 0x04000000u;
}
void LayerTree::clear_has_property_trees() {
  _has_bits_[0] &= ~0x04000000u;
}
void LayerTree::clear_property_trees() {
  if (property_trees_ != NULL) property_trees_->::cc::proto::PropertyTrees::Clear();
  clear_has_property_trees();
}
const ::cc::proto::PropertyTrees& LayerTree::property_trees() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.property_trees)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return property_trees_ != NULL ? *property_trees_ : *default_instance().property_trees_;
#else
  return property_trees_ != NULL ? *property_trees_ : *default_instance_->property_trees_;
#endif
}
::cc::proto::PropertyTrees* LayerTree::mutable_property_trees() {
  set_has_property_trees();
  if (property_trees_ == NULL) {
    property_trees_ = new ::cc::proto::PropertyTrees;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.LayerTree.property_trees)
  return property_trees_;
}
::cc::proto::PropertyTrees* LayerTree::release_property_trees() {
  // @@protoc_insertion_point(field_release:cc.proto.LayerTree.property_trees)
  clear_has_property_trees();
  ::cc::proto::PropertyTrees* temp = property_trees_;
  property_trees_ = NULL;
  return temp;
}
void LayerTree::set_allocated_property_trees(::cc::proto::PropertyTrees* property_trees) {
  delete property_trees_;
  property_trees_ = property_trees;
  if (property_trees) {
    set_has_property_trees();
  } else {
    clear_has_property_trees();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.LayerTree.property_trees)
}

// optional .cc.proto.Vector2dF elastic_overscroll = 31;
bool LayerTree::has_elastic_overscroll() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void LayerTree::set_has_elastic_overscroll() {
  _has_bits_[0] |= 0x08000000u;
}
void LayerTree::clear_has_elastic_overscroll() {
  _has_bits_[0] &= ~0x08000000u;
}
void LayerTree::clear_elastic_overscroll() {
  if (elastic_overscroll_ != NULL) elastic_overscroll_->::cc::proto::Vector2dF::Clear();
  clear_has_elastic_overscroll();
}
const ::cc::proto::Vector2dF& LayerTree::elastic_overscroll() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTree.elastic_overscroll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return elastic_overscroll_ != NULL ? *elastic_overscroll_ : *default_instance().elastic_overscroll_;
#else
  return elastic_overscroll_ != NULL ? *elastic_overscroll_ : *default_instance_->elastic_overscroll_;
#endif
}
::cc::proto::Vector2dF* LayerTree::mutable_elastic_overscroll() {
  set_has_elastic_overscroll();
  if (elastic_overscroll_ == NULL) {
    elastic_overscroll_ = new ::cc::proto::Vector2dF;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.LayerTree.elastic_overscroll)
  return elastic_overscroll_;
}
::cc::proto::Vector2dF* LayerTree::release_elastic_overscroll() {
  // @@protoc_insertion_point(field_release:cc.proto.LayerTree.elastic_overscroll)
  clear_has_elastic_overscroll();
  ::cc::proto::Vector2dF* temp = elastic_overscroll_;
  elastic_overscroll_ = NULL;
  return temp;
}
void LayerTree::set_allocated_elastic_overscroll(::cc::proto::Vector2dF* elastic_overscroll) {
  delete elastic_overscroll_;
  elastic_overscroll_ = elastic_overscroll;
  if (elastic_overscroll) {
    set_has_elastic_overscroll();
  } else {
    clear_has_elastic_overscroll();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.LayerTree.elastic_overscroll)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
