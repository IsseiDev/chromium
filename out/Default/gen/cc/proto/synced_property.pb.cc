// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: synced_property.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "synced_property.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_synced_5fproperty_2eproto() {
  delete ScrollOffsetGroup::default_instance_;
  delete SyncedProperty::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_synced_5fproperty_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_synced_5fproperty_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_scroll_5foffset_2eproto();
  ScrollOffsetGroup::default_instance_ = new ScrollOffsetGroup();
  SyncedProperty::default_instance_ = new SyncedProperty();
  ScrollOffsetGroup::default_instance_->InitAsDefaultInstance();
  SyncedProperty::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_synced_5fproperty_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_synced_5fproperty_2eproto_once_);
void protobuf_AddDesc_synced_5fproperty_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_synced_5fproperty_2eproto_once_,
                 &protobuf_AddDesc_synced_5fproperty_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_synced_5fproperty_2eproto {
  StaticDescriptorInitializer_synced_5fproperty_2eproto() {
    protobuf_AddDesc_synced_5fproperty_2eproto();
  }
} static_descriptor_initializer_synced_5fproperty_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForScrollOffsetGroup(
    ScrollOffsetGroup* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScrollOffsetGroup::kPendingBaseFieldNumber;
const int ScrollOffsetGroup::kPendingDeltaFieldNumber;
const int ScrollOffsetGroup::kActiveBaseFieldNumber;
const int ScrollOffsetGroup::kActiveDeltaFieldNumber;
const int ScrollOffsetGroup::kSentDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScrollOffsetGroup::ScrollOffsetGroup()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.ScrollOffsetGroup)
}

void ScrollOffsetGroup::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pending_base_ = const_cast< ::cc::proto::ScrollOffset*>(
      ::cc::proto::ScrollOffset::internal_default_instance());
#else
  pending_base_ = const_cast< ::cc::proto::ScrollOffset*>(&::cc::proto::ScrollOffset::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pending_delta_ = const_cast< ::cc::proto::ScrollOffset*>(
      ::cc::proto::ScrollOffset::internal_default_instance());
#else
  pending_delta_ = const_cast< ::cc::proto::ScrollOffset*>(&::cc::proto::ScrollOffset::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  active_base_ = const_cast< ::cc::proto::ScrollOffset*>(
      ::cc::proto::ScrollOffset::internal_default_instance());
#else
  active_base_ = const_cast< ::cc::proto::ScrollOffset*>(&::cc::proto::ScrollOffset::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  active_delta_ = const_cast< ::cc::proto::ScrollOffset*>(
      ::cc::proto::ScrollOffset::internal_default_instance());
#else
  active_delta_ = const_cast< ::cc::proto::ScrollOffset*>(&::cc::proto::ScrollOffset::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sent_delta_ = const_cast< ::cc::proto::ScrollOffset*>(
      ::cc::proto::ScrollOffset::internal_default_instance());
#else
  sent_delta_ = const_cast< ::cc::proto::ScrollOffset*>(&::cc::proto::ScrollOffset::default_instance());
#endif
}

ScrollOffsetGroup::ScrollOffsetGroup(const ScrollOffsetGroup& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.ScrollOffsetGroup)
}

void ScrollOffsetGroup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pending_base_ = NULL;
  pending_delta_ = NULL;
  active_base_ = NULL;
  active_delta_ = NULL;
  sent_delta_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScrollOffsetGroup::~ScrollOffsetGroup() {
  // @@protoc_insertion_point(destructor:cc.proto.ScrollOffsetGroup)
  SharedDtor();
}

void ScrollOffsetGroup::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pending_base_;
    delete pending_delta_;
    delete active_base_;
    delete active_delta_;
    delete sent_delta_;
  }
}

void ScrollOffsetGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScrollOffsetGroup& ScrollOffsetGroup::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fproperty_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fproperty_2eproto();
#endif
  return *default_instance_;
}

ScrollOffsetGroup* ScrollOffsetGroup::default_instance_ = NULL;

ScrollOffsetGroup* ScrollOffsetGroup::New(::google::protobuf::Arena* arena) const {
  ScrollOffsetGroup* n = new ScrollOffsetGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScrollOffsetGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.ScrollOffsetGroup)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_pending_base()) {
      if (pending_base_ != NULL) pending_base_->::cc::proto::ScrollOffset::Clear();
    }
    if (has_pending_delta()) {
      if (pending_delta_ != NULL) pending_delta_->::cc::proto::ScrollOffset::Clear();
    }
    if (has_active_base()) {
      if (active_base_ != NULL) active_base_->::cc::proto::ScrollOffset::Clear();
    }
    if (has_active_delta()) {
      if (active_delta_ != NULL) active_delta_->::cc::proto::ScrollOffset::Clear();
    }
    if (has_sent_delta()) {
      if (sent_delta_ != NULL) sent_delta_->::cc::proto::ScrollOffset::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ScrollOffsetGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForScrollOffsetGroup, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.ScrollOffsetGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.ScrollOffset pending_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pending_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pending_delta;
        break;
      }

      // optional .cc.proto.ScrollOffset pending_delta = 2;
      case 2: {
        if (tag == 18) {
         parse_pending_delta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pending_delta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_active_base;
        break;
      }

      // optional .cc.proto.ScrollOffset active_base = 3;
      case 3: {
        if (tag == 26) {
         parse_active_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_active_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_active_delta;
        break;
      }

      // optional .cc.proto.ScrollOffset active_delta = 4;
      case 4: {
        if (tag == 34) {
         parse_active_delta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_active_delta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sent_delta;
        break;
      }

      // optional .cc.proto.ScrollOffset sent_delta = 5;
      case 5: {
        if (tag == 42) {
         parse_sent_delta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sent_delta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.ScrollOffsetGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.ScrollOffsetGroup)
  return false;
#undef DO_
}

void ScrollOffsetGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.ScrollOffsetGroup)
  // optional .cc.proto.ScrollOffset pending_base = 1;
  if (has_pending_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->pending_base_, output);
  }

  // optional .cc.proto.ScrollOffset pending_delta = 2;
  if (has_pending_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->pending_delta_, output);
  }

  // optional .cc.proto.ScrollOffset active_base = 3;
  if (has_active_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->active_base_, output);
  }

  // optional .cc.proto.ScrollOffset active_delta = 4;
  if (has_active_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->active_delta_, output);
  }

  // optional .cc.proto.ScrollOffset sent_delta = 5;
  if (has_sent_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->sent_delta_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.ScrollOffsetGroup)
}

int ScrollOffsetGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.ScrollOffsetGroup)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .cc.proto.ScrollOffset pending_base = 1;
    if (has_pending_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pending_base_);
    }

    // optional .cc.proto.ScrollOffset pending_delta = 2;
    if (has_pending_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pending_delta_);
    }

    // optional .cc.proto.ScrollOffset active_base = 3;
    if (has_active_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->active_base_);
    }

    // optional .cc.proto.ScrollOffset active_delta = 4;
    if (has_active_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->active_delta_);
    }

    // optional .cc.proto.ScrollOffset sent_delta = 5;
    if (has_sent_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sent_delta_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScrollOffsetGroup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScrollOffsetGroup*>(&from));
}

void ScrollOffsetGroup::MergeFrom(const ScrollOffsetGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.ScrollOffsetGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pending_base()) {
      mutable_pending_base()->::cc::proto::ScrollOffset::MergeFrom(from.pending_base());
    }
    if (from.has_pending_delta()) {
      mutable_pending_delta()->::cc::proto::ScrollOffset::MergeFrom(from.pending_delta());
    }
    if (from.has_active_base()) {
      mutable_active_base()->::cc::proto::ScrollOffset::MergeFrom(from.active_base());
    }
    if (from.has_active_delta()) {
      mutable_active_delta()->::cc::proto::ScrollOffset::MergeFrom(from.active_delta());
    }
    if (from.has_sent_delta()) {
      mutable_sent_delta()->::cc::proto::ScrollOffset::MergeFrom(from.sent_delta());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ScrollOffsetGroup::CopyFrom(const ScrollOffsetGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.ScrollOffsetGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScrollOffsetGroup::IsInitialized() const {

  return true;
}

void ScrollOffsetGroup::Swap(ScrollOffsetGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScrollOffsetGroup::InternalSwap(ScrollOffsetGroup* other) {
  std::swap(pending_base_, other->pending_base_);
  std::swap(pending_delta_, other->pending_delta_);
  std::swap(active_base_, other->active_base_);
  std::swap(active_delta_, other->active_delta_);
  std::swap(sent_delta_, other->sent_delta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ScrollOffsetGroup::GetTypeName() const {
  return "cc.proto.ScrollOffsetGroup";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScrollOffsetGroup

// optional .cc.proto.ScrollOffset pending_base = 1;
bool ScrollOffsetGroup::has_pending_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScrollOffsetGroup::set_has_pending_base() {
  _has_bits_[0] |= 0x00000001u;
}
void ScrollOffsetGroup::clear_has_pending_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScrollOffsetGroup::clear_pending_base() {
  if (pending_base_ != NULL) pending_base_->::cc::proto::ScrollOffset::Clear();
  clear_has_pending_base();
}
const ::cc::proto::ScrollOffset& ScrollOffsetGroup::pending_base() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollOffsetGroup.pending_base)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pending_base_ != NULL ? *pending_base_ : *default_instance().pending_base_;
#else
  return pending_base_ != NULL ? *pending_base_ : *default_instance_->pending_base_;
#endif
}
::cc::proto::ScrollOffset* ScrollOffsetGroup::mutable_pending_base() {
  set_has_pending_base();
  if (pending_base_ == NULL) {
    pending_base_ = new ::cc::proto::ScrollOffset;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.ScrollOffsetGroup.pending_base)
  return pending_base_;
}
::cc::proto::ScrollOffset* ScrollOffsetGroup::release_pending_base() {
  // @@protoc_insertion_point(field_release:cc.proto.ScrollOffsetGroup.pending_base)
  clear_has_pending_base();
  ::cc::proto::ScrollOffset* temp = pending_base_;
  pending_base_ = NULL;
  return temp;
}
void ScrollOffsetGroup::set_allocated_pending_base(::cc::proto::ScrollOffset* pending_base) {
  delete pending_base_;
  pending_base_ = pending_base;
  if (pending_base) {
    set_has_pending_base();
  } else {
    clear_has_pending_base();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.ScrollOffsetGroup.pending_base)
}

// optional .cc.proto.ScrollOffset pending_delta = 2;
bool ScrollOffsetGroup::has_pending_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScrollOffsetGroup::set_has_pending_delta() {
  _has_bits_[0] |= 0x00000002u;
}
void ScrollOffsetGroup::clear_has_pending_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScrollOffsetGroup::clear_pending_delta() {
  if (pending_delta_ != NULL) pending_delta_->::cc::proto::ScrollOffset::Clear();
  clear_has_pending_delta();
}
const ::cc::proto::ScrollOffset& ScrollOffsetGroup::pending_delta() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollOffsetGroup.pending_delta)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pending_delta_ != NULL ? *pending_delta_ : *default_instance().pending_delta_;
#else
  return pending_delta_ != NULL ? *pending_delta_ : *default_instance_->pending_delta_;
#endif
}
::cc::proto::ScrollOffset* ScrollOffsetGroup::mutable_pending_delta() {
  set_has_pending_delta();
  if (pending_delta_ == NULL) {
    pending_delta_ = new ::cc::proto::ScrollOffset;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.ScrollOffsetGroup.pending_delta)
  return pending_delta_;
}
::cc::proto::ScrollOffset* ScrollOffsetGroup::release_pending_delta() {
  // @@protoc_insertion_point(field_release:cc.proto.ScrollOffsetGroup.pending_delta)
  clear_has_pending_delta();
  ::cc::proto::ScrollOffset* temp = pending_delta_;
  pending_delta_ = NULL;
  return temp;
}
void ScrollOffsetGroup::set_allocated_pending_delta(::cc::proto::ScrollOffset* pending_delta) {
  delete pending_delta_;
  pending_delta_ = pending_delta;
  if (pending_delta) {
    set_has_pending_delta();
  } else {
    clear_has_pending_delta();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.ScrollOffsetGroup.pending_delta)
}

// optional .cc.proto.ScrollOffset active_base = 3;
bool ScrollOffsetGroup::has_active_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScrollOffsetGroup::set_has_active_base() {
  _has_bits_[0] |= 0x00000004u;
}
void ScrollOffsetGroup::clear_has_active_base() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScrollOffsetGroup::clear_active_base() {
  if (active_base_ != NULL) active_base_->::cc::proto::ScrollOffset::Clear();
  clear_has_active_base();
}
const ::cc::proto::ScrollOffset& ScrollOffsetGroup::active_base() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollOffsetGroup.active_base)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return active_base_ != NULL ? *active_base_ : *default_instance().active_base_;
#else
  return active_base_ != NULL ? *active_base_ : *default_instance_->active_base_;
#endif
}
::cc::proto::ScrollOffset* ScrollOffsetGroup::mutable_active_base() {
  set_has_active_base();
  if (active_base_ == NULL) {
    active_base_ = new ::cc::proto::ScrollOffset;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.ScrollOffsetGroup.active_base)
  return active_base_;
}
::cc::proto::ScrollOffset* ScrollOffsetGroup::release_active_base() {
  // @@protoc_insertion_point(field_release:cc.proto.ScrollOffsetGroup.active_base)
  clear_has_active_base();
  ::cc::proto::ScrollOffset* temp = active_base_;
  active_base_ = NULL;
  return temp;
}
void ScrollOffsetGroup::set_allocated_active_base(::cc::proto::ScrollOffset* active_base) {
  delete active_base_;
  active_base_ = active_base;
  if (active_base) {
    set_has_active_base();
  } else {
    clear_has_active_base();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.ScrollOffsetGroup.active_base)
}

// optional .cc.proto.ScrollOffset active_delta = 4;
bool ScrollOffsetGroup::has_active_delta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScrollOffsetGroup::set_has_active_delta() {
  _has_bits_[0] |= 0x00000008u;
}
void ScrollOffsetGroup::clear_has_active_delta() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScrollOffsetGroup::clear_active_delta() {
  if (active_delta_ != NULL) active_delta_->::cc::proto::ScrollOffset::Clear();
  clear_has_active_delta();
}
const ::cc::proto::ScrollOffset& ScrollOffsetGroup::active_delta() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollOffsetGroup.active_delta)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return active_delta_ != NULL ? *active_delta_ : *default_instance().active_delta_;
#else
  return active_delta_ != NULL ? *active_delta_ : *default_instance_->active_delta_;
#endif
}
::cc::proto::ScrollOffset* ScrollOffsetGroup::mutable_active_delta() {
  set_has_active_delta();
  if (active_delta_ == NULL) {
    active_delta_ = new ::cc::proto::ScrollOffset;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.ScrollOffsetGroup.active_delta)
  return active_delta_;
}
::cc::proto::ScrollOffset* ScrollOffsetGroup::release_active_delta() {
  // @@protoc_insertion_point(field_release:cc.proto.ScrollOffsetGroup.active_delta)
  clear_has_active_delta();
  ::cc::proto::ScrollOffset* temp = active_delta_;
  active_delta_ = NULL;
  return temp;
}
void ScrollOffsetGroup::set_allocated_active_delta(::cc::proto::ScrollOffset* active_delta) {
  delete active_delta_;
  active_delta_ = active_delta;
  if (active_delta) {
    set_has_active_delta();
  } else {
    clear_has_active_delta();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.ScrollOffsetGroup.active_delta)
}

// optional .cc.proto.ScrollOffset sent_delta = 5;
bool ScrollOffsetGroup::has_sent_delta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScrollOffsetGroup::set_has_sent_delta() {
  _has_bits_[0] |= 0x00000010u;
}
void ScrollOffsetGroup::clear_has_sent_delta() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScrollOffsetGroup::clear_sent_delta() {
  if (sent_delta_ != NULL) sent_delta_->::cc::proto::ScrollOffset::Clear();
  clear_has_sent_delta();
}
const ::cc::proto::ScrollOffset& ScrollOffsetGroup::sent_delta() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollOffsetGroup.sent_delta)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sent_delta_ != NULL ? *sent_delta_ : *default_instance().sent_delta_;
#else
  return sent_delta_ != NULL ? *sent_delta_ : *default_instance_->sent_delta_;
#endif
}
::cc::proto::ScrollOffset* ScrollOffsetGroup::mutable_sent_delta() {
  set_has_sent_delta();
  if (sent_delta_ == NULL) {
    sent_delta_ = new ::cc::proto::ScrollOffset;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.ScrollOffsetGroup.sent_delta)
  return sent_delta_;
}
::cc::proto::ScrollOffset* ScrollOffsetGroup::release_sent_delta() {
  // @@protoc_insertion_point(field_release:cc.proto.ScrollOffsetGroup.sent_delta)
  clear_has_sent_delta();
  ::cc::proto::ScrollOffset* temp = sent_delta_;
  sent_delta_ = NULL;
  return temp;
}
void ScrollOffsetGroup::set_allocated_sent_delta(::cc::proto::ScrollOffset* sent_delta) {
  delete sent_delta_;
  sent_delta_ = sent_delta;
  if (sent_delta) {
    set_has_sent_delta();
  } else {
    clear_has_sent_delta();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.ScrollOffsetGroup.sent_delta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSyncedProperty(
    SyncedProperty* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncedProperty::kClobberActiveValueFieldNumber;
const int SyncedProperty::kScrollOffsetGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncedProperty::SyncedProperty()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.SyncedProperty)
}

void SyncedProperty::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scroll_offset_group_ = const_cast< ::cc::proto::ScrollOffsetGroup*>(
      ::cc::proto::ScrollOffsetGroup::internal_default_instance());
#else
  scroll_offset_group_ = const_cast< ::cc::proto::ScrollOffsetGroup*>(&::cc::proto::ScrollOffsetGroup::default_instance());
#endif
}

SyncedProperty::SyncedProperty(const SyncedProperty& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.SyncedProperty)
}

void SyncedProperty::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clobber_active_value_ = false;
  scroll_offset_group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncedProperty::~SyncedProperty() {
  // @@protoc_insertion_point(destructor:cc.proto.SyncedProperty)
  SharedDtor();
}

void SyncedProperty::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete scroll_offset_group_;
  }
}

void SyncedProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncedProperty& SyncedProperty::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fproperty_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fproperty_2eproto();
#endif
  return *default_instance_;
}

SyncedProperty* SyncedProperty::default_instance_ = NULL;

SyncedProperty* SyncedProperty::New(::google::protobuf::Arena* arena) const {
  SyncedProperty* n = new SyncedProperty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncedProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.SyncedProperty)
  if (_has_bits_[0 / 32] & 3u) {
    clobber_active_value_ = false;
    if (has_scroll_offset_group()) {
      if (scroll_offset_group_ != NULL) scroll_offset_group_->::cc::proto::ScrollOffsetGroup::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SyncedProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSyncedProperty, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.SyncedProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool clobber_active_value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clobber_active_value_)));
          set_has_clobber_active_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_scroll_offset_group;
        break;
      }

      // optional .cc.proto.ScrollOffsetGroup scroll_offset_group = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_scroll_offset_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_offset_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.SyncedProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.SyncedProperty)
  return false;
#undef DO_
}

void SyncedProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.SyncedProperty)
  // optional bool clobber_active_value = 1;
  if (has_clobber_active_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->clobber_active_value(), output);
  }

  // optional .cc.proto.ScrollOffsetGroup scroll_offset_group = 1001;
  if (has_scroll_offset_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1001, *this->scroll_offset_group_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.SyncedProperty)
}

int SyncedProperty::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.SyncedProperty)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool clobber_active_value = 1;
    if (has_clobber_active_value()) {
      total_size += 1 + 1;
    }

    // optional .cc.proto.ScrollOffsetGroup scroll_offset_group = 1001;
    if (has_scroll_offset_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scroll_offset_group_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncedProperty::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncedProperty*>(&from));
}

void SyncedProperty::MergeFrom(const SyncedProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.SyncedProperty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clobber_active_value()) {
      set_clobber_active_value(from.clobber_active_value());
    }
    if (from.has_scroll_offset_group()) {
      mutable_scroll_offset_group()->::cc::proto::ScrollOffsetGroup::MergeFrom(from.scroll_offset_group());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SyncedProperty::CopyFrom(const SyncedProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.SyncedProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncedProperty::IsInitialized() const {

  return true;
}

void SyncedProperty::Swap(SyncedProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncedProperty::InternalSwap(SyncedProperty* other) {
  std::swap(clobber_active_value_, other->clobber_active_value_);
  std::swap(scroll_offset_group_, other->scroll_offset_group_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SyncedProperty::GetTypeName() const {
  return "cc.proto.SyncedProperty";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncedProperty

// optional bool clobber_active_value = 1;
bool SyncedProperty::has_clobber_active_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncedProperty::set_has_clobber_active_value() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncedProperty::clear_has_clobber_active_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncedProperty::clear_clobber_active_value() {
  clobber_active_value_ = false;
  clear_has_clobber_active_value();
}
 bool SyncedProperty::clobber_active_value() const {
  // @@protoc_insertion_point(field_get:cc.proto.SyncedProperty.clobber_active_value)
  return clobber_active_value_;
}
 void SyncedProperty::set_clobber_active_value(bool value) {
  set_has_clobber_active_value();
  clobber_active_value_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.SyncedProperty.clobber_active_value)
}

// optional .cc.proto.ScrollOffsetGroup scroll_offset_group = 1001;
bool SyncedProperty::has_scroll_offset_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SyncedProperty::set_has_scroll_offset_group() {
  _has_bits_[0] |= 0x00000002u;
}
void SyncedProperty::clear_has_scroll_offset_group() {
  _has_bits_[0] &= ~0x00000002u;
}
void SyncedProperty::clear_scroll_offset_group() {
  if (scroll_offset_group_ != NULL) scroll_offset_group_->::cc::proto::ScrollOffsetGroup::Clear();
  clear_has_scroll_offset_group();
}
const ::cc::proto::ScrollOffsetGroup& SyncedProperty::scroll_offset_group() const {
  // @@protoc_insertion_point(field_get:cc.proto.SyncedProperty.scroll_offset_group)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return scroll_offset_group_ != NULL ? *scroll_offset_group_ : *default_instance().scroll_offset_group_;
#else
  return scroll_offset_group_ != NULL ? *scroll_offset_group_ : *default_instance_->scroll_offset_group_;
#endif
}
::cc::proto::ScrollOffsetGroup* SyncedProperty::mutable_scroll_offset_group() {
  set_has_scroll_offset_group();
  if (scroll_offset_group_ == NULL) {
    scroll_offset_group_ = new ::cc::proto::ScrollOffsetGroup;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.SyncedProperty.scroll_offset_group)
  return scroll_offset_group_;
}
::cc::proto::ScrollOffsetGroup* SyncedProperty::release_scroll_offset_group() {
  // @@protoc_insertion_point(field_release:cc.proto.SyncedProperty.scroll_offset_group)
  clear_has_scroll_offset_group();
  ::cc::proto::ScrollOffsetGroup* temp = scroll_offset_group_;
  scroll_offset_group_ = NULL;
  return temp;
}
void SyncedProperty::set_allocated_scroll_offset_group(::cc::proto::ScrollOffsetGroup* scroll_offset_group) {
  delete scroll_offset_group_;
  scroll_offset_group_ = scroll_offset_group;
  if (scroll_offset_group) {
    set_has_scroll_offset_group();
  } else {
    clear_has_scroll_offset_group();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.SyncedProperty.scroll_offset_group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
