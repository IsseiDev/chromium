// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compositor_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "compositor_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_compositor_5fmessage_2eproto() {
  delete CompositorMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_compositor_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_compositor_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
  ::cc::proto::protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto();
  CompositorMessage::default_instance_ = new CompositorMessage();
  CompositorMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_compositor_5fmessage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_compositor_5fmessage_2eproto_once_);
void protobuf_AddDesc_compositor_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_compositor_5fmessage_2eproto_once_,
                 &protobuf_AddDesc_compositor_5fmessage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_compositor_5fmessage_2eproto {
  StaticDescriptorInitializer_compositor_5fmessage_2eproto() {
    protobuf_AddDesc_compositor_5fmessage_2eproto();
  }
} static_descriptor_initializer_compositor_5fmessage_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForCompositorMessage(
    CompositorMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompositorMessage::kToMainFieldNumber;
const int CompositorMessage::kToImplFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompositorMessage::CompositorMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.CompositorMessage)
}

void CompositorMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  to_main_ = const_cast< ::cc::proto::CompositorMessageToMain*>(
      ::cc::proto::CompositorMessageToMain::internal_default_instance());
#else
  to_main_ = const_cast< ::cc::proto::CompositorMessageToMain*>(&::cc::proto::CompositorMessageToMain::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  to_impl_ = const_cast< ::cc::proto::CompositorMessageToImpl*>(
      ::cc::proto::CompositorMessageToImpl::internal_default_instance());
#else
  to_impl_ = const_cast< ::cc::proto::CompositorMessageToImpl*>(&::cc::proto::CompositorMessageToImpl::default_instance());
#endif
}

CompositorMessage::CompositorMessage(const CompositorMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.CompositorMessage)
}

void CompositorMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_main_ = NULL;
  to_impl_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompositorMessage::~CompositorMessage() {
  // @@protoc_insertion_point(destructor:cc.proto.CompositorMessage)
  SharedDtor();
}

void CompositorMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete to_main_;
    delete to_impl_;
  }
}

void CompositorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CompositorMessage& CompositorMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_2eproto();
#endif
  return *default_instance_;
}

CompositorMessage* CompositorMessage::default_instance_ = NULL;

CompositorMessage* CompositorMessage::New(::google::protobuf::Arena* arena) const {
  CompositorMessage* n = new CompositorMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompositorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.CompositorMessage)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_to_main()) {
      if (to_main_ != NULL) to_main_->::cc::proto::CompositorMessageToMain::Clear();
    }
    if (has_to_impl()) {
      if (to_impl_ != NULL) to_impl_->::cc::proto::CompositorMessageToImpl::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CompositorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCompositorMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.CompositorMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.CompositorMessageToMain to_main = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_main()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_to_impl;
        break;
      }

      // optional .cc.proto.CompositorMessageToImpl to_impl = 2;
      case 2: {
        if (tag == 18) {
         parse_to_impl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_impl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.CompositorMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.CompositorMessage)
  return false;
#undef DO_
}

void CompositorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.CompositorMessage)
  // optional .cc.proto.CompositorMessageToMain to_main = 1;
  if (has_to_main()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->to_main_, output);
  }

  // optional .cc.proto.CompositorMessageToImpl to_impl = 2;
  if (has_to_impl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->to_impl_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.CompositorMessage)
}

int CompositorMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.CompositorMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .cc.proto.CompositorMessageToMain to_main = 1;
    if (has_to_main()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->to_main_);
    }

    // optional .cc.proto.CompositorMessageToImpl to_impl = 2;
    if (has_to_impl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->to_impl_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompositorMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CompositorMessage*>(&from));
}

void CompositorMessage::MergeFrom(const CompositorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.CompositorMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_main()) {
      mutable_to_main()->::cc::proto::CompositorMessageToMain::MergeFrom(from.to_main());
    }
    if (from.has_to_impl()) {
      mutable_to_impl()->::cc::proto::CompositorMessageToImpl::MergeFrom(from.to_impl());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CompositorMessage::CopyFrom(const CompositorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.CompositorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositorMessage::IsInitialized() const {

  if (has_to_impl()) {
    if (!this->to_impl_->IsInitialized()) return false;
  }
  return true;
}

void CompositorMessage::Swap(CompositorMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompositorMessage::InternalSwap(CompositorMessage* other) {
  std::swap(to_main_, other->to_main_);
  std::swap(to_impl_, other->to_impl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CompositorMessage::GetTypeName() const {
  return "cc.proto.CompositorMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompositorMessage

// optional .cc.proto.CompositorMessageToMain to_main = 1;
bool CompositorMessage::has_to_main() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CompositorMessage::set_has_to_main() {
  _has_bits_[0] |= 0x00000001u;
}
void CompositorMessage::clear_has_to_main() {
  _has_bits_[0] &= ~0x00000001u;
}
void CompositorMessage::clear_to_main() {
  if (to_main_ != NULL) to_main_->::cc::proto::CompositorMessageToMain::Clear();
  clear_has_to_main();
}
const ::cc::proto::CompositorMessageToMain& CompositorMessage::to_main() const {
  // @@protoc_insertion_point(field_get:cc.proto.CompositorMessage.to_main)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return to_main_ != NULL ? *to_main_ : *default_instance().to_main_;
#else
  return to_main_ != NULL ? *to_main_ : *default_instance_->to_main_;
#endif
}
::cc::proto::CompositorMessageToMain* CompositorMessage::mutable_to_main() {
  set_has_to_main();
  if (to_main_ == NULL) {
    to_main_ = new ::cc::proto::CompositorMessageToMain;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.CompositorMessage.to_main)
  return to_main_;
}
::cc::proto::CompositorMessageToMain* CompositorMessage::release_to_main() {
  // @@protoc_insertion_point(field_release:cc.proto.CompositorMessage.to_main)
  clear_has_to_main();
  ::cc::proto::CompositorMessageToMain* temp = to_main_;
  to_main_ = NULL;
  return temp;
}
void CompositorMessage::set_allocated_to_main(::cc::proto::CompositorMessageToMain* to_main) {
  delete to_main_;
  to_main_ = to_main;
  if (to_main) {
    set_has_to_main();
  } else {
    clear_has_to_main();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.CompositorMessage.to_main)
}

// optional .cc.proto.CompositorMessageToImpl to_impl = 2;
bool CompositorMessage::has_to_impl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CompositorMessage::set_has_to_impl() {
  _has_bits_[0] |= 0x00000002u;
}
void CompositorMessage::clear_has_to_impl() {
  _has_bits_[0] &= ~0x00000002u;
}
void CompositorMessage::clear_to_impl() {
  if (to_impl_ != NULL) to_impl_->::cc::proto::CompositorMessageToImpl::Clear();
  clear_has_to_impl();
}
const ::cc::proto::CompositorMessageToImpl& CompositorMessage::to_impl() const {
  // @@protoc_insertion_point(field_get:cc.proto.CompositorMessage.to_impl)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return to_impl_ != NULL ? *to_impl_ : *default_instance().to_impl_;
#else
  return to_impl_ != NULL ? *to_impl_ : *default_instance_->to_impl_;
#endif
}
::cc::proto::CompositorMessageToImpl* CompositorMessage::mutable_to_impl() {
  set_has_to_impl();
  if (to_impl_ == NULL) {
    to_impl_ = new ::cc::proto::CompositorMessageToImpl;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.CompositorMessage.to_impl)
  return to_impl_;
}
::cc::proto::CompositorMessageToImpl* CompositorMessage::release_to_impl() {
  // @@protoc_insertion_point(field_release:cc.proto.CompositorMessage.to_impl)
  clear_has_to_impl();
  ::cc::proto::CompositorMessageToImpl* temp = to_impl_;
  to_impl_ = NULL;
  return temp;
}
void CompositorMessage::set_allocated_to_impl(::cc::proto::CompositorMessageToImpl* to_impl) {
  delete to_impl_;
  to_impl_ = to_impl;
  if (to_impl) {
    set_has_to_impl();
  } else {
    clear_has_to_impl();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.CompositorMessage.to_impl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
