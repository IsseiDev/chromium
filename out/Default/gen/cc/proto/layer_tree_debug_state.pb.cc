// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layer_tree_debug_state.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "layer_tree_debug_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_layer_5ftree_5fdebug_5fstate_2eproto() {
  delete LayerTreeDebugState::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_layer_5ftree_5fdebug_5fstate_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_layer_5ftree_5fdebug_5fstate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  LayerTreeDebugState::default_instance_ = new LayerTreeDebugState();
  LayerTreeDebugState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_layer_5ftree_5fdebug_5fstate_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_layer_5ftree_5fdebug_5fstate_2eproto_once_);
void protobuf_AddDesc_layer_5ftree_5fdebug_5fstate_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_layer_5ftree_5fdebug_5fstate_2eproto_once_,
                 &protobuf_AddDesc_layer_5ftree_5fdebug_5fstate_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_layer_5ftree_5fdebug_5fstate_2eproto {
  StaticDescriptorInitializer_layer_5ftree_5fdebug_5fstate_2eproto() {
    protobuf_AddDesc_layer_5ftree_5fdebug_5fstate_2eproto();
  }
} static_descriptor_initializer_layer_5ftree_5fdebug_5fstate_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForLayerTreeDebugState(
    LayerTreeDebugState* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerTreeDebugState::kShowFpsCounterFieldNumber;
const int LayerTreeDebugState::kShowDebugBordersFieldNumber;
const int LayerTreeDebugState::kShowPaintRectsFieldNumber;
const int LayerTreeDebugState::kShowPropertyChangedRectsFieldNumber;
const int LayerTreeDebugState::kShowSurfaceDamageRectsFieldNumber;
const int LayerTreeDebugState::kShowScreenSpaceRectsFieldNumber;
const int LayerTreeDebugState::kShowReplicaScreenSpaceRectsFieldNumber;
const int LayerTreeDebugState::kShowTouchEventHandlerRectsFieldNumber;
const int LayerTreeDebugState::kShowWheelEventHandlerRectsFieldNumber;
const int LayerTreeDebugState::kShowScrollEventHandlerRectsFieldNumber;
const int LayerTreeDebugState::kShowNonFastScrollableRectsFieldNumber;
const int LayerTreeDebugState::kShowLayerAnimationBoundsRectsFieldNumber;
const int LayerTreeDebugState::kSlowDownRasterScaleFactorFieldNumber;
const int LayerTreeDebugState::kRasterizeOnlyVisibleContentFieldNumber;
const int LayerTreeDebugState::kShowPictureBordersFieldNumber;
const int LayerTreeDebugState::kRecordRenderingStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerTreeDebugState::LayerTreeDebugState()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.LayerTreeDebugState)
}

void LayerTreeDebugState::InitAsDefaultInstance() {
}

LayerTreeDebugState::LayerTreeDebugState(const LayerTreeDebugState& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.LayerTreeDebugState)
}

void LayerTreeDebugState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  show_fps_counter_ = false;
  show_debug_borders_ = false;
  show_paint_rects_ = false;
  show_property_changed_rects_ = false;
  show_surface_damage_rects_ = false;
  show_screen_space_rects_ = false;
  show_replica_screen_space_rects_ = false;
  show_touch_event_handler_rects_ = false;
  show_wheel_event_handler_rects_ = false;
  show_scroll_event_handler_rects_ = false;
  show_non_fast_scrollable_rects_ = false;
  show_layer_animation_bounds_rects_ = false;
  slow_down_raster_scale_factor_ = 0;
  rasterize_only_visible_content_ = false;
  show_picture_borders_ = false;
  record_rendering_stats_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerTreeDebugState::~LayerTreeDebugState() {
  // @@protoc_insertion_point(destructor:cc.proto.LayerTreeDebugState)
  SharedDtor();
}

void LayerTreeDebugState::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LayerTreeDebugState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LayerTreeDebugState& LayerTreeDebugState::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_layer_5ftree_5fdebug_5fstate_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_layer_5ftree_5fdebug_5fstate_2eproto();
#endif
  return *default_instance_;
}

LayerTreeDebugState* LayerTreeDebugState::default_instance_ = NULL;

LayerTreeDebugState* LayerTreeDebugState::New(::google::protobuf::Arena* arena) const {
  LayerTreeDebugState* n = new LayerTreeDebugState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayerTreeDebugState::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.LayerTreeDebugState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LayerTreeDebugState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LayerTreeDebugState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(show_fps_counter_, show_touch_event_handler_rects_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(show_wheel_event_handler_rects_, record_rendering_stats_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LayerTreeDebugState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForLayerTreeDebugState, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.LayerTreeDebugState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool show_fps_counter = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_fps_counter_)));
          set_has_show_fps_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_show_debug_borders;
        break;
      }

      // optional bool show_debug_borders = 2;
      case 2: {
        if (tag == 16) {
         parse_show_debug_borders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_debug_borders_)));
          set_has_show_debug_borders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_show_paint_rects;
        break;
      }

      // optional bool show_paint_rects = 3;
      case 3: {
        if (tag == 24) {
         parse_show_paint_rects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_paint_rects_)));
          set_has_show_paint_rects();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_show_property_changed_rects;
        break;
      }

      // optional bool show_property_changed_rects = 4;
      case 4: {
        if (tag == 32) {
         parse_show_property_changed_rects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_property_changed_rects_)));
          set_has_show_property_changed_rects();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_show_surface_damage_rects;
        break;
      }

      // optional bool show_surface_damage_rects = 5;
      case 5: {
        if (tag == 40) {
         parse_show_surface_damage_rects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_surface_damage_rects_)));
          set_has_show_surface_damage_rects();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_show_screen_space_rects;
        break;
      }

      // optional bool show_screen_space_rects = 6;
      case 6: {
        if (tag == 48) {
         parse_show_screen_space_rects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_screen_space_rects_)));
          set_has_show_screen_space_rects();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_show_replica_screen_space_rects;
        break;
      }

      // optional bool show_replica_screen_space_rects = 7;
      case 7: {
        if (tag == 56) {
         parse_show_replica_screen_space_rects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_replica_screen_space_rects_)));
          set_has_show_replica_screen_space_rects();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_show_touch_event_handler_rects;
        break;
      }

      // optional bool show_touch_event_handler_rects = 8;
      case 8: {
        if (tag == 64) {
         parse_show_touch_event_handler_rects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_touch_event_handler_rects_)));
          set_has_show_touch_event_handler_rects();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_show_wheel_event_handler_rects;
        break;
      }

      // optional bool show_wheel_event_handler_rects = 9;
      case 9: {
        if (tag == 72) {
         parse_show_wheel_event_handler_rects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_wheel_event_handler_rects_)));
          set_has_show_wheel_event_handler_rects();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_show_scroll_event_handler_rects;
        break;
      }

      // optional bool show_scroll_event_handler_rects = 10;
      case 10: {
        if (tag == 80) {
         parse_show_scroll_event_handler_rects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_scroll_event_handler_rects_)));
          set_has_show_scroll_event_handler_rects();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_show_non_fast_scrollable_rects;
        break;
      }

      // optional bool show_non_fast_scrollable_rects = 11;
      case 11: {
        if (tag == 88) {
         parse_show_non_fast_scrollable_rects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_non_fast_scrollable_rects_)));
          set_has_show_non_fast_scrollable_rects();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_show_layer_animation_bounds_rects;
        break;
      }

      // optional bool show_layer_animation_bounds_rects = 12;
      case 12: {
        if (tag == 96) {
         parse_show_layer_animation_bounds_rects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_layer_animation_bounds_rects_)));
          set_has_show_layer_animation_bounds_rects();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_slow_down_raster_scale_factor;
        break;
      }

      // optional int32 slow_down_raster_scale_factor = 13;
      case 13: {
        if (tag == 104) {
         parse_slow_down_raster_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slow_down_raster_scale_factor_)));
          set_has_slow_down_raster_scale_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_rasterize_only_visible_content;
        break;
      }

      // optional bool rasterize_only_visible_content = 14;
      case 14: {
        if (tag == 112) {
         parse_rasterize_only_visible_content:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rasterize_only_visible_content_)));
          set_has_rasterize_only_visible_content();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_show_picture_borders;
        break;
      }

      // optional bool show_picture_borders = 15;
      case 15: {
        if (tag == 120) {
         parse_show_picture_borders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_picture_borders_)));
          set_has_show_picture_borders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_record_rendering_stats;
        break;
      }

      // optional bool record_rendering_stats = 16;
      case 16: {
        if (tag == 128) {
         parse_record_rendering_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_rendering_stats_)));
          set_has_record_rendering_stats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.LayerTreeDebugState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.LayerTreeDebugState)
  return false;
#undef DO_
}

void LayerTreeDebugState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.LayerTreeDebugState)
  // optional bool show_fps_counter = 1;
  if (has_show_fps_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->show_fps_counter(), output);
  }

  // optional bool show_debug_borders = 2;
  if (has_show_debug_borders()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_debug_borders(), output);
  }

  // optional bool show_paint_rects = 3;
  if (has_show_paint_rects()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->show_paint_rects(), output);
  }

  // optional bool show_property_changed_rects = 4;
  if (has_show_property_changed_rects()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->show_property_changed_rects(), output);
  }

  // optional bool show_surface_damage_rects = 5;
  if (has_show_surface_damage_rects()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->show_surface_damage_rects(), output);
  }

  // optional bool show_screen_space_rects = 6;
  if (has_show_screen_space_rects()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->show_screen_space_rects(), output);
  }

  // optional bool show_replica_screen_space_rects = 7;
  if (has_show_replica_screen_space_rects()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->show_replica_screen_space_rects(), output);
  }

  // optional bool show_touch_event_handler_rects = 8;
  if (has_show_touch_event_handler_rects()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->show_touch_event_handler_rects(), output);
  }

  // optional bool show_wheel_event_handler_rects = 9;
  if (has_show_wheel_event_handler_rects()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->show_wheel_event_handler_rects(), output);
  }

  // optional bool show_scroll_event_handler_rects = 10;
  if (has_show_scroll_event_handler_rects()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->show_scroll_event_handler_rects(), output);
  }

  // optional bool show_non_fast_scrollable_rects = 11;
  if (has_show_non_fast_scrollable_rects()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->show_non_fast_scrollable_rects(), output);
  }

  // optional bool show_layer_animation_bounds_rects = 12;
  if (has_show_layer_animation_bounds_rects()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->show_layer_animation_bounds_rects(), output);
  }

  // optional int32 slow_down_raster_scale_factor = 13;
  if (has_slow_down_raster_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->slow_down_raster_scale_factor(), output);
  }

  // optional bool rasterize_only_visible_content = 14;
  if (has_rasterize_only_visible_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->rasterize_only_visible_content(), output);
  }

  // optional bool show_picture_borders = 15;
  if (has_show_picture_borders()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->show_picture_borders(), output);
  }

  // optional bool record_rendering_stats = 16;
  if (has_record_rendering_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->record_rendering_stats(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.LayerTreeDebugState)
}

int LayerTreeDebugState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.LayerTreeDebugState)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool show_fps_counter = 1;
    if (has_show_fps_counter()) {
      total_size += 1 + 1;
    }

    // optional bool show_debug_borders = 2;
    if (has_show_debug_borders()) {
      total_size += 1 + 1;
    }

    // optional bool show_paint_rects = 3;
    if (has_show_paint_rects()) {
      total_size += 1 + 1;
    }

    // optional bool show_property_changed_rects = 4;
    if (has_show_property_changed_rects()) {
      total_size += 1 + 1;
    }

    // optional bool show_surface_damage_rects = 5;
    if (has_show_surface_damage_rects()) {
      total_size += 1 + 1;
    }

    // optional bool show_screen_space_rects = 6;
    if (has_show_screen_space_rects()) {
      total_size += 1 + 1;
    }

    // optional bool show_replica_screen_space_rects = 7;
    if (has_show_replica_screen_space_rects()) {
      total_size += 1 + 1;
    }

    // optional bool show_touch_event_handler_rects = 8;
    if (has_show_touch_event_handler_rects()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool show_wheel_event_handler_rects = 9;
    if (has_show_wheel_event_handler_rects()) {
      total_size += 1 + 1;
    }

    // optional bool show_scroll_event_handler_rects = 10;
    if (has_show_scroll_event_handler_rects()) {
      total_size += 1 + 1;
    }

    // optional bool show_non_fast_scrollable_rects = 11;
    if (has_show_non_fast_scrollable_rects()) {
      total_size += 1 + 1;
    }

    // optional bool show_layer_animation_bounds_rects = 12;
    if (has_show_layer_animation_bounds_rects()) {
      total_size += 1 + 1;
    }

    // optional int32 slow_down_raster_scale_factor = 13;
    if (has_slow_down_raster_scale_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slow_down_raster_scale_factor());
    }

    // optional bool rasterize_only_visible_content = 14;
    if (has_rasterize_only_visible_content()) {
      total_size += 1 + 1;
    }

    // optional bool show_picture_borders = 15;
    if (has_show_picture_borders()) {
      total_size += 1 + 1;
    }

    // optional bool record_rendering_stats = 16;
    if (has_record_rendering_stats()) {
      total_size += 2 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerTreeDebugState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LayerTreeDebugState*>(&from));
}

void LayerTreeDebugState::MergeFrom(const LayerTreeDebugState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.LayerTreeDebugState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_show_fps_counter()) {
      set_show_fps_counter(from.show_fps_counter());
    }
    if (from.has_show_debug_borders()) {
      set_show_debug_borders(from.show_debug_borders());
    }
    if (from.has_show_paint_rects()) {
      set_show_paint_rects(from.show_paint_rects());
    }
    if (from.has_show_property_changed_rects()) {
      set_show_property_changed_rects(from.show_property_changed_rects());
    }
    if (from.has_show_surface_damage_rects()) {
      set_show_surface_damage_rects(from.show_surface_damage_rects());
    }
    if (from.has_show_screen_space_rects()) {
      set_show_screen_space_rects(from.show_screen_space_rects());
    }
    if (from.has_show_replica_screen_space_rects()) {
      set_show_replica_screen_space_rects(from.show_replica_screen_space_rects());
    }
    if (from.has_show_touch_event_handler_rects()) {
      set_show_touch_event_handler_rects(from.show_touch_event_handler_rects());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_show_wheel_event_handler_rects()) {
      set_show_wheel_event_handler_rects(from.show_wheel_event_handler_rects());
    }
    if (from.has_show_scroll_event_handler_rects()) {
      set_show_scroll_event_handler_rects(from.show_scroll_event_handler_rects());
    }
    if (from.has_show_non_fast_scrollable_rects()) {
      set_show_non_fast_scrollable_rects(from.show_non_fast_scrollable_rects());
    }
    if (from.has_show_layer_animation_bounds_rects()) {
      set_show_layer_animation_bounds_rects(from.show_layer_animation_bounds_rects());
    }
    if (from.has_slow_down_raster_scale_factor()) {
      set_slow_down_raster_scale_factor(from.slow_down_raster_scale_factor());
    }
    if (from.has_rasterize_only_visible_content()) {
      set_rasterize_only_visible_content(from.rasterize_only_visible_content());
    }
    if (from.has_show_picture_borders()) {
      set_show_picture_borders(from.show_picture_borders());
    }
    if (from.has_record_rendering_stats()) {
      set_record_rendering_stats(from.record_rendering_stats());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void LayerTreeDebugState::CopyFrom(const LayerTreeDebugState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.LayerTreeDebugState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerTreeDebugState::IsInitialized() const {

  return true;
}

void LayerTreeDebugState::Swap(LayerTreeDebugState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayerTreeDebugState::InternalSwap(LayerTreeDebugState* other) {
  std::swap(show_fps_counter_, other->show_fps_counter_);
  std::swap(show_debug_borders_, other->show_debug_borders_);
  std::swap(show_paint_rects_, other->show_paint_rects_);
  std::swap(show_property_changed_rects_, other->show_property_changed_rects_);
  std::swap(show_surface_damage_rects_, other->show_surface_damage_rects_);
  std::swap(show_screen_space_rects_, other->show_screen_space_rects_);
  std::swap(show_replica_screen_space_rects_, other->show_replica_screen_space_rects_);
  std::swap(show_touch_event_handler_rects_, other->show_touch_event_handler_rects_);
  std::swap(show_wheel_event_handler_rects_, other->show_wheel_event_handler_rects_);
  std::swap(show_scroll_event_handler_rects_, other->show_scroll_event_handler_rects_);
  std::swap(show_non_fast_scrollable_rects_, other->show_non_fast_scrollable_rects_);
  std::swap(show_layer_animation_bounds_rects_, other->show_layer_animation_bounds_rects_);
  std::swap(slow_down_raster_scale_factor_, other->slow_down_raster_scale_factor_);
  std::swap(rasterize_only_visible_content_, other->rasterize_only_visible_content_);
  std::swap(show_picture_borders_, other->show_picture_borders_);
  std::swap(record_rendering_stats_, other->record_rendering_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LayerTreeDebugState::GetTypeName() const {
  return "cc.proto.LayerTreeDebugState";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerTreeDebugState

// optional bool show_fps_counter = 1;
bool LayerTreeDebugState::has_show_fps_counter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LayerTreeDebugState::set_has_show_fps_counter() {
  _has_bits_[0] |= 0x00000001u;
}
void LayerTreeDebugState::clear_has_show_fps_counter() {
  _has_bits_[0] &= ~0x00000001u;
}
void LayerTreeDebugState::clear_show_fps_counter() {
  show_fps_counter_ = false;
  clear_has_show_fps_counter();
}
 bool LayerTreeDebugState::show_fps_counter() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.show_fps_counter)
  return show_fps_counter_;
}
 void LayerTreeDebugState::set_show_fps_counter(bool value) {
  set_has_show_fps_counter();
  show_fps_counter_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.show_fps_counter)
}

// optional bool show_debug_borders = 2;
bool LayerTreeDebugState::has_show_debug_borders() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LayerTreeDebugState::set_has_show_debug_borders() {
  _has_bits_[0] |= 0x00000002u;
}
void LayerTreeDebugState::clear_has_show_debug_borders() {
  _has_bits_[0] &= ~0x00000002u;
}
void LayerTreeDebugState::clear_show_debug_borders() {
  show_debug_borders_ = false;
  clear_has_show_debug_borders();
}
 bool LayerTreeDebugState::show_debug_borders() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.show_debug_borders)
  return show_debug_borders_;
}
 void LayerTreeDebugState::set_show_debug_borders(bool value) {
  set_has_show_debug_borders();
  show_debug_borders_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.show_debug_borders)
}

// optional bool show_paint_rects = 3;
bool LayerTreeDebugState::has_show_paint_rects() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LayerTreeDebugState::set_has_show_paint_rects() {
  _has_bits_[0] |= 0x00000004u;
}
void LayerTreeDebugState::clear_has_show_paint_rects() {
  _has_bits_[0] &= ~0x00000004u;
}
void LayerTreeDebugState::clear_show_paint_rects() {
  show_paint_rects_ = false;
  clear_has_show_paint_rects();
}
 bool LayerTreeDebugState::show_paint_rects() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.show_paint_rects)
  return show_paint_rects_;
}
 void LayerTreeDebugState::set_show_paint_rects(bool value) {
  set_has_show_paint_rects();
  show_paint_rects_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.show_paint_rects)
}

// optional bool show_property_changed_rects = 4;
bool LayerTreeDebugState::has_show_property_changed_rects() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LayerTreeDebugState::set_has_show_property_changed_rects() {
  _has_bits_[0] |= 0x00000008u;
}
void LayerTreeDebugState::clear_has_show_property_changed_rects() {
  _has_bits_[0] &= ~0x00000008u;
}
void LayerTreeDebugState::clear_show_property_changed_rects() {
  show_property_changed_rects_ = false;
  clear_has_show_property_changed_rects();
}
 bool LayerTreeDebugState::show_property_changed_rects() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.show_property_changed_rects)
  return show_property_changed_rects_;
}
 void LayerTreeDebugState::set_show_property_changed_rects(bool value) {
  set_has_show_property_changed_rects();
  show_property_changed_rects_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.show_property_changed_rects)
}

// optional bool show_surface_damage_rects = 5;
bool LayerTreeDebugState::has_show_surface_damage_rects() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LayerTreeDebugState::set_has_show_surface_damage_rects() {
  _has_bits_[0] |= 0x00000010u;
}
void LayerTreeDebugState::clear_has_show_surface_damage_rects() {
  _has_bits_[0] &= ~0x00000010u;
}
void LayerTreeDebugState::clear_show_surface_damage_rects() {
  show_surface_damage_rects_ = false;
  clear_has_show_surface_damage_rects();
}
 bool LayerTreeDebugState::show_surface_damage_rects() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.show_surface_damage_rects)
  return show_surface_damage_rects_;
}
 void LayerTreeDebugState::set_show_surface_damage_rects(bool value) {
  set_has_show_surface_damage_rects();
  show_surface_damage_rects_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.show_surface_damage_rects)
}

// optional bool show_screen_space_rects = 6;
bool LayerTreeDebugState::has_show_screen_space_rects() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LayerTreeDebugState::set_has_show_screen_space_rects() {
  _has_bits_[0] |= 0x00000020u;
}
void LayerTreeDebugState::clear_has_show_screen_space_rects() {
  _has_bits_[0] &= ~0x00000020u;
}
void LayerTreeDebugState::clear_show_screen_space_rects() {
  show_screen_space_rects_ = false;
  clear_has_show_screen_space_rects();
}
 bool LayerTreeDebugState::show_screen_space_rects() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.show_screen_space_rects)
  return show_screen_space_rects_;
}
 void LayerTreeDebugState::set_show_screen_space_rects(bool value) {
  set_has_show_screen_space_rects();
  show_screen_space_rects_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.show_screen_space_rects)
}

// optional bool show_replica_screen_space_rects = 7;
bool LayerTreeDebugState::has_show_replica_screen_space_rects() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LayerTreeDebugState::set_has_show_replica_screen_space_rects() {
  _has_bits_[0] |= 0x00000040u;
}
void LayerTreeDebugState::clear_has_show_replica_screen_space_rects() {
  _has_bits_[0] &= ~0x00000040u;
}
void LayerTreeDebugState::clear_show_replica_screen_space_rects() {
  show_replica_screen_space_rects_ = false;
  clear_has_show_replica_screen_space_rects();
}
 bool LayerTreeDebugState::show_replica_screen_space_rects() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.show_replica_screen_space_rects)
  return show_replica_screen_space_rects_;
}
 void LayerTreeDebugState::set_show_replica_screen_space_rects(bool value) {
  set_has_show_replica_screen_space_rects();
  show_replica_screen_space_rects_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.show_replica_screen_space_rects)
}

// optional bool show_touch_event_handler_rects = 8;
bool LayerTreeDebugState::has_show_touch_event_handler_rects() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LayerTreeDebugState::set_has_show_touch_event_handler_rects() {
  _has_bits_[0] |= 0x00000080u;
}
void LayerTreeDebugState::clear_has_show_touch_event_handler_rects() {
  _has_bits_[0] &= ~0x00000080u;
}
void LayerTreeDebugState::clear_show_touch_event_handler_rects() {
  show_touch_event_handler_rects_ = false;
  clear_has_show_touch_event_handler_rects();
}
 bool LayerTreeDebugState::show_touch_event_handler_rects() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.show_touch_event_handler_rects)
  return show_touch_event_handler_rects_;
}
 void LayerTreeDebugState::set_show_touch_event_handler_rects(bool value) {
  set_has_show_touch_event_handler_rects();
  show_touch_event_handler_rects_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.show_touch_event_handler_rects)
}

// optional bool show_wheel_event_handler_rects = 9;
bool LayerTreeDebugState::has_show_wheel_event_handler_rects() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LayerTreeDebugState::set_has_show_wheel_event_handler_rects() {
  _has_bits_[0] |= 0x00000100u;
}
void LayerTreeDebugState::clear_has_show_wheel_event_handler_rects() {
  _has_bits_[0] &= ~0x00000100u;
}
void LayerTreeDebugState::clear_show_wheel_event_handler_rects() {
  show_wheel_event_handler_rects_ = false;
  clear_has_show_wheel_event_handler_rects();
}
 bool LayerTreeDebugState::show_wheel_event_handler_rects() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.show_wheel_event_handler_rects)
  return show_wheel_event_handler_rects_;
}
 void LayerTreeDebugState::set_show_wheel_event_handler_rects(bool value) {
  set_has_show_wheel_event_handler_rects();
  show_wheel_event_handler_rects_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.show_wheel_event_handler_rects)
}

// optional bool show_scroll_event_handler_rects = 10;
bool LayerTreeDebugState::has_show_scroll_event_handler_rects() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LayerTreeDebugState::set_has_show_scroll_event_handler_rects() {
  _has_bits_[0] |= 0x00000200u;
}
void LayerTreeDebugState::clear_has_show_scroll_event_handler_rects() {
  _has_bits_[0] &= ~0x00000200u;
}
void LayerTreeDebugState::clear_show_scroll_event_handler_rects() {
  show_scroll_event_handler_rects_ = false;
  clear_has_show_scroll_event_handler_rects();
}
 bool LayerTreeDebugState::show_scroll_event_handler_rects() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.show_scroll_event_handler_rects)
  return show_scroll_event_handler_rects_;
}
 void LayerTreeDebugState::set_show_scroll_event_handler_rects(bool value) {
  set_has_show_scroll_event_handler_rects();
  show_scroll_event_handler_rects_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.show_scroll_event_handler_rects)
}

// optional bool show_non_fast_scrollable_rects = 11;
bool LayerTreeDebugState::has_show_non_fast_scrollable_rects() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LayerTreeDebugState::set_has_show_non_fast_scrollable_rects() {
  _has_bits_[0] |= 0x00000400u;
}
void LayerTreeDebugState::clear_has_show_non_fast_scrollable_rects() {
  _has_bits_[0] &= ~0x00000400u;
}
void LayerTreeDebugState::clear_show_non_fast_scrollable_rects() {
  show_non_fast_scrollable_rects_ = false;
  clear_has_show_non_fast_scrollable_rects();
}
 bool LayerTreeDebugState::show_non_fast_scrollable_rects() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.show_non_fast_scrollable_rects)
  return show_non_fast_scrollable_rects_;
}
 void LayerTreeDebugState::set_show_non_fast_scrollable_rects(bool value) {
  set_has_show_non_fast_scrollable_rects();
  show_non_fast_scrollable_rects_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.show_non_fast_scrollable_rects)
}

// optional bool show_layer_animation_bounds_rects = 12;
bool LayerTreeDebugState::has_show_layer_animation_bounds_rects() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LayerTreeDebugState::set_has_show_layer_animation_bounds_rects() {
  _has_bits_[0] |= 0x00000800u;
}
void LayerTreeDebugState::clear_has_show_layer_animation_bounds_rects() {
  _has_bits_[0] &= ~0x00000800u;
}
void LayerTreeDebugState::clear_show_layer_animation_bounds_rects() {
  show_layer_animation_bounds_rects_ = false;
  clear_has_show_layer_animation_bounds_rects();
}
 bool LayerTreeDebugState::show_layer_animation_bounds_rects() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.show_layer_animation_bounds_rects)
  return show_layer_animation_bounds_rects_;
}
 void LayerTreeDebugState::set_show_layer_animation_bounds_rects(bool value) {
  set_has_show_layer_animation_bounds_rects();
  show_layer_animation_bounds_rects_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.show_layer_animation_bounds_rects)
}

// optional int32 slow_down_raster_scale_factor = 13;
bool LayerTreeDebugState::has_slow_down_raster_scale_factor() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LayerTreeDebugState::set_has_slow_down_raster_scale_factor() {
  _has_bits_[0] |= 0x00001000u;
}
void LayerTreeDebugState::clear_has_slow_down_raster_scale_factor() {
  _has_bits_[0] &= ~0x00001000u;
}
void LayerTreeDebugState::clear_slow_down_raster_scale_factor() {
  slow_down_raster_scale_factor_ = 0;
  clear_has_slow_down_raster_scale_factor();
}
 ::google::protobuf::int32 LayerTreeDebugState::slow_down_raster_scale_factor() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.slow_down_raster_scale_factor)
  return slow_down_raster_scale_factor_;
}
 void LayerTreeDebugState::set_slow_down_raster_scale_factor(::google::protobuf::int32 value) {
  set_has_slow_down_raster_scale_factor();
  slow_down_raster_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.slow_down_raster_scale_factor)
}

// optional bool rasterize_only_visible_content = 14;
bool LayerTreeDebugState::has_rasterize_only_visible_content() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LayerTreeDebugState::set_has_rasterize_only_visible_content() {
  _has_bits_[0] |= 0x00002000u;
}
void LayerTreeDebugState::clear_has_rasterize_only_visible_content() {
  _has_bits_[0] &= ~0x00002000u;
}
void LayerTreeDebugState::clear_rasterize_only_visible_content() {
  rasterize_only_visible_content_ = false;
  clear_has_rasterize_only_visible_content();
}
 bool LayerTreeDebugState::rasterize_only_visible_content() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.rasterize_only_visible_content)
  return rasterize_only_visible_content_;
}
 void LayerTreeDebugState::set_rasterize_only_visible_content(bool value) {
  set_has_rasterize_only_visible_content();
  rasterize_only_visible_content_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.rasterize_only_visible_content)
}

// optional bool show_picture_borders = 15;
bool LayerTreeDebugState::has_show_picture_borders() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void LayerTreeDebugState::set_has_show_picture_borders() {
  _has_bits_[0] |= 0x00004000u;
}
void LayerTreeDebugState::clear_has_show_picture_borders() {
  _has_bits_[0] &= ~0x00004000u;
}
void LayerTreeDebugState::clear_show_picture_borders() {
  show_picture_borders_ = false;
  clear_has_show_picture_borders();
}
 bool LayerTreeDebugState::show_picture_borders() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.show_picture_borders)
  return show_picture_borders_;
}
 void LayerTreeDebugState::set_show_picture_borders(bool value) {
  set_has_show_picture_borders();
  show_picture_borders_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.show_picture_borders)
}

// optional bool record_rendering_stats = 16;
bool LayerTreeDebugState::has_record_rendering_stats() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void LayerTreeDebugState::set_has_record_rendering_stats() {
  _has_bits_[0] |= 0x00008000u;
}
void LayerTreeDebugState::clear_has_record_rendering_stats() {
  _has_bits_[0] &= ~0x00008000u;
}
void LayerTreeDebugState::clear_record_rendering_stats() {
  record_rendering_stats_ = false;
  clear_has_record_rendering_stats();
}
 bool LayerTreeDebugState::record_rendering_stats() const {
  // @@protoc_insertion_point(field_get:cc.proto.LayerTreeDebugState.record_rendering_stats)
  return record_rendering_stats_;
}
 void LayerTreeDebugState::set_record_rendering_stats(bool value) {
  set_has_record_rendering_stats();
  record_rendering_stats_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.LayerTreeDebugState.record_rendering_stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
