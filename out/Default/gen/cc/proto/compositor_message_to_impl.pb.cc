// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compositor_message_to_impl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "compositor_message_to_impl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_compositor_5fmessage_5fto_5fimpl_2eproto() {
  delete CompositorMessageToImpl::default_instance_;
  delete InitializeImpl::default_instance_;
  delete SetDeferCommits::default_instance_;
  delete StartCommit::default_instance_;
  delete BeginMainFrameAborted::default_instance_;
  delete SetNeedsRedraw::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_commit_5fearlyout_5freason_2eproto();
  ::cc::proto::protobuf_AddDesc_layer_5ftree_5fhost_2eproto();
  ::cc::proto::protobuf_AddDesc_layer_5ftree_5fsettings_2eproto();
  ::cc::proto::protobuf_AddDesc_rect_2eproto();
  CompositorMessageToImpl::default_instance_ = new CompositorMessageToImpl();
  InitializeImpl::default_instance_ = new InitializeImpl();
  SetDeferCommits::default_instance_ = new SetDeferCommits();
  StartCommit::default_instance_ = new StartCommit();
  BeginMainFrameAborted::default_instance_ = new BeginMainFrameAborted();
  SetNeedsRedraw::default_instance_ = new SetNeedsRedraw();
  CompositorMessageToImpl::default_instance_->InitAsDefaultInstance();
  InitializeImpl::default_instance_->InitAsDefaultInstance();
  SetDeferCommits::default_instance_->InitAsDefaultInstance();
  StartCommit::default_instance_->InitAsDefaultInstance();
  BeginMainFrameAborted::default_instance_->InitAsDefaultInstance();
  SetNeedsRedraw::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_compositor_5fmessage_5fto_5fimpl_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto_once_);
void protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto_once_,
                 &protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_compositor_5fmessage_5fto_5fimpl_2eproto {
  StaticDescriptorInitializer_compositor_5fmessage_5fto_5fimpl_2eproto() {
    protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
  }
} static_descriptor_initializer_compositor_5fmessage_5fto_5fimpl_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForCompositorMessageToImpl(
    CompositorMessageToImpl* ptr) {
  return ptr->mutable_unknown_fields();
}

bool CompositorMessageToImpl_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CompositorMessageToImpl_Type CompositorMessageToImpl::UNKNOWN;
const CompositorMessageToImpl_Type CompositorMessageToImpl::INITIALIZE_IMPL;
const CompositorMessageToImpl_Type CompositorMessageToImpl::CLOSE_IMPL;
const CompositorMessageToImpl_Type CompositorMessageToImpl::MAIN_THREAD_HAS_STOPPED_FLINGING_ON_IMPL;
const CompositorMessageToImpl_Type CompositorMessageToImpl::SET_NEEDS_COMMIT;
const CompositorMessageToImpl_Type CompositorMessageToImpl::SET_DEFER_COMMITS;
const CompositorMessageToImpl_Type CompositorMessageToImpl::START_COMMIT;
const CompositorMessageToImpl_Type CompositorMessageToImpl::BEGIN_MAIN_FRAME_ABORTED;
const CompositorMessageToImpl_Type CompositorMessageToImpl::SET_NEEDS_REDRAW;
const CompositorMessageToImpl_Type CompositorMessageToImpl::Type_MIN;
const CompositorMessageToImpl_Type CompositorMessageToImpl::Type_MAX;
const int CompositorMessageToImpl::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompositorMessageToImpl::kMessageTypeFieldNumber;
const int CompositorMessageToImpl::kInitializeImplMessageFieldNumber;
const int CompositorMessageToImpl::kDeferCommitsMessageFieldNumber;
const int CompositorMessageToImpl::kStartCommitMessageFieldNumber;
const int CompositorMessageToImpl::kBeginMainFrameAbortedMessageFieldNumber;
const int CompositorMessageToImpl::kSetNeedsRedrawMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompositorMessageToImpl::CompositorMessageToImpl()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.CompositorMessageToImpl)
}

void CompositorMessageToImpl::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  initialize_impl_message_ = const_cast< ::cc::proto::InitializeImpl*>(
      ::cc::proto::InitializeImpl::internal_default_instance());
#else
  initialize_impl_message_ = const_cast< ::cc::proto::InitializeImpl*>(&::cc::proto::InitializeImpl::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  defer_commits_message_ = const_cast< ::cc::proto::SetDeferCommits*>(
      ::cc::proto::SetDeferCommits::internal_default_instance());
#else
  defer_commits_message_ = const_cast< ::cc::proto::SetDeferCommits*>(&::cc::proto::SetDeferCommits::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  start_commit_message_ = const_cast< ::cc::proto::StartCommit*>(
      ::cc::proto::StartCommit::internal_default_instance());
#else
  start_commit_message_ = const_cast< ::cc::proto::StartCommit*>(&::cc::proto::StartCommit::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  begin_main_frame_aborted_message_ = const_cast< ::cc::proto::BeginMainFrameAborted*>(
      ::cc::proto::BeginMainFrameAborted::internal_default_instance());
#else
  begin_main_frame_aborted_message_ = const_cast< ::cc::proto::BeginMainFrameAborted*>(&::cc::proto::BeginMainFrameAborted::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  set_needs_redraw_message_ = const_cast< ::cc::proto::SetNeedsRedraw*>(
      ::cc::proto::SetNeedsRedraw::internal_default_instance());
#else
  set_needs_redraw_message_ = const_cast< ::cc::proto::SetNeedsRedraw*>(&::cc::proto::SetNeedsRedraw::default_instance());
#endif
}

CompositorMessageToImpl::CompositorMessageToImpl(const CompositorMessageToImpl& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.CompositorMessageToImpl)
}

void CompositorMessageToImpl::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_ = 0;
  initialize_impl_message_ = NULL;
  defer_commits_message_ = NULL;
  start_commit_message_ = NULL;
  begin_main_frame_aborted_message_ = NULL;
  set_needs_redraw_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompositorMessageToImpl::~CompositorMessageToImpl() {
  // @@protoc_insertion_point(destructor:cc.proto.CompositorMessageToImpl)
  SharedDtor();
}

void CompositorMessageToImpl::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete initialize_impl_message_;
    delete defer_commits_message_;
    delete start_commit_message_;
    delete begin_main_frame_aborted_message_;
    delete set_needs_redraw_message_;
  }
}

void CompositorMessageToImpl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CompositorMessageToImpl& CompositorMessageToImpl::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#endif
  return *default_instance_;
}

CompositorMessageToImpl* CompositorMessageToImpl::default_instance_ = NULL;

CompositorMessageToImpl* CompositorMessageToImpl::New(::google::protobuf::Arena* arena) const {
  CompositorMessageToImpl* n = new CompositorMessageToImpl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompositorMessageToImpl::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.CompositorMessageToImpl)
  if (_has_bits_[0 / 32] & 63u) {
    message_type_ = 0;
    if (has_initialize_impl_message()) {
      if (initialize_impl_message_ != NULL) initialize_impl_message_->::cc::proto::InitializeImpl::Clear();
    }
    if (has_defer_commits_message()) {
      if (defer_commits_message_ != NULL) defer_commits_message_->::cc::proto::SetDeferCommits::Clear();
    }
    if (has_start_commit_message()) {
      if (start_commit_message_ != NULL) start_commit_message_->::cc::proto::StartCommit::Clear();
    }
    if (has_begin_main_frame_aborted_message()) {
      if (begin_main_frame_aborted_message_ != NULL) begin_main_frame_aborted_message_->::cc::proto::BeginMainFrameAborted::Clear();
    }
    if (has_set_needs_redraw_message()) {
      if (set_needs_redraw_message_ != NULL) set_needs_redraw_message_->::cc::proto::SetNeedsRedraw::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CompositorMessageToImpl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCompositorMessageToImpl, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.CompositorMessageToImpl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.CompositorMessageToImpl.Type message_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::CompositorMessageToImpl_Type_IsValid(value)) {
            set_message_type(static_cast< ::cc::proto::CompositorMessageToImpl_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_initialize_impl_message;
        break;
      }

      // optional .cc.proto.InitializeImpl initialize_impl_message = 2;
      case 2: {
        if (tag == 18) {
         parse_initialize_impl_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initialize_impl_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_defer_commits_message;
        break;
      }

      // optional .cc.proto.SetDeferCommits defer_commits_message = 3;
      case 3: {
        if (tag == 26) {
         parse_defer_commits_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defer_commits_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_start_commit_message;
        break;
      }

      // optional .cc.proto.StartCommit start_commit_message = 4;
      case 4: {
        if (tag == 34) {
         parse_start_commit_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_commit_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_begin_main_frame_aborted_message;
        break;
      }

      // optional .cc.proto.BeginMainFrameAborted begin_main_frame_aborted_message = 5;
      case 5: {
        if (tag == 42) {
         parse_begin_main_frame_aborted_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin_main_frame_aborted_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_set_needs_redraw_message;
        break;
      }

      // optional .cc.proto.SetNeedsRedraw set_needs_redraw_message = 6;
      case 6: {
        if (tag == 50) {
         parse_set_needs_redraw_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_needs_redraw_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.CompositorMessageToImpl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.CompositorMessageToImpl)
  return false;
#undef DO_
}

void CompositorMessageToImpl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.CompositorMessageToImpl)
  // optional .cc.proto.CompositorMessageToImpl.Type message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }

  // optional .cc.proto.InitializeImpl initialize_impl_message = 2;
  if (has_initialize_impl_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->initialize_impl_message_, output);
  }

  // optional .cc.proto.SetDeferCommits defer_commits_message = 3;
  if (has_defer_commits_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->defer_commits_message_, output);
  }

  // optional .cc.proto.StartCommit start_commit_message = 4;
  if (has_start_commit_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->start_commit_message_, output);
  }

  // optional .cc.proto.BeginMainFrameAborted begin_main_frame_aborted_message = 5;
  if (has_begin_main_frame_aborted_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->begin_main_frame_aborted_message_, output);
  }

  // optional .cc.proto.SetNeedsRedraw set_needs_redraw_message = 6;
  if (has_set_needs_redraw_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->set_needs_redraw_message_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.CompositorMessageToImpl)
}

int CompositorMessageToImpl::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.CompositorMessageToImpl)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .cc.proto.CompositorMessageToImpl.Type message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
    }

    // optional .cc.proto.InitializeImpl initialize_impl_message = 2;
    if (has_initialize_impl_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->initialize_impl_message_);
    }

    // optional .cc.proto.SetDeferCommits defer_commits_message = 3;
    if (has_defer_commits_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->defer_commits_message_);
    }

    // optional .cc.proto.StartCommit start_commit_message = 4;
    if (has_start_commit_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_commit_message_);
    }

    // optional .cc.proto.BeginMainFrameAborted begin_main_frame_aborted_message = 5;
    if (has_begin_main_frame_aborted_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->begin_main_frame_aborted_message_);
    }

    // optional .cc.proto.SetNeedsRedraw set_needs_redraw_message = 6;
    if (has_set_needs_redraw_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->set_needs_redraw_message_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompositorMessageToImpl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CompositorMessageToImpl*>(&from));
}

void CompositorMessageToImpl::MergeFrom(const CompositorMessageToImpl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.CompositorMessageToImpl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_initialize_impl_message()) {
      mutable_initialize_impl_message()->::cc::proto::InitializeImpl::MergeFrom(from.initialize_impl_message());
    }
    if (from.has_defer_commits_message()) {
      mutable_defer_commits_message()->::cc::proto::SetDeferCommits::MergeFrom(from.defer_commits_message());
    }
    if (from.has_start_commit_message()) {
      mutable_start_commit_message()->::cc::proto::StartCommit::MergeFrom(from.start_commit_message());
    }
    if (from.has_begin_main_frame_aborted_message()) {
      mutable_begin_main_frame_aborted_message()->::cc::proto::BeginMainFrameAborted::MergeFrom(from.begin_main_frame_aborted_message());
    }
    if (from.has_set_needs_redraw_message()) {
      mutable_set_needs_redraw_message()->::cc::proto::SetNeedsRedraw::MergeFrom(from.set_needs_redraw_message());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CompositorMessageToImpl::CopyFrom(const CompositorMessageToImpl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.CompositorMessageToImpl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositorMessageToImpl::IsInitialized() const {

  if (has_start_commit_message()) {
    if (!this->start_commit_message_->IsInitialized()) return false;
  }
  return true;
}

void CompositorMessageToImpl::Swap(CompositorMessageToImpl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompositorMessageToImpl::InternalSwap(CompositorMessageToImpl* other) {
  std::swap(message_type_, other->message_type_);
  std::swap(initialize_impl_message_, other->initialize_impl_message_);
  std::swap(defer_commits_message_, other->defer_commits_message_);
  std::swap(start_commit_message_, other->start_commit_message_);
  std::swap(begin_main_frame_aborted_message_, other->begin_main_frame_aborted_message_);
  std::swap(set_needs_redraw_message_, other->set_needs_redraw_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CompositorMessageToImpl::GetTypeName() const {
  return "cc.proto.CompositorMessageToImpl";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompositorMessageToImpl

// optional .cc.proto.CompositorMessageToImpl.Type message_type = 1;
bool CompositorMessageToImpl::has_message_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CompositorMessageToImpl::set_has_message_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CompositorMessageToImpl::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CompositorMessageToImpl::clear_message_type() {
  message_type_ = 0;
  clear_has_message_type();
}
 ::cc::proto::CompositorMessageToImpl_Type CompositorMessageToImpl::message_type() const {
  // @@protoc_insertion_point(field_get:cc.proto.CompositorMessageToImpl.message_type)
  return static_cast< ::cc::proto::CompositorMessageToImpl_Type >(message_type_);
}
 void CompositorMessageToImpl::set_message_type(::cc::proto::CompositorMessageToImpl_Type value) {
  assert(::cc::proto::CompositorMessageToImpl_Type_IsValid(value));
  set_has_message_type();
  message_type_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.CompositorMessageToImpl.message_type)
}

// optional .cc.proto.InitializeImpl initialize_impl_message = 2;
bool CompositorMessageToImpl::has_initialize_impl_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CompositorMessageToImpl::set_has_initialize_impl_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CompositorMessageToImpl::clear_has_initialize_impl_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CompositorMessageToImpl::clear_initialize_impl_message() {
  if (initialize_impl_message_ != NULL) initialize_impl_message_->::cc::proto::InitializeImpl::Clear();
  clear_has_initialize_impl_message();
}
const ::cc::proto::InitializeImpl& CompositorMessageToImpl::initialize_impl_message() const {
  // @@protoc_insertion_point(field_get:cc.proto.CompositorMessageToImpl.initialize_impl_message)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return initialize_impl_message_ != NULL ? *initialize_impl_message_ : *default_instance().initialize_impl_message_;
#else
  return initialize_impl_message_ != NULL ? *initialize_impl_message_ : *default_instance_->initialize_impl_message_;
#endif
}
::cc::proto::InitializeImpl* CompositorMessageToImpl::mutable_initialize_impl_message() {
  set_has_initialize_impl_message();
  if (initialize_impl_message_ == NULL) {
    initialize_impl_message_ = new ::cc::proto::InitializeImpl;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.CompositorMessageToImpl.initialize_impl_message)
  return initialize_impl_message_;
}
::cc::proto::InitializeImpl* CompositorMessageToImpl::release_initialize_impl_message() {
  // @@protoc_insertion_point(field_release:cc.proto.CompositorMessageToImpl.initialize_impl_message)
  clear_has_initialize_impl_message();
  ::cc::proto::InitializeImpl* temp = initialize_impl_message_;
  initialize_impl_message_ = NULL;
  return temp;
}
void CompositorMessageToImpl::set_allocated_initialize_impl_message(::cc::proto::InitializeImpl* initialize_impl_message) {
  delete initialize_impl_message_;
  initialize_impl_message_ = initialize_impl_message;
  if (initialize_impl_message) {
    set_has_initialize_impl_message();
  } else {
    clear_has_initialize_impl_message();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.CompositorMessageToImpl.initialize_impl_message)
}

// optional .cc.proto.SetDeferCommits defer_commits_message = 3;
bool CompositorMessageToImpl::has_defer_commits_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CompositorMessageToImpl::set_has_defer_commits_message() {
  _has_bits_[0] |= 0x00000004u;
}
void CompositorMessageToImpl::clear_has_defer_commits_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void CompositorMessageToImpl::clear_defer_commits_message() {
  if (defer_commits_message_ != NULL) defer_commits_message_->::cc::proto::SetDeferCommits::Clear();
  clear_has_defer_commits_message();
}
const ::cc::proto::SetDeferCommits& CompositorMessageToImpl::defer_commits_message() const {
  // @@protoc_insertion_point(field_get:cc.proto.CompositorMessageToImpl.defer_commits_message)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return defer_commits_message_ != NULL ? *defer_commits_message_ : *default_instance().defer_commits_message_;
#else
  return defer_commits_message_ != NULL ? *defer_commits_message_ : *default_instance_->defer_commits_message_;
#endif
}
::cc::proto::SetDeferCommits* CompositorMessageToImpl::mutable_defer_commits_message() {
  set_has_defer_commits_message();
  if (defer_commits_message_ == NULL) {
    defer_commits_message_ = new ::cc::proto::SetDeferCommits;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.CompositorMessageToImpl.defer_commits_message)
  return defer_commits_message_;
}
::cc::proto::SetDeferCommits* CompositorMessageToImpl::release_defer_commits_message() {
  // @@protoc_insertion_point(field_release:cc.proto.CompositorMessageToImpl.defer_commits_message)
  clear_has_defer_commits_message();
  ::cc::proto::SetDeferCommits* temp = defer_commits_message_;
  defer_commits_message_ = NULL;
  return temp;
}
void CompositorMessageToImpl::set_allocated_defer_commits_message(::cc::proto::SetDeferCommits* defer_commits_message) {
  delete defer_commits_message_;
  defer_commits_message_ = defer_commits_message;
  if (defer_commits_message) {
    set_has_defer_commits_message();
  } else {
    clear_has_defer_commits_message();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.CompositorMessageToImpl.defer_commits_message)
}

// optional .cc.proto.StartCommit start_commit_message = 4;
bool CompositorMessageToImpl::has_start_commit_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CompositorMessageToImpl::set_has_start_commit_message() {
  _has_bits_[0] |= 0x00000008u;
}
void CompositorMessageToImpl::clear_has_start_commit_message() {
  _has_bits_[0] &= ~0x00000008u;
}
void CompositorMessageToImpl::clear_start_commit_message() {
  if (start_commit_message_ != NULL) start_commit_message_->::cc::proto::StartCommit::Clear();
  clear_has_start_commit_message();
}
const ::cc::proto::StartCommit& CompositorMessageToImpl::start_commit_message() const {
  // @@protoc_insertion_point(field_get:cc.proto.CompositorMessageToImpl.start_commit_message)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return start_commit_message_ != NULL ? *start_commit_message_ : *default_instance().start_commit_message_;
#else
  return start_commit_message_ != NULL ? *start_commit_message_ : *default_instance_->start_commit_message_;
#endif
}
::cc::proto::StartCommit* CompositorMessageToImpl::mutable_start_commit_message() {
  set_has_start_commit_message();
  if (start_commit_message_ == NULL) {
    start_commit_message_ = new ::cc::proto::StartCommit;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.CompositorMessageToImpl.start_commit_message)
  return start_commit_message_;
}
::cc::proto::StartCommit* CompositorMessageToImpl::release_start_commit_message() {
  // @@protoc_insertion_point(field_release:cc.proto.CompositorMessageToImpl.start_commit_message)
  clear_has_start_commit_message();
  ::cc::proto::StartCommit* temp = start_commit_message_;
  start_commit_message_ = NULL;
  return temp;
}
void CompositorMessageToImpl::set_allocated_start_commit_message(::cc::proto::StartCommit* start_commit_message) {
  delete start_commit_message_;
  start_commit_message_ = start_commit_message;
  if (start_commit_message) {
    set_has_start_commit_message();
  } else {
    clear_has_start_commit_message();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.CompositorMessageToImpl.start_commit_message)
}

// optional .cc.proto.BeginMainFrameAborted begin_main_frame_aborted_message = 5;
bool CompositorMessageToImpl::has_begin_main_frame_aborted_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CompositorMessageToImpl::set_has_begin_main_frame_aborted_message() {
  _has_bits_[0] |= 0x00000010u;
}
void CompositorMessageToImpl::clear_has_begin_main_frame_aborted_message() {
  _has_bits_[0] &= ~0x00000010u;
}
void CompositorMessageToImpl::clear_begin_main_frame_aborted_message() {
  if (begin_main_frame_aborted_message_ != NULL) begin_main_frame_aborted_message_->::cc::proto::BeginMainFrameAborted::Clear();
  clear_has_begin_main_frame_aborted_message();
}
const ::cc::proto::BeginMainFrameAborted& CompositorMessageToImpl::begin_main_frame_aborted_message() const {
  // @@protoc_insertion_point(field_get:cc.proto.CompositorMessageToImpl.begin_main_frame_aborted_message)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return begin_main_frame_aborted_message_ != NULL ? *begin_main_frame_aborted_message_ : *default_instance().begin_main_frame_aborted_message_;
#else
  return begin_main_frame_aborted_message_ != NULL ? *begin_main_frame_aborted_message_ : *default_instance_->begin_main_frame_aborted_message_;
#endif
}
::cc::proto::BeginMainFrameAborted* CompositorMessageToImpl::mutable_begin_main_frame_aborted_message() {
  set_has_begin_main_frame_aborted_message();
  if (begin_main_frame_aborted_message_ == NULL) {
    begin_main_frame_aborted_message_ = new ::cc::proto::BeginMainFrameAborted;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.CompositorMessageToImpl.begin_main_frame_aborted_message)
  return begin_main_frame_aborted_message_;
}
::cc::proto::BeginMainFrameAborted* CompositorMessageToImpl::release_begin_main_frame_aborted_message() {
  // @@protoc_insertion_point(field_release:cc.proto.CompositorMessageToImpl.begin_main_frame_aborted_message)
  clear_has_begin_main_frame_aborted_message();
  ::cc::proto::BeginMainFrameAborted* temp = begin_main_frame_aborted_message_;
  begin_main_frame_aborted_message_ = NULL;
  return temp;
}
void CompositorMessageToImpl::set_allocated_begin_main_frame_aborted_message(::cc::proto::BeginMainFrameAborted* begin_main_frame_aborted_message) {
  delete begin_main_frame_aborted_message_;
  begin_main_frame_aborted_message_ = begin_main_frame_aborted_message;
  if (begin_main_frame_aborted_message) {
    set_has_begin_main_frame_aborted_message();
  } else {
    clear_has_begin_main_frame_aborted_message();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.CompositorMessageToImpl.begin_main_frame_aborted_message)
}

// optional .cc.proto.SetNeedsRedraw set_needs_redraw_message = 6;
bool CompositorMessageToImpl::has_set_needs_redraw_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CompositorMessageToImpl::set_has_set_needs_redraw_message() {
  _has_bits_[0] |= 0x00000020u;
}
void CompositorMessageToImpl::clear_has_set_needs_redraw_message() {
  _has_bits_[0] &= ~0x00000020u;
}
void CompositorMessageToImpl::clear_set_needs_redraw_message() {
  if (set_needs_redraw_message_ != NULL) set_needs_redraw_message_->::cc::proto::SetNeedsRedraw::Clear();
  clear_has_set_needs_redraw_message();
}
const ::cc::proto::SetNeedsRedraw& CompositorMessageToImpl::set_needs_redraw_message() const {
  // @@protoc_insertion_point(field_get:cc.proto.CompositorMessageToImpl.set_needs_redraw_message)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return set_needs_redraw_message_ != NULL ? *set_needs_redraw_message_ : *default_instance().set_needs_redraw_message_;
#else
  return set_needs_redraw_message_ != NULL ? *set_needs_redraw_message_ : *default_instance_->set_needs_redraw_message_;
#endif
}
::cc::proto::SetNeedsRedraw* CompositorMessageToImpl::mutable_set_needs_redraw_message() {
  set_has_set_needs_redraw_message();
  if (set_needs_redraw_message_ == NULL) {
    set_needs_redraw_message_ = new ::cc::proto::SetNeedsRedraw;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.CompositorMessageToImpl.set_needs_redraw_message)
  return set_needs_redraw_message_;
}
::cc::proto::SetNeedsRedraw* CompositorMessageToImpl::release_set_needs_redraw_message() {
  // @@protoc_insertion_point(field_release:cc.proto.CompositorMessageToImpl.set_needs_redraw_message)
  clear_has_set_needs_redraw_message();
  ::cc::proto::SetNeedsRedraw* temp = set_needs_redraw_message_;
  set_needs_redraw_message_ = NULL;
  return temp;
}
void CompositorMessageToImpl::set_allocated_set_needs_redraw_message(::cc::proto::SetNeedsRedraw* set_needs_redraw_message) {
  delete set_needs_redraw_message_;
  set_needs_redraw_message_ = set_needs_redraw_message;
  if (set_needs_redraw_message) {
    set_has_set_needs_redraw_message();
  } else {
    clear_has_set_needs_redraw_message();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.CompositorMessageToImpl.set_needs_redraw_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForInitializeImpl(
    InitializeImpl* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitializeImpl::kLayerTreeSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitializeImpl::InitializeImpl()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.InitializeImpl)
}

void InitializeImpl::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  layer_tree_settings_ = const_cast< ::cc::proto::LayerTreeSettings*>(
      ::cc::proto::LayerTreeSettings::internal_default_instance());
#else
  layer_tree_settings_ = const_cast< ::cc::proto::LayerTreeSettings*>(&::cc::proto::LayerTreeSettings::default_instance());
#endif
}

InitializeImpl::InitializeImpl(const InitializeImpl& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.InitializeImpl)
}

void InitializeImpl::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_tree_settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitializeImpl::~InitializeImpl() {
  // @@protoc_insertion_point(destructor:cc.proto.InitializeImpl)
  SharedDtor();
}

void InitializeImpl::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete layer_tree_settings_;
  }
}

void InitializeImpl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InitializeImpl& InitializeImpl::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#endif
  return *default_instance_;
}

InitializeImpl* InitializeImpl::default_instance_ = NULL;

InitializeImpl* InitializeImpl::New(::google::protobuf::Arena* arena) const {
  InitializeImpl* n = new InitializeImpl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitializeImpl::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.InitializeImpl)
  if (has_layer_tree_settings()) {
    if (layer_tree_settings_ != NULL) layer_tree_settings_->::cc::proto::LayerTreeSettings::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InitializeImpl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInitializeImpl, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.InitializeImpl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.LayerTreeSettings layer_tree_settings = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer_tree_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.InitializeImpl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.InitializeImpl)
  return false;
#undef DO_
}

void InitializeImpl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.InitializeImpl)
  // optional .cc.proto.LayerTreeSettings layer_tree_settings = 1;
  if (has_layer_tree_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->layer_tree_settings_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.InitializeImpl)
}

int InitializeImpl::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.InitializeImpl)
  int total_size = 0;

  // optional .cc.proto.LayerTreeSettings layer_tree_settings = 1;
  if (has_layer_tree_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->layer_tree_settings_);
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitializeImpl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InitializeImpl*>(&from));
}

void InitializeImpl::MergeFrom(const InitializeImpl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.InitializeImpl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer_tree_settings()) {
      mutable_layer_tree_settings()->::cc::proto::LayerTreeSettings::MergeFrom(from.layer_tree_settings());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InitializeImpl::CopyFrom(const InitializeImpl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.InitializeImpl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeImpl::IsInitialized() const {

  return true;
}

void InitializeImpl::Swap(InitializeImpl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitializeImpl::InternalSwap(InitializeImpl* other) {
  std::swap(layer_tree_settings_, other->layer_tree_settings_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InitializeImpl::GetTypeName() const {
  return "cc.proto.InitializeImpl";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitializeImpl

// optional .cc.proto.LayerTreeSettings layer_tree_settings = 1;
bool InitializeImpl::has_layer_tree_settings() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitializeImpl::set_has_layer_tree_settings() {
  _has_bits_[0] |= 0x00000001u;
}
void InitializeImpl::clear_has_layer_tree_settings() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitializeImpl::clear_layer_tree_settings() {
  if (layer_tree_settings_ != NULL) layer_tree_settings_->::cc::proto::LayerTreeSettings::Clear();
  clear_has_layer_tree_settings();
}
const ::cc::proto::LayerTreeSettings& InitializeImpl::layer_tree_settings() const {
  // @@protoc_insertion_point(field_get:cc.proto.InitializeImpl.layer_tree_settings)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return layer_tree_settings_ != NULL ? *layer_tree_settings_ : *default_instance().layer_tree_settings_;
#else
  return layer_tree_settings_ != NULL ? *layer_tree_settings_ : *default_instance_->layer_tree_settings_;
#endif
}
::cc::proto::LayerTreeSettings* InitializeImpl::mutable_layer_tree_settings() {
  set_has_layer_tree_settings();
  if (layer_tree_settings_ == NULL) {
    layer_tree_settings_ = new ::cc::proto::LayerTreeSettings;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.InitializeImpl.layer_tree_settings)
  return layer_tree_settings_;
}
::cc::proto::LayerTreeSettings* InitializeImpl::release_layer_tree_settings() {
  // @@protoc_insertion_point(field_release:cc.proto.InitializeImpl.layer_tree_settings)
  clear_has_layer_tree_settings();
  ::cc::proto::LayerTreeSettings* temp = layer_tree_settings_;
  layer_tree_settings_ = NULL;
  return temp;
}
void InitializeImpl::set_allocated_layer_tree_settings(::cc::proto::LayerTreeSettings* layer_tree_settings) {
  delete layer_tree_settings_;
  layer_tree_settings_ = layer_tree_settings;
  if (layer_tree_settings) {
    set_has_layer_tree_settings();
  } else {
    clear_has_layer_tree_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.InitializeImpl.layer_tree_settings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSetDeferCommits(
    SetDeferCommits* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetDeferCommits::kDeferCommitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetDeferCommits::SetDeferCommits()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.SetDeferCommits)
}

void SetDeferCommits::InitAsDefaultInstance() {
}

SetDeferCommits::SetDeferCommits(const SetDeferCommits& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.SetDeferCommits)
}

void SetDeferCommits::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defer_commits_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDeferCommits::~SetDeferCommits() {
  // @@protoc_insertion_point(destructor:cc.proto.SetDeferCommits)
  SharedDtor();
}

void SetDeferCommits::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SetDeferCommits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SetDeferCommits& SetDeferCommits::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#endif
  return *default_instance_;
}

SetDeferCommits* SetDeferCommits::default_instance_ = NULL;

SetDeferCommits* SetDeferCommits::New(::google::protobuf::Arena* arena) const {
  SetDeferCommits* n = new SetDeferCommits;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetDeferCommits::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.SetDeferCommits)
  defer_commits_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetDeferCommits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSetDeferCommits, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.SetDeferCommits)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool defer_commits = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defer_commits_)));
          set_has_defer_commits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.SetDeferCommits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.SetDeferCommits)
  return false;
#undef DO_
}

void SetDeferCommits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.SetDeferCommits)
  // optional bool defer_commits = 1;
  if (has_defer_commits()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->defer_commits(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.SetDeferCommits)
}

int SetDeferCommits::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.SetDeferCommits)
  int total_size = 0;

  // optional bool defer_commits = 1;
  if (has_defer_commits()) {
    total_size += 1 + 1;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDeferCommits::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SetDeferCommits*>(&from));
}

void SetDeferCommits::MergeFrom(const SetDeferCommits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.SetDeferCommits)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_defer_commits()) {
      set_defer_commits(from.defer_commits());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SetDeferCommits::CopyFrom(const SetDeferCommits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.SetDeferCommits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDeferCommits::IsInitialized() const {

  return true;
}

void SetDeferCommits::Swap(SetDeferCommits* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetDeferCommits::InternalSwap(SetDeferCommits* other) {
  std::swap(defer_commits_, other->defer_commits_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SetDeferCommits::GetTypeName() const {
  return "cc.proto.SetDeferCommits";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetDeferCommits

// optional bool defer_commits = 1;
bool SetDeferCommits::has_defer_commits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetDeferCommits::set_has_defer_commits() {
  _has_bits_[0] |= 0x00000001u;
}
void SetDeferCommits::clear_has_defer_commits() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetDeferCommits::clear_defer_commits() {
  defer_commits_ = false;
  clear_has_defer_commits();
}
 bool SetDeferCommits::defer_commits() const {
  // @@protoc_insertion_point(field_get:cc.proto.SetDeferCommits.defer_commits)
  return defer_commits_;
}
 void SetDeferCommits::set_defer_commits(bool value) {
  set_has_defer_commits();
  defer_commits_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.SetDeferCommits.defer_commits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForStartCommit(
    StartCommit* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartCommit::kLayerTreeHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartCommit::StartCommit()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.StartCommit)
}

void StartCommit::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  layer_tree_host_ = const_cast< ::cc::proto::LayerTreeHost*>(
      ::cc::proto::LayerTreeHost::internal_default_instance());
#else
  layer_tree_host_ = const_cast< ::cc::proto::LayerTreeHost*>(&::cc::proto::LayerTreeHost::default_instance());
#endif
}

StartCommit::StartCommit(const StartCommit& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.StartCommit)
}

void StartCommit::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_tree_host_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartCommit::~StartCommit() {
  // @@protoc_insertion_point(destructor:cc.proto.StartCommit)
  SharedDtor();
}

void StartCommit::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete layer_tree_host_;
  }
}

void StartCommit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StartCommit& StartCommit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#endif
  return *default_instance_;
}

StartCommit* StartCommit::default_instance_ = NULL;

StartCommit* StartCommit::New(::google::protobuf::Arena* arena) const {
  StartCommit* n = new StartCommit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.StartCommit)
  if (has_layer_tree_host()) {
    if (layer_tree_host_ != NULL) layer_tree_host_->::cc::proto::LayerTreeHost::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StartCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForStartCommit, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.StartCommit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.LayerTreeHost layer_tree_host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer_tree_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.StartCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.StartCommit)
  return false;
#undef DO_
}

void StartCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.StartCommit)
  // optional .cc.proto.LayerTreeHost layer_tree_host = 1;
  if (has_layer_tree_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->layer_tree_host_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.StartCommit)
}

int StartCommit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.StartCommit)
  int total_size = 0;

  // optional .cc.proto.LayerTreeHost layer_tree_host = 1;
  if (has_layer_tree_host()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->layer_tree_host_);
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartCommit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartCommit*>(&from));
}

void StartCommit::MergeFrom(const StartCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.StartCommit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer_tree_host()) {
      mutable_layer_tree_host()->::cc::proto::LayerTreeHost::MergeFrom(from.layer_tree_host());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void StartCommit::CopyFrom(const StartCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.StartCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartCommit::IsInitialized() const {

  if (has_layer_tree_host()) {
    if (!this->layer_tree_host_->IsInitialized()) return false;
  }
  return true;
}

void StartCommit::Swap(StartCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartCommit::InternalSwap(StartCommit* other) {
  std::swap(layer_tree_host_, other->layer_tree_host_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StartCommit::GetTypeName() const {
  return "cc.proto.StartCommit";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartCommit

// optional .cc.proto.LayerTreeHost layer_tree_host = 1;
bool StartCommit::has_layer_tree_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StartCommit::set_has_layer_tree_host() {
  _has_bits_[0] |= 0x00000001u;
}
void StartCommit::clear_has_layer_tree_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void StartCommit::clear_layer_tree_host() {
  if (layer_tree_host_ != NULL) layer_tree_host_->::cc::proto::LayerTreeHost::Clear();
  clear_has_layer_tree_host();
}
const ::cc::proto::LayerTreeHost& StartCommit::layer_tree_host() const {
  // @@protoc_insertion_point(field_get:cc.proto.StartCommit.layer_tree_host)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return layer_tree_host_ != NULL ? *layer_tree_host_ : *default_instance().layer_tree_host_;
#else
  return layer_tree_host_ != NULL ? *layer_tree_host_ : *default_instance_->layer_tree_host_;
#endif
}
::cc::proto::LayerTreeHost* StartCommit::mutable_layer_tree_host() {
  set_has_layer_tree_host();
  if (layer_tree_host_ == NULL) {
    layer_tree_host_ = new ::cc::proto::LayerTreeHost;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.StartCommit.layer_tree_host)
  return layer_tree_host_;
}
::cc::proto::LayerTreeHost* StartCommit::release_layer_tree_host() {
  // @@protoc_insertion_point(field_release:cc.proto.StartCommit.layer_tree_host)
  clear_has_layer_tree_host();
  ::cc::proto::LayerTreeHost* temp = layer_tree_host_;
  layer_tree_host_ = NULL;
  return temp;
}
void StartCommit::set_allocated_layer_tree_host(::cc::proto::LayerTreeHost* layer_tree_host) {
  delete layer_tree_host_;
  layer_tree_host_ = layer_tree_host;
  if (layer_tree_host) {
    set_has_layer_tree_host();
  } else {
    clear_has_layer_tree_host();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.StartCommit.layer_tree_host)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForBeginMainFrameAborted(
    BeginMainFrameAborted* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginMainFrameAborted::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginMainFrameAborted::BeginMainFrameAborted()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.BeginMainFrameAborted)
}

void BeginMainFrameAborted::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  reason_ = const_cast< ::cc::proto::CommitEarlyOutReason*>(
      ::cc::proto::CommitEarlyOutReason::internal_default_instance());
#else
  reason_ = const_cast< ::cc::proto::CommitEarlyOutReason*>(&::cc::proto::CommitEarlyOutReason::default_instance());
#endif
}

BeginMainFrameAborted::BeginMainFrameAborted(const BeginMainFrameAborted& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.BeginMainFrameAborted)
}

void BeginMainFrameAborted::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginMainFrameAborted::~BeginMainFrameAborted() {
  // @@protoc_insertion_point(destructor:cc.proto.BeginMainFrameAborted)
  SharedDtor();
}

void BeginMainFrameAborted::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete reason_;
  }
}

void BeginMainFrameAborted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BeginMainFrameAborted& BeginMainFrameAborted::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#endif
  return *default_instance_;
}

BeginMainFrameAborted* BeginMainFrameAborted::default_instance_ = NULL;

BeginMainFrameAborted* BeginMainFrameAborted::New(::google::protobuf::Arena* arena) const {
  BeginMainFrameAborted* n = new BeginMainFrameAborted;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginMainFrameAborted::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.BeginMainFrameAborted)
  if (has_reason()) {
    if (reason_ != NULL) reason_->::cc::proto::CommitEarlyOutReason::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BeginMainFrameAborted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForBeginMainFrameAborted, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.BeginMainFrameAborted)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.CommitEarlyOutReason reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.BeginMainFrameAborted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.BeginMainFrameAborted)
  return false;
#undef DO_
}

void BeginMainFrameAborted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.BeginMainFrameAborted)
  // optional .cc.proto.CommitEarlyOutReason reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->reason_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.BeginMainFrameAborted)
}

int BeginMainFrameAborted::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.BeginMainFrameAborted)
  int total_size = 0;

  // optional .cc.proto.CommitEarlyOutReason reason = 1;
  if (has_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reason_);
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginMainFrameAborted::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BeginMainFrameAborted*>(&from));
}

void BeginMainFrameAborted::MergeFrom(const BeginMainFrameAborted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.BeginMainFrameAborted)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      mutable_reason()->::cc::proto::CommitEarlyOutReason::MergeFrom(from.reason());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void BeginMainFrameAborted::CopyFrom(const BeginMainFrameAborted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.BeginMainFrameAborted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginMainFrameAborted::IsInitialized() const {

  return true;
}

void BeginMainFrameAborted::Swap(BeginMainFrameAborted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginMainFrameAborted::InternalSwap(BeginMainFrameAborted* other) {
  std::swap(reason_, other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BeginMainFrameAborted::GetTypeName() const {
  return "cc.proto.BeginMainFrameAborted";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeginMainFrameAborted

// optional .cc.proto.CommitEarlyOutReason reason = 1;
bool BeginMainFrameAborted::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BeginMainFrameAborted::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void BeginMainFrameAborted::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void BeginMainFrameAborted::clear_reason() {
  if (reason_ != NULL) reason_->::cc::proto::CommitEarlyOutReason::Clear();
  clear_has_reason();
}
const ::cc::proto::CommitEarlyOutReason& BeginMainFrameAborted::reason() const {
  // @@protoc_insertion_point(field_get:cc.proto.BeginMainFrameAborted.reason)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return reason_ != NULL ? *reason_ : *default_instance().reason_;
#else
  return reason_ != NULL ? *reason_ : *default_instance_->reason_;
#endif
}
::cc::proto::CommitEarlyOutReason* BeginMainFrameAborted::mutable_reason() {
  set_has_reason();
  if (reason_ == NULL) {
    reason_ = new ::cc::proto::CommitEarlyOutReason;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.BeginMainFrameAborted.reason)
  return reason_;
}
::cc::proto::CommitEarlyOutReason* BeginMainFrameAborted::release_reason() {
  // @@protoc_insertion_point(field_release:cc.proto.BeginMainFrameAborted.reason)
  clear_has_reason();
  ::cc::proto::CommitEarlyOutReason* temp = reason_;
  reason_ = NULL;
  return temp;
}
void BeginMainFrameAborted::set_allocated_reason(::cc::proto::CommitEarlyOutReason* reason) {
  delete reason_;
  reason_ = reason;
  if (reason) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.BeginMainFrameAborted.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSetNeedsRedraw(
    SetNeedsRedraw* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetNeedsRedraw::kDamagedRectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetNeedsRedraw::SetNeedsRedraw()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.SetNeedsRedraw)
}

void SetNeedsRedraw::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  damaged_rect_ = const_cast< ::cc::proto::Rect*>(
      ::cc::proto::Rect::internal_default_instance());
#else
  damaged_rect_ = const_cast< ::cc::proto::Rect*>(&::cc::proto::Rect::default_instance());
#endif
}

SetNeedsRedraw::SetNeedsRedraw(const SetNeedsRedraw& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.SetNeedsRedraw)
}

void SetNeedsRedraw::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  damaged_rect_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetNeedsRedraw::~SetNeedsRedraw() {
  // @@protoc_insertion_point(destructor:cc.proto.SetNeedsRedraw)
  SharedDtor();
}

void SetNeedsRedraw::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete damaged_rect_;
  }
}

void SetNeedsRedraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SetNeedsRedraw& SetNeedsRedraw::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#endif
  return *default_instance_;
}

SetNeedsRedraw* SetNeedsRedraw::default_instance_ = NULL;

SetNeedsRedraw* SetNeedsRedraw::New(::google::protobuf::Arena* arena) const {
  SetNeedsRedraw* n = new SetNeedsRedraw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetNeedsRedraw::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.SetNeedsRedraw)
  if (has_damaged_rect()) {
    if (damaged_rect_ != NULL) damaged_rect_->::cc::proto::Rect::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetNeedsRedraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSetNeedsRedraw, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.SetNeedsRedraw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.Rect damaged_rect = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_damaged_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.SetNeedsRedraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.SetNeedsRedraw)
  return false;
#undef DO_
}

void SetNeedsRedraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.SetNeedsRedraw)
  // optional .cc.proto.Rect damaged_rect = 1;
  if (has_damaged_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->damaged_rect_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.SetNeedsRedraw)
}

int SetNeedsRedraw::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.SetNeedsRedraw)
  int total_size = 0;

  // optional .cc.proto.Rect damaged_rect = 1;
  if (has_damaged_rect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->damaged_rect_);
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetNeedsRedraw::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SetNeedsRedraw*>(&from));
}

void SetNeedsRedraw::MergeFrom(const SetNeedsRedraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.SetNeedsRedraw)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damaged_rect()) {
      mutable_damaged_rect()->::cc::proto::Rect::MergeFrom(from.damaged_rect());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SetNeedsRedraw::CopyFrom(const SetNeedsRedraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.SetNeedsRedraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNeedsRedraw::IsInitialized() const {

  return true;
}

void SetNeedsRedraw::Swap(SetNeedsRedraw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetNeedsRedraw::InternalSwap(SetNeedsRedraw* other) {
  std::swap(damaged_rect_, other->damaged_rect_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SetNeedsRedraw::GetTypeName() const {
  return "cc.proto.SetNeedsRedraw";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetNeedsRedraw

// optional .cc.proto.Rect damaged_rect = 1;
bool SetNeedsRedraw::has_damaged_rect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetNeedsRedraw::set_has_damaged_rect() {
  _has_bits_[0] |= 0x00000001u;
}
void SetNeedsRedraw::clear_has_damaged_rect() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetNeedsRedraw::clear_damaged_rect() {
  if (damaged_rect_ != NULL) damaged_rect_->::cc::proto::Rect::Clear();
  clear_has_damaged_rect();
}
const ::cc::proto::Rect& SetNeedsRedraw::damaged_rect() const {
  // @@protoc_insertion_point(field_get:cc.proto.SetNeedsRedraw.damaged_rect)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return damaged_rect_ != NULL ? *damaged_rect_ : *default_instance().damaged_rect_;
#else
  return damaged_rect_ != NULL ? *damaged_rect_ : *default_instance_->damaged_rect_;
#endif
}
::cc::proto::Rect* SetNeedsRedraw::mutable_damaged_rect() {
  set_has_damaged_rect();
  if (damaged_rect_ == NULL) {
    damaged_rect_ = new ::cc::proto::Rect;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.SetNeedsRedraw.damaged_rect)
  return damaged_rect_;
}
::cc::proto::Rect* SetNeedsRedraw::release_damaged_rect() {
  // @@protoc_insertion_point(field_release:cc.proto.SetNeedsRedraw.damaged_rect)
  clear_has_damaged_rect();
  ::cc::proto::Rect* temp = damaged_rect_;
  damaged_rect_ = NULL;
  return temp;
}
void SetNeedsRedraw::set_allocated_damaged_rect(::cc::proto::Rect* damaged_rect) {
  delete damaged_rect_;
  damaged_rect_ = damaged_rect;
  if (damaged_rect) {
    set_has_damaged_rect();
  } else {
    clear_has_damaged_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.SetNeedsRedraw.damaged_rect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
