// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recording_source.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "recording_source.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_recording_5fsource_2eproto() {
  delete RecordingSource::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_recording_5fsource_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_recording_5fsource_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_size_2eproto();
  RecordingSource::default_instance_ = new RecordingSource();
  RecordingSource::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_recording_5fsource_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_recording_5fsource_2eproto_once_);
void protobuf_AddDesc_recording_5fsource_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_recording_5fsource_2eproto_once_,
                 &protobuf_AddDesc_recording_5fsource_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_recording_5fsource_2eproto {
  StaticDescriptorInitializer_recording_5fsource_2eproto() {
    protobuf_AddDesc_recording_5fsource_2eproto();
  }
} static_descriptor_initializer_recording_5fsource_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForRecordingSource(
    RecordingSource* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordingSource::kSizeFieldNumber;
const int RecordingSource::kSlowDownRasterScaleFactorForDebugFieldNumber;
const int RecordingSource::kGenerateDiscardableImagesMetadataFieldNumber;
const int RecordingSource::kRequiresClearFieldNumber;
const int RecordingSource::kIsSolidColorFieldNumber;
const int RecordingSource::kClearCanvasWithDebugColorFieldNumber;
const int RecordingSource::kSolidColorFieldNumber;
const int RecordingSource::kBackgroundColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordingSource::RecordingSource()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.RecordingSource)
}

void RecordingSource::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  size_ = const_cast< ::cc::proto::Size*>(
      ::cc::proto::Size::internal_default_instance());
#else
  size_ = const_cast< ::cc::proto::Size*>(&::cc::proto::Size::default_instance());
#endif
}

RecordingSource::RecordingSource(const RecordingSource& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.RecordingSource)
}

void RecordingSource::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = NULL;
  slow_down_raster_scale_factor_for_debug_ = GOOGLE_LONGLONG(0);
  generate_discardable_images_metadata_ = false;
  requires_clear_ = false;
  is_solid_color_ = false;
  clear_canvas_with_debug_color_ = false;
  solid_color_ = GOOGLE_ULONGLONG(0);
  background_color_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordingSource::~RecordingSource() {
  // @@protoc_insertion_point(destructor:cc.proto.RecordingSource)
  SharedDtor();
}

void RecordingSource::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete size_;
  }
}

void RecordingSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RecordingSource& RecordingSource::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_recording_5fsource_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_recording_5fsource_2eproto();
#endif
  return *default_instance_;
}

RecordingSource* RecordingSource::default_instance_ = NULL;

RecordingSource* RecordingSource::New(::google::protobuf::Arena* arena) const {
  RecordingSource* n = new RecordingSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordingSource::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.RecordingSource)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RecordingSource, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RecordingSource*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(slow_down_raster_scale_factor_for_debug_, clear_canvas_with_debug_color_);
    if (has_size()) {
      if (size_ != NULL) size_->::cc::proto::Size::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RecordingSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRecordingSource, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.RecordingSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.Size size = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slow_down_raster_scale_factor_for_debug;
        break;
      }

      // optional int64 slow_down_raster_scale_factor_for_debug = 2;
      case 2: {
        if (tag == 16) {
         parse_slow_down_raster_scale_factor_for_debug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &slow_down_raster_scale_factor_for_debug_)));
          set_has_slow_down_raster_scale_factor_for_debug();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_generate_discardable_images_metadata;
        break;
      }

      // optional bool generate_discardable_images_metadata = 3;
      case 3: {
        if (tag == 24) {
         parse_generate_discardable_images_metadata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generate_discardable_images_metadata_)));
          set_has_generate_discardable_images_metadata();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_requires_clear;
        break;
      }

      // optional bool requires_clear = 4;
      case 4: {
        if (tag == 32) {
         parse_requires_clear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_clear_)));
          set_has_requires_clear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_solid_color;
        break;
      }

      // optional bool is_solid_color = 5;
      case 5: {
        if (tag == 40) {
         parse_is_solid_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_solid_color_)));
          set_has_is_solid_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_clear_canvas_with_debug_color;
        break;
      }

      // optional bool clear_canvas_with_debug_color = 6;
      case 6: {
        if (tag == 48) {
         parse_clear_canvas_with_debug_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_canvas_with_debug_color_)));
          set_has_clear_canvas_with_debug_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_solid_color;
        break;
      }

      // optional uint64 solid_color = 7;
      case 7: {
        if (tag == 56) {
         parse_solid_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &solid_color_)));
          set_has_solid_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_background_color;
        break;
      }

      // optional uint64 background_color = 8;
      case 8: {
        if (tag == 64) {
         parse_background_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &background_color_)));
          set_has_background_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.RecordingSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.RecordingSource)
  return false;
#undef DO_
}

void RecordingSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.RecordingSource)
  // optional .cc.proto.Size size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->size_, output);
  }

  // optional int64 slow_down_raster_scale_factor_for_debug = 2;
  if (has_slow_down_raster_scale_factor_for_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->slow_down_raster_scale_factor_for_debug(), output);
  }

  // optional bool generate_discardable_images_metadata = 3;
  if (has_generate_discardable_images_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->generate_discardable_images_metadata(), output);
  }

  // optional bool requires_clear = 4;
  if (has_requires_clear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->requires_clear(), output);
  }

  // optional bool is_solid_color = 5;
  if (has_is_solid_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_solid_color(), output);
  }

  // optional bool clear_canvas_with_debug_color = 6;
  if (has_clear_canvas_with_debug_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->clear_canvas_with_debug_color(), output);
  }

  // optional uint64 solid_color = 7;
  if (has_solid_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->solid_color(), output);
  }

  // optional uint64 background_color = 8;
  if (has_background_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->background_color(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.RecordingSource)
}

int RecordingSource::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.RecordingSource)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .cc.proto.Size size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->size_);
    }

    // optional int64 slow_down_raster_scale_factor_for_debug = 2;
    if (has_slow_down_raster_scale_factor_for_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->slow_down_raster_scale_factor_for_debug());
    }

    // optional bool generate_discardable_images_metadata = 3;
    if (has_generate_discardable_images_metadata()) {
      total_size += 1 + 1;
    }

    // optional bool requires_clear = 4;
    if (has_requires_clear()) {
      total_size += 1 + 1;
    }

    // optional bool is_solid_color = 5;
    if (has_is_solid_color()) {
      total_size += 1 + 1;
    }

    // optional bool clear_canvas_with_debug_color = 6;
    if (has_clear_canvas_with_debug_color()) {
      total_size += 1 + 1;
    }

    // optional uint64 solid_color = 7;
    if (has_solid_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->solid_color());
    }

    // optional uint64 background_color = 8;
    if (has_background_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->background_color());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordingSource::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RecordingSource*>(&from));
}

void RecordingSource::MergeFrom(const RecordingSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.RecordingSource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      mutable_size()->::cc::proto::Size::MergeFrom(from.size());
    }
    if (from.has_slow_down_raster_scale_factor_for_debug()) {
      set_slow_down_raster_scale_factor_for_debug(from.slow_down_raster_scale_factor_for_debug());
    }
    if (from.has_generate_discardable_images_metadata()) {
      set_generate_discardable_images_metadata(from.generate_discardable_images_metadata());
    }
    if (from.has_requires_clear()) {
      set_requires_clear(from.requires_clear());
    }
    if (from.has_is_solid_color()) {
      set_is_solid_color(from.is_solid_color());
    }
    if (from.has_clear_canvas_with_debug_color()) {
      set_clear_canvas_with_debug_color(from.clear_canvas_with_debug_color());
    }
    if (from.has_solid_color()) {
      set_solid_color(from.solid_color());
    }
    if (from.has_background_color()) {
      set_background_color(from.background_color());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void RecordingSource::CopyFrom(const RecordingSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.RecordingSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingSource::IsInitialized() const {

  return true;
}

void RecordingSource::Swap(RecordingSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordingSource::InternalSwap(RecordingSource* other) {
  std::swap(size_, other->size_);
  std::swap(slow_down_raster_scale_factor_for_debug_, other->slow_down_raster_scale_factor_for_debug_);
  std::swap(generate_discardable_images_metadata_, other->generate_discardable_images_metadata_);
  std::swap(requires_clear_, other->requires_clear_);
  std::swap(is_solid_color_, other->is_solid_color_);
  std::swap(clear_canvas_with_debug_color_, other->clear_canvas_with_debug_color_);
  std::swap(solid_color_, other->solid_color_);
  std::swap(background_color_, other->background_color_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RecordingSource::GetTypeName() const {
  return "cc.proto.RecordingSource";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordingSource

// optional .cc.proto.Size size = 1;
bool RecordingSource::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecordingSource::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
void RecordingSource::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecordingSource::clear_size() {
  if (size_ != NULL) size_->::cc::proto::Size::Clear();
  clear_has_size();
}
const ::cc::proto::Size& RecordingSource::size() const {
  // @@protoc_insertion_point(field_get:cc.proto.RecordingSource.size)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return size_ != NULL ? *size_ : *default_instance().size_;
#else
  return size_ != NULL ? *size_ : *default_instance_->size_;
#endif
}
::cc::proto::Size* RecordingSource::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::cc::proto::Size;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.RecordingSource.size)
  return size_;
}
::cc::proto::Size* RecordingSource::release_size() {
  // @@protoc_insertion_point(field_release:cc.proto.RecordingSource.size)
  clear_has_size();
  ::cc::proto::Size* temp = size_;
  size_ = NULL;
  return temp;
}
void RecordingSource::set_allocated_size(::cc::proto::Size* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.RecordingSource.size)
}

// optional int64 slow_down_raster_scale_factor_for_debug = 2;
bool RecordingSource::has_slow_down_raster_scale_factor_for_debug() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecordingSource::set_has_slow_down_raster_scale_factor_for_debug() {
  _has_bits_[0] |= 0x00000002u;
}
void RecordingSource::clear_has_slow_down_raster_scale_factor_for_debug() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecordingSource::clear_slow_down_raster_scale_factor_for_debug() {
  slow_down_raster_scale_factor_for_debug_ = GOOGLE_LONGLONG(0);
  clear_has_slow_down_raster_scale_factor_for_debug();
}
 ::google::protobuf::int64 RecordingSource::slow_down_raster_scale_factor_for_debug() const {
  // @@protoc_insertion_point(field_get:cc.proto.RecordingSource.slow_down_raster_scale_factor_for_debug)
  return slow_down_raster_scale_factor_for_debug_;
}
 void RecordingSource::set_slow_down_raster_scale_factor_for_debug(::google::protobuf::int64 value) {
  set_has_slow_down_raster_scale_factor_for_debug();
  slow_down_raster_scale_factor_for_debug_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.RecordingSource.slow_down_raster_scale_factor_for_debug)
}

// optional bool generate_discardable_images_metadata = 3;
bool RecordingSource::has_generate_discardable_images_metadata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecordingSource::set_has_generate_discardable_images_metadata() {
  _has_bits_[0] |= 0x00000004u;
}
void RecordingSource::clear_has_generate_discardable_images_metadata() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecordingSource::clear_generate_discardable_images_metadata() {
  generate_discardable_images_metadata_ = false;
  clear_has_generate_discardable_images_metadata();
}
 bool RecordingSource::generate_discardable_images_metadata() const {
  // @@protoc_insertion_point(field_get:cc.proto.RecordingSource.generate_discardable_images_metadata)
  return generate_discardable_images_metadata_;
}
 void RecordingSource::set_generate_discardable_images_metadata(bool value) {
  set_has_generate_discardable_images_metadata();
  generate_discardable_images_metadata_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.RecordingSource.generate_discardable_images_metadata)
}

// optional bool requires_clear = 4;
bool RecordingSource::has_requires_clear() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RecordingSource::set_has_requires_clear() {
  _has_bits_[0] |= 0x00000008u;
}
void RecordingSource::clear_has_requires_clear() {
  _has_bits_[0] &= ~0x00000008u;
}
void RecordingSource::clear_requires_clear() {
  requires_clear_ = false;
  clear_has_requires_clear();
}
 bool RecordingSource::requires_clear() const {
  // @@protoc_insertion_point(field_get:cc.proto.RecordingSource.requires_clear)
  return requires_clear_;
}
 void RecordingSource::set_requires_clear(bool value) {
  set_has_requires_clear();
  requires_clear_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.RecordingSource.requires_clear)
}

// optional bool is_solid_color = 5;
bool RecordingSource::has_is_solid_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RecordingSource::set_has_is_solid_color() {
  _has_bits_[0] |= 0x00000010u;
}
void RecordingSource::clear_has_is_solid_color() {
  _has_bits_[0] &= ~0x00000010u;
}
void RecordingSource::clear_is_solid_color() {
  is_solid_color_ = false;
  clear_has_is_solid_color();
}
 bool RecordingSource::is_solid_color() const {
  // @@protoc_insertion_point(field_get:cc.proto.RecordingSource.is_solid_color)
  return is_solid_color_;
}
 void RecordingSource::set_is_solid_color(bool value) {
  set_has_is_solid_color();
  is_solid_color_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.RecordingSource.is_solid_color)
}

// optional bool clear_canvas_with_debug_color = 6;
bool RecordingSource::has_clear_canvas_with_debug_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RecordingSource::set_has_clear_canvas_with_debug_color() {
  _has_bits_[0] |= 0x00000020u;
}
void RecordingSource::clear_has_clear_canvas_with_debug_color() {
  _has_bits_[0] &= ~0x00000020u;
}
void RecordingSource::clear_clear_canvas_with_debug_color() {
  clear_canvas_with_debug_color_ = false;
  clear_has_clear_canvas_with_debug_color();
}
 bool RecordingSource::clear_canvas_with_debug_color() const {
  // @@protoc_insertion_point(field_get:cc.proto.RecordingSource.clear_canvas_with_debug_color)
  return clear_canvas_with_debug_color_;
}
 void RecordingSource::set_clear_canvas_with_debug_color(bool value) {
  set_has_clear_canvas_with_debug_color();
  clear_canvas_with_debug_color_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.RecordingSource.clear_canvas_with_debug_color)
}

// optional uint64 solid_color = 7;
bool RecordingSource::has_solid_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RecordingSource::set_has_solid_color() {
  _has_bits_[0] |= 0x00000040u;
}
void RecordingSource::clear_has_solid_color() {
  _has_bits_[0] &= ~0x00000040u;
}
void RecordingSource::clear_solid_color() {
  solid_color_ = GOOGLE_ULONGLONG(0);
  clear_has_solid_color();
}
 ::google::protobuf::uint64 RecordingSource::solid_color() const {
  // @@protoc_insertion_point(field_get:cc.proto.RecordingSource.solid_color)
  return solid_color_;
}
 void RecordingSource::set_solid_color(::google::protobuf::uint64 value) {
  set_has_solid_color();
  solid_color_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.RecordingSource.solid_color)
}

// optional uint64 background_color = 8;
bool RecordingSource::has_background_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RecordingSource::set_has_background_color() {
  _has_bits_[0] |= 0x00000080u;
}
void RecordingSource::clear_has_background_color() {
  _has_bits_[0] &= ~0x00000080u;
}
void RecordingSource::clear_background_color() {
  background_color_ = GOOGLE_ULONGLONG(0);
  clear_has_background_color();
}
 ::google::protobuf::uint64 RecordingSource::background_color() const {
  // @@protoc_insertion_point(field_get:cc.proto.RecordingSource.background_color)
  return background_color_;
}
 void RecordingSource::set_background_color(::google::protobuf::uint64 value) {
  set_has_background_color();
  background_color_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.RecordingSource.background_color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
