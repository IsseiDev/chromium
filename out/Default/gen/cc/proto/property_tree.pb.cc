// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: property_tree.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "property_tree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_property_5ftree_2eproto() {
  delete TranformNodeData::default_instance_;
  delete TransformCachedNodeData::default_instance_;
  delete ClipNodeData::default_instance_;
  delete EffectNodeData::default_instance_;
  delete ScrollNodeData::default_instance_;
  delete TreeNode::default_instance_;
  delete PropertyTree::default_instance_;
  delete ScrollOffsetMapEntry::default_instance_;
  delete ScrollTreeData::default_instance_;
  delete TransformTreeData::default_instance_;
  delete EffectTreeData::default_instance_;
  delete PropertyTrees::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_property_5ftree_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_property_5ftree_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_element_5fid_2eproto();
  ::cc::proto::protobuf_AddDesc_rectf_2eproto();
  ::cc::proto::protobuf_AddDesc_scroll_5foffset_2eproto();
  ::cc::proto::protobuf_AddDesc_size_2eproto();
  ::cc::proto::protobuf_AddDesc_skxfermode_2eproto();
  ::cc::proto::protobuf_AddDesc_synced_5fproperty_2eproto();
  ::cc::proto::protobuf_AddDesc_transform_2eproto();
  ::cc::proto::protobuf_AddDesc_vector2df_2eproto();
  TranformNodeData::default_instance_ = new TranformNodeData();
  TransformCachedNodeData::default_instance_ = new TransformCachedNodeData();
  ClipNodeData::default_instance_ = new ClipNodeData();
  EffectNodeData::default_instance_ = new EffectNodeData();
  ScrollNodeData::default_instance_ = new ScrollNodeData();
  TreeNode::default_instance_ = new TreeNode();
  PropertyTree::default_instance_ = new PropertyTree();
  ScrollOffsetMapEntry::default_instance_ = new ScrollOffsetMapEntry();
  ScrollTreeData::default_instance_ = new ScrollTreeData();
  TransformTreeData::default_instance_ = new TransformTreeData();
  EffectTreeData::default_instance_ = new EffectTreeData();
  PropertyTrees::default_instance_ = new PropertyTrees();
  TranformNodeData::default_instance_->InitAsDefaultInstance();
  TransformCachedNodeData::default_instance_->InitAsDefaultInstance();
  ClipNodeData::default_instance_->InitAsDefaultInstance();
  EffectNodeData::default_instance_->InitAsDefaultInstance();
  ScrollNodeData::default_instance_->InitAsDefaultInstance();
  TreeNode::default_instance_->InitAsDefaultInstance();
  PropertyTree::default_instance_->InitAsDefaultInstance();
  ScrollOffsetMapEntry::default_instance_->InitAsDefaultInstance();
  ScrollTreeData::default_instance_->InitAsDefaultInstance();
  TransformTreeData::default_instance_->InitAsDefaultInstance();
  EffectTreeData::default_instance_->InitAsDefaultInstance();
  PropertyTrees::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_property_5ftree_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_property_5ftree_2eproto_once_);
void protobuf_AddDesc_property_5ftree_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_property_5ftree_2eproto_once_,
                 &protobuf_AddDesc_property_5ftree_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_property_5ftree_2eproto {
  StaticDescriptorInitializer_property_5ftree_2eproto() {
    protobuf_AddDesc_property_5ftree_2eproto();
  }
} static_descriptor_initializer_property_5ftree_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForTranformNodeData(
    TranformNodeData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranformNodeData::kPreLocalFieldNumber;
const int TranformNodeData::kLocalFieldNumber;
const int TranformNodeData::kPostLocalFieldNumber;
const int TranformNodeData::kToParentFieldNumber;
const int TranformNodeData::kSourceNodeIdFieldNumber;
const int TranformNodeData::kNeedsLocalTransformUpdateFieldNumber;
const int TranformNodeData::kNodeAndAncestorsAreAnimatedOrInvertibleFieldNumber;
const int TranformNodeData::kIsInvertibleFieldNumber;
const int TranformNodeData::kAncestorsAreInvertibleFieldNumber;
const int TranformNodeData::kHasPotentialAnimationFieldNumber;
const int TranformNodeData::kIsCurrentlyAnimatingFieldNumber;
const int TranformNodeData::kToScreenIsPotentiallyAnimatedFieldNumber;
const int TranformNodeData::kHasOnlyTranslationAnimationsFieldNumber;
const int TranformNodeData::kFlattensInheritedTransformFieldNumber;
const int TranformNodeData::kNodeAndAncestorsAreFlatFieldNumber;
const int TranformNodeData::kNodeAndAncestorsHaveOnlyIntegerTranslationFieldNumber;
const int TranformNodeData::kScrollsFieldNumber;
const int TranformNodeData::kNeedsSurfaceContentsScaleFieldNumber;
const int TranformNodeData::kAffectedByInnerViewportBoundsDeltaXFieldNumber;
const int TranformNodeData::kAffectedByInnerViewportBoundsDeltaYFieldNumber;
const int TranformNodeData::kAffectedByOuterViewportBoundsDeltaXFieldNumber;
const int TranformNodeData::kAffectedByOuterViewportBoundsDeltaYFieldNumber;
const int TranformNodeData::kInSubtreeOfPageScaleLayerFieldNumber;
const int TranformNodeData::kTransformChangedFieldNumber;
const int TranformNodeData::kPostLocalScaleFactorFieldNumber;
const int TranformNodeData::kSurfaceContentsScaleFieldNumber;
const int TranformNodeData::kScrollOffsetFieldNumber;
const int TranformNodeData::kScrollSnapFieldNumber;
const int TranformNodeData::kSourceOffsetFieldNumber;
const int TranformNodeData::kSourceToParentFieldNumber;
const int TranformNodeData::kSortingContextIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TranformNodeData::TranformNodeData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.TranformNodeData)
}

void TranformNodeData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pre_local_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  pre_local_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  local_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  local_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  post_local_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  post_local_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  to_parent_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  to_parent_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  surface_contents_scale_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  surface_contents_scale_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scroll_offset_ = const_cast< ::cc::proto::ScrollOffset*>(
      ::cc::proto::ScrollOffset::internal_default_instance());
#else
  scroll_offset_ = const_cast< ::cc::proto::ScrollOffset*>(&::cc::proto::ScrollOffset::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scroll_snap_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  scroll_snap_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  source_offset_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  source_offset_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  source_to_parent_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  source_to_parent_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
}

TranformNodeData::TranformNodeData(const TranformNodeData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.TranformNodeData)
}

void TranformNodeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pre_local_ = NULL;
  local_ = NULL;
  post_local_ = NULL;
  to_parent_ = NULL;
  source_node_id_ = GOOGLE_LONGLONG(0);
  needs_local_transform_update_ = false;
  node_and_ancestors_are_animated_or_invertible_ = false;
  is_invertible_ = false;
  ancestors_are_invertible_ = false;
  has_potential_animation_ = false;
  is_currently_animating_ = false;
  to_screen_is_potentially_animated_ = false;
  has_only_translation_animations_ = false;
  flattens_inherited_transform_ = false;
  node_and_ancestors_are_flat_ = false;
  node_and_ancestors_have_only_integer_translation_ = false;
  scrolls_ = false;
  needs_surface_contents_scale_ = false;
  affected_by_inner_viewport_bounds_delta_x_ = false;
  affected_by_inner_viewport_bounds_delta_y_ = false;
  affected_by_outer_viewport_bounds_delta_x_ = false;
  affected_by_outer_viewport_bounds_delta_y_ = false;
  in_subtree_of_page_scale_layer_ = false;
  transform_changed_ = false;
  post_local_scale_factor_ = 0;
  surface_contents_scale_ = NULL;
  scroll_offset_ = NULL;
  scroll_snap_ = NULL;
  source_offset_ = NULL;
  source_to_parent_ = NULL;
  sorting_context_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranformNodeData::~TranformNodeData() {
  // @@protoc_insertion_point(destructor:cc.proto.TranformNodeData)
  SharedDtor();
}

void TranformNodeData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pre_local_;
    delete local_;
    delete post_local_;
    delete to_parent_;
    delete surface_contents_scale_;
    delete scroll_offset_;
    delete scroll_snap_;
    delete source_offset_;
    delete source_to_parent_;
  }
}

void TranformNodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TranformNodeData& TranformNodeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

TranformNodeData* TranformNodeData::default_instance_ = NULL;

TranformNodeData* TranformNodeData::New(::google::protobuf::Arena* arena) const {
  TranformNodeData* n = new TranformNodeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TranformNodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.TranformNodeData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TranformNodeData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TranformNodeData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(source_node_id_, is_invertible_);
    if (has_pre_local()) {
      if (pre_local_ != NULL) pre_local_->::cc::proto::Transform::Clear();
    }
    if (has_local()) {
      if (local_ != NULL) local_->::cc::proto::Transform::Clear();
    }
    if (has_post_local()) {
      if (post_local_ != NULL) post_local_->::cc::proto::Transform::Clear();
    }
    if (has_to_parent()) {
      if (to_parent_ != NULL) to_parent_->::cc::proto::Transform::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(ancestors_are_invertible_, node_and_ancestors_have_only_integer_translation_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(scrolls_, transform_changed_);
  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    post_local_scale_factor_ = 0;
    if (has_surface_contents_scale()) {
      if (surface_contents_scale_ != NULL) surface_contents_scale_->::cc::proto::Vector2dF::Clear();
    }
    if (has_scroll_offset()) {
      if (scroll_offset_ != NULL) scroll_offset_->::cc::proto::ScrollOffset::Clear();
    }
    if (has_scroll_snap()) {
      if (scroll_snap_ != NULL) scroll_snap_->::cc::proto::Vector2dF::Clear();
    }
    if (has_source_offset()) {
      if (source_offset_ != NULL) source_offset_->::cc::proto::Vector2dF::Clear();
    }
    if (has_source_to_parent()) {
      if (source_to_parent_ != NULL) source_to_parent_->::cc::proto::Vector2dF::Clear();
    }
    sorting_context_id_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TranformNodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForTranformNodeData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.TranformNodeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.Transform pre_local = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pre_local()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_local;
        break;
      }

      // optional .cc.proto.Transform local = 2;
      case 2: {
        if (tag == 18) {
         parse_local:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_post_local;
        break;
      }

      // optional .cc.proto.Transform post_local = 3;
      case 3: {
        if (tag == 26) {
         parse_post_local:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post_local()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_to_parent;
        break;
      }

      // optional .cc.proto.Transform to_parent = 4;
      case 4: {
        if (tag == 34) {
         parse_to_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_parent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_source_node_id;
        break;
      }

      // optional int64 source_node_id = 11;
      case 11: {
        if (tag == 88) {
         parse_source_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_node_id_)));
          set_has_source_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_needs_local_transform_update;
        break;
      }

      // optional bool needs_local_transform_update = 12;
      case 12: {
        if (tag == 96) {
         parse_needs_local_transform_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_local_transform_update_)));
          set_has_needs_local_transform_update();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_invertible;
        break;
      }

      // optional bool is_invertible = 13;
      case 13: {
        if (tag == 104) {
         parse_is_invertible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_invertible_)));
          set_has_is_invertible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ancestors_are_invertible;
        break;
      }

      // optional bool ancestors_are_invertible = 14;
      case 14: {
        if (tag == 112) {
         parse_ancestors_are_invertible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ancestors_are_invertible_)));
          set_has_ancestors_are_invertible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_has_potential_animation;
        break;
      }

      // optional bool has_potential_animation = 15;
      case 15: {
        if (tag == 120) {
         parse_has_potential_animation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_potential_animation_)));
          set_has_has_potential_animation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_to_screen_is_potentially_animated;
        break;
      }

      // optional bool to_screen_is_potentially_animated = 16;
      case 16: {
        if (tag == 128) {
         parse_to_screen_is_potentially_animated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_screen_is_potentially_animated_)));
          set_has_to_screen_is_potentially_animated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_has_only_translation_animations;
        break;
      }

      // optional bool has_only_translation_animations = 17;
      case 17: {
        if (tag == 136) {
         parse_has_only_translation_animations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_only_translation_animations_)));
          set_has_has_only_translation_animations();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_flattens_inherited_transform;
        break;
      }

      // optional bool flattens_inherited_transform = 19;
      case 19: {
        if (tag == 152) {
         parse_flattens_inherited_transform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flattens_inherited_transform_)));
          set_has_flattens_inherited_transform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_node_and_ancestors_are_flat;
        break;
      }

      // optional bool node_and_ancestors_are_flat = 20;
      case 20: {
        if (tag == 160) {
         parse_node_and_ancestors_are_flat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &node_and_ancestors_are_flat_)));
          set_has_node_and_ancestors_are_flat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_node_and_ancestors_have_only_integer_translation;
        break;
      }

      // optional bool node_and_ancestors_have_only_integer_translation = 21;
      case 21: {
        if (tag == 168) {
         parse_node_and_ancestors_have_only_integer_translation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &node_and_ancestors_have_only_integer_translation_)));
          set_has_node_and_ancestors_have_only_integer_translation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_scrolls;
        break;
      }

      // optional bool scrolls = 22;
      case 22: {
        if (tag == 176) {
         parse_scrolls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scrolls_)));
          set_has_scrolls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_needs_surface_contents_scale;
        break;
      }

      // optional bool needs_surface_contents_scale = 23;
      case 23: {
        if (tag == 184) {
         parse_needs_surface_contents_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_surface_contents_scale_)));
          set_has_needs_surface_contents_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_affected_by_inner_viewport_bounds_delta_x;
        break;
      }

      // optional bool affected_by_inner_viewport_bounds_delta_x = 24;
      case 24: {
        if (tag == 192) {
         parse_affected_by_inner_viewport_bounds_delta_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &affected_by_inner_viewport_bounds_delta_x_)));
          set_has_affected_by_inner_viewport_bounds_delta_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_affected_by_inner_viewport_bounds_delta_y;
        break;
      }

      // optional bool affected_by_inner_viewport_bounds_delta_y = 25;
      case 25: {
        if (tag == 200) {
         parse_affected_by_inner_viewport_bounds_delta_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &affected_by_inner_viewport_bounds_delta_y_)));
          set_has_affected_by_inner_viewport_bounds_delta_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_affected_by_outer_viewport_bounds_delta_x;
        break;
      }

      // optional bool affected_by_outer_viewport_bounds_delta_x = 26;
      case 26: {
        if (tag == 208) {
         parse_affected_by_outer_viewport_bounds_delta_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &affected_by_outer_viewport_bounds_delta_x_)));
          set_has_affected_by_outer_viewport_bounds_delta_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_affected_by_outer_viewport_bounds_delta_y;
        break;
      }

      // optional bool affected_by_outer_viewport_bounds_delta_y = 27;
      case 27: {
        if (tag == 216) {
         parse_affected_by_outer_viewport_bounds_delta_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &affected_by_outer_viewport_bounds_delta_y_)));
          set_has_affected_by_outer_viewport_bounds_delta_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_in_subtree_of_page_scale_layer;
        break;
      }

      // optional bool in_subtree_of_page_scale_layer = 28;
      case 28: {
        if (tag == 224) {
         parse_in_subtree_of_page_scale_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_subtree_of_page_scale_layer_)));
          set_has_in_subtree_of_page_scale_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(237)) goto parse_post_local_scale_factor;
        break;
      }

      // optional float post_local_scale_factor = 29;
      case 29: {
        if (tag == 237) {
         parse_post_local_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &post_local_scale_factor_)));
          set_has_post_local_scale_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_surface_contents_scale;
        break;
      }

      // optional .cc.proto.Vector2dF surface_contents_scale = 34;
      case 34: {
        if (tag == 274) {
         parse_surface_contents_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surface_contents_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_scroll_offset;
        break;
      }

      // optional .cc.proto.ScrollOffset scroll_offset = 35;
      case 35: {
        if (tag == 282) {
         parse_scroll_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_scroll_snap;
        break;
      }

      // optional .cc.proto.Vector2dF scroll_snap = 36;
      case 36: {
        if (tag == 290) {
         parse_scroll_snap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_snap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_source_offset;
        break;
      }

      // optional .cc.proto.Vector2dF source_offset = 37;
      case 37: {
        if (tag == 298) {
         parse_source_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_source_to_parent;
        break;
      }

      // optional .cc.proto.Vector2dF source_to_parent = 38;
      case 38: {
        if (tag == 306) {
         parse_source_to_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_to_parent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_sorting_context_id;
        break;
      }

      // optional int64 sorting_context_id = 39;
      case 39: {
        if (tag == 312) {
         parse_sorting_context_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sorting_context_id_)));
          set_has_sorting_context_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_transform_changed;
        break;
      }

      // optional bool transform_changed = 40;
      case 40: {
        if (tag == 320) {
         parse_transform_changed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transform_changed_)));
          set_has_transform_changed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_node_and_ancestors_are_animated_or_invertible;
        break;
      }

      // optional bool node_and_ancestors_are_animated_or_invertible = 41;
      case 41: {
        if (tag == 328) {
         parse_node_and_ancestors_are_animated_or_invertible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &node_and_ancestors_are_animated_or_invertible_)));
          set_has_node_and_ancestors_are_animated_or_invertible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_is_currently_animating;
        break;
      }

      // optional bool is_currently_animating = 42;
      case 42: {
        if (tag == 336) {
         parse_is_currently_animating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_currently_animating_)));
          set_has_is_currently_animating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.TranformNodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.TranformNodeData)
  return false;
#undef DO_
}

void TranformNodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.TranformNodeData)
  // optional .cc.proto.Transform pre_local = 1;
  if (has_pre_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->pre_local_, output);
  }

  // optional .cc.proto.Transform local = 2;
  if (has_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->local_, output);
  }

  // optional .cc.proto.Transform post_local = 3;
  if (has_post_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->post_local_, output);
  }

  // optional .cc.proto.Transform to_parent = 4;
  if (has_to_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->to_parent_, output);
  }

  // optional int64 source_node_id = 11;
  if (has_source_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->source_node_id(), output);
  }

  // optional bool needs_local_transform_update = 12;
  if (has_needs_local_transform_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->needs_local_transform_update(), output);
  }

  // optional bool is_invertible = 13;
  if (has_is_invertible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_invertible(), output);
  }

  // optional bool ancestors_are_invertible = 14;
  if (has_ancestors_are_invertible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->ancestors_are_invertible(), output);
  }

  // optional bool has_potential_animation = 15;
  if (has_has_potential_animation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->has_potential_animation(), output);
  }

  // optional bool to_screen_is_potentially_animated = 16;
  if (has_to_screen_is_potentially_animated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->to_screen_is_potentially_animated(), output);
  }

  // optional bool has_only_translation_animations = 17;
  if (has_has_only_translation_animations()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->has_only_translation_animations(), output);
  }

  // optional bool flattens_inherited_transform = 19;
  if (has_flattens_inherited_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->flattens_inherited_transform(), output);
  }

  // optional bool node_and_ancestors_are_flat = 20;
  if (has_node_and_ancestors_are_flat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->node_and_ancestors_are_flat(), output);
  }

  // optional bool node_and_ancestors_have_only_integer_translation = 21;
  if (has_node_and_ancestors_have_only_integer_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->node_and_ancestors_have_only_integer_translation(), output);
  }

  // optional bool scrolls = 22;
  if (has_scrolls()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->scrolls(), output);
  }

  // optional bool needs_surface_contents_scale = 23;
  if (has_needs_surface_contents_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->needs_surface_contents_scale(), output);
  }

  // optional bool affected_by_inner_viewport_bounds_delta_x = 24;
  if (has_affected_by_inner_viewport_bounds_delta_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->affected_by_inner_viewport_bounds_delta_x(), output);
  }

  // optional bool affected_by_inner_viewport_bounds_delta_y = 25;
  if (has_affected_by_inner_viewport_bounds_delta_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->affected_by_inner_viewport_bounds_delta_y(), output);
  }

  // optional bool affected_by_outer_viewport_bounds_delta_x = 26;
  if (has_affected_by_outer_viewport_bounds_delta_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->affected_by_outer_viewport_bounds_delta_x(), output);
  }

  // optional bool affected_by_outer_viewport_bounds_delta_y = 27;
  if (has_affected_by_outer_viewport_bounds_delta_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->affected_by_outer_viewport_bounds_delta_y(), output);
  }

  // optional bool in_subtree_of_page_scale_layer = 28;
  if (has_in_subtree_of_page_scale_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->in_subtree_of_page_scale_layer(), output);
  }

  // optional float post_local_scale_factor = 29;
  if (has_post_local_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->post_local_scale_factor(), output);
  }

  // optional .cc.proto.Vector2dF surface_contents_scale = 34;
  if (has_surface_contents_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, *this->surface_contents_scale_, output);
  }

  // optional .cc.proto.ScrollOffset scroll_offset = 35;
  if (has_scroll_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, *this->scroll_offset_, output);
  }

  // optional .cc.proto.Vector2dF scroll_snap = 36;
  if (has_scroll_snap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, *this->scroll_snap_, output);
  }

  // optional .cc.proto.Vector2dF source_offset = 37;
  if (has_source_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37, *this->source_offset_, output);
  }

  // optional .cc.proto.Vector2dF source_to_parent = 38;
  if (has_source_to_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, *this->source_to_parent_, output);
  }

  // optional int64 sorting_context_id = 39;
  if (has_sorting_context_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->sorting_context_id(), output);
  }

  // optional bool transform_changed = 40;
  if (has_transform_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->transform_changed(), output);
  }

  // optional bool node_and_ancestors_are_animated_or_invertible = 41;
  if (has_node_and_ancestors_are_animated_or_invertible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->node_and_ancestors_are_animated_or_invertible(), output);
  }

  // optional bool is_currently_animating = 42;
  if (has_is_currently_animating()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->is_currently_animating(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.TranformNodeData)
}

int TranformNodeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.TranformNodeData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .cc.proto.Transform pre_local = 1;
    if (has_pre_local()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pre_local_);
    }

    // optional .cc.proto.Transform local = 2;
    if (has_local()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->local_);
    }

    // optional .cc.proto.Transform post_local = 3;
    if (has_post_local()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->post_local_);
    }

    // optional .cc.proto.Transform to_parent = 4;
    if (has_to_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->to_parent_);
    }

    // optional int64 source_node_id = 11;
    if (has_source_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_node_id());
    }

    // optional bool needs_local_transform_update = 12;
    if (has_needs_local_transform_update()) {
      total_size += 1 + 1;
    }

    // optional bool node_and_ancestors_are_animated_or_invertible = 41;
    if (has_node_and_ancestors_are_animated_or_invertible()) {
      total_size += 2 + 1;
    }

    // optional bool is_invertible = 13;
    if (has_is_invertible()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool ancestors_are_invertible = 14;
    if (has_ancestors_are_invertible()) {
      total_size += 1 + 1;
    }

    // optional bool has_potential_animation = 15;
    if (has_has_potential_animation()) {
      total_size += 1 + 1;
    }

    // optional bool is_currently_animating = 42;
    if (has_is_currently_animating()) {
      total_size += 2 + 1;
    }

    // optional bool to_screen_is_potentially_animated = 16;
    if (has_to_screen_is_potentially_animated()) {
      total_size += 2 + 1;
    }

    // optional bool has_only_translation_animations = 17;
    if (has_has_only_translation_animations()) {
      total_size += 2 + 1;
    }

    // optional bool flattens_inherited_transform = 19;
    if (has_flattens_inherited_transform()) {
      total_size += 2 + 1;
    }

    // optional bool node_and_ancestors_are_flat = 20;
    if (has_node_and_ancestors_are_flat()) {
      total_size += 2 + 1;
    }

    // optional bool node_and_ancestors_have_only_integer_translation = 21;
    if (has_node_and_ancestors_have_only_integer_translation()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool scrolls = 22;
    if (has_scrolls()) {
      total_size += 2 + 1;
    }

    // optional bool needs_surface_contents_scale = 23;
    if (has_needs_surface_contents_scale()) {
      total_size += 2 + 1;
    }

    // optional bool affected_by_inner_viewport_bounds_delta_x = 24;
    if (has_affected_by_inner_viewport_bounds_delta_x()) {
      total_size += 2 + 1;
    }

    // optional bool affected_by_inner_viewport_bounds_delta_y = 25;
    if (has_affected_by_inner_viewport_bounds_delta_y()) {
      total_size += 2 + 1;
    }

    // optional bool affected_by_outer_viewport_bounds_delta_x = 26;
    if (has_affected_by_outer_viewport_bounds_delta_x()) {
      total_size += 2 + 1;
    }

    // optional bool affected_by_outer_viewport_bounds_delta_y = 27;
    if (has_affected_by_outer_viewport_bounds_delta_y()) {
      total_size += 2 + 1;
    }

    // optional bool in_subtree_of_page_scale_layer = 28;
    if (has_in_subtree_of_page_scale_layer()) {
      total_size += 2 + 1;
    }

    // optional bool transform_changed = 40;
    if (has_transform_changed()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional float post_local_scale_factor = 29;
    if (has_post_local_scale_factor()) {
      total_size += 2 + 4;
    }

    // optional .cc.proto.Vector2dF surface_contents_scale = 34;
    if (has_surface_contents_scale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->surface_contents_scale_);
    }

    // optional .cc.proto.ScrollOffset scroll_offset = 35;
    if (has_scroll_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scroll_offset_);
    }

    // optional .cc.proto.Vector2dF scroll_snap = 36;
    if (has_scroll_snap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scroll_snap_);
    }

    // optional .cc.proto.Vector2dF source_offset = 37;
    if (has_source_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->source_offset_);
    }

    // optional .cc.proto.Vector2dF source_to_parent = 38;
    if (has_source_to_parent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->source_to_parent_);
    }

    // optional int64 sorting_context_id = 39;
    if (has_sorting_context_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sorting_context_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranformNodeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TranformNodeData*>(&from));
}

void TranformNodeData::MergeFrom(const TranformNodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.TranformNodeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pre_local()) {
      mutable_pre_local()->::cc::proto::Transform::MergeFrom(from.pre_local());
    }
    if (from.has_local()) {
      mutable_local()->::cc::proto::Transform::MergeFrom(from.local());
    }
    if (from.has_post_local()) {
      mutable_post_local()->::cc::proto::Transform::MergeFrom(from.post_local());
    }
    if (from.has_to_parent()) {
      mutable_to_parent()->::cc::proto::Transform::MergeFrom(from.to_parent());
    }
    if (from.has_source_node_id()) {
      set_source_node_id(from.source_node_id());
    }
    if (from.has_needs_local_transform_update()) {
      set_needs_local_transform_update(from.needs_local_transform_update());
    }
    if (from.has_node_and_ancestors_are_animated_or_invertible()) {
      set_node_and_ancestors_are_animated_or_invertible(from.node_and_ancestors_are_animated_or_invertible());
    }
    if (from.has_is_invertible()) {
      set_is_invertible(from.is_invertible());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ancestors_are_invertible()) {
      set_ancestors_are_invertible(from.ancestors_are_invertible());
    }
    if (from.has_has_potential_animation()) {
      set_has_potential_animation(from.has_potential_animation());
    }
    if (from.has_is_currently_animating()) {
      set_is_currently_animating(from.is_currently_animating());
    }
    if (from.has_to_screen_is_potentially_animated()) {
      set_to_screen_is_potentially_animated(from.to_screen_is_potentially_animated());
    }
    if (from.has_has_only_translation_animations()) {
      set_has_only_translation_animations(from.has_only_translation_animations());
    }
    if (from.has_flattens_inherited_transform()) {
      set_flattens_inherited_transform(from.flattens_inherited_transform());
    }
    if (from.has_node_and_ancestors_are_flat()) {
      set_node_and_ancestors_are_flat(from.node_and_ancestors_are_flat());
    }
    if (from.has_node_and_ancestors_have_only_integer_translation()) {
      set_node_and_ancestors_have_only_integer_translation(from.node_and_ancestors_have_only_integer_translation());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_scrolls()) {
      set_scrolls(from.scrolls());
    }
    if (from.has_needs_surface_contents_scale()) {
      set_needs_surface_contents_scale(from.needs_surface_contents_scale());
    }
    if (from.has_affected_by_inner_viewport_bounds_delta_x()) {
      set_affected_by_inner_viewport_bounds_delta_x(from.affected_by_inner_viewport_bounds_delta_x());
    }
    if (from.has_affected_by_inner_viewport_bounds_delta_y()) {
      set_affected_by_inner_viewport_bounds_delta_y(from.affected_by_inner_viewport_bounds_delta_y());
    }
    if (from.has_affected_by_outer_viewport_bounds_delta_x()) {
      set_affected_by_outer_viewport_bounds_delta_x(from.affected_by_outer_viewport_bounds_delta_x());
    }
    if (from.has_affected_by_outer_viewport_bounds_delta_y()) {
      set_affected_by_outer_viewport_bounds_delta_y(from.affected_by_outer_viewport_bounds_delta_y());
    }
    if (from.has_in_subtree_of_page_scale_layer()) {
      set_in_subtree_of_page_scale_layer(from.in_subtree_of_page_scale_layer());
    }
    if (from.has_transform_changed()) {
      set_transform_changed(from.transform_changed());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_post_local_scale_factor()) {
      set_post_local_scale_factor(from.post_local_scale_factor());
    }
    if (from.has_surface_contents_scale()) {
      mutable_surface_contents_scale()->::cc::proto::Vector2dF::MergeFrom(from.surface_contents_scale());
    }
    if (from.has_scroll_offset()) {
      mutable_scroll_offset()->::cc::proto::ScrollOffset::MergeFrom(from.scroll_offset());
    }
    if (from.has_scroll_snap()) {
      mutable_scroll_snap()->::cc::proto::Vector2dF::MergeFrom(from.scroll_snap());
    }
    if (from.has_source_offset()) {
      mutable_source_offset()->::cc::proto::Vector2dF::MergeFrom(from.source_offset());
    }
    if (from.has_source_to_parent()) {
      mutable_source_to_parent()->::cc::proto::Vector2dF::MergeFrom(from.source_to_parent());
    }
    if (from.has_sorting_context_id()) {
      set_sorting_context_id(from.sorting_context_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void TranformNodeData::CopyFrom(const TranformNodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.TranformNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranformNodeData::IsInitialized() const {

  return true;
}

void TranformNodeData::Swap(TranformNodeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TranformNodeData::InternalSwap(TranformNodeData* other) {
  std::swap(pre_local_, other->pre_local_);
  std::swap(local_, other->local_);
  std::swap(post_local_, other->post_local_);
  std::swap(to_parent_, other->to_parent_);
  std::swap(source_node_id_, other->source_node_id_);
  std::swap(needs_local_transform_update_, other->needs_local_transform_update_);
  std::swap(node_and_ancestors_are_animated_or_invertible_, other->node_and_ancestors_are_animated_or_invertible_);
  std::swap(is_invertible_, other->is_invertible_);
  std::swap(ancestors_are_invertible_, other->ancestors_are_invertible_);
  std::swap(has_potential_animation_, other->has_potential_animation_);
  std::swap(is_currently_animating_, other->is_currently_animating_);
  std::swap(to_screen_is_potentially_animated_, other->to_screen_is_potentially_animated_);
  std::swap(has_only_translation_animations_, other->has_only_translation_animations_);
  std::swap(flattens_inherited_transform_, other->flattens_inherited_transform_);
  std::swap(node_and_ancestors_are_flat_, other->node_and_ancestors_are_flat_);
  std::swap(node_and_ancestors_have_only_integer_translation_, other->node_and_ancestors_have_only_integer_translation_);
  std::swap(scrolls_, other->scrolls_);
  std::swap(needs_surface_contents_scale_, other->needs_surface_contents_scale_);
  std::swap(affected_by_inner_viewport_bounds_delta_x_, other->affected_by_inner_viewport_bounds_delta_x_);
  std::swap(affected_by_inner_viewport_bounds_delta_y_, other->affected_by_inner_viewport_bounds_delta_y_);
  std::swap(affected_by_outer_viewport_bounds_delta_x_, other->affected_by_outer_viewport_bounds_delta_x_);
  std::swap(affected_by_outer_viewport_bounds_delta_y_, other->affected_by_outer_viewport_bounds_delta_y_);
  std::swap(in_subtree_of_page_scale_layer_, other->in_subtree_of_page_scale_layer_);
  std::swap(transform_changed_, other->transform_changed_);
  std::swap(post_local_scale_factor_, other->post_local_scale_factor_);
  std::swap(surface_contents_scale_, other->surface_contents_scale_);
  std::swap(scroll_offset_, other->scroll_offset_);
  std::swap(scroll_snap_, other->scroll_snap_);
  std::swap(source_offset_, other->source_offset_);
  std::swap(source_to_parent_, other->source_to_parent_);
  std::swap(sorting_context_id_, other->sorting_context_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TranformNodeData::GetTypeName() const {
  return "cc.proto.TranformNodeData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TranformNodeData

// optional .cc.proto.Transform pre_local = 1;
bool TranformNodeData::has_pre_local() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TranformNodeData::set_has_pre_local() {
  _has_bits_[0] |= 0x00000001u;
}
void TranformNodeData::clear_has_pre_local() {
  _has_bits_[0] &= ~0x00000001u;
}
void TranformNodeData::clear_pre_local() {
  if (pre_local_ != NULL) pre_local_->::cc::proto::Transform::Clear();
  clear_has_pre_local();
}
const ::cc::proto::Transform& TranformNodeData::pre_local() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.pre_local)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pre_local_ != NULL ? *pre_local_ : *default_instance().pre_local_;
#else
  return pre_local_ != NULL ? *pre_local_ : *default_instance_->pre_local_;
#endif
}
::cc::proto::Transform* TranformNodeData::mutable_pre_local() {
  set_has_pre_local();
  if (pre_local_ == NULL) {
    pre_local_ = new ::cc::proto::Transform;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TranformNodeData.pre_local)
  return pre_local_;
}
::cc::proto::Transform* TranformNodeData::release_pre_local() {
  // @@protoc_insertion_point(field_release:cc.proto.TranformNodeData.pre_local)
  clear_has_pre_local();
  ::cc::proto::Transform* temp = pre_local_;
  pre_local_ = NULL;
  return temp;
}
void TranformNodeData::set_allocated_pre_local(::cc::proto::Transform* pre_local) {
  delete pre_local_;
  pre_local_ = pre_local;
  if (pre_local) {
    set_has_pre_local();
  } else {
    clear_has_pre_local();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TranformNodeData.pre_local)
}

// optional .cc.proto.Transform local = 2;
bool TranformNodeData::has_local() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TranformNodeData::set_has_local() {
  _has_bits_[0] |= 0x00000002u;
}
void TranformNodeData::clear_has_local() {
  _has_bits_[0] &= ~0x00000002u;
}
void TranformNodeData::clear_local() {
  if (local_ != NULL) local_->::cc::proto::Transform::Clear();
  clear_has_local();
}
const ::cc::proto::Transform& TranformNodeData::local() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.local)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return local_ != NULL ? *local_ : *default_instance().local_;
#else
  return local_ != NULL ? *local_ : *default_instance_->local_;
#endif
}
::cc::proto::Transform* TranformNodeData::mutable_local() {
  set_has_local();
  if (local_ == NULL) {
    local_ = new ::cc::proto::Transform;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TranformNodeData.local)
  return local_;
}
::cc::proto::Transform* TranformNodeData::release_local() {
  // @@protoc_insertion_point(field_release:cc.proto.TranformNodeData.local)
  clear_has_local();
  ::cc::proto::Transform* temp = local_;
  local_ = NULL;
  return temp;
}
void TranformNodeData::set_allocated_local(::cc::proto::Transform* local) {
  delete local_;
  local_ = local;
  if (local) {
    set_has_local();
  } else {
    clear_has_local();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TranformNodeData.local)
}

// optional .cc.proto.Transform post_local = 3;
bool TranformNodeData::has_post_local() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TranformNodeData::set_has_post_local() {
  _has_bits_[0] |= 0x00000004u;
}
void TranformNodeData::clear_has_post_local() {
  _has_bits_[0] &= ~0x00000004u;
}
void TranformNodeData::clear_post_local() {
  if (post_local_ != NULL) post_local_->::cc::proto::Transform::Clear();
  clear_has_post_local();
}
const ::cc::proto::Transform& TranformNodeData::post_local() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.post_local)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return post_local_ != NULL ? *post_local_ : *default_instance().post_local_;
#else
  return post_local_ != NULL ? *post_local_ : *default_instance_->post_local_;
#endif
}
::cc::proto::Transform* TranformNodeData::mutable_post_local() {
  set_has_post_local();
  if (post_local_ == NULL) {
    post_local_ = new ::cc::proto::Transform;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TranformNodeData.post_local)
  return post_local_;
}
::cc::proto::Transform* TranformNodeData::release_post_local() {
  // @@protoc_insertion_point(field_release:cc.proto.TranformNodeData.post_local)
  clear_has_post_local();
  ::cc::proto::Transform* temp = post_local_;
  post_local_ = NULL;
  return temp;
}
void TranformNodeData::set_allocated_post_local(::cc::proto::Transform* post_local) {
  delete post_local_;
  post_local_ = post_local;
  if (post_local) {
    set_has_post_local();
  } else {
    clear_has_post_local();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TranformNodeData.post_local)
}

// optional .cc.proto.Transform to_parent = 4;
bool TranformNodeData::has_to_parent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TranformNodeData::set_has_to_parent() {
  _has_bits_[0] |= 0x00000008u;
}
void TranformNodeData::clear_has_to_parent() {
  _has_bits_[0] &= ~0x00000008u;
}
void TranformNodeData::clear_to_parent() {
  if (to_parent_ != NULL) to_parent_->::cc::proto::Transform::Clear();
  clear_has_to_parent();
}
const ::cc::proto::Transform& TranformNodeData::to_parent() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.to_parent)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return to_parent_ != NULL ? *to_parent_ : *default_instance().to_parent_;
#else
  return to_parent_ != NULL ? *to_parent_ : *default_instance_->to_parent_;
#endif
}
::cc::proto::Transform* TranformNodeData::mutable_to_parent() {
  set_has_to_parent();
  if (to_parent_ == NULL) {
    to_parent_ = new ::cc::proto::Transform;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TranformNodeData.to_parent)
  return to_parent_;
}
::cc::proto::Transform* TranformNodeData::release_to_parent() {
  // @@protoc_insertion_point(field_release:cc.proto.TranformNodeData.to_parent)
  clear_has_to_parent();
  ::cc::proto::Transform* temp = to_parent_;
  to_parent_ = NULL;
  return temp;
}
void TranformNodeData::set_allocated_to_parent(::cc::proto::Transform* to_parent) {
  delete to_parent_;
  to_parent_ = to_parent;
  if (to_parent) {
    set_has_to_parent();
  } else {
    clear_has_to_parent();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TranformNodeData.to_parent)
}

// optional int64 source_node_id = 11;
bool TranformNodeData::has_source_node_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TranformNodeData::set_has_source_node_id() {
  _has_bits_[0] |= 0x00000010u;
}
void TranformNodeData::clear_has_source_node_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void TranformNodeData::clear_source_node_id() {
  source_node_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_node_id();
}
 ::google::protobuf::int64 TranformNodeData::source_node_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.source_node_id)
  return source_node_id_;
}
 void TranformNodeData::set_source_node_id(::google::protobuf::int64 value) {
  set_has_source_node_id();
  source_node_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.source_node_id)
}

// optional bool needs_local_transform_update = 12;
bool TranformNodeData::has_needs_local_transform_update() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TranformNodeData::set_has_needs_local_transform_update() {
  _has_bits_[0] |= 0x00000020u;
}
void TranformNodeData::clear_has_needs_local_transform_update() {
  _has_bits_[0] &= ~0x00000020u;
}
void TranformNodeData::clear_needs_local_transform_update() {
  needs_local_transform_update_ = false;
  clear_has_needs_local_transform_update();
}
 bool TranformNodeData::needs_local_transform_update() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.needs_local_transform_update)
  return needs_local_transform_update_;
}
 void TranformNodeData::set_needs_local_transform_update(bool value) {
  set_has_needs_local_transform_update();
  needs_local_transform_update_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.needs_local_transform_update)
}

// optional bool node_and_ancestors_are_animated_or_invertible = 41;
bool TranformNodeData::has_node_and_ancestors_are_animated_or_invertible() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TranformNodeData::set_has_node_and_ancestors_are_animated_or_invertible() {
  _has_bits_[0] |= 0x00000040u;
}
void TranformNodeData::clear_has_node_and_ancestors_are_animated_or_invertible() {
  _has_bits_[0] &= ~0x00000040u;
}
void TranformNodeData::clear_node_and_ancestors_are_animated_or_invertible() {
  node_and_ancestors_are_animated_or_invertible_ = false;
  clear_has_node_and_ancestors_are_animated_or_invertible();
}
 bool TranformNodeData::node_and_ancestors_are_animated_or_invertible() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.node_and_ancestors_are_animated_or_invertible)
  return node_and_ancestors_are_animated_or_invertible_;
}
 void TranformNodeData::set_node_and_ancestors_are_animated_or_invertible(bool value) {
  set_has_node_and_ancestors_are_animated_or_invertible();
  node_and_ancestors_are_animated_or_invertible_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.node_and_ancestors_are_animated_or_invertible)
}

// optional bool is_invertible = 13;
bool TranformNodeData::has_is_invertible() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TranformNodeData::set_has_is_invertible() {
  _has_bits_[0] |= 0x00000080u;
}
void TranformNodeData::clear_has_is_invertible() {
  _has_bits_[0] &= ~0x00000080u;
}
void TranformNodeData::clear_is_invertible() {
  is_invertible_ = false;
  clear_has_is_invertible();
}
 bool TranformNodeData::is_invertible() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.is_invertible)
  return is_invertible_;
}
 void TranformNodeData::set_is_invertible(bool value) {
  set_has_is_invertible();
  is_invertible_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.is_invertible)
}

// optional bool ancestors_are_invertible = 14;
bool TranformNodeData::has_ancestors_are_invertible() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TranformNodeData::set_has_ancestors_are_invertible() {
  _has_bits_[0] |= 0x00000100u;
}
void TranformNodeData::clear_has_ancestors_are_invertible() {
  _has_bits_[0] &= ~0x00000100u;
}
void TranformNodeData::clear_ancestors_are_invertible() {
  ancestors_are_invertible_ = false;
  clear_has_ancestors_are_invertible();
}
 bool TranformNodeData::ancestors_are_invertible() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.ancestors_are_invertible)
  return ancestors_are_invertible_;
}
 void TranformNodeData::set_ancestors_are_invertible(bool value) {
  set_has_ancestors_are_invertible();
  ancestors_are_invertible_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.ancestors_are_invertible)
}

// optional bool has_potential_animation = 15;
bool TranformNodeData::has_has_potential_animation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TranformNodeData::set_has_has_potential_animation() {
  _has_bits_[0] |= 0x00000200u;
}
void TranformNodeData::clear_has_has_potential_animation() {
  _has_bits_[0] &= ~0x00000200u;
}
void TranformNodeData::clear_has_potential_animation() {
  has_potential_animation_ = false;
  clear_has_has_potential_animation();
}
 bool TranformNodeData::has_potential_animation() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.has_potential_animation)
  return has_potential_animation_;
}
 void TranformNodeData::set_has_potential_animation(bool value) {
  set_has_has_potential_animation();
  has_potential_animation_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.has_potential_animation)
}

// optional bool is_currently_animating = 42;
bool TranformNodeData::has_is_currently_animating() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TranformNodeData::set_has_is_currently_animating() {
  _has_bits_[0] |= 0x00000400u;
}
void TranformNodeData::clear_has_is_currently_animating() {
  _has_bits_[0] &= ~0x00000400u;
}
void TranformNodeData::clear_is_currently_animating() {
  is_currently_animating_ = false;
  clear_has_is_currently_animating();
}
 bool TranformNodeData::is_currently_animating() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.is_currently_animating)
  return is_currently_animating_;
}
 void TranformNodeData::set_is_currently_animating(bool value) {
  set_has_is_currently_animating();
  is_currently_animating_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.is_currently_animating)
}

// optional bool to_screen_is_potentially_animated = 16;
bool TranformNodeData::has_to_screen_is_potentially_animated() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TranformNodeData::set_has_to_screen_is_potentially_animated() {
  _has_bits_[0] |= 0x00000800u;
}
void TranformNodeData::clear_has_to_screen_is_potentially_animated() {
  _has_bits_[0] &= ~0x00000800u;
}
void TranformNodeData::clear_to_screen_is_potentially_animated() {
  to_screen_is_potentially_animated_ = false;
  clear_has_to_screen_is_potentially_animated();
}
 bool TranformNodeData::to_screen_is_potentially_animated() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.to_screen_is_potentially_animated)
  return to_screen_is_potentially_animated_;
}
 void TranformNodeData::set_to_screen_is_potentially_animated(bool value) {
  set_has_to_screen_is_potentially_animated();
  to_screen_is_potentially_animated_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.to_screen_is_potentially_animated)
}

// optional bool has_only_translation_animations = 17;
bool TranformNodeData::has_has_only_translation_animations() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TranformNodeData::set_has_has_only_translation_animations() {
  _has_bits_[0] |= 0x00001000u;
}
void TranformNodeData::clear_has_has_only_translation_animations() {
  _has_bits_[0] &= ~0x00001000u;
}
void TranformNodeData::clear_has_only_translation_animations() {
  has_only_translation_animations_ = false;
  clear_has_has_only_translation_animations();
}
 bool TranformNodeData::has_only_translation_animations() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.has_only_translation_animations)
  return has_only_translation_animations_;
}
 void TranformNodeData::set_has_only_translation_animations(bool value) {
  set_has_has_only_translation_animations();
  has_only_translation_animations_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.has_only_translation_animations)
}

// optional bool flattens_inherited_transform = 19;
bool TranformNodeData::has_flattens_inherited_transform() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TranformNodeData::set_has_flattens_inherited_transform() {
  _has_bits_[0] |= 0x00002000u;
}
void TranformNodeData::clear_has_flattens_inherited_transform() {
  _has_bits_[0] &= ~0x00002000u;
}
void TranformNodeData::clear_flattens_inherited_transform() {
  flattens_inherited_transform_ = false;
  clear_has_flattens_inherited_transform();
}
 bool TranformNodeData::flattens_inherited_transform() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.flattens_inherited_transform)
  return flattens_inherited_transform_;
}
 void TranformNodeData::set_flattens_inherited_transform(bool value) {
  set_has_flattens_inherited_transform();
  flattens_inherited_transform_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.flattens_inherited_transform)
}

// optional bool node_and_ancestors_are_flat = 20;
bool TranformNodeData::has_node_and_ancestors_are_flat() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TranformNodeData::set_has_node_and_ancestors_are_flat() {
  _has_bits_[0] |= 0x00004000u;
}
void TranformNodeData::clear_has_node_and_ancestors_are_flat() {
  _has_bits_[0] &= ~0x00004000u;
}
void TranformNodeData::clear_node_and_ancestors_are_flat() {
  node_and_ancestors_are_flat_ = false;
  clear_has_node_and_ancestors_are_flat();
}
 bool TranformNodeData::node_and_ancestors_are_flat() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.node_and_ancestors_are_flat)
  return node_and_ancestors_are_flat_;
}
 void TranformNodeData::set_node_and_ancestors_are_flat(bool value) {
  set_has_node_and_ancestors_are_flat();
  node_and_ancestors_are_flat_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.node_and_ancestors_are_flat)
}

// optional bool node_and_ancestors_have_only_integer_translation = 21;
bool TranformNodeData::has_node_and_ancestors_have_only_integer_translation() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void TranformNodeData::set_has_node_and_ancestors_have_only_integer_translation() {
  _has_bits_[0] |= 0x00008000u;
}
void TranformNodeData::clear_has_node_and_ancestors_have_only_integer_translation() {
  _has_bits_[0] &= ~0x00008000u;
}
void TranformNodeData::clear_node_and_ancestors_have_only_integer_translation() {
  node_and_ancestors_have_only_integer_translation_ = false;
  clear_has_node_and_ancestors_have_only_integer_translation();
}
 bool TranformNodeData::node_and_ancestors_have_only_integer_translation() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.node_and_ancestors_have_only_integer_translation)
  return node_and_ancestors_have_only_integer_translation_;
}
 void TranformNodeData::set_node_and_ancestors_have_only_integer_translation(bool value) {
  set_has_node_and_ancestors_have_only_integer_translation();
  node_and_ancestors_have_only_integer_translation_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.node_and_ancestors_have_only_integer_translation)
}

// optional bool scrolls = 22;
bool TranformNodeData::has_scrolls() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void TranformNodeData::set_has_scrolls() {
  _has_bits_[0] |= 0x00010000u;
}
void TranformNodeData::clear_has_scrolls() {
  _has_bits_[0] &= ~0x00010000u;
}
void TranformNodeData::clear_scrolls() {
  scrolls_ = false;
  clear_has_scrolls();
}
 bool TranformNodeData::scrolls() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.scrolls)
  return scrolls_;
}
 void TranformNodeData::set_scrolls(bool value) {
  set_has_scrolls();
  scrolls_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.scrolls)
}

// optional bool needs_surface_contents_scale = 23;
bool TranformNodeData::has_needs_surface_contents_scale() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void TranformNodeData::set_has_needs_surface_contents_scale() {
  _has_bits_[0] |= 0x00020000u;
}
void TranformNodeData::clear_has_needs_surface_contents_scale() {
  _has_bits_[0] &= ~0x00020000u;
}
void TranformNodeData::clear_needs_surface_contents_scale() {
  needs_surface_contents_scale_ = false;
  clear_has_needs_surface_contents_scale();
}
 bool TranformNodeData::needs_surface_contents_scale() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.needs_surface_contents_scale)
  return needs_surface_contents_scale_;
}
 void TranformNodeData::set_needs_surface_contents_scale(bool value) {
  set_has_needs_surface_contents_scale();
  needs_surface_contents_scale_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.needs_surface_contents_scale)
}

// optional bool affected_by_inner_viewport_bounds_delta_x = 24;
bool TranformNodeData::has_affected_by_inner_viewport_bounds_delta_x() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void TranformNodeData::set_has_affected_by_inner_viewport_bounds_delta_x() {
  _has_bits_[0] |= 0x00040000u;
}
void TranformNodeData::clear_has_affected_by_inner_viewport_bounds_delta_x() {
  _has_bits_[0] &= ~0x00040000u;
}
void TranformNodeData::clear_affected_by_inner_viewport_bounds_delta_x() {
  affected_by_inner_viewport_bounds_delta_x_ = false;
  clear_has_affected_by_inner_viewport_bounds_delta_x();
}
 bool TranformNodeData::affected_by_inner_viewport_bounds_delta_x() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.affected_by_inner_viewport_bounds_delta_x)
  return affected_by_inner_viewport_bounds_delta_x_;
}
 void TranformNodeData::set_affected_by_inner_viewport_bounds_delta_x(bool value) {
  set_has_affected_by_inner_viewport_bounds_delta_x();
  affected_by_inner_viewport_bounds_delta_x_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.affected_by_inner_viewport_bounds_delta_x)
}

// optional bool affected_by_inner_viewport_bounds_delta_y = 25;
bool TranformNodeData::has_affected_by_inner_viewport_bounds_delta_y() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void TranformNodeData::set_has_affected_by_inner_viewport_bounds_delta_y() {
  _has_bits_[0] |= 0x00080000u;
}
void TranformNodeData::clear_has_affected_by_inner_viewport_bounds_delta_y() {
  _has_bits_[0] &= ~0x00080000u;
}
void TranformNodeData::clear_affected_by_inner_viewport_bounds_delta_y() {
  affected_by_inner_viewport_bounds_delta_y_ = false;
  clear_has_affected_by_inner_viewport_bounds_delta_y();
}
 bool TranformNodeData::affected_by_inner_viewport_bounds_delta_y() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.affected_by_inner_viewport_bounds_delta_y)
  return affected_by_inner_viewport_bounds_delta_y_;
}
 void TranformNodeData::set_affected_by_inner_viewport_bounds_delta_y(bool value) {
  set_has_affected_by_inner_viewport_bounds_delta_y();
  affected_by_inner_viewport_bounds_delta_y_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.affected_by_inner_viewport_bounds_delta_y)
}

// optional bool affected_by_outer_viewport_bounds_delta_x = 26;
bool TranformNodeData::has_affected_by_outer_viewport_bounds_delta_x() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void TranformNodeData::set_has_affected_by_outer_viewport_bounds_delta_x() {
  _has_bits_[0] |= 0x00100000u;
}
void TranformNodeData::clear_has_affected_by_outer_viewport_bounds_delta_x() {
  _has_bits_[0] &= ~0x00100000u;
}
void TranformNodeData::clear_affected_by_outer_viewport_bounds_delta_x() {
  affected_by_outer_viewport_bounds_delta_x_ = false;
  clear_has_affected_by_outer_viewport_bounds_delta_x();
}
 bool TranformNodeData::affected_by_outer_viewport_bounds_delta_x() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.affected_by_outer_viewport_bounds_delta_x)
  return affected_by_outer_viewport_bounds_delta_x_;
}
 void TranformNodeData::set_affected_by_outer_viewport_bounds_delta_x(bool value) {
  set_has_affected_by_outer_viewport_bounds_delta_x();
  affected_by_outer_viewport_bounds_delta_x_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.affected_by_outer_viewport_bounds_delta_x)
}

// optional bool affected_by_outer_viewport_bounds_delta_y = 27;
bool TranformNodeData::has_affected_by_outer_viewport_bounds_delta_y() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void TranformNodeData::set_has_affected_by_outer_viewport_bounds_delta_y() {
  _has_bits_[0] |= 0x00200000u;
}
void TranformNodeData::clear_has_affected_by_outer_viewport_bounds_delta_y() {
  _has_bits_[0] &= ~0x00200000u;
}
void TranformNodeData::clear_affected_by_outer_viewport_bounds_delta_y() {
  affected_by_outer_viewport_bounds_delta_y_ = false;
  clear_has_affected_by_outer_viewport_bounds_delta_y();
}
 bool TranformNodeData::affected_by_outer_viewport_bounds_delta_y() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.affected_by_outer_viewport_bounds_delta_y)
  return affected_by_outer_viewport_bounds_delta_y_;
}
 void TranformNodeData::set_affected_by_outer_viewport_bounds_delta_y(bool value) {
  set_has_affected_by_outer_viewport_bounds_delta_y();
  affected_by_outer_viewport_bounds_delta_y_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.affected_by_outer_viewport_bounds_delta_y)
}

// optional bool in_subtree_of_page_scale_layer = 28;
bool TranformNodeData::has_in_subtree_of_page_scale_layer() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void TranformNodeData::set_has_in_subtree_of_page_scale_layer() {
  _has_bits_[0] |= 0x00400000u;
}
void TranformNodeData::clear_has_in_subtree_of_page_scale_layer() {
  _has_bits_[0] &= ~0x00400000u;
}
void TranformNodeData::clear_in_subtree_of_page_scale_layer() {
  in_subtree_of_page_scale_layer_ = false;
  clear_has_in_subtree_of_page_scale_layer();
}
 bool TranformNodeData::in_subtree_of_page_scale_layer() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.in_subtree_of_page_scale_layer)
  return in_subtree_of_page_scale_layer_;
}
 void TranformNodeData::set_in_subtree_of_page_scale_layer(bool value) {
  set_has_in_subtree_of_page_scale_layer();
  in_subtree_of_page_scale_layer_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.in_subtree_of_page_scale_layer)
}

// optional bool transform_changed = 40;
bool TranformNodeData::has_transform_changed() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void TranformNodeData::set_has_transform_changed() {
  _has_bits_[0] |= 0x00800000u;
}
void TranformNodeData::clear_has_transform_changed() {
  _has_bits_[0] &= ~0x00800000u;
}
void TranformNodeData::clear_transform_changed() {
  transform_changed_ = false;
  clear_has_transform_changed();
}
 bool TranformNodeData::transform_changed() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.transform_changed)
  return transform_changed_;
}
 void TranformNodeData::set_transform_changed(bool value) {
  set_has_transform_changed();
  transform_changed_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.transform_changed)
}

// optional float post_local_scale_factor = 29;
bool TranformNodeData::has_post_local_scale_factor() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void TranformNodeData::set_has_post_local_scale_factor() {
  _has_bits_[0] |= 0x01000000u;
}
void TranformNodeData::clear_has_post_local_scale_factor() {
  _has_bits_[0] &= ~0x01000000u;
}
void TranformNodeData::clear_post_local_scale_factor() {
  post_local_scale_factor_ = 0;
  clear_has_post_local_scale_factor();
}
 float TranformNodeData::post_local_scale_factor() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.post_local_scale_factor)
  return post_local_scale_factor_;
}
 void TranformNodeData::set_post_local_scale_factor(float value) {
  set_has_post_local_scale_factor();
  post_local_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.post_local_scale_factor)
}

// optional .cc.proto.Vector2dF surface_contents_scale = 34;
bool TranformNodeData::has_surface_contents_scale() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void TranformNodeData::set_has_surface_contents_scale() {
  _has_bits_[0] |= 0x02000000u;
}
void TranformNodeData::clear_has_surface_contents_scale() {
  _has_bits_[0] &= ~0x02000000u;
}
void TranformNodeData::clear_surface_contents_scale() {
  if (surface_contents_scale_ != NULL) surface_contents_scale_->::cc::proto::Vector2dF::Clear();
  clear_has_surface_contents_scale();
}
const ::cc::proto::Vector2dF& TranformNodeData::surface_contents_scale() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.surface_contents_scale)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return surface_contents_scale_ != NULL ? *surface_contents_scale_ : *default_instance().surface_contents_scale_;
#else
  return surface_contents_scale_ != NULL ? *surface_contents_scale_ : *default_instance_->surface_contents_scale_;
#endif
}
::cc::proto::Vector2dF* TranformNodeData::mutable_surface_contents_scale() {
  set_has_surface_contents_scale();
  if (surface_contents_scale_ == NULL) {
    surface_contents_scale_ = new ::cc::proto::Vector2dF;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TranformNodeData.surface_contents_scale)
  return surface_contents_scale_;
}
::cc::proto::Vector2dF* TranformNodeData::release_surface_contents_scale() {
  // @@protoc_insertion_point(field_release:cc.proto.TranformNodeData.surface_contents_scale)
  clear_has_surface_contents_scale();
  ::cc::proto::Vector2dF* temp = surface_contents_scale_;
  surface_contents_scale_ = NULL;
  return temp;
}
void TranformNodeData::set_allocated_surface_contents_scale(::cc::proto::Vector2dF* surface_contents_scale) {
  delete surface_contents_scale_;
  surface_contents_scale_ = surface_contents_scale;
  if (surface_contents_scale) {
    set_has_surface_contents_scale();
  } else {
    clear_has_surface_contents_scale();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TranformNodeData.surface_contents_scale)
}

// optional .cc.proto.ScrollOffset scroll_offset = 35;
bool TranformNodeData::has_scroll_offset() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void TranformNodeData::set_has_scroll_offset() {
  _has_bits_[0] |= 0x04000000u;
}
void TranformNodeData::clear_has_scroll_offset() {
  _has_bits_[0] &= ~0x04000000u;
}
void TranformNodeData::clear_scroll_offset() {
  if (scroll_offset_ != NULL) scroll_offset_->::cc::proto::ScrollOffset::Clear();
  clear_has_scroll_offset();
}
const ::cc::proto::ScrollOffset& TranformNodeData::scroll_offset() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.scroll_offset)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return scroll_offset_ != NULL ? *scroll_offset_ : *default_instance().scroll_offset_;
#else
  return scroll_offset_ != NULL ? *scroll_offset_ : *default_instance_->scroll_offset_;
#endif
}
::cc::proto::ScrollOffset* TranformNodeData::mutable_scroll_offset() {
  set_has_scroll_offset();
  if (scroll_offset_ == NULL) {
    scroll_offset_ = new ::cc::proto::ScrollOffset;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TranformNodeData.scroll_offset)
  return scroll_offset_;
}
::cc::proto::ScrollOffset* TranformNodeData::release_scroll_offset() {
  // @@protoc_insertion_point(field_release:cc.proto.TranformNodeData.scroll_offset)
  clear_has_scroll_offset();
  ::cc::proto::ScrollOffset* temp = scroll_offset_;
  scroll_offset_ = NULL;
  return temp;
}
void TranformNodeData::set_allocated_scroll_offset(::cc::proto::ScrollOffset* scroll_offset) {
  delete scroll_offset_;
  scroll_offset_ = scroll_offset;
  if (scroll_offset) {
    set_has_scroll_offset();
  } else {
    clear_has_scroll_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TranformNodeData.scroll_offset)
}

// optional .cc.proto.Vector2dF scroll_snap = 36;
bool TranformNodeData::has_scroll_snap() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void TranformNodeData::set_has_scroll_snap() {
  _has_bits_[0] |= 0x08000000u;
}
void TranformNodeData::clear_has_scroll_snap() {
  _has_bits_[0] &= ~0x08000000u;
}
void TranformNodeData::clear_scroll_snap() {
  if (scroll_snap_ != NULL) scroll_snap_->::cc::proto::Vector2dF::Clear();
  clear_has_scroll_snap();
}
const ::cc::proto::Vector2dF& TranformNodeData::scroll_snap() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.scroll_snap)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return scroll_snap_ != NULL ? *scroll_snap_ : *default_instance().scroll_snap_;
#else
  return scroll_snap_ != NULL ? *scroll_snap_ : *default_instance_->scroll_snap_;
#endif
}
::cc::proto::Vector2dF* TranformNodeData::mutable_scroll_snap() {
  set_has_scroll_snap();
  if (scroll_snap_ == NULL) {
    scroll_snap_ = new ::cc::proto::Vector2dF;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TranformNodeData.scroll_snap)
  return scroll_snap_;
}
::cc::proto::Vector2dF* TranformNodeData::release_scroll_snap() {
  // @@protoc_insertion_point(field_release:cc.proto.TranformNodeData.scroll_snap)
  clear_has_scroll_snap();
  ::cc::proto::Vector2dF* temp = scroll_snap_;
  scroll_snap_ = NULL;
  return temp;
}
void TranformNodeData::set_allocated_scroll_snap(::cc::proto::Vector2dF* scroll_snap) {
  delete scroll_snap_;
  scroll_snap_ = scroll_snap;
  if (scroll_snap) {
    set_has_scroll_snap();
  } else {
    clear_has_scroll_snap();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TranformNodeData.scroll_snap)
}

// optional .cc.proto.Vector2dF source_offset = 37;
bool TranformNodeData::has_source_offset() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void TranformNodeData::set_has_source_offset() {
  _has_bits_[0] |= 0x10000000u;
}
void TranformNodeData::clear_has_source_offset() {
  _has_bits_[0] &= ~0x10000000u;
}
void TranformNodeData::clear_source_offset() {
  if (source_offset_ != NULL) source_offset_->::cc::proto::Vector2dF::Clear();
  clear_has_source_offset();
}
const ::cc::proto::Vector2dF& TranformNodeData::source_offset() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.source_offset)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return source_offset_ != NULL ? *source_offset_ : *default_instance().source_offset_;
#else
  return source_offset_ != NULL ? *source_offset_ : *default_instance_->source_offset_;
#endif
}
::cc::proto::Vector2dF* TranformNodeData::mutable_source_offset() {
  set_has_source_offset();
  if (source_offset_ == NULL) {
    source_offset_ = new ::cc::proto::Vector2dF;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TranformNodeData.source_offset)
  return source_offset_;
}
::cc::proto::Vector2dF* TranformNodeData::release_source_offset() {
  // @@protoc_insertion_point(field_release:cc.proto.TranformNodeData.source_offset)
  clear_has_source_offset();
  ::cc::proto::Vector2dF* temp = source_offset_;
  source_offset_ = NULL;
  return temp;
}
void TranformNodeData::set_allocated_source_offset(::cc::proto::Vector2dF* source_offset) {
  delete source_offset_;
  source_offset_ = source_offset;
  if (source_offset) {
    set_has_source_offset();
  } else {
    clear_has_source_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TranformNodeData.source_offset)
}

// optional .cc.proto.Vector2dF source_to_parent = 38;
bool TranformNodeData::has_source_to_parent() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void TranformNodeData::set_has_source_to_parent() {
  _has_bits_[0] |= 0x20000000u;
}
void TranformNodeData::clear_has_source_to_parent() {
  _has_bits_[0] &= ~0x20000000u;
}
void TranformNodeData::clear_source_to_parent() {
  if (source_to_parent_ != NULL) source_to_parent_->::cc::proto::Vector2dF::Clear();
  clear_has_source_to_parent();
}
const ::cc::proto::Vector2dF& TranformNodeData::source_to_parent() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.source_to_parent)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return source_to_parent_ != NULL ? *source_to_parent_ : *default_instance().source_to_parent_;
#else
  return source_to_parent_ != NULL ? *source_to_parent_ : *default_instance_->source_to_parent_;
#endif
}
::cc::proto::Vector2dF* TranformNodeData::mutable_source_to_parent() {
  set_has_source_to_parent();
  if (source_to_parent_ == NULL) {
    source_to_parent_ = new ::cc::proto::Vector2dF;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TranformNodeData.source_to_parent)
  return source_to_parent_;
}
::cc::proto::Vector2dF* TranformNodeData::release_source_to_parent() {
  // @@protoc_insertion_point(field_release:cc.proto.TranformNodeData.source_to_parent)
  clear_has_source_to_parent();
  ::cc::proto::Vector2dF* temp = source_to_parent_;
  source_to_parent_ = NULL;
  return temp;
}
void TranformNodeData::set_allocated_source_to_parent(::cc::proto::Vector2dF* source_to_parent) {
  delete source_to_parent_;
  source_to_parent_ = source_to_parent;
  if (source_to_parent) {
    set_has_source_to_parent();
  } else {
    clear_has_source_to_parent();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TranformNodeData.source_to_parent)
}

// optional int64 sorting_context_id = 39;
bool TranformNodeData::has_sorting_context_id() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void TranformNodeData::set_has_sorting_context_id() {
  _has_bits_[0] |= 0x40000000u;
}
void TranformNodeData::clear_has_sorting_context_id() {
  _has_bits_[0] &= ~0x40000000u;
}
void TranformNodeData::clear_sorting_context_id() {
  sorting_context_id_ = GOOGLE_LONGLONG(0);
  clear_has_sorting_context_id();
}
 ::google::protobuf::int64 TranformNodeData::sorting_context_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.TranformNodeData.sorting_context_id)
  return sorting_context_id_;
}
 void TranformNodeData::set_sorting_context_id(::google::protobuf::int64 value) {
  set_has_sorting_context_id();
  sorting_context_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TranformNodeData.sorting_context_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForTransformCachedNodeData(
    TransformCachedNodeData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformCachedNodeData::kFromTargetFieldNumber;
const int TransformCachedNodeData::kToTargetFieldNumber;
const int TransformCachedNodeData::kFromScreenFieldNumber;
const int TransformCachedNodeData::kToScreenFieldNumber;
const int TransformCachedNodeData::kTargetIdFieldNumber;
const int TransformCachedNodeData::kContentTargetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformCachedNodeData::TransformCachedNodeData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.TransformCachedNodeData)
}

void TransformCachedNodeData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  from_target_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  from_target_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  to_target_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  to_target_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  from_screen_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  from_screen_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  to_screen_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  to_screen_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
}

TransformCachedNodeData::TransformCachedNodeData(const TransformCachedNodeData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.TransformCachedNodeData)
}

void TransformCachedNodeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_target_ = NULL;
  to_target_ = NULL;
  from_screen_ = NULL;
  to_screen_ = NULL;
  target_id_ = GOOGLE_LONGLONG(0);
  content_target_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformCachedNodeData::~TransformCachedNodeData() {
  // @@protoc_insertion_point(destructor:cc.proto.TransformCachedNodeData)
  SharedDtor();
}

void TransformCachedNodeData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete from_target_;
    delete to_target_;
    delete from_screen_;
    delete to_screen_;
  }
}

void TransformCachedNodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransformCachedNodeData& TransformCachedNodeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

TransformCachedNodeData* TransformCachedNodeData::default_instance_ = NULL;

TransformCachedNodeData* TransformCachedNodeData::New(::google::protobuf::Arena* arena) const {
  TransformCachedNodeData* n = new TransformCachedNodeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformCachedNodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.TransformCachedNodeData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TransformCachedNodeData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransformCachedNodeData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(target_id_, content_target_id_);
    if (has_from_target()) {
      if (from_target_ != NULL) from_target_->::cc::proto::Transform::Clear();
    }
    if (has_to_target()) {
      if (to_target_ != NULL) to_target_->::cc::proto::Transform::Clear();
    }
    if (has_from_screen()) {
      if (from_screen_ != NULL) from_screen_->::cc::proto::Transform::Clear();
    }
    if (has_to_screen()) {
      if (to_screen_ != NULL) to_screen_->::cc::proto::Transform::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TransformCachedNodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForTransformCachedNodeData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.TransformCachedNodeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.Transform from_target = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_to_target;
        break;
      }

      // optional .cc.proto.Transform to_target = 2;
      case 2: {
        if (tag == 18) {
         parse_to_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_from_screen;
        break;
      }

      // optional .cc.proto.Transform from_screen = 3;
      case 3: {
        if (tag == 26) {
         parse_from_screen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_screen()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_to_screen;
        break;
      }

      // optional .cc.proto.Transform to_screen = 4;
      case 4: {
        if (tag == 34) {
         parse_to_screen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_screen()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_target_id;
        break;
      }

      // optional int64 target_id = 5;
      case 5: {
        if (tag == 40) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_content_target_id;
        break;
      }

      // optional int64 content_target_id = 6;
      case 6: {
        if (tag == 48) {
         parse_content_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &content_target_id_)));
          set_has_content_target_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.TransformCachedNodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.TransformCachedNodeData)
  return false;
#undef DO_
}

void TransformCachedNodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.TransformCachedNodeData)
  // optional .cc.proto.Transform from_target = 1;
  if (has_from_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->from_target_, output);
  }

  // optional .cc.proto.Transform to_target = 2;
  if (has_to_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->to_target_, output);
  }

  // optional .cc.proto.Transform from_screen = 3;
  if (has_from_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->from_screen_, output);
  }

  // optional .cc.proto.Transform to_screen = 4;
  if (has_to_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->to_screen_, output);
  }

  // optional int64 target_id = 5;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->target_id(), output);
  }

  // optional int64 content_target_id = 6;
  if (has_content_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->content_target_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.TransformCachedNodeData)
}

int TransformCachedNodeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.TransformCachedNodeData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .cc.proto.Transform from_target = 1;
    if (has_from_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->from_target_);
    }

    // optional .cc.proto.Transform to_target = 2;
    if (has_to_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->to_target_);
    }

    // optional .cc.proto.Transform from_screen = 3;
    if (has_from_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->from_screen_);
    }

    // optional .cc.proto.Transform to_screen = 4;
    if (has_to_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->to_screen_);
    }

    // optional int64 target_id = 5;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_id());
    }

    // optional int64 content_target_id = 6;
    if (has_content_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->content_target_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformCachedNodeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransformCachedNodeData*>(&from));
}

void TransformCachedNodeData::MergeFrom(const TransformCachedNodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.TransformCachedNodeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_target()) {
      mutable_from_target()->::cc::proto::Transform::MergeFrom(from.from_target());
    }
    if (from.has_to_target()) {
      mutable_to_target()->::cc::proto::Transform::MergeFrom(from.to_target());
    }
    if (from.has_from_screen()) {
      mutable_from_screen()->::cc::proto::Transform::MergeFrom(from.from_screen());
    }
    if (from.has_to_screen()) {
      mutable_to_screen()->::cc::proto::Transform::MergeFrom(from.to_screen());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_content_target_id()) {
      set_content_target_id(from.content_target_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void TransformCachedNodeData::CopyFrom(const TransformCachedNodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.TransformCachedNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformCachedNodeData::IsInitialized() const {

  return true;
}

void TransformCachedNodeData::Swap(TransformCachedNodeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformCachedNodeData::InternalSwap(TransformCachedNodeData* other) {
  std::swap(from_target_, other->from_target_);
  std::swap(to_target_, other->to_target_);
  std::swap(from_screen_, other->from_screen_);
  std::swap(to_screen_, other->to_screen_);
  std::swap(target_id_, other->target_id_);
  std::swap(content_target_id_, other->content_target_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TransformCachedNodeData::GetTypeName() const {
  return "cc.proto.TransformCachedNodeData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformCachedNodeData

// optional .cc.proto.Transform from_target = 1;
bool TransformCachedNodeData::has_from_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransformCachedNodeData::set_has_from_target() {
  _has_bits_[0] |= 0x00000001u;
}
void TransformCachedNodeData::clear_has_from_target() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransformCachedNodeData::clear_from_target() {
  if (from_target_ != NULL) from_target_->::cc::proto::Transform::Clear();
  clear_has_from_target();
}
const ::cc::proto::Transform& TransformCachedNodeData::from_target() const {
  // @@protoc_insertion_point(field_get:cc.proto.TransformCachedNodeData.from_target)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return from_target_ != NULL ? *from_target_ : *default_instance().from_target_;
#else
  return from_target_ != NULL ? *from_target_ : *default_instance_->from_target_;
#endif
}
::cc::proto::Transform* TransformCachedNodeData::mutable_from_target() {
  set_has_from_target();
  if (from_target_ == NULL) {
    from_target_ = new ::cc::proto::Transform;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TransformCachedNodeData.from_target)
  return from_target_;
}
::cc::proto::Transform* TransformCachedNodeData::release_from_target() {
  // @@protoc_insertion_point(field_release:cc.proto.TransformCachedNodeData.from_target)
  clear_has_from_target();
  ::cc::proto::Transform* temp = from_target_;
  from_target_ = NULL;
  return temp;
}
void TransformCachedNodeData::set_allocated_from_target(::cc::proto::Transform* from_target) {
  delete from_target_;
  from_target_ = from_target;
  if (from_target) {
    set_has_from_target();
  } else {
    clear_has_from_target();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TransformCachedNodeData.from_target)
}

// optional .cc.proto.Transform to_target = 2;
bool TransformCachedNodeData::has_to_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransformCachedNodeData::set_has_to_target() {
  _has_bits_[0] |= 0x00000002u;
}
void TransformCachedNodeData::clear_has_to_target() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransformCachedNodeData::clear_to_target() {
  if (to_target_ != NULL) to_target_->::cc::proto::Transform::Clear();
  clear_has_to_target();
}
const ::cc::proto::Transform& TransformCachedNodeData::to_target() const {
  // @@protoc_insertion_point(field_get:cc.proto.TransformCachedNodeData.to_target)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return to_target_ != NULL ? *to_target_ : *default_instance().to_target_;
#else
  return to_target_ != NULL ? *to_target_ : *default_instance_->to_target_;
#endif
}
::cc::proto::Transform* TransformCachedNodeData::mutable_to_target() {
  set_has_to_target();
  if (to_target_ == NULL) {
    to_target_ = new ::cc::proto::Transform;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TransformCachedNodeData.to_target)
  return to_target_;
}
::cc::proto::Transform* TransformCachedNodeData::release_to_target() {
  // @@protoc_insertion_point(field_release:cc.proto.TransformCachedNodeData.to_target)
  clear_has_to_target();
  ::cc::proto::Transform* temp = to_target_;
  to_target_ = NULL;
  return temp;
}
void TransformCachedNodeData::set_allocated_to_target(::cc::proto::Transform* to_target) {
  delete to_target_;
  to_target_ = to_target;
  if (to_target) {
    set_has_to_target();
  } else {
    clear_has_to_target();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TransformCachedNodeData.to_target)
}

// optional .cc.proto.Transform from_screen = 3;
bool TransformCachedNodeData::has_from_screen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransformCachedNodeData::set_has_from_screen() {
  _has_bits_[0] |= 0x00000004u;
}
void TransformCachedNodeData::clear_has_from_screen() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransformCachedNodeData::clear_from_screen() {
  if (from_screen_ != NULL) from_screen_->::cc::proto::Transform::Clear();
  clear_has_from_screen();
}
const ::cc::proto::Transform& TransformCachedNodeData::from_screen() const {
  // @@protoc_insertion_point(field_get:cc.proto.TransformCachedNodeData.from_screen)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return from_screen_ != NULL ? *from_screen_ : *default_instance().from_screen_;
#else
  return from_screen_ != NULL ? *from_screen_ : *default_instance_->from_screen_;
#endif
}
::cc::proto::Transform* TransformCachedNodeData::mutable_from_screen() {
  set_has_from_screen();
  if (from_screen_ == NULL) {
    from_screen_ = new ::cc::proto::Transform;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TransformCachedNodeData.from_screen)
  return from_screen_;
}
::cc::proto::Transform* TransformCachedNodeData::release_from_screen() {
  // @@protoc_insertion_point(field_release:cc.proto.TransformCachedNodeData.from_screen)
  clear_has_from_screen();
  ::cc::proto::Transform* temp = from_screen_;
  from_screen_ = NULL;
  return temp;
}
void TransformCachedNodeData::set_allocated_from_screen(::cc::proto::Transform* from_screen) {
  delete from_screen_;
  from_screen_ = from_screen;
  if (from_screen) {
    set_has_from_screen();
  } else {
    clear_has_from_screen();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TransformCachedNodeData.from_screen)
}

// optional .cc.proto.Transform to_screen = 4;
bool TransformCachedNodeData::has_to_screen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransformCachedNodeData::set_has_to_screen() {
  _has_bits_[0] |= 0x00000008u;
}
void TransformCachedNodeData::clear_has_to_screen() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransformCachedNodeData::clear_to_screen() {
  if (to_screen_ != NULL) to_screen_->::cc::proto::Transform::Clear();
  clear_has_to_screen();
}
const ::cc::proto::Transform& TransformCachedNodeData::to_screen() const {
  // @@protoc_insertion_point(field_get:cc.proto.TransformCachedNodeData.to_screen)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return to_screen_ != NULL ? *to_screen_ : *default_instance().to_screen_;
#else
  return to_screen_ != NULL ? *to_screen_ : *default_instance_->to_screen_;
#endif
}
::cc::proto::Transform* TransformCachedNodeData::mutable_to_screen() {
  set_has_to_screen();
  if (to_screen_ == NULL) {
    to_screen_ = new ::cc::proto::Transform;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TransformCachedNodeData.to_screen)
  return to_screen_;
}
::cc::proto::Transform* TransformCachedNodeData::release_to_screen() {
  // @@protoc_insertion_point(field_release:cc.proto.TransformCachedNodeData.to_screen)
  clear_has_to_screen();
  ::cc::proto::Transform* temp = to_screen_;
  to_screen_ = NULL;
  return temp;
}
void TransformCachedNodeData::set_allocated_to_screen(::cc::proto::Transform* to_screen) {
  delete to_screen_;
  to_screen_ = to_screen;
  if (to_screen) {
    set_has_to_screen();
  } else {
    clear_has_to_screen();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TransformCachedNodeData.to_screen)
}

// optional int64 target_id = 5;
bool TransformCachedNodeData::has_target_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransformCachedNodeData::set_has_target_id() {
  _has_bits_[0] |= 0x00000010u;
}
void TransformCachedNodeData::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransformCachedNodeData::clear_target_id() {
  target_id_ = GOOGLE_LONGLONG(0);
  clear_has_target_id();
}
 ::google::protobuf::int64 TransformCachedNodeData::target_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.TransformCachedNodeData.target_id)
  return target_id_;
}
 void TransformCachedNodeData::set_target_id(::google::protobuf::int64 value) {
  set_has_target_id();
  target_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TransformCachedNodeData.target_id)
}

// optional int64 content_target_id = 6;
bool TransformCachedNodeData::has_content_target_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TransformCachedNodeData::set_has_content_target_id() {
  _has_bits_[0] |= 0x00000020u;
}
void TransformCachedNodeData::clear_has_content_target_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void TransformCachedNodeData::clear_content_target_id() {
  content_target_id_ = GOOGLE_LONGLONG(0);
  clear_has_content_target_id();
}
 ::google::protobuf::int64 TransformCachedNodeData::content_target_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.TransformCachedNodeData.content_target_id)
  return content_target_id_;
}
 void TransformCachedNodeData::set_content_target_id(::google::protobuf::int64 value) {
  set_has_content_target_id();
  content_target_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TransformCachedNodeData.content_target_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForClipNodeData(
    ClipNodeData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClipNodeData::kClipFieldNumber;
const int ClipNodeData::kCombinedClipInTargetSpaceFieldNumber;
const int ClipNodeData::kClipInTargetSpaceFieldNumber;
const int ClipNodeData::kTransformIdFieldNumber;
const int ClipNodeData::kTargetTransformIdFieldNumber;
const int ClipNodeData::kTargetEffectIdFieldNumber;
const int ClipNodeData::kAppliesLocalClipFieldNumber;
const int ClipNodeData::kLayerClippingUsesOnlyLocalClipFieldNumber;
const int ClipNodeData::kTargetIsClippedFieldNumber;
const int ClipNodeData::kLayersAreClippedFieldNumber;
const int ClipNodeData::kLayersAreClippedWhenSurfacesDisabledFieldNumber;
const int ClipNodeData::kResetsClipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClipNodeData::ClipNodeData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.ClipNodeData)
}

void ClipNodeData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clip_ = const_cast< ::cc::proto::RectF*>(
      ::cc::proto::RectF::internal_default_instance());
#else
  clip_ = const_cast< ::cc::proto::RectF*>(&::cc::proto::RectF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  combined_clip_in_target_space_ = const_cast< ::cc::proto::RectF*>(
      ::cc::proto::RectF::internal_default_instance());
#else
  combined_clip_in_target_space_ = const_cast< ::cc::proto::RectF*>(&::cc::proto::RectF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clip_in_target_space_ = const_cast< ::cc::proto::RectF*>(
      ::cc::proto::RectF::internal_default_instance());
#else
  clip_in_target_space_ = const_cast< ::cc::proto::RectF*>(&::cc::proto::RectF::default_instance());
#endif
}

ClipNodeData::ClipNodeData(const ClipNodeData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.ClipNodeData)
}

void ClipNodeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clip_ = NULL;
  combined_clip_in_target_space_ = NULL;
  clip_in_target_space_ = NULL;
  transform_id_ = GOOGLE_LONGLONG(0);
  target_transform_id_ = GOOGLE_LONGLONG(0);
  target_effect_id_ = GOOGLE_LONGLONG(0);
  applies_local_clip_ = false;
  layer_clipping_uses_only_local_clip_ = false;
  target_is_clipped_ = false;
  layers_are_clipped_ = false;
  layers_are_clipped_when_surfaces_disabled_ = false;
  resets_clip_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClipNodeData::~ClipNodeData() {
  // @@protoc_insertion_point(destructor:cc.proto.ClipNodeData)
  SharedDtor();
}

void ClipNodeData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete clip_;
    delete combined_clip_in_target_space_;
    delete clip_in_target_space_;
  }
}

void ClipNodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClipNodeData& ClipNodeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

ClipNodeData* ClipNodeData::default_instance_ = NULL;

ClipNodeData* ClipNodeData::New(::google::protobuf::Arena* arena) const {
  ClipNodeData* n = new ClipNodeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClipNodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.ClipNodeData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ClipNodeData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClipNodeData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(transform_id_, layer_clipping_uses_only_local_clip_);
    if (has_clip()) {
      if (clip_ != NULL) clip_->::cc::proto::RectF::Clear();
    }
    if (has_combined_clip_in_target_space()) {
      if (combined_clip_in_target_space_ != NULL) combined_clip_in_target_space_->::cc::proto::RectF::Clear();
    }
    if (has_clip_in_target_space()) {
      if (clip_in_target_space_ != NULL) clip_in_target_space_->::cc::proto::RectF::Clear();
    }
  }
  ZR_(target_is_clipped_, resets_clip_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClipNodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForClipNodeData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.ClipNodeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.RectF clip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_combined_clip_in_target_space;
        break;
      }

      // optional .cc.proto.RectF combined_clip_in_target_space = 2;
      case 2: {
        if (tag == 18) {
         parse_combined_clip_in_target_space:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_combined_clip_in_target_space()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_clip_in_target_space;
        break;
      }

      // optional .cc.proto.RectF clip_in_target_space = 3;
      case 3: {
        if (tag == 26) {
         parse_clip_in_target_space:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip_in_target_space()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_transform_id;
        break;
      }

      // optional int64 transform_id = 4;
      case 4: {
        if (tag == 32) {
         parse_transform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transform_id_)));
          set_has_transform_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_target_transform_id;
        break;
      }

      // optional int64 target_transform_id = 5;
      case 5: {
        if (tag == 40) {
         parse_target_transform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_transform_id_)));
          set_has_target_transform_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_applies_local_clip;
        break;
      }

      // optional bool applies_local_clip = 6;
      case 6: {
        if (tag == 48) {
         parse_applies_local_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &applies_local_clip_)));
          set_has_applies_local_clip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_layer_clipping_uses_only_local_clip;
        break;
      }

      // optional bool layer_clipping_uses_only_local_clip = 7;
      case 7: {
        if (tag == 56) {
         parse_layer_clipping_uses_only_local_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layer_clipping_uses_only_local_clip_)));
          set_has_layer_clipping_uses_only_local_clip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_target_is_clipped;
        break;
      }

      // optional bool target_is_clipped = 8;
      case 8: {
        if (tag == 64) {
         parse_target_is_clipped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_is_clipped_)));
          set_has_target_is_clipped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_layers_are_clipped;
        break;
      }

      // optional bool layers_are_clipped = 9;
      case 9: {
        if (tag == 72) {
         parse_layers_are_clipped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layers_are_clipped_)));
          set_has_layers_are_clipped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_layers_are_clipped_when_surfaces_disabled;
        break;
      }

      // optional bool layers_are_clipped_when_surfaces_disabled = 10;
      case 10: {
        if (tag == 80) {
         parse_layers_are_clipped_when_surfaces_disabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layers_are_clipped_when_surfaces_disabled_)));
          set_has_layers_are_clipped_when_surfaces_disabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_resets_clip;
        break;
      }

      // optional bool resets_clip = 11;
      case 11: {
        if (tag == 88) {
         parse_resets_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resets_clip_)));
          set_has_resets_clip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_target_effect_id;
        break;
      }

      // optional int64 target_effect_id = 12;
      case 12: {
        if (tag == 96) {
         parse_target_effect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_effect_id_)));
          set_has_target_effect_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.ClipNodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.ClipNodeData)
  return false;
#undef DO_
}

void ClipNodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.ClipNodeData)
  // optional .cc.proto.RectF clip = 1;
  if (has_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->clip_, output);
  }

  // optional .cc.proto.RectF combined_clip_in_target_space = 2;
  if (has_combined_clip_in_target_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->combined_clip_in_target_space_, output);
  }

  // optional .cc.proto.RectF clip_in_target_space = 3;
  if (has_clip_in_target_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->clip_in_target_space_, output);
  }

  // optional int64 transform_id = 4;
  if (has_transform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->transform_id(), output);
  }

  // optional int64 target_transform_id = 5;
  if (has_target_transform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->target_transform_id(), output);
  }

  // optional bool applies_local_clip = 6;
  if (has_applies_local_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->applies_local_clip(), output);
  }

  // optional bool layer_clipping_uses_only_local_clip = 7;
  if (has_layer_clipping_uses_only_local_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->layer_clipping_uses_only_local_clip(), output);
  }

  // optional bool target_is_clipped = 8;
  if (has_target_is_clipped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->target_is_clipped(), output);
  }

  // optional bool layers_are_clipped = 9;
  if (has_layers_are_clipped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->layers_are_clipped(), output);
  }

  // optional bool layers_are_clipped_when_surfaces_disabled = 10;
  if (has_layers_are_clipped_when_surfaces_disabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->layers_are_clipped_when_surfaces_disabled(), output);
  }

  // optional bool resets_clip = 11;
  if (has_resets_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->resets_clip(), output);
  }

  // optional int64 target_effect_id = 12;
  if (has_target_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->target_effect_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.ClipNodeData)
}

int ClipNodeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.ClipNodeData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .cc.proto.RectF clip = 1;
    if (has_clip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clip_);
    }

    // optional .cc.proto.RectF combined_clip_in_target_space = 2;
    if (has_combined_clip_in_target_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->combined_clip_in_target_space_);
    }

    // optional .cc.proto.RectF clip_in_target_space = 3;
    if (has_clip_in_target_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clip_in_target_space_);
    }

    // optional int64 transform_id = 4;
    if (has_transform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transform_id());
    }

    // optional int64 target_transform_id = 5;
    if (has_target_transform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_transform_id());
    }

    // optional int64 target_effect_id = 12;
    if (has_target_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_effect_id());
    }

    // optional bool applies_local_clip = 6;
    if (has_applies_local_clip()) {
      total_size += 1 + 1;
    }

    // optional bool layer_clipping_uses_only_local_clip = 7;
    if (has_layer_clipping_uses_only_local_clip()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool target_is_clipped = 8;
    if (has_target_is_clipped()) {
      total_size += 1 + 1;
    }

    // optional bool layers_are_clipped = 9;
    if (has_layers_are_clipped()) {
      total_size += 1 + 1;
    }

    // optional bool layers_are_clipped_when_surfaces_disabled = 10;
    if (has_layers_are_clipped_when_surfaces_disabled()) {
      total_size += 1 + 1;
    }

    // optional bool resets_clip = 11;
    if (has_resets_clip()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClipNodeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClipNodeData*>(&from));
}

void ClipNodeData::MergeFrom(const ClipNodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.ClipNodeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clip()) {
      mutable_clip()->::cc::proto::RectF::MergeFrom(from.clip());
    }
    if (from.has_combined_clip_in_target_space()) {
      mutable_combined_clip_in_target_space()->::cc::proto::RectF::MergeFrom(from.combined_clip_in_target_space());
    }
    if (from.has_clip_in_target_space()) {
      mutable_clip_in_target_space()->::cc::proto::RectF::MergeFrom(from.clip_in_target_space());
    }
    if (from.has_transform_id()) {
      set_transform_id(from.transform_id());
    }
    if (from.has_target_transform_id()) {
      set_target_transform_id(from.target_transform_id());
    }
    if (from.has_target_effect_id()) {
      set_target_effect_id(from.target_effect_id());
    }
    if (from.has_applies_local_clip()) {
      set_applies_local_clip(from.applies_local_clip());
    }
    if (from.has_layer_clipping_uses_only_local_clip()) {
      set_layer_clipping_uses_only_local_clip(from.layer_clipping_uses_only_local_clip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_target_is_clipped()) {
      set_target_is_clipped(from.target_is_clipped());
    }
    if (from.has_layers_are_clipped()) {
      set_layers_are_clipped(from.layers_are_clipped());
    }
    if (from.has_layers_are_clipped_when_surfaces_disabled()) {
      set_layers_are_clipped_when_surfaces_disabled(from.layers_are_clipped_when_surfaces_disabled());
    }
    if (from.has_resets_clip()) {
      set_resets_clip(from.resets_clip());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ClipNodeData::CopyFrom(const ClipNodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.ClipNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipNodeData::IsInitialized() const {

  return true;
}

void ClipNodeData::Swap(ClipNodeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClipNodeData::InternalSwap(ClipNodeData* other) {
  std::swap(clip_, other->clip_);
  std::swap(combined_clip_in_target_space_, other->combined_clip_in_target_space_);
  std::swap(clip_in_target_space_, other->clip_in_target_space_);
  std::swap(transform_id_, other->transform_id_);
  std::swap(target_transform_id_, other->target_transform_id_);
  std::swap(target_effect_id_, other->target_effect_id_);
  std::swap(applies_local_clip_, other->applies_local_clip_);
  std::swap(layer_clipping_uses_only_local_clip_, other->layer_clipping_uses_only_local_clip_);
  std::swap(target_is_clipped_, other->target_is_clipped_);
  std::swap(layers_are_clipped_, other->layers_are_clipped_);
  std::swap(layers_are_clipped_when_surfaces_disabled_, other->layers_are_clipped_when_surfaces_disabled_);
  std::swap(resets_clip_, other->resets_clip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClipNodeData::GetTypeName() const {
  return "cc.proto.ClipNodeData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClipNodeData

// optional .cc.proto.RectF clip = 1;
bool ClipNodeData::has_clip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClipNodeData::set_has_clip() {
  _has_bits_[0] |= 0x00000001u;
}
void ClipNodeData::clear_has_clip() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClipNodeData::clear_clip() {
  if (clip_ != NULL) clip_->::cc::proto::RectF::Clear();
  clear_has_clip();
}
const ::cc::proto::RectF& ClipNodeData::clip() const {
  // @@protoc_insertion_point(field_get:cc.proto.ClipNodeData.clip)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return clip_ != NULL ? *clip_ : *default_instance().clip_;
#else
  return clip_ != NULL ? *clip_ : *default_instance_->clip_;
#endif
}
::cc::proto::RectF* ClipNodeData::mutable_clip() {
  set_has_clip();
  if (clip_ == NULL) {
    clip_ = new ::cc::proto::RectF;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.ClipNodeData.clip)
  return clip_;
}
::cc::proto::RectF* ClipNodeData::release_clip() {
  // @@protoc_insertion_point(field_release:cc.proto.ClipNodeData.clip)
  clear_has_clip();
  ::cc::proto::RectF* temp = clip_;
  clip_ = NULL;
  return temp;
}
void ClipNodeData::set_allocated_clip(::cc::proto::RectF* clip) {
  delete clip_;
  clip_ = clip;
  if (clip) {
    set_has_clip();
  } else {
    clear_has_clip();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.ClipNodeData.clip)
}

// optional .cc.proto.RectF combined_clip_in_target_space = 2;
bool ClipNodeData::has_combined_clip_in_target_space() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClipNodeData::set_has_combined_clip_in_target_space() {
  _has_bits_[0] |= 0x00000002u;
}
void ClipNodeData::clear_has_combined_clip_in_target_space() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClipNodeData::clear_combined_clip_in_target_space() {
  if (combined_clip_in_target_space_ != NULL) combined_clip_in_target_space_->::cc::proto::RectF::Clear();
  clear_has_combined_clip_in_target_space();
}
const ::cc::proto::RectF& ClipNodeData::combined_clip_in_target_space() const {
  // @@protoc_insertion_point(field_get:cc.proto.ClipNodeData.combined_clip_in_target_space)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return combined_clip_in_target_space_ != NULL ? *combined_clip_in_target_space_ : *default_instance().combined_clip_in_target_space_;
#else
  return combined_clip_in_target_space_ != NULL ? *combined_clip_in_target_space_ : *default_instance_->combined_clip_in_target_space_;
#endif
}
::cc::proto::RectF* ClipNodeData::mutable_combined_clip_in_target_space() {
  set_has_combined_clip_in_target_space();
  if (combined_clip_in_target_space_ == NULL) {
    combined_clip_in_target_space_ = new ::cc::proto::RectF;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.ClipNodeData.combined_clip_in_target_space)
  return combined_clip_in_target_space_;
}
::cc::proto::RectF* ClipNodeData::release_combined_clip_in_target_space() {
  // @@protoc_insertion_point(field_release:cc.proto.ClipNodeData.combined_clip_in_target_space)
  clear_has_combined_clip_in_target_space();
  ::cc::proto::RectF* temp = combined_clip_in_target_space_;
  combined_clip_in_target_space_ = NULL;
  return temp;
}
void ClipNodeData::set_allocated_combined_clip_in_target_space(::cc::proto::RectF* combined_clip_in_target_space) {
  delete combined_clip_in_target_space_;
  combined_clip_in_target_space_ = combined_clip_in_target_space;
  if (combined_clip_in_target_space) {
    set_has_combined_clip_in_target_space();
  } else {
    clear_has_combined_clip_in_target_space();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.ClipNodeData.combined_clip_in_target_space)
}

// optional .cc.proto.RectF clip_in_target_space = 3;
bool ClipNodeData::has_clip_in_target_space() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClipNodeData::set_has_clip_in_target_space() {
  _has_bits_[0] |= 0x00000004u;
}
void ClipNodeData::clear_has_clip_in_target_space() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClipNodeData::clear_clip_in_target_space() {
  if (clip_in_target_space_ != NULL) clip_in_target_space_->::cc::proto::RectF::Clear();
  clear_has_clip_in_target_space();
}
const ::cc::proto::RectF& ClipNodeData::clip_in_target_space() const {
  // @@protoc_insertion_point(field_get:cc.proto.ClipNodeData.clip_in_target_space)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return clip_in_target_space_ != NULL ? *clip_in_target_space_ : *default_instance().clip_in_target_space_;
#else
  return clip_in_target_space_ != NULL ? *clip_in_target_space_ : *default_instance_->clip_in_target_space_;
#endif
}
::cc::proto::RectF* ClipNodeData::mutable_clip_in_target_space() {
  set_has_clip_in_target_space();
  if (clip_in_target_space_ == NULL) {
    clip_in_target_space_ = new ::cc::proto::RectF;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.ClipNodeData.clip_in_target_space)
  return clip_in_target_space_;
}
::cc::proto::RectF* ClipNodeData::release_clip_in_target_space() {
  // @@protoc_insertion_point(field_release:cc.proto.ClipNodeData.clip_in_target_space)
  clear_has_clip_in_target_space();
  ::cc::proto::RectF* temp = clip_in_target_space_;
  clip_in_target_space_ = NULL;
  return temp;
}
void ClipNodeData::set_allocated_clip_in_target_space(::cc::proto::RectF* clip_in_target_space) {
  delete clip_in_target_space_;
  clip_in_target_space_ = clip_in_target_space;
  if (clip_in_target_space) {
    set_has_clip_in_target_space();
  } else {
    clear_has_clip_in_target_space();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.ClipNodeData.clip_in_target_space)
}

// optional int64 transform_id = 4;
bool ClipNodeData::has_transform_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClipNodeData::set_has_transform_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ClipNodeData::clear_has_transform_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClipNodeData::clear_transform_id() {
  transform_id_ = GOOGLE_LONGLONG(0);
  clear_has_transform_id();
}
 ::google::protobuf::int64 ClipNodeData::transform_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.ClipNodeData.transform_id)
  return transform_id_;
}
 void ClipNodeData::set_transform_id(::google::protobuf::int64 value) {
  set_has_transform_id();
  transform_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ClipNodeData.transform_id)
}

// optional int64 target_transform_id = 5;
bool ClipNodeData::has_target_transform_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClipNodeData::set_has_target_transform_id() {
  _has_bits_[0] |= 0x00000010u;
}
void ClipNodeData::clear_has_target_transform_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClipNodeData::clear_target_transform_id() {
  target_transform_id_ = GOOGLE_LONGLONG(0);
  clear_has_target_transform_id();
}
 ::google::protobuf::int64 ClipNodeData::target_transform_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.ClipNodeData.target_transform_id)
  return target_transform_id_;
}
 void ClipNodeData::set_target_transform_id(::google::protobuf::int64 value) {
  set_has_target_transform_id();
  target_transform_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ClipNodeData.target_transform_id)
}

// optional int64 target_effect_id = 12;
bool ClipNodeData::has_target_effect_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ClipNodeData::set_has_target_effect_id() {
  _has_bits_[0] |= 0x00000020u;
}
void ClipNodeData::clear_has_target_effect_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void ClipNodeData::clear_target_effect_id() {
  target_effect_id_ = GOOGLE_LONGLONG(0);
  clear_has_target_effect_id();
}
 ::google::protobuf::int64 ClipNodeData::target_effect_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.ClipNodeData.target_effect_id)
  return target_effect_id_;
}
 void ClipNodeData::set_target_effect_id(::google::protobuf::int64 value) {
  set_has_target_effect_id();
  target_effect_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ClipNodeData.target_effect_id)
}

// optional bool applies_local_clip = 6;
bool ClipNodeData::has_applies_local_clip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ClipNodeData::set_has_applies_local_clip() {
  _has_bits_[0] |= 0x00000040u;
}
void ClipNodeData::clear_has_applies_local_clip() {
  _has_bits_[0] &= ~0x00000040u;
}
void ClipNodeData::clear_applies_local_clip() {
  applies_local_clip_ = false;
  clear_has_applies_local_clip();
}
 bool ClipNodeData::applies_local_clip() const {
  // @@protoc_insertion_point(field_get:cc.proto.ClipNodeData.applies_local_clip)
  return applies_local_clip_;
}
 void ClipNodeData::set_applies_local_clip(bool value) {
  set_has_applies_local_clip();
  applies_local_clip_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ClipNodeData.applies_local_clip)
}

// optional bool layer_clipping_uses_only_local_clip = 7;
bool ClipNodeData::has_layer_clipping_uses_only_local_clip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ClipNodeData::set_has_layer_clipping_uses_only_local_clip() {
  _has_bits_[0] |= 0x00000080u;
}
void ClipNodeData::clear_has_layer_clipping_uses_only_local_clip() {
  _has_bits_[0] &= ~0x00000080u;
}
void ClipNodeData::clear_layer_clipping_uses_only_local_clip() {
  layer_clipping_uses_only_local_clip_ = false;
  clear_has_layer_clipping_uses_only_local_clip();
}
 bool ClipNodeData::layer_clipping_uses_only_local_clip() const {
  // @@protoc_insertion_point(field_get:cc.proto.ClipNodeData.layer_clipping_uses_only_local_clip)
  return layer_clipping_uses_only_local_clip_;
}
 void ClipNodeData::set_layer_clipping_uses_only_local_clip(bool value) {
  set_has_layer_clipping_uses_only_local_clip();
  layer_clipping_uses_only_local_clip_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ClipNodeData.layer_clipping_uses_only_local_clip)
}

// optional bool target_is_clipped = 8;
bool ClipNodeData::has_target_is_clipped() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ClipNodeData::set_has_target_is_clipped() {
  _has_bits_[0] |= 0x00000100u;
}
void ClipNodeData::clear_has_target_is_clipped() {
  _has_bits_[0] &= ~0x00000100u;
}
void ClipNodeData::clear_target_is_clipped() {
  target_is_clipped_ = false;
  clear_has_target_is_clipped();
}
 bool ClipNodeData::target_is_clipped() const {
  // @@protoc_insertion_point(field_get:cc.proto.ClipNodeData.target_is_clipped)
  return target_is_clipped_;
}
 void ClipNodeData::set_target_is_clipped(bool value) {
  set_has_target_is_clipped();
  target_is_clipped_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ClipNodeData.target_is_clipped)
}

// optional bool layers_are_clipped = 9;
bool ClipNodeData::has_layers_are_clipped() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ClipNodeData::set_has_layers_are_clipped() {
  _has_bits_[0] |= 0x00000200u;
}
void ClipNodeData::clear_has_layers_are_clipped() {
  _has_bits_[0] &= ~0x00000200u;
}
void ClipNodeData::clear_layers_are_clipped() {
  layers_are_clipped_ = false;
  clear_has_layers_are_clipped();
}
 bool ClipNodeData::layers_are_clipped() const {
  // @@protoc_insertion_point(field_get:cc.proto.ClipNodeData.layers_are_clipped)
  return layers_are_clipped_;
}
 void ClipNodeData::set_layers_are_clipped(bool value) {
  set_has_layers_are_clipped();
  layers_are_clipped_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ClipNodeData.layers_are_clipped)
}

// optional bool layers_are_clipped_when_surfaces_disabled = 10;
bool ClipNodeData::has_layers_are_clipped_when_surfaces_disabled() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ClipNodeData::set_has_layers_are_clipped_when_surfaces_disabled() {
  _has_bits_[0] |= 0x00000400u;
}
void ClipNodeData::clear_has_layers_are_clipped_when_surfaces_disabled() {
  _has_bits_[0] &= ~0x00000400u;
}
void ClipNodeData::clear_layers_are_clipped_when_surfaces_disabled() {
  layers_are_clipped_when_surfaces_disabled_ = false;
  clear_has_layers_are_clipped_when_surfaces_disabled();
}
 bool ClipNodeData::layers_are_clipped_when_surfaces_disabled() const {
  // @@protoc_insertion_point(field_get:cc.proto.ClipNodeData.layers_are_clipped_when_surfaces_disabled)
  return layers_are_clipped_when_surfaces_disabled_;
}
 void ClipNodeData::set_layers_are_clipped_when_surfaces_disabled(bool value) {
  set_has_layers_are_clipped_when_surfaces_disabled();
  layers_are_clipped_when_surfaces_disabled_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ClipNodeData.layers_are_clipped_when_surfaces_disabled)
}

// optional bool resets_clip = 11;
bool ClipNodeData::has_resets_clip() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ClipNodeData::set_has_resets_clip() {
  _has_bits_[0] |= 0x00000800u;
}
void ClipNodeData::clear_has_resets_clip() {
  _has_bits_[0] &= ~0x00000800u;
}
void ClipNodeData::clear_resets_clip() {
  resets_clip_ = false;
  clear_has_resets_clip();
}
 bool ClipNodeData::resets_clip() const {
  // @@protoc_insertion_point(field_get:cc.proto.ClipNodeData.resets_clip)
  return resets_clip_;
}
 void ClipNodeData::set_resets_clip(bool value) {
  set_has_resets_clip();
  resets_clip_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ClipNodeData.resets_clip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForEffectNodeData(
    EffectNodeData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EffectNodeData::kOpacityFieldNumber;
const int EffectNodeData::kScreenSpaceOpacityFieldNumber;
const int EffectNodeData::kBlendModeFieldNumber;
const int EffectNodeData::kUnscaledMaskTargetSizeFieldNumber;
const int EffectNodeData::kHasRenderSurfaceFieldNumber;
const int EffectNodeData::kHasCopyRequestFieldNumber;
const int EffectNodeData::kHiddenByBackfaceVisibilityFieldNumber;
const int EffectNodeData::kDoubleSidedFieldNumber;
const int EffectNodeData::kIsDrawnFieldNumber;
const int EffectNodeData::kSubtreeHiddenFieldNumber;
const int EffectNodeData::kHasPotentialFilterAnimationFieldNumber;
const int EffectNodeData::kHasPotentialOpacityAnimationFieldNumber;
const int EffectNodeData::kIsCurrentlyAnimatingFilterFieldNumber;
const int EffectNodeData::kIsCurrentlyAnimatingOpacityFieldNumber;
const int EffectNodeData::kEffectChangedFieldNumber;
const int EffectNodeData::kNumCopyRequestsInSubtreeFieldNumber;
const int EffectNodeData::kTransformIdFieldNumber;
const int EffectNodeData::kClipIdFieldNumber;
const int EffectNodeData::kTargetIdFieldNumber;
const int EffectNodeData::kMaskLayerIdFieldNumber;
const int EffectNodeData::kReplicaLayerIdFieldNumber;
const int EffectNodeData::kReplicaMaskLayerIdFieldNumber;
const int EffectNodeData::kSurfaceContentsScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EffectNodeData::EffectNodeData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.EffectNodeData)
}

void EffectNodeData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  unscaled_mask_target_size_ = const_cast< ::cc::proto::Size*>(
      ::cc::proto::Size::internal_default_instance());
#else
  unscaled_mask_target_size_ = const_cast< ::cc::proto::Size*>(&::cc::proto::Size::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  surface_contents_scale_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  surface_contents_scale_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
}

EffectNodeData::EffectNodeData(const EffectNodeData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.EffectNodeData)
}

void EffectNodeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opacity_ = 0;
  screen_space_opacity_ = 0;
  blend_mode_ = 0;
  unscaled_mask_target_size_ = NULL;
  has_render_surface_ = false;
  has_copy_request_ = false;
  hidden_by_backface_visibility_ = false;
  double_sided_ = false;
  is_drawn_ = false;
  subtree_hidden_ = false;
  has_potential_filter_animation_ = false;
  has_potential_opacity_animation_ = false;
  is_currently_animating_filter_ = false;
  is_currently_animating_opacity_ = false;
  effect_changed_ = false;
  num_copy_requests_in_subtree_ = GOOGLE_LONGLONG(0);
  transform_id_ = GOOGLE_LONGLONG(0);
  clip_id_ = GOOGLE_LONGLONG(0);
  target_id_ = GOOGLE_LONGLONG(0);
  mask_layer_id_ = GOOGLE_LONGLONG(0);
  replica_layer_id_ = GOOGLE_LONGLONG(0);
  replica_mask_layer_id_ = GOOGLE_LONGLONG(0);
  surface_contents_scale_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectNodeData::~EffectNodeData() {
  // @@protoc_insertion_point(destructor:cc.proto.EffectNodeData)
  SharedDtor();
}

void EffectNodeData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete unscaled_mask_target_size_;
    delete surface_contents_scale_;
  }
}

void EffectNodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EffectNodeData& EffectNodeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

EffectNodeData* EffectNodeData::default_instance_ = NULL;

EffectNodeData* EffectNodeData::New(::google::protobuf::Arena* arena) const {
  EffectNodeData* n = new EffectNodeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EffectNodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.EffectNodeData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EffectNodeData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EffectNodeData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(opacity_, screen_space_opacity_);
    ZR_(blend_mode_, double_sided_);
    if (has_unscaled_mask_target_size()) {
      if (unscaled_mask_target_size_ != NULL) unscaled_mask_target_size_->::cc::proto::Size::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(is_drawn_, num_copy_requests_in_subtree_);
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    ZR_(transform_id_, replica_mask_layer_id_);
    if (has_surface_contents_scale()) {
      if (surface_contents_scale_ != NULL) surface_contents_scale_->::cc::proto::Vector2dF::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EffectNodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForEffectNodeData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.EffectNodeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float opacity = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_screen_space_opacity;
        break;
      }

      // optional float screen_space_opacity = 2;
      case 2: {
        if (tag == 21) {
         parse_screen_space_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &screen_space_opacity_)));
          set_has_screen_space_opacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_has_render_surface;
        break;
      }

      // optional bool has_render_surface = 3;
      case 3: {
        if (tag == 24) {
         parse_has_render_surface:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_render_surface_)));
          set_has_has_render_surface();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_has_copy_request;
        break;
      }

      // optional bool has_copy_request = 4;
      case 4: {
        if (tag == 32) {
         parse_has_copy_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_copy_request_)));
          set_has_has_copy_request();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_drawn;
        break;
      }

      // optional bool is_drawn = 6;
      case 6: {
        if (tag == 48) {
         parse_is_drawn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_drawn_)));
          set_has_is_drawn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_has_potential_opacity_animation;
        break;
      }

      // optional bool has_potential_opacity_animation = 7;
      case 7: {
        if (tag == 56) {
         parse_has_potential_opacity_animation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_potential_opacity_animation_)));
          set_has_has_potential_opacity_animation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_copy_requests_in_subtree;
        break;
      }

      // optional int64 num_copy_requests_in_subtree = 8;
      case 8: {
        if (tag == 64) {
         parse_num_copy_requests_in_subtree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_copy_requests_in_subtree_)));
          set_has_num_copy_requests_in_subtree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_transform_id;
        break;
      }

      // optional int64 transform_id = 9;
      case 9: {
        if (tag == 72) {
         parse_transform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transform_id_)));
          set_has_transform_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_clip_id;
        break;
      }

      // optional int64 clip_id = 10;
      case 10: {
        if (tag == 80) {
         parse_clip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clip_id_)));
          set_has_clip_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_effect_changed;
        break;
      }

      // optional bool effect_changed = 11;
      case 11: {
        if (tag == 88) {
         parse_effect_changed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &effect_changed_)));
          set_has_effect_changed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_target_id;
        break;
      }

      // optional int64 target_id = 12;
      case 12: {
        if (tag == 96) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_double_sided;
        break;
      }

      // optional bool double_sided = 13;
      case 13: {
        if (tag == 104) {
         parse_double_sided:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &double_sided_)));
          set_has_double_sided();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_hidden_by_backface_visibility;
        break;
      }

      // optional bool hidden_by_backface_visibility = 14;
      case 14: {
        if (tag == 112) {
         parse_hidden_by_backface_visibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_by_backface_visibility_)));
          set_has_hidden_by_backface_visibility();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_subtree_hidden;
        break;
      }

      // optional bool subtree_hidden = 15;
      case 15: {
        if (tag == 120) {
         parse_subtree_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subtree_hidden_)));
          set_has_subtree_hidden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_is_currently_animating_opacity;
        break;
      }

      // optional bool is_currently_animating_opacity = 16;
      case 16: {
        if (tag == 128) {
         parse_is_currently_animating_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_currently_animating_opacity_)));
          set_has_is_currently_animating_opacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_mask_layer_id;
        break;
      }

      // optional int64 mask_layer_id = 17;
      case 17: {
        if (tag == 136) {
         parse_mask_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mask_layer_id_)));
          set_has_mask_layer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_replica_layer_id;
        break;
      }

      // optional int64 replica_layer_id = 18;
      case 18: {
        if (tag == 144) {
         parse_replica_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &replica_layer_id_)));
          set_has_replica_layer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_replica_mask_layer_id;
        break;
      }

      // optional int64 replica_mask_layer_id = 19;
      case 19: {
        if (tag == 152) {
         parse_replica_mask_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &replica_mask_layer_id_)));
          set_has_replica_mask_layer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_surface_contents_scale;
        break;
      }

      // optional .cc.proto.Vector2dF surface_contents_scale = 20;
      case 20: {
        if (tag == 162) {
         parse_surface_contents_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surface_contents_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_has_potential_filter_animation;
        break;
      }

      // optional bool has_potential_filter_animation = 21;
      case 21: {
        if (tag == 168) {
         parse_has_potential_filter_animation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_potential_filter_animation_)));
          set_has_has_potential_filter_animation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_is_currently_animating_filter;
        break;
      }

      // optional bool is_currently_animating_filter = 22;
      case 22: {
        if (tag == 176) {
         parse_is_currently_animating_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_currently_animating_filter_)));
          set_has_is_currently_animating_filter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_blend_mode;
        break;
      }

      // optional .cc.proto.SkXfermode.Mode blend_mode = 25;
      case 25: {
        if (tag == 200) {
         parse_blend_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::SkXfermode_Mode_IsValid(value)) {
            set_blend_mode(static_cast< ::cc::proto::SkXfermode_Mode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(200);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_unscaled_mask_target_size;
        break;
      }

      // optional .cc.proto.Size unscaled_mask_target_size = 26;
      case 26: {
        if (tag == 210) {
         parse_unscaled_mask_target_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unscaled_mask_target_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.EffectNodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.EffectNodeData)
  return false;
#undef DO_
}

void EffectNodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.EffectNodeData)
  // optional float opacity = 1;
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->opacity(), output);
  }

  // optional float screen_space_opacity = 2;
  if (has_screen_space_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->screen_space_opacity(), output);
  }

  // optional bool has_render_surface = 3;
  if (has_has_render_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_render_surface(), output);
  }

  // optional bool has_copy_request = 4;
  if (has_has_copy_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_copy_request(), output);
  }

  // optional bool is_drawn = 6;
  if (has_is_drawn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_drawn(), output);
  }

  // optional bool has_potential_opacity_animation = 7;
  if (has_has_potential_opacity_animation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_potential_opacity_animation(), output);
  }

  // optional int64 num_copy_requests_in_subtree = 8;
  if (has_num_copy_requests_in_subtree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->num_copy_requests_in_subtree(), output);
  }

  // optional int64 transform_id = 9;
  if (has_transform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->transform_id(), output);
  }

  // optional int64 clip_id = 10;
  if (has_clip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->clip_id(), output);
  }

  // optional bool effect_changed = 11;
  if (has_effect_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->effect_changed(), output);
  }

  // optional int64 target_id = 12;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->target_id(), output);
  }

  // optional bool double_sided = 13;
  if (has_double_sided()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->double_sided(), output);
  }

  // optional bool hidden_by_backface_visibility = 14;
  if (has_hidden_by_backface_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->hidden_by_backface_visibility(), output);
  }

  // optional bool subtree_hidden = 15;
  if (has_subtree_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->subtree_hidden(), output);
  }

  // optional bool is_currently_animating_opacity = 16;
  if (has_is_currently_animating_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_currently_animating_opacity(), output);
  }

  // optional int64 mask_layer_id = 17;
  if (has_mask_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->mask_layer_id(), output);
  }

  // optional int64 replica_layer_id = 18;
  if (has_replica_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->replica_layer_id(), output);
  }

  // optional int64 replica_mask_layer_id = 19;
  if (has_replica_mask_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->replica_mask_layer_id(), output);
  }

  // optional .cc.proto.Vector2dF surface_contents_scale = 20;
  if (has_surface_contents_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, *this->surface_contents_scale_, output);
  }

  // optional bool has_potential_filter_animation = 21;
  if (has_has_potential_filter_animation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->has_potential_filter_animation(), output);
  }

  // optional bool is_currently_animating_filter = 22;
  if (has_is_currently_animating_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->is_currently_animating_filter(), output);
  }

  // optional .cc.proto.SkXfermode.Mode blend_mode = 25;
  if (has_blend_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->blend_mode(), output);
  }

  // optional .cc.proto.Size unscaled_mask_target_size = 26;
  if (has_unscaled_mask_target_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, *this->unscaled_mask_target_size_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.EffectNodeData)
}

int EffectNodeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.EffectNodeData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional float opacity = 1;
    if (has_opacity()) {
      total_size += 1 + 4;
    }

    // optional float screen_space_opacity = 2;
    if (has_screen_space_opacity()) {
      total_size += 1 + 4;
    }

    // optional .cc.proto.SkXfermode.Mode blend_mode = 25;
    if (has_blend_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blend_mode());
    }

    // optional .cc.proto.Size unscaled_mask_target_size = 26;
    if (has_unscaled_mask_target_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unscaled_mask_target_size_);
    }

    // optional bool has_render_surface = 3;
    if (has_has_render_surface()) {
      total_size += 1 + 1;
    }

    // optional bool has_copy_request = 4;
    if (has_has_copy_request()) {
      total_size += 1 + 1;
    }

    // optional bool hidden_by_backface_visibility = 14;
    if (has_hidden_by_backface_visibility()) {
      total_size += 1 + 1;
    }

    // optional bool double_sided = 13;
    if (has_double_sided()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool is_drawn = 6;
    if (has_is_drawn()) {
      total_size += 1 + 1;
    }

    // optional bool subtree_hidden = 15;
    if (has_subtree_hidden()) {
      total_size += 1 + 1;
    }

    // optional bool has_potential_filter_animation = 21;
    if (has_has_potential_filter_animation()) {
      total_size += 2 + 1;
    }

    // optional bool has_potential_opacity_animation = 7;
    if (has_has_potential_opacity_animation()) {
      total_size += 1 + 1;
    }

    // optional bool is_currently_animating_filter = 22;
    if (has_is_currently_animating_filter()) {
      total_size += 2 + 1;
    }

    // optional bool is_currently_animating_opacity = 16;
    if (has_is_currently_animating_opacity()) {
      total_size += 2 + 1;
    }

    // optional bool effect_changed = 11;
    if (has_effect_changed()) {
      total_size += 1 + 1;
    }

    // optional int64 num_copy_requests_in_subtree = 8;
    if (has_num_copy_requests_in_subtree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_copy_requests_in_subtree());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional int64 transform_id = 9;
    if (has_transform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transform_id());
    }

    // optional int64 clip_id = 10;
    if (has_clip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clip_id());
    }

    // optional int64 target_id = 12;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_id());
    }

    // optional int64 mask_layer_id = 17;
    if (has_mask_layer_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mask_layer_id());
    }

    // optional int64 replica_layer_id = 18;
    if (has_replica_layer_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->replica_layer_id());
    }

    // optional int64 replica_mask_layer_id = 19;
    if (has_replica_mask_layer_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->replica_mask_layer_id());
    }

    // optional .cc.proto.Vector2dF surface_contents_scale = 20;
    if (has_surface_contents_scale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->surface_contents_scale_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectNodeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EffectNodeData*>(&from));
}

void EffectNodeData::MergeFrom(const EffectNodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.EffectNodeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_screen_space_opacity()) {
      set_screen_space_opacity(from.screen_space_opacity());
    }
    if (from.has_blend_mode()) {
      set_blend_mode(from.blend_mode());
    }
    if (from.has_unscaled_mask_target_size()) {
      mutable_unscaled_mask_target_size()->::cc::proto::Size::MergeFrom(from.unscaled_mask_target_size());
    }
    if (from.has_has_render_surface()) {
      set_has_render_surface(from.has_render_surface());
    }
    if (from.has_has_copy_request()) {
      set_has_copy_request(from.has_copy_request());
    }
    if (from.has_hidden_by_backface_visibility()) {
      set_hidden_by_backface_visibility(from.hidden_by_backface_visibility());
    }
    if (from.has_double_sided()) {
      set_double_sided(from.double_sided());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_drawn()) {
      set_is_drawn(from.is_drawn());
    }
    if (from.has_subtree_hidden()) {
      set_subtree_hidden(from.subtree_hidden());
    }
    if (from.has_has_potential_filter_animation()) {
      set_has_potential_filter_animation(from.has_potential_filter_animation());
    }
    if (from.has_has_potential_opacity_animation()) {
      set_has_potential_opacity_animation(from.has_potential_opacity_animation());
    }
    if (from.has_is_currently_animating_filter()) {
      set_is_currently_animating_filter(from.is_currently_animating_filter());
    }
    if (from.has_is_currently_animating_opacity()) {
      set_is_currently_animating_opacity(from.is_currently_animating_opacity());
    }
    if (from.has_effect_changed()) {
      set_effect_changed(from.effect_changed());
    }
    if (from.has_num_copy_requests_in_subtree()) {
      set_num_copy_requests_in_subtree(from.num_copy_requests_in_subtree());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_transform_id()) {
      set_transform_id(from.transform_id());
    }
    if (from.has_clip_id()) {
      set_clip_id(from.clip_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_mask_layer_id()) {
      set_mask_layer_id(from.mask_layer_id());
    }
    if (from.has_replica_layer_id()) {
      set_replica_layer_id(from.replica_layer_id());
    }
    if (from.has_replica_mask_layer_id()) {
      set_replica_mask_layer_id(from.replica_mask_layer_id());
    }
    if (from.has_surface_contents_scale()) {
      mutable_surface_contents_scale()->::cc::proto::Vector2dF::MergeFrom(from.surface_contents_scale());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void EffectNodeData::CopyFrom(const EffectNodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.EffectNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectNodeData::IsInitialized() const {

  return true;
}

void EffectNodeData::Swap(EffectNodeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EffectNodeData::InternalSwap(EffectNodeData* other) {
  std::swap(opacity_, other->opacity_);
  std::swap(screen_space_opacity_, other->screen_space_opacity_);
  std::swap(blend_mode_, other->blend_mode_);
  std::swap(unscaled_mask_target_size_, other->unscaled_mask_target_size_);
  std::swap(has_render_surface_, other->has_render_surface_);
  std::swap(has_copy_request_, other->has_copy_request_);
  std::swap(hidden_by_backface_visibility_, other->hidden_by_backface_visibility_);
  std::swap(double_sided_, other->double_sided_);
  std::swap(is_drawn_, other->is_drawn_);
  std::swap(subtree_hidden_, other->subtree_hidden_);
  std::swap(has_potential_filter_animation_, other->has_potential_filter_animation_);
  std::swap(has_potential_opacity_animation_, other->has_potential_opacity_animation_);
  std::swap(is_currently_animating_filter_, other->is_currently_animating_filter_);
  std::swap(is_currently_animating_opacity_, other->is_currently_animating_opacity_);
  std::swap(effect_changed_, other->effect_changed_);
  std::swap(num_copy_requests_in_subtree_, other->num_copy_requests_in_subtree_);
  std::swap(transform_id_, other->transform_id_);
  std::swap(clip_id_, other->clip_id_);
  std::swap(target_id_, other->target_id_);
  std::swap(mask_layer_id_, other->mask_layer_id_);
  std::swap(replica_layer_id_, other->replica_layer_id_);
  std::swap(replica_mask_layer_id_, other->replica_mask_layer_id_);
  std::swap(surface_contents_scale_, other->surface_contents_scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EffectNodeData::GetTypeName() const {
  return "cc.proto.EffectNodeData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EffectNodeData

// optional float opacity = 1;
bool EffectNodeData::has_opacity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EffectNodeData::set_has_opacity() {
  _has_bits_[0] |= 0x00000001u;
}
void EffectNodeData::clear_has_opacity() {
  _has_bits_[0] &= ~0x00000001u;
}
void EffectNodeData::clear_opacity() {
  opacity_ = 0;
  clear_has_opacity();
}
 float EffectNodeData::opacity() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.opacity)
  return opacity_;
}
 void EffectNodeData::set_opacity(float value) {
  set_has_opacity();
  opacity_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.opacity)
}

// optional float screen_space_opacity = 2;
bool EffectNodeData::has_screen_space_opacity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EffectNodeData::set_has_screen_space_opacity() {
  _has_bits_[0] |= 0x00000002u;
}
void EffectNodeData::clear_has_screen_space_opacity() {
  _has_bits_[0] &= ~0x00000002u;
}
void EffectNodeData::clear_screen_space_opacity() {
  screen_space_opacity_ = 0;
  clear_has_screen_space_opacity();
}
 float EffectNodeData::screen_space_opacity() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.screen_space_opacity)
  return screen_space_opacity_;
}
 void EffectNodeData::set_screen_space_opacity(float value) {
  set_has_screen_space_opacity();
  screen_space_opacity_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.screen_space_opacity)
}

// optional .cc.proto.SkXfermode.Mode blend_mode = 25;
bool EffectNodeData::has_blend_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EffectNodeData::set_has_blend_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void EffectNodeData::clear_has_blend_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void EffectNodeData::clear_blend_mode() {
  blend_mode_ = 0;
  clear_has_blend_mode();
}
 ::cc::proto::SkXfermode_Mode EffectNodeData::blend_mode() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.blend_mode)
  return static_cast< ::cc::proto::SkXfermode_Mode >(blend_mode_);
}
 void EffectNodeData::set_blend_mode(::cc::proto::SkXfermode_Mode value) {
  assert(::cc::proto::SkXfermode_Mode_IsValid(value));
  set_has_blend_mode();
  blend_mode_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.blend_mode)
}

// optional .cc.proto.Size unscaled_mask_target_size = 26;
bool EffectNodeData::has_unscaled_mask_target_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EffectNodeData::set_has_unscaled_mask_target_size() {
  _has_bits_[0] |= 0x00000008u;
}
void EffectNodeData::clear_has_unscaled_mask_target_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void EffectNodeData::clear_unscaled_mask_target_size() {
  if (unscaled_mask_target_size_ != NULL) unscaled_mask_target_size_->::cc::proto::Size::Clear();
  clear_has_unscaled_mask_target_size();
}
const ::cc::proto::Size& EffectNodeData::unscaled_mask_target_size() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.unscaled_mask_target_size)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return unscaled_mask_target_size_ != NULL ? *unscaled_mask_target_size_ : *default_instance().unscaled_mask_target_size_;
#else
  return unscaled_mask_target_size_ != NULL ? *unscaled_mask_target_size_ : *default_instance_->unscaled_mask_target_size_;
#endif
}
::cc::proto::Size* EffectNodeData::mutable_unscaled_mask_target_size() {
  set_has_unscaled_mask_target_size();
  if (unscaled_mask_target_size_ == NULL) {
    unscaled_mask_target_size_ = new ::cc::proto::Size;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.EffectNodeData.unscaled_mask_target_size)
  return unscaled_mask_target_size_;
}
::cc::proto::Size* EffectNodeData::release_unscaled_mask_target_size() {
  // @@protoc_insertion_point(field_release:cc.proto.EffectNodeData.unscaled_mask_target_size)
  clear_has_unscaled_mask_target_size();
  ::cc::proto::Size* temp = unscaled_mask_target_size_;
  unscaled_mask_target_size_ = NULL;
  return temp;
}
void EffectNodeData::set_allocated_unscaled_mask_target_size(::cc::proto::Size* unscaled_mask_target_size) {
  delete unscaled_mask_target_size_;
  unscaled_mask_target_size_ = unscaled_mask_target_size;
  if (unscaled_mask_target_size) {
    set_has_unscaled_mask_target_size();
  } else {
    clear_has_unscaled_mask_target_size();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.EffectNodeData.unscaled_mask_target_size)
}

// optional bool has_render_surface = 3;
bool EffectNodeData::has_has_render_surface() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EffectNodeData::set_has_has_render_surface() {
  _has_bits_[0] |= 0x00000010u;
}
void EffectNodeData::clear_has_has_render_surface() {
  _has_bits_[0] &= ~0x00000010u;
}
void EffectNodeData::clear_has_render_surface() {
  has_render_surface_ = false;
  clear_has_has_render_surface();
}
 bool EffectNodeData::has_render_surface() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.has_render_surface)
  return has_render_surface_;
}
 void EffectNodeData::set_has_render_surface(bool value) {
  set_has_has_render_surface();
  has_render_surface_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.has_render_surface)
}

// optional bool has_copy_request = 4;
bool EffectNodeData::has_has_copy_request() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EffectNodeData::set_has_has_copy_request() {
  _has_bits_[0] |= 0x00000020u;
}
void EffectNodeData::clear_has_has_copy_request() {
  _has_bits_[0] &= ~0x00000020u;
}
void EffectNodeData::clear_has_copy_request() {
  has_copy_request_ = false;
  clear_has_has_copy_request();
}
 bool EffectNodeData::has_copy_request() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.has_copy_request)
  return has_copy_request_;
}
 void EffectNodeData::set_has_copy_request(bool value) {
  set_has_has_copy_request();
  has_copy_request_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.has_copy_request)
}

// optional bool hidden_by_backface_visibility = 14;
bool EffectNodeData::has_hidden_by_backface_visibility() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EffectNodeData::set_has_hidden_by_backface_visibility() {
  _has_bits_[0] |= 0x00000040u;
}
void EffectNodeData::clear_has_hidden_by_backface_visibility() {
  _has_bits_[0] &= ~0x00000040u;
}
void EffectNodeData::clear_hidden_by_backface_visibility() {
  hidden_by_backface_visibility_ = false;
  clear_has_hidden_by_backface_visibility();
}
 bool EffectNodeData::hidden_by_backface_visibility() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.hidden_by_backface_visibility)
  return hidden_by_backface_visibility_;
}
 void EffectNodeData::set_hidden_by_backface_visibility(bool value) {
  set_has_hidden_by_backface_visibility();
  hidden_by_backface_visibility_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.hidden_by_backface_visibility)
}

// optional bool double_sided = 13;
bool EffectNodeData::has_double_sided() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EffectNodeData::set_has_double_sided() {
  _has_bits_[0] |= 0x00000080u;
}
void EffectNodeData::clear_has_double_sided() {
  _has_bits_[0] &= ~0x00000080u;
}
void EffectNodeData::clear_double_sided() {
  double_sided_ = false;
  clear_has_double_sided();
}
 bool EffectNodeData::double_sided() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.double_sided)
  return double_sided_;
}
 void EffectNodeData::set_double_sided(bool value) {
  set_has_double_sided();
  double_sided_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.double_sided)
}

// optional bool is_drawn = 6;
bool EffectNodeData::has_is_drawn() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void EffectNodeData::set_has_is_drawn() {
  _has_bits_[0] |= 0x00000100u;
}
void EffectNodeData::clear_has_is_drawn() {
  _has_bits_[0] &= ~0x00000100u;
}
void EffectNodeData::clear_is_drawn() {
  is_drawn_ = false;
  clear_has_is_drawn();
}
 bool EffectNodeData::is_drawn() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.is_drawn)
  return is_drawn_;
}
 void EffectNodeData::set_is_drawn(bool value) {
  set_has_is_drawn();
  is_drawn_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.is_drawn)
}

// optional bool subtree_hidden = 15;
bool EffectNodeData::has_subtree_hidden() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void EffectNodeData::set_has_subtree_hidden() {
  _has_bits_[0] |= 0x00000200u;
}
void EffectNodeData::clear_has_subtree_hidden() {
  _has_bits_[0] &= ~0x00000200u;
}
void EffectNodeData::clear_subtree_hidden() {
  subtree_hidden_ = false;
  clear_has_subtree_hidden();
}
 bool EffectNodeData::subtree_hidden() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.subtree_hidden)
  return subtree_hidden_;
}
 void EffectNodeData::set_subtree_hidden(bool value) {
  set_has_subtree_hidden();
  subtree_hidden_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.subtree_hidden)
}

// optional bool has_potential_filter_animation = 21;
bool EffectNodeData::has_has_potential_filter_animation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void EffectNodeData::set_has_has_potential_filter_animation() {
  _has_bits_[0] |= 0x00000400u;
}
void EffectNodeData::clear_has_has_potential_filter_animation() {
  _has_bits_[0] &= ~0x00000400u;
}
void EffectNodeData::clear_has_potential_filter_animation() {
  has_potential_filter_animation_ = false;
  clear_has_has_potential_filter_animation();
}
 bool EffectNodeData::has_potential_filter_animation() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.has_potential_filter_animation)
  return has_potential_filter_animation_;
}
 void EffectNodeData::set_has_potential_filter_animation(bool value) {
  set_has_has_potential_filter_animation();
  has_potential_filter_animation_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.has_potential_filter_animation)
}

// optional bool has_potential_opacity_animation = 7;
bool EffectNodeData::has_has_potential_opacity_animation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void EffectNodeData::set_has_has_potential_opacity_animation() {
  _has_bits_[0] |= 0x00000800u;
}
void EffectNodeData::clear_has_has_potential_opacity_animation() {
  _has_bits_[0] &= ~0x00000800u;
}
void EffectNodeData::clear_has_potential_opacity_animation() {
  has_potential_opacity_animation_ = false;
  clear_has_has_potential_opacity_animation();
}
 bool EffectNodeData::has_potential_opacity_animation() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.has_potential_opacity_animation)
  return has_potential_opacity_animation_;
}
 void EffectNodeData::set_has_potential_opacity_animation(bool value) {
  set_has_has_potential_opacity_animation();
  has_potential_opacity_animation_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.has_potential_opacity_animation)
}

// optional bool is_currently_animating_filter = 22;
bool EffectNodeData::has_is_currently_animating_filter() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void EffectNodeData::set_has_is_currently_animating_filter() {
  _has_bits_[0] |= 0x00001000u;
}
void EffectNodeData::clear_has_is_currently_animating_filter() {
  _has_bits_[0] &= ~0x00001000u;
}
void EffectNodeData::clear_is_currently_animating_filter() {
  is_currently_animating_filter_ = false;
  clear_has_is_currently_animating_filter();
}
 bool EffectNodeData::is_currently_animating_filter() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.is_currently_animating_filter)
  return is_currently_animating_filter_;
}
 void EffectNodeData::set_is_currently_animating_filter(bool value) {
  set_has_is_currently_animating_filter();
  is_currently_animating_filter_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.is_currently_animating_filter)
}

// optional bool is_currently_animating_opacity = 16;
bool EffectNodeData::has_is_currently_animating_opacity() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void EffectNodeData::set_has_is_currently_animating_opacity() {
  _has_bits_[0] |= 0x00002000u;
}
void EffectNodeData::clear_has_is_currently_animating_opacity() {
  _has_bits_[0] &= ~0x00002000u;
}
void EffectNodeData::clear_is_currently_animating_opacity() {
  is_currently_animating_opacity_ = false;
  clear_has_is_currently_animating_opacity();
}
 bool EffectNodeData::is_currently_animating_opacity() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.is_currently_animating_opacity)
  return is_currently_animating_opacity_;
}
 void EffectNodeData::set_is_currently_animating_opacity(bool value) {
  set_has_is_currently_animating_opacity();
  is_currently_animating_opacity_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.is_currently_animating_opacity)
}

// optional bool effect_changed = 11;
bool EffectNodeData::has_effect_changed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void EffectNodeData::set_has_effect_changed() {
  _has_bits_[0] |= 0x00004000u;
}
void EffectNodeData::clear_has_effect_changed() {
  _has_bits_[0] &= ~0x00004000u;
}
void EffectNodeData::clear_effect_changed() {
  effect_changed_ = false;
  clear_has_effect_changed();
}
 bool EffectNodeData::effect_changed() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.effect_changed)
  return effect_changed_;
}
 void EffectNodeData::set_effect_changed(bool value) {
  set_has_effect_changed();
  effect_changed_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.effect_changed)
}

// optional int64 num_copy_requests_in_subtree = 8;
bool EffectNodeData::has_num_copy_requests_in_subtree() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void EffectNodeData::set_has_num_copy_requests_in_subtree() {
  _has_bits_[0] |= 0x00008000u;
}
void EffectNodeData::clear_has_num_copy_requests_in_subtree() {
  _has_bits_[0] &= ~0x00008000u;
}
void EffectNodeData::clear_num_copy_requests_in_subtree() {
  num_copy_requests_in_subtree_ = GOOGLE_LONGLONG(0);
  clear_has_num_copy_requests_in_subtree();
}
 ::google::protobuf::int64 EffectNodeData::num_copy_requests_in_subtree() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.num_copy_requests_in_subtree)
  return num_copy_requests_in_subtree_;
}
 void EffectNodeData::set_num_copy_requests_in_subtree(::google::protobuf::int64 value) {
  set_has_num_copy_requests_in_subtree();
  num_copy_requests_in_subtree_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.num_copy_requests_in_subtree)
}

// optional int64 transform_id = 9;
bool EffectNodeData::has_transform_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void EffectNodeData::set_has_transform_id() {
  _has_bits_[0] |= 0x00010000u;
}
void EffectNodeData::clear_has_transform_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void EffectNodeData::clear_transform_id() {
  transform_id_ = GOOGLE_LONGLONG(0);
  clear_has_transform_id();
}
 ::google::protobuf::int64 EffectNodeData::transform_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.transform_id)
  return transform_id_;
}
 void EffectNodeData::set_transform_id(::google::protobuf::int64 value) {
  set_has_transform_id();
  transform_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.transform_id)
}

// optional int64 clip_id = 10;
bool EffectNodeData::has_clip_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void EffectNodeData::set_has_clip_id() {
  _has_bits_[0] |= 0x00020000u;
}
void EffectNodeData::clear_has_clip_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void EffectNodeData::clear_clip_id() {
  clip_id_ = GOOGLE_LONGLONG(0);
  clear_has_clip_id();
}
 ::google::protobuf::int64 EffectNodeData::clip_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.clip_id)
  return clip_id_;
}
 void EffectNodeData::set_clip_id(::google::protobuf::int64 value) {
  set_has_clip_id();
  clip_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.clip_id)
}

// optional int64 target_id = 12;
bool EffectNodeData::has_target_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void EffectNodeData::set_has_target_id() {
  _has_bits_[0] |= 0x00040000u;
}
void EffectNodeData::clear_has_target_id() {
  _has_bits_[0] &= ~0x00040000u;
}
void EffectNodeData::clear_target_id() {
  target_id_ = GOOGLE_LONGLONG(0);
  clear_has_target_id();
}
 ::google::protobuf::int64 EffectNodeData::target_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.target_id)
  return target_id_;
}
 void EffectNodeData::set_target_id(::google::protobuf::int64 value) {
  set_has_target_id();
  target_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.target_id)
}

// optional int64 mask_layer_id = 17;
bool EffectNodeData::has_mask_layer_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void EffectNodeData::set_has_mask_layer_id() {
  _has_bits_[0] |= 0x00080000u;
}
void EffectNodeData::clear_has_mask_layer_id() {
  _has_bits_[0] &= ~0x00080000u;
}
void EffectNodeData::clear_mask_layer_id() {
  mask_layer_id_ = GOOGLE_LONGLONG(0);
  clear_has_mask_layer_id();
}
 ::google::protobuf::int64 EffectNodeData::mask_layer_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.mask_layer_id)
  return mask_layer_id_;
}
 void EffectNodeData::set_mask_layer_id(::google::protobuf::int64 value) {
  set_has_mask_layer_id();
  mask_layer_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.mask_layer_id)
}

// optional int64 replica_layer_id = 18;
bool EffectNodeData::has_replica_layer_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void EffectNodeData::set_has_replica_layer_id() {
  _has_bits_[0] |= 0x00100000u;
}
void EffectNodeData::clear_has_replica_layer_id() {
  _has_bits_[0] &= ~0x00100000u;
}
void EffectNodeData::clear_replica_layer_id() {
  replica_layer_id_ = GOOGLE_LONGLONG(0);
  clear_has_replica_layer_id();
}
 ::google::protobuf::int64 EffectNodeData::replica_layer_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.replica_layer_id)
  return replica_layer_id_;
}
 void EffectNodeData::set_replica_layer_id(::google::protobuf::int64 value) {
  set_has_replica_layer_id();
  replica_layer_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.replica_layer_id)
}

// optional int64 replica_mask_layer_id = 19;
bool EffectNodeData::has_replica_mask_layer_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void EffectNodeData::set_has_replica_mask_layer_id() {
  _has_bits_[0] |= 0x00200000u;
}
void EffectNodeData::clear_has_replica_mask_layer_id() {
  _has_bits_[0] &= ~0x00200000u;
}
void EffectNodeData::clear_replica_mask_layer_id() {
  replica_mask_layer_id_ = GOOGLE_LONGLONG(0);
  clear_has_replica_mask_layer_id();
}
 ::google::protobuf::int64 EffectNodeData::replica_mask_layer_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.replica_mask_layer_id)
  return replica_mask_layer_id_;
}
 void EffectNodeData::set_replica_mask_layer_id(::google::protobuf::int64 value) {
  set_has_replica_mask_layer_id();
  replica_mask_layer_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.EffectNodeData.replica_mask_layer_id)
}

// optional .cc.proto.Vector2dF surface_contents_scale = 20;
bool EffectNodeData::has_surface_contents_scale() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void EffectNodeData::set_has_surface_contents_scale() {
  _has_bits_[0] |= 0x00400000u;
}
void EffectNodeData::clear_has_surface_contents_scale() {
  _has_bits_[0] &= ~0x00400000u;
}
void EffectNodeData::clear_surface_contents_scale() {
  if (surface_contents_scale_ != NULL) surface_contents_scale_->::cc::proto::Vector2dF::Clear();
  clear_has_surface_contents_scale();
}
const ::cc::proto::Vector2dF& EffectNodeData::surface_contents_scale() const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectNodeData.surface_contents_scale)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return surface_contents_scale_ != NULL ? *surface_contents_scale_ : *default_instance().surface_contents_scale_;
#else
  return surface_contents_scale_ != NULL ? *surface_contents_scale_ : *default_instance_->surface_contents_scale_;
#endif
}
::cc::proto::Vector2dF* EffectNodeData::mutable_surface_contents_scale() {
  set_has_surface_contents_scale();
  if (surface_contents_scale_ == NULL) {
    surface_contents_scale_ = new ::cc::proto::Vector2dF;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.EffectNodeData.surface_contents_scale)
  return surface_contents_scale_;
}
::cc::proto::Vector2dF* EffectNodeData::release_surface_contents_scale() {
  // @@protoc_insertion_point(field_release:cc.proto.EffectNodeData.surface_contents_scale)
  clear_has_surface_contents_scale();
  ::cc::proto::Vector2dF* temp = surface_contents_scale_;
  surface_contents_scale_ = NULL;
  return temp;
}
void EffectNodeData::set_allocated_surface_contents_scale(::cc::proto::Vector2dF* surface_contents_scale) {
  delete surface_contents_scale_;
  surface_contents_scale_ = surface_contents_scale;
  if (surface_contents_scale) {
    set_has_surface_contents_scale();
  } else {
    clear_has_surface_contents_scale();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.EffectNodeData.surface_contents_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForScrollNodeData(
    ScrollNodeData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScrollNodeData::kScrollableFieldNumber;
const int ScrollNodeData::kMainThreadScrollingReasonsFieldNumber;
const int ScrollNodeData::kContainsNonFastScrollableRegionFieldNumber;
const int ScrollNodeData::kScrollClipLayerBoundsFieldNumber;
const int ScrollNodeData::kBoundsFieldNumber;
const int ScrollNodeData::kMaxScrollOffsetAffectedByPageScaleFieldNumber;
const int ScrollNodeData::kIsInnerViewportScrollLayerFieldNumber;
const int ScrollNodeData::kIsOuterViewportScrollLayerFieldNumber;
const int ScrollNodeData::kOffsetToTransformParentFieldNumber;
const int ScrollNodeData::kShouldFlattenFieldNumber;
const int ScrollNodeData::kUserScrollableHorizontalFieldNumber;
const int ScrollNodeData::kUserScrollableVerticalFieldNumber;
const int ScrollNodeData::kElementIdFieldNumber;
const int ScrollNodeData::kTransformIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScrollNodeData::ScrollNodeData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.ScrollNodeData)
}

void ScrollNodeData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scroll_clip_layer_bounds_ = const_cast< ::cc::proto::Size*>(
      ::cc::proto::Size::internal_default_instance());
#else
  scroll_clip_layer_bounds_ = const_cast< ::cc::proto::Size*>(&::cc::proto::Size::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bounds_ = const_cast< ::cc::proto::Size*>(
      ::cc::proto::Size::internal_default_instance());
#else
  bounds_ = const_cast< ::cc::proto::Size*>(&::cc::proto::Size::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  offset_to_transform_parent_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  offset_to_transform_parent_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  element_id_ = const_cast< ::cc::proto::ElementId*>(
      ::cc::proto::ElementId::internal_default_instance());
#else
  element_id_ = const_cast< ::cc::proto::ElementId*>(&::cc::proto::ElementId::default_instance());
#endif
}

ScrollNodeData::ScrollNodeData(const ScrollNodeData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.ScrollNodeData)
}

void ScrollNodeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scrollable_ = false;
  main_thread_scrolling_reasons_ = 0;
  contains_non_fast_scrollable_region_ = false;
  scroll_clip_layer_bounds_ = NULL;
  bounds_ = NULL;
  max_scroll_offset_affected_by_page_scale_ = false;
  is_inner_viewport_scroll_layer_ = false;
  is_outer_viewport_scroll_layer_ = false;
  offset_to_transform_parent_ = NULL;
  should_flatten_ = false;
  user_scrollable_horizontal_ = false;
  user_scrollable_vertical_ = false;
  element_id_ = NULL;
  transform_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScrollNodeData::~ScrollNodeData() {
  // @@protoc_insertion_point(destructor:cc.proto.ScrollNodeData)
  SharedDtor();
}

void ScrollNodeData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete scroll_clip_layer_bounds_;
    delete bounds_;
    delete offset_to_transform_parent_;
    delete element_id_;
  }
}

void ScrollNodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScrollNodeData& ScrollNodeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

ScrollNodeData* ScrollNodeData::default_instance_ = NULL;

ScrollNodeData* ScrollNodeData::New(::google::protobuf::Arena* arena) const {
  ScrollNodeData* n = new ScrollNodeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScrollNodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.ScrollNodeData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ScrollNodeData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ScrollNodeData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(main_thread_scrolling_reasons_, is_inner_viewport_scroll_layer_);
    if (has_scroll_clip_layer_bounds()) {
      if (scroll_clip_layer_bounds_ != NULL) scroll_clip_layer_bounds_->::cc::proto::Size::Clear();
    }
    if (has_bounds()) {
      if (bounds_ != NULL) bounds_->::cc::proto::Size::Clear();
    }
    is_outer_viewport_scroll_layer_ = false;
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(should_flatten_, user_scrollable_vertical_);
    if (has_offset_to_transform_parent()) {
      if (offset_to_transform_parent_ != NULL) offset_to_transform_parent_->::cc::proto::Vector2dF::Clear();
    }
    if (has_element_id()) {
      if (element_id_ != NULL) element_id_->::cc::proto::ElementId::Clear();
    }
    transform_id_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ScrollNodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForScrollNodeData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.ScrollNodeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool scrollable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scrollable_)));
          set_has_scrollable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_main_thread_scrolling_reasons;
        break;
      }

      // optional int32 main_thread_scrolling_reasons = 2;
      case 2: {
        if (tag == 16) {
         parse_main_thread_scrolling_reasons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_thread_scrolling_reasons_)));
          set_has_main_thread_scrolling_reasons();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_contains_non_fast_scrollable_region;
        break;
      }

      // optional bool contains_non_fast_scrollable_region = 3;
      case 3: {
        if (tag == 24) {
         parse_contains_non_fast_scrollable_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contains_non_fast_scrollable_region_)));
          set_has_contains_non_fast_scrollable_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_scroll_clip_layer_bounds;
        break;
      }

      // optional .cc.proto.Size scroll_clip_layer_bounds = 4;
      case 4: {
        if (tag == 34) {
         parse_scroll_clip_layer_bounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_clip_layer_bounds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bounds;
        break;
      }

      // optional .cc.proto.Size bounds = 5;
      case 5: {
        if (tag == 42) {
         parse_bounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_scroll_offset_affected_by_page_scale;
        break;
      }

      // optional bool max_scroll_offset_affected_by_page_scale = 6;
      case 6: {
        if (tag == 48) {
         parse_max_scroll_offset_affected_by_page_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &max_scroll_offset_affected_by_page_scale_)));
          set_has_max_scroll_offset_affected_by_page_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_inner_viewport_scroll_layer;
        break;
      }

      // optional bool is_inner_viewport_scroll_layer = 7;
      case 7: {
        if (tag == 56) {
         parse_is_inner_viewport_scroll_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inner_viewport_scroll_layer_)));
          set_has_is_inner_viewport_scroll_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_outer_viewport_scroll_layer;
        break;
      }

      // optional bool is_outer_viewport_scroll_layer = 8;
      case 8: {
        if (tag == 64) {
         parse_is_outer_viewport_scroll_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_outer_viewport_scroll_layer_)));
          set_has_is_outer_viewport_scroll_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_offset_to_transform_parent;
        break;
      }

      // optional .cc.proto.Vector2dF offset_to_transform_parent = 9;
      case 9: {
        if (tag == 74) {
         parse_offset_to_transform_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset_to_transform_parent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_should_flatten;
        break;
      }

      // optional bool should_flatten = 10;
      case 10: {
        if (tag == 80) {
         parse_should_flatten:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_flatten_)));
          set_has_should_flatten();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_transform_id;
        break;
      }

      // optional int64 transform_id = 11;
      case 11: {
        if (tag == 88) {
         parse_transform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transform_id_)));
          set_has_transform_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_user_scrollable_horizontal;
        break;
      }

      // optional bool user_scrollable_horizontal = 13;
      case 13: {
        if (tag == 104) {
         parse_user_scrollable_horizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_scrollable_horizontal_)));
          set_has_user_scrollable_horizontal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_user_scrollable_vertical;
        break;
      }

      // optional bool user_scrollable_vertical = 14;
      case 14: {
        if (tag == 112) {
         parse_user_scrollable_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_scrollable_vertical_)));
          set_has_user_scrollable_vertical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_element_id;
        break;
      }

      // optional .cc.proto.ElementId element_id = 15;
      case 15: {
        if (tag == 122) {
         parse_element_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_element_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.ScrollNodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.ScrollNodeData)
  return false;
#undef DO_
}

void ScrollNodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.ScrollNodeData)
  // optional bool scrollable = 1;
  if (has_scrollable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->scrollable(), output);
  }

  // optional int32 main_thread_scrolling_reasons = 2;
  if (has_main_thread_scrolling_reasons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->main_thread_scrolling_reasons(), output);
  }

  // optional bool contains_non_fast_scrollable_region = 3;
  if (has_contains_non_fast_scrollable_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->contains_non_fast_scrollable_region(), output);
  }

  // optional .cc.proto.Size scroll_clip_layer_bounds = 4;
  if (has_scroll_clip_layer_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->scroll_clip_layer_bounds_, output);
  }

  // optional .cc.proto.Size bounds = 5;
  if (has_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->bounds_, output);
  }

  // optional bool max_scroll_offset_affected_by_page_scale = 6;
  if (has_max_scroll_offset_affected_by_page_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->max_scroll_offset_affected_by_page_scale(), output);
  }

  // optional bool is_inner_viewport_scroll_layer = 7;
  if (has_is_inner_viewport_scroll_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_inner_viewport_scroll_layer(), output);
  }

  // optional bool is_outer_viewport_scroll_layer = 8;
  if (has_is_outer_viewport_scroll_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_outer_viewport_scroll_layer(), output);
  }

  // optional .cc.proto.Vector2dF offset_to_transform_parent = 9;
  if (has_offset_to_transform_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->offset_to_transform_parent_, output);
  }

  // optional bool should_flatten = 10;
  if (has_should_flatten()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->should_flatten(), output);
  }

  // optional int64 transform_id = 11;
  if (has_transform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->transform_id(), output);
  }

  // optional bool user_scrollable_horizontal = 13;
  if (has_user_scrollable_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->user_scrollable_horizontal(), output);
  }

  // optional bool user_scrollable_vertical = 14;
  if (has_user_scrollable_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->user_scrollable_vertical(), output);
  }

  // optional .cc.proto.ElementId element_id = 15;
  if (has_element_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->element_id_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.ScrollNodeData)
}

int ScrollNodeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.ScrollNodeData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool scrollable = 1;
    if (has_scrollable()) {
      total_size += 1 + 1;
    }

    // optional int32 main_thread_scrolling_reasons = 2;
    if (has_main_thread_scrolling_reasons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_thread_scrolling_reasons());
    }

    // optional bool contains_non_fast_scrollable_region = 3;
    if (has_contains_non_fast_scrollable_region()) {
      total_size += 1 + 1;
    }

    // optional .cc.proto.Size scroll_clip_layer_bounds = 4;
    if (has_scroll_clip_layer_bounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scroll_clip_layer_bounds_);
    }

    // optional .cc.proto.Size bounds = 5;
    if (has_bounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bounds_);
    }

    // optional bool max_scroll_offset_affected_by_page_scale = 6;
    if (has_max_scroll_offset_affected_by_page_scale()) {
      total_size += 1 + 1;
    }

    // optional bool is_inner_viewport_scroll_layer = 7;
    if (has_is_inner_viewport_scroll_layer()) {
      total_size += 1 + 1;
    }

    // optional bool is_outer_viewport_scroll_layer = 8;
    if (has_is_outer_viewport_scroll_layer()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .cc.proto.Vector2dF offset_to_transform_parent = 9;
    if (has_offset_to_transform_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->offset_to_transform_parent_);
    }

    // optional bool should_flatten = 10;
    if (has_should_flatten()) {
      total_size += 1 + 1;
    }

    // optional bool user_scrollable_horizontal = 13;
    if (has_user_scrollable_horizontal()) {
      total_size += 1 + 1;
    }

    // optional bool user_scrollable_vertical = 14;
    if (has_user_scrollable_vertical()) {
      total_size += 1 + 1;
    }

    // optional .cc.proto.ElementId element_id = 15;
    if (has_element_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->element_id_);
    }

    // optional int64 transform_id = 11;
    if (has_transform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transform_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScrollNodeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScrollNodeData*>(&from));
}

void ScrollNodeData::MergeFrom(const ScrollNodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.ScrollNodeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scrollable()) {
      set_scrollable(from.scrollable());
    }
    if (from.has_main_thread_scrolling_reasons()) {
      set_main_thread_scrolling_reasons(from.main_thread_scrolling_reasons());
    }
    if (from.has_contains_non_fast_scrollable_region()) {
      set_contains_non_fast_scrollable_region(from.contains_non_fast_scrollable_region());
    }
    if (from.has_scroll_clip_layer_bounds()) {
      mutable_scroll_clip_layer_bounds()->::cc::proto::Size::MergeFrom(from.scroll_clip_layer_bounds());
    }
    if (from.has_bounds()) {
      mutable_bounds()->::cc::proto::Size::MergeFrom(from.bounds());
    }
    if (from.has_max_scroll_offset_affected_by_page_scale()) {
      set_max_scroll_offset_affected_by_page_scale(from.max_scroll_offset_affected_by_page_scale());
    }
    if (from.has_is_inner_viewport_scroll_layer()) {
      set_is_inner_viewport_scroll_layer(from.is_inner_viewport_scroll_layer());
    }
    if (from.has_is_outer_viewport_scroll_layer()) {
      set_is_outer_viewport_scroll_layer(from.is_outer_viewport_scroll_layer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_offset_to_transform_parent()) {
      mutable_offset_to_transform_parent()->::cc::proto::Vector2dF::MergeFrom(from.offset_to_transform_parent());
    }
    if (from.has_should_flatten()) {
      set_should_flatten(from.should_flatten());
    }
    if (from.has_user_scrollable_horizontal()) {
      set_user_scrollable_horizontal(from.user_scrollable_horizontal());
    }
    if (from.has_user_scrollable_vertical()) {
      set_user_scrollable_vertical(from.user_scrollable_vertical());
    }
    if (from.has_element_id()) {
      mutable_element_id()->::cc::proto::ElementId::MergeFrom(from.element_id());
    }
    if (from.has_transform_id()) {
      set_transform_id(from.transform_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ScrollNodeData::CopyFrom(const ScrollNodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.ScrollNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScrollNodeData::IsInitialized() const {

  if (has_element_id()) {
    if (!this->element_id_->IsInitialized()) return false;
  }
  return true;
}

void ScrollNodeData::Swap(ScrollNodeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScrollNodeData::InternalSwap(ScrollNodeData* other) {
  std::swap(scrollable_, other->scrollable_);
  std::swap(main_thread_scrolling_reasons_, other->main_thread_scrolling_reasons_);
  std::swap(contains_non_fast_scrollable_region_, other->contains_non_fast_scrollable_region_);
  std::swap(scroll_clip_layer_bounds_, other->scroll_clip_layer_bounds_);
  std::swap(bounds_, other->bounds_);
  std::swap(max_scroll_offset_affected_by_page_scale_, other->max_scroll_offset_affected_by_page_scale_);
  std::swap(is_inner_viewport_scroll_layer_, other->is_inner_viewport_scroll_layer_);
  std::swap(is_outer_viewport_scroll_layer_, other->is_outer_viewport_scroll_layer_);
  std::swap(offset_to_transform_parent_, other->offset_to_transform_parent_);
  std::swap(should_flatten_, other->should_flatten_);
  std::swap(user_scrollable_horizontal_, other->user_scrollable_horizontal_);
  std::swap(user_scrollable_vertical_, other->user_scrollable_vertical_);
  std::swap(element_id_, other->element_id_);
  std::swap(transform_id_, other->transform_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ScrollNodeData::GetTypeName() const {
  return "cc.proto.ScrollNodeData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScrollNodeData

// optional bool scrollable = 1;
bool ScrollNodeData::has_scrollable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScrollNodeData::set_has_scrollable() {
  _has_bits_[0] |= 0x00000001u;
}
void ScrollNodeData::clear_has_scrollable() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScrollNodeData::clear_scrollable() {
  scrollable_ = false;
  clear_has_scrollable();
}
 bool ScrollNodeData::scrollable() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollNodeData.scrollable)
  return scrollable_;
}
 void ScrollNodeData::set_scrollable(bool value) {
  set_has_scrollable();
  scrollable_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ScrollNodeData.scrollable)
}

// optional int32 main_thread_scrolling_reasons = 2;
bool ScrollNodeData::has_main_thread_scrolling_reasons() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScrollNodeData::set_has_main_thread_scrolling_reasons() {
  _has_bits_[0] |= 0x00000002u;
}
void ScrollNodeData::clear_has_main_thread_scrolling_reasons() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScrollNodeData::clear_main_thread_scrolling_reasons() {
  main_thread_scrolling_reasons_ = 0;
  clear_has_main_thread_scrolling_reasons();
}
 ::google::protobuf::int32 ScrollNodeData::main_thread_scrolling_reasons() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollNodeData.main_thread_scrolling_reasons)
  return main_thread_scrolling_reasons_;
}
 void ScrollNodeData::set_main_thread_scrolling_reasons(::google::protobuf::int32 value) {
  set_has_main_thread_scrolling_reasons();
  main_thread_scrolling_reasons_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ScrollNodeData.main_thread_scrolling_reasons)
}

// optional bool contains_non_fast_scrollable_region = 3;
bool ScrollNodeData::has_contains_non_fast_scrollable_region() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScrollNodeData::set_has_contains_non_fast_scrollable_region() {
  _has_bits_[0] |= 0x00000004u;
}
void ScrollNodeData::clear_has_contains_non_fast_scrollable_region() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScrollNodeData::clear_contains_non_fast_scrollable_region() {
  contains_non_fast_scrollable_region_ = false;
  clear_has_contains_non_fast_scrollable_region();
}
 bool ScrollNodeData::contains_non_fast_scrollable_region() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollNodeData.contains_non_fast_scrollable_region)
  return contains_non_fast_scrollable_region_;
}
 void ScrollNodeData::set_contains_non_fast_scrollable_region(bool value) {
  set_has_contains_non_fast_scrollable_region();
  contains_non_fast_scrollable_region_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ScrollNodeData.contains_non_fast_scrollable_region)
}

// optional .cc.proto.Size scroll_clip_layer_bounds = 4;
bool ScrollNodeData::has_scroll_clip_layer_bounds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScrollNodeData::set_has_scroll_clip_layer_bounds() {
  _has_bits_[0] |= 0x00000008u;
}
void ScrollNodeData::clear_has_scroll_clip_layer_bounds() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScrollNodeData::clear_scroll_clip_layer_bounds() {
  if (scroll_clip_layer_bounds_ != NULL) scroll_clip_layer_bounds_->::cc::proto::Size::Clear();
  clear_has_scroll_clip_layer_bounds();
}
const ::cc::proto::Size& ScrollNodeData::scroll_clip_layer_bounds() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollNodeData.scroll_clip_layer_bounds)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return scroll_clip_layer_bounds_ != NULL ? *scroll_clip_layer_bounds_ : *default_instance().scroll_clip_layer_bounds_;
#else
  return scroll_clip_layer_bounds_ != NULL ? *scroll_clip_layer_bounds_ : *default_instance_->scroll_clip_layer_bounds_;
#endif
}
::cc::proto::Size* ScrollNodeData::mutable_scroll_clip_layer_bounds() {
  set_has_scroll_clip_layer_bounds();
  if (scroll_clip_layer_bounds_ == NULL) {
    scroll_clip_layer_bounds_ = new ::cc::proto::Size;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.ScrollNodeData.scroll_clip_layer_bounds)
  return scroll_clip_layer_bounds_;
}
::cc::proto::Size* ScrollNodeData::release_scroll_clip_layer_bounds() {
  // @@protoc_insertion_point(field_release:cc.proto.ScrollNodeData.scroll_clip_layer_bounds)
  clear_has_scroll_clip_layer_bounds();
  ::cc::proto::Size* temp = scroll_clip_layer_bounds_;
  scroll_clip_layer_bounds_ = NULL;
  return temp;
}
void ScrollNodeData::set_allocated_scroll_clip_layer_bounds(::cc::proto::Size* scroll_clip_layer_bounds) {
  delete scroll_clip_layer_bounds_;
  scroll_clip_layer_bounds_ = scroll_clip_layer_bounds;
  if (scroll_clip_layer_bounds) {
    set_has_scroll_clip_layer_bounds();
  } else {
    clear_has_scroll_clip_layer_bounds();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.ScrollNodeData.scroll_clip_layer_bounds)
}

// optional .cc.proto.Size bounds = 5;
bool ScrollNodeData::has_bounds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScrollNodeData::set_has_bounds() {
  _has_bits_[0] |= 0x00000010u;
}
void ScrollNodeData::clear_has_bounds() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScrollNodeData::clear_bounds() {
  if (bounds_ != NULL) bounds_->::cc::proto::Size::Clear();
  clear_has_bounds();
}
const ::cc::proto::Size& ScrollNodeData::bounds() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollNodeData.bounds)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return bounds_ != NULL ? *bounds_ : *default_instance().bounds_;
#else
  return bounds_ != NULL ? *bounds_ : *default_instance_->bounds_;
#endif
}
::cc::proto::Size* ScrollNodeData::mutable_bounds() {
  set_has_bounds();
  if (bounds_ == NULL) {
    bounds_ = new ::cc::proto::Size;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.ScrollNodeData.bounds)
  return bounds_;
}
::cc::proto::Size* ScrollNodeData::release_bounds() {
  // @@protoc_insertion_point(field_release:cc.proto.ScrollNodeData.bounds)
  clear_has_bounds();
  ::cc::proto::Size* temp = bounds_;
  bounds_ = NULL;
  return temp;
}
void ScrollNodeData::set_allocated_bounds(::cc::proto::Size* bounds) {
  delete bounds_;
  bounds_ = bounds;
  if (bounds) {
    set_has_bounds();
  } else {
    clear_has_bounds();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.ScrollNodeData.bounds)
}

// optional bool max_scroll_offset_affected_by_page_scale = 6;
bool ScrollNodeData::has_max_scroll_offset_affected_by_page_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ScrollNodeData::set_has_max_scroll_offset_affected_by_page_scale() {
  _has_bits_[0] |= 0x00000020u;
}
void ScrollNodeData::clear_has_max_scroll_offset_affected_by_page_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
void ScrollNodeData::clear_max_scroll_offset_affected_by_page_scale() {
  max_scroll_offset_affected_by_page_scale_ = false;
  clear_has_max_scroll_offset_affected_by_page_scale();
}
 bool ScrollNodeData::max_scroll_offset_affected_by_page_scale() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollNodeData.max_scroll_offset_affected_by_page_scale)
  return max_scroll_offset_affected_by_page_scale_;
}
 void ScrollNodeData::set_max_scroll_offset_affected_by_page_scale(bool value) {
  set_has_max_scroll_offset_affected_by_page_scale();
  max_scroll_offset_affected_by_page_scale_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ScrollNodeData.max_scroll_offset_affected_by_page_scale)
}

// optional bool is_inner_viewport_scroll_layer = 7;
bool ScrollNodeData::has_is_inner_viewport_scroll_layer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ScrollNodeData::set_has_is_inner_viewport_scroll_layer() {
  _has_bits_[0] |= 0x00000040u;
}
void ScrollNodeData::clear_has_is_inner_viewport_scroll_layer() {
  _has_bits_[0] &= ~0x00000040u;
}
void ScrollNodeData::clear_is_inner_viewport_scroll_layer() {
  is_inner_viewport_scroll_layer_ = false;
  clear_has_is_inner_viewport_scroll_layer();
}
 bool ScrollNodeData::is_inner_viewport_scroll_layer() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollNodeData.is_inner_viewport_scroll_layer)
  return is_inner_viewport_scroll_layer_;
}
 void ScrollNodeData::set_is_inner_viewport_scroll_layer(bool value) {
  set_has_is_inner_viewport_scroll_layer();
  is_inner_viewport_scroll_layer_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ScrollNodeData.is_inner_viewport_scroll_layer)
}

// optional bool is_outer_viewport_scroll_layer = 8;
bool ScrollNodeData::has_is_outer_viewport_scroll_layer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ScrollNodeData::set_has_is_outer_viewport_scroll_layer() {
  _has_bits_[0] |= 0x00000080u;
}
void ScrollNodeData::clear_has_is_outer_viewport_scroll_layer() {
  _has_bits_[0] &= ~0x00000080u;
}
void ScrollNodeData::clear_is_outer_viewport_scroll_layer() {
  is_outer_viewport_scroll_layer_ = false;
  clear_has_is_outer_viewport_scroll_layer();
}
 bool ScrollNodeData::is_outer_viewport_scroll_layer() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollNodeData.is_outer_viewport_scroll_layer)
  return is_outer_viewport_scroll_layer_;
}
 void ScrollNodeData::set_is_outer_viewport_scroll_layer(bool value) {
  set_has_is_outer_viewport_scroll_layer();
  is_outer_viewport_scroll_layer_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ScrollNodeData.is_outer_viewport_scroll_layer)
}

// optional .cc.proto.Vector2dF offset_to_transform_parent = 9;
bool ScrollNodeData::has_offset_to_transform_parent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ScrollNodeData::set_has_offset_to_transform_parent() {
  _has_bits_[0] |= 0x00000100u;
}
void ScrollNodeData::clear_has_offset_to_transform_parent() {
  _has_bits_[0] &= ~0x00000100u;
}
void ScrollNodeData::clear_offset_to_transform_parent() {
  if (offset_to_transform_parent_ != NULL) offset_to_transform_parent_->::cc::proto::Vector2dF::Clear();
  clear_has_offset_to_transform_parent();
}
const ::cc::proto::Vector2dF& ScrollNodeData::offset_to_transform_parent() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollNodeData.offset_to_transform_parent)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return offset_to_transform_parent_ != NULL ? *offset_to_transform_parent_ : *default_instance().offset_to_transform_parent_;
#else
  return offset_to_transform_parent_ != NULL ? *offset_to_transform_parent_ : *default_instance_->offset_to_transform_parent_;
#endif
}
::cc::proto::Vector2dF* ScrollNodeData::mutable_offset_to_transform_parent() {
  set_has_offset_to_transform_parent();
  if (offset_to_transform_parent_ == NULL) {
    offset_to_transform_parent_ = new ::cc::proto::Vector2dF;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.ScrollNodeData.offset_to_transform_parent)
  return offset_to_transform_parent_;
}
::cc::proto::Vector2dF* ScrollNodeData::release_offset_to_transform_parent() {
  // @@protoc_insertion_point(field_release:cc.proto.ScrollNodeData.offset_to_transform_parent)
  clear_has_offset_to_transform_parent();
  ::cc::proto::Vector2dF* temp = offset_to_transform_parent_;
  offset_to_transform_parent_ = NULL;
  return temp;
}
void ScrollNodeData::set_allocated_offset_to_transform_parent(::cc::proto::Vector2dF* offset_to_transform_parent) {
  delete offset_to_transform_parent_;
  offset_to_transform_parent_ = offset_to_transform_parent;
  if (offset_to_transform_parent) {
    set_has_offset_to_transform_parent();
  } else {
    clear_has_offset_to_transform_parent();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.ScrollNodeData.offset_to_transform_parent)
}

// optional bool should_flatten = 10;
bool ScrollNodeData::has_should_flatten() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ScrollNodeData::set_has_should_flatten() {
  _has_bits_[0] |= 0x00000200u;
}
void ScrollNodeData::clear_has_should_flatten() {
  _has_bits_[0] &= ~0x00000200u;
}
void ScrollNodeData::clear_should_flatten() {
  should_flatten_ = false;
  clear_has_should_flatten();
}
 bool ScrollNodeData::should_flatten() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollNodeData.should_flatten)
  return should_flatten_;
}
 void ScrollNodeData::set_should_flatten(bool value) {
  set_has_should_flatten();
  should_flatten_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ScrollNodeData.should_flatten)
}

// optional bool user_scrollable_horizontal = 13;
bool ScrollNodeData::has_user_scrollable_horizontal() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ScrollNodeData::set_has_user_scrollable_horizontal() {
  _has_bits_[0] |= 0x00000400u;
}
void ScrollNodeData::clear_has_user_scrollable_horizontal() {
  _has_bits_[0] &= ~0x00000400u;
}
void ScrollNodeData::clear_user_scrollable_horizontal() {
  user_scrollable_horizontal_ = false;
  clear_has_user_scrollable_horizontal();
}
 bool ScrollNodeData::user_scrollable_horizontal() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollNodeData.user_scrollable_horizontal)
  return user_scrollable_horizontal_;
}
 void ScrollNodeData::set_user_scrollable_horizontal(bool value) {
  set_has_user_scrollable_horizontal();
  user_scrollable_horizontal_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ScrollNodeData.user_scrollable_horizontal)
}

// optional bool user_scrollable_vertical = 14;
bool ScrollNodeData::has_user_scrollable_vertical() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ScrollNodeData::set_has_user_scrollable_vertical() {
  _has_bits_[0] |= 0x00000800u;
}
void ScrollNodeData::clear_has_user_scrollable_vertical() {
  _has_bits_[0] &= ~0x00000800u;
}
void ScrollNodeData::clear_user_scrollable_vertical() {
  user_scrollable_vertical_ = false;
  clear_has_user_scrollable_vertical();
}
 bool ScrollNodeData::user_scrollable_vertical() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollNodeData.user_scrollable_vertical)
  return user_scrollable_vertical_;
}
 void ScrollNodeData::set_user_scrollable_vertical(bool value) {
  set_has_user_scrollable_vertical();
  user_scrollable_vertical_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ScrollNodeData.user_scrollable_vertical)
}

// optional .cc.proto.ElementId element_id = 15;
bool ScrollNodeData::has_element_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ScrollNodeData::set_has_element_id() {
  _has_bits_[0] |= 0x00001000u;
}
void ScrollNodeData::clear_has_element_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void ScrollNodeData::clear_element_id() {
  if (element_id_ != NULL) element_id_->::cc::proto::ElementId::Clear();
  clear_has_element_id();
}
const ::cc::proto::ElementId& ScrollNodeData::element_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollNodeData.element_id)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return element_id_ != NULL ? *element_id_ : *default_instance().element_id_;
#else
  return element_id_ != NULL ? *element_id_ : *default_instance_->element_id_;
#endif
}
::cc::proto::ElementId* ScrollNodeData::mutable_element_id() {
  set_has_element_id();
  if (element_id_ == NULL) {
    element_id_ = new ::cc::proto::ElementId;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.ScrollNodeData.element_id)
  return element_id_;
}
::cc::proto::ElementId* ScrollNodeData::release_element_id() {
  // @@protoc_insertion_point(field_release:cc.proto.ScrollNodeData.element_id)
  clear_has_element_id();
  ::cc::proto::ElementId* temp = element_id_;
  element_id_ = NULL;
  return temp;
}
void ScrollNodeData::set_allocated_element_id(::cc::proto::ElementId* element_id) {
  delete element_id_;
  element_id_ = element_id;
  if (element_id) {
    set_has_element_id();
  } else {
    clear_has_element_id();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.ScrollNodeData.element_id)
}

// optional int64 transform_id = 11;
bool ScrollNodeData::has_transform_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ScrollNodeData::set_has_transform_id() {
  _has_bits_[0] |= 0x00002000u;
}
void ScrollNodeData::clear_has_transform_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void ScrollNodeData::clear_transform_id() {
  transform_id_ = GOOGLE_LONGLONG(0);
  clear_has_transform_id();
}
 ::google::protobuf::int64 ScrollNodeData::transform_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollNodeData.transform_id)
  return transform_id_;
}
 void ScrollNodeData::set_transform_id(::google::protobuf::int64 value) {
  set_has_transform_id();
  transform_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ScrollNodeData.transform_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForTreeNode(
    TreeNode* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeNode::kIdFieldNumber;
const int TreeNode::kParentIdFieldNumber;
const int TreeNode::kOwnerIdFieldNumber;
const int TreeNode::kTransformNodeDataFieldNumber;
const int TreeNode::kClipNodeDataFieldNumber;
const int TreeNode::kEffectNodeDataFieldNumber;
const int TreeNode::kScrollNodeDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeNode::TreeNode()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.TreeNode)
}

void TreeNode::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transform_node_data_ = const_cast< ::cc::proto::TranformNodeData*>(
      ::cc::proto::TranformNodeData::internal_default_instance());
#else
  transform_node_data_ = const_cast< ::cc::proto::TranformNodeData*>(&::cc::proto::TranformNodeData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clip_node_data_ = const_cast< ::cc::proto::ClipNodeData*>(
      ::cc::proto::ClipNodeData::internal_default_instance());
#else
  clip_node_data_ = const_cast< ::cc::proto::ClipNodeData*>(&::cc::proto::ClipNodeData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  effect_node_data_ = const_cast< ::cc::proto::EffectNodeData*>(
      ::cc::proto::EffectNodeData::internal_default_instance());
#else
  effect_node_data_ = const_cast< ::cc::proto::EffectNodeData*>(&::cc::proto::EffectNodeData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scroll_node_data_ = const_cast< ::cc::proto::ScrollNodeData*>(
      ::cc::proto::ScrollNodeData::internal_default_instance());
#else
  scroll_node_data_ = const_cast< ::cc::proto::ScrollNodeData*>(&::cc::proto::ScrollNodeData::default_instance());
#endif
}

TreeNode::TreeNode(const TreeNode& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.TreeNode)
}

void TreeNode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  parent_id_ = GOOGLE_LONGLONG(0);
  owner_id_ = GOOGLE_LONGLONG(0);
  transform_node_data_ = NULL;
  clip_node_data_ = NULL;
  effect_node_data_ = NULL;
  scroll_node_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeNode::~TreeNode() {
  // @@protoc_insertion_point(destructor:cc.proto.TreeNode)
  SharedDtor();
}

void TreeNode::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete transform_node_data_;
    delete clip_node_data_;
    delete effect_node_data_;
    delete scroll_node_data_;
  }
}

void TreeNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TreeNode& TreeNode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

TreeNode* TreeNode::default_instance_ = NULL;

TreeNode* TreeNode::New(::google::protobuf::Arena* arena) const {
  TreeNode* n = new TreeNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.TreeNode)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TreeNode, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TreeNode*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(id_, owner_id_);
    if (has_transform_node_data()) {
      if (transform_node_data_ != NULL) transform_node_data_->::cc::proto::TranformNodeData::Clear();
    }
    if (has_clip_node_data()) {
      if (clip_node_data_ != NULL) clip_node_data_->::cc::proto::ClipNodeData::Clear();
    }
    if (has_effect_node_data()) {
      if (effect_node_data_ != NULL) effect_node_data_->::cc::proto::EffectNodeData::Clear();
    }
    if (has_scroll_node_data()) {
      if (scroll_node_data_ != NULL) scroll_node_data_->::cc::proto::ScrollNodeData::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForTreeNode, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.TreeNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_parent_id;
        break;
      }

      // optional int64 parent_id = 2;
      case 2: {
        if (tag == 16) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_owner_id;
        break;
      }

      // optional int64 owner_id = 3;
      case 3: {
        if (tag == 24) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_transform_node_data;
        break;
      }

      // optional .cc.proto.TranformNodeData transform_node_data = 1000;
      case 1000: {
        if (tag == 8002) {
         parse_transform_node_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_node_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_clip_node_data;
        break;
      }

      // optional .cc.proto.ClipNodeData clip_node_data = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_clip_node_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip_node_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8018)) goto parse_effect_node_data;
        break;
      }

      // optional .cc.proto.EffectNodeData effect_node_data = 1002;
      case 1002: {
        if (tag == 8018) {
         parse_effect_node_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effect_node_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8026)) goto parse_scroll_node_data;
        break;
      }

      // optional .cc.proto.ScrollNodeData scroll_node_data = 1003;
      case 1003: {
        if (tag == 8026) {
         parse_scroll_node_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_node_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.TreeNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.TreeNode)
  return false;
#undef DO_
}

void TreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.TreeNode)
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 parent_id = 2;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->parent_id(), output);
  }

  // optional int64 owner_id = 3;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->owner_id(), output);
  }

  // optional .cc.proto.TranformNodeData transform_node_data = 1000;
  if (has_transform_node_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1000, *this->transform_node_data_, output);
  }

  // optional .cc.proto.ClipNodeData clip_node_data = 1001;
  if (has_clip_node_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1001, *this->clip_node_data_, output);
  }

  // optional .cc.proto.EffectNodeData effect_node_data = 1002;
  if (has_effect_node_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1002, *this->effect_node_data_, output);
  }

  // optional .cc.proto.ScrollNodeData scroll_node_data = 1003;
  if (has_scroll_node_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1003, *this->scroll_node_data_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.TreeNode)
}

int TreeNode::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.TreeNode)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 parent_id = 2;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parent_id());
    }

    // optional int64 owner_id = 3;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->owner_id());
    }

    // optional .cc.proto.TranformNodeData transform_node_data = 1000;
    if (has_transform_node_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_node_data_);
    }

    // optional .cc.proto.ClipNodeData clip_node_data = 1001;
    if (has_clip_node_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clip_node_data_);
    }

    // optional .cc.proto.EffectNodeData effect_node_data = 1002;
    if (has_effect_node_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->effect_node_data_);
    }

    // optional .cc.proto.ScrollNodeData scroll_node_data = 1003;
    if (has_scroll_node_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scroll_node_data_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeNode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TreeNode*>(&from));
}

void TreeNode::MergeFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.TreeNode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_transform_node_data()) {
      mutable_transform_node_data()->::cc::proto::TranformNodeData::MergeFrom(from.transform_node_data());
    }
    if (from.has_clip_node_data()) {
      mutable_clip_node_data()->::cc::proto::ClipNodeData::MergeFrom(from.clip_node_data());
    }
    if (from.has_effect_node_data()) {
      mutable_effect_node_data()->::cc::proto::EffectNodeData::MergeFrom(from.effect_node_data());
    }
    if (from.has_scroll_node_data()) {
      mutable_scroll_node_data()->::cc::proto::ScrollNodeData::MergeFrom(from.scroll_node_data());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void TreeNode::CopyFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNode::IsInitialized() const {

  if (has_scroll_node_data()) {
    if (!this->scroll_node_data_->IsInitialized()) return false;
  }
  return true;
}

void TreeNode::Swap(TreeNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TreeNode::InternalSwap(TreeNode* other) {
  std::swap(id_, other->id_);
  std::swap(parent_id_, other->parent_id_);
  std::swap(owner_id_, other->owner_id_);
  std::swap(transform_node_data_, other->transform_node_data_);
  std::swap(clip_node_data_, other->clip_node_data_);
  std::swap(effect_node_data_, other->effect_node_data_);
  std::swap(scroll_node_data_, other->scroll_node_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TreeNode::GetTypeName() const {
  return "cc.proto.TreeNode";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TreeNode

// optional int64 id = 1;
bool TreeNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TreeNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TreeNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TreeNode::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 TreeNode::id() const {
  // @@protoc_insertion_point(field_get:cc.proto.TreeNode.id)
  return id_;
}
 void TreeNode::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TreeNode.id)
}

// optional int64 parent_id = 2;
bool TreeNode::has_parent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TreeNode::set_has_parent_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TreeNode::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TreeNode::clear_parent_id() {
  parent_id_ = GOOGLE_LONGLONG(0);
  clear_has_parent_id();
}
 ::google::protobuf::int64 TreeNode::parent_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.TreeNode.parent_id)
  return parent_id_;
}
 void TreeNode::set_parent_id(::google::protobuf::int64 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TreeNode.parent_id)
}

// optional int64 owner_id = 3;
bool TreeNode::has_owner_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TreeNode::set_has_owner_id() {
  _has_bits_[0] |= 0x00000004u;
}
void TreeNode::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void TreeNode::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_owner_id();
}
 ::google::protobuf::int64 TreeNode::owner_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.TreeNode.owner_id)
  return owner_id_;
}
 void TreeNode::set_owner_id(::google::protobuf::int64 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TreeNode.owner_id)
}

// optional .cc.proto.TranformNodeData transform_node_data = 1000;
bool TreeNode::has_transform_node_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TreeNode::set_has_transform_node_data() {
  _has_bits_[0] |= 0x00000008u;
}
void TreeNode::clear_has_transform_node_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void TreeNode::clear_transform_node_data() {
  if (transform_node_data_ != NULL) transform_node_data_->::cc::proto::TranformNodeData::Clear();
  clear_has_transform_node_data();
}
const ::cc::proto::TranformNodeData& TreeNode::transform_node_data() const {
  // @@protoc_insertion_point(field_get:cc.proto.TreeNode.transform_node_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return transform_node_data_ != NULL ? *transform_node_data_ : *default_instance().transform_node_data_;
#else
  return transform_node_data_ != NULL ? *transform_node_data_ : *default_instance_->transform_node_data_;
#endif
}
::cc::proto::TranformNodeData* TreeNode::mutable_transform_node_data() {
  set_has_transform_node_data();
  if (transform_node_data_ == NULL) {
    transform_node_data_ = new ::cc::proto::TranformNodeData;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TreeNode.transform_node_data)
  return transform_node_data_;
}
::cc::proto::TranformNodeData* TreeNode::release_transform_node_data() {
  // @@protoc_insertion_point(field_release:cc.proto.TreeNode.transform_node_data)
  clear_has_transform_node_data();
  ::cc::proto::TranformNodeData* temp = transform_node_data_;
  transform_node_data_ = NULL;
  return temp;
}
void TreeNode::set_allocated_transform_node_data(::cc::proto::TranformNodeData* transform_node_data) {
  delete transform_node_data_;
  transform_node_data_ = transform_node_data;
  if (transform_node_data) {
    set_has_transform_node_data();
  } else {
    clear_has_transform_node_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TreeNode.transform_node_data)
}

// optional .cc.proto.ClipNodeData clip_node_data = 1001;
bool TreeNode::has_clip_node_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TreeNode::set_has_clip_node_data() {
  _has_bits_[0] |= 0x00000010u;
}
void TreeNode::clear_has_clip_node_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void TreeNode::clear_clip_node_data() {
  if (clip_node_data_ != NULL) clip_node_data_->::cc::proto::ClipNodeData::Clear();
  clear_has_clip_node_data();
}
const ::cc::proto::ClipNodeData& TreeNode::clip_node_data() const {
  // @@protoc_insertion_point(field_get:cc.proto.TreeNode.clip_node_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return clip_node_data_ != NULL ? *clip_node_data_ : *default_instance().clip_node_data_;
#else
  return clip_node_data_ != NULL ? *clip_node_data_ : *default_instance_->clip_node_data_;
#endif
}
::cc::proto::ClipNodeData* TreeNode::mutable_clip_node_data() {
  set_has_clip_node_data();
  if (clip_node_data_ == NULL) {
    clip_node_data_ = new ::cc::proto::ClipNodeData;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TreeNode.clip_node_data)
  return clip_node_data_;
}
::cc::proto::ClipNodeData* TreeNode::release_clip_node_data() {
  // @@protoc_insertion_point(field_release:cc.proto.TreeNode.clip_node_data)
  clear_has_clip_node_data();
  ::cc::proto::ClipNodeData* temp = clip_node_data_;
  clip_node_data_ = NULL;
  return temp;
}
void TreeNode::set_allocated_clip_node_data(::cc::proto::ClipNodeData* clip_node_data) {
  delete clip_node_data_;
  clip_node_data_ = clip_node_data;
  if (clip_node_data) {
    set_has_clip_node_data();
  } else {
    clear_has_clip_node_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TreeNode.clip_node_data)
}

// optional .cc.proto.EffectNodeData effect_node_data = 1002;
bool TreeNode::has_effect_node_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TreeNode::set_has_effect_node_data() {
  _has_bits_[0] |= 0x00000020u;
}
void TreeNode::clear_has_effect_node_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void TreeNode::clear_effect_node_data() {
  if (effect_node_data_ != NULL) effect_node_data_->::cc::proto::EffectNodeData::Clear();
  clear_has_effect_node_data();
}
const ::cc::proto::EffectNodeData& TreeNode::effect_node_data() const {
  // @@protoc_insertion_point(field_get:cc.proto.TreeNode.effect_node_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return effect_node_data_ != NULL ? *effect_node_data_ : *default_instance().effect_node_data_;
#else
  return effect_node_data_ != NULL ? *effect_node_data_ : *default_instance_->effect_node_data_;
#endif
}
::cc::proto::EffectNodeData* TreeNode::mutable_effect_node_data() {
  set_has_effect_node_data();
  if (effect_node_data_ == NULL) {
    effect_node_data_ = new ::cc::proto::EffectNodeData;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TreeNode.effect_node_data)
  return effect_node_data_;
}
::cc::proto::EffectNodeData* TreeNode::release_effect_node_data() {
  // @@protoc_insertion_point(field_release:cc.proto.TreeNode.effect_node_data)
  clear_has_effect_node_data();
  ::cc::proto::EffectNodeData* temp = effect_node_data_;
  effect_node_data_ = NULL;
  return temp;
}
void TreeNode::set_allocated_effect_node_data(::cc::proto::EffectNodeData* effect_node_data) {
  delete effect_node_data_;
  effect_node_data_ = effect_node_data;
  if (effect_node_data) {
    set_has_effect_node_data();
  } else {
    clear_has_effect_node_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TreeNode.effect_node_data)
}

// optional .cc.proto.ScrollNodeData scroll_node_data = 1003;
bool TreeNode::has_scroll_node_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TreeNode::set_has_scroll_node_data() {
  _has_bits_[0] |= 0x00000040u;
}
void TreeNode::clear_has_scroll_node_data() {
  _has_bits_[0] &= ~0x00000040u;
}
void TreeNode::clear_scroll_node_data() {
  if (scroll_node_data_ != NULL) scroll_node_data_->::cc::proto::ScrollNodeData::Clear();
  clear_has_scroll_node_data();
}
const ::cc::proto::ScrollNodeData& TreeNode::scroll_node_data() const {
  // @@protoc_insertion_point(field_get:cc.proto.TreeNode.scroll_node_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return scroll_node_data_ != NULL ? *scroll_node_data_ : *default_instance().scroll_node_data_;
#else
  return scroll_node_data_ != NULL ? *scroll_node_data_ : *default_instance_->scroll_node_data_;
#endif
}
::cc::proto::ScrollNodeData* TreeNode::mutable_scroll_node_data() {
  set_has_scroll_node_data();
  if (scroll_node_data_ == NULL) {
    scroll_node_data_ = new ::cc::proto::ScrollNodeData;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.TreeNode.scroll_node_data)
  return scroll_node_data_;
}
::cc::proto::ScrollNodeData* TreeNode::release_scroll_node_data() {
  // @@protoc_insertion_point(field_release:cc.proto.TreeNode.scroll_node_data)
  clear_has_scroll_node_data();
  ::cc::proto::ScrollNodeData* temp = scroll_node_data_;
  scroll_node_data_ = NULL;
  return temp;
}
void TreeNode::set_allocated_scroll_node_data(::cc::proto::ScrollNodeData* scroll_node_data) {
  delete scroll_node_data_;
  scroll_node_data_ = scroll_node_data;
  if (scroll_node_data) {
    set_has_scroll_node_data();
  } else {
    clear_has_scroll_node_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.TreeNode.scroll_node_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPropertyTree(
    PropertyTree* ptr) {
  return ptr->mutable_unknown_fields();
}

bool PropertyTree_PropertyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PropertyTree_PropertyType PropertyTree::Transform;
const PropertyTree_PropertyType PropertyTree::Clip;
const PropertyTree_PropertyType PropertyTree::Effect;
const PropertyTree_PropertyType PropertyTree::Scroll;
const PropertyTree_PropertyType PropertyTree::PropertyType_MIN;
const PropertyTree_PropertyType PropertyTree::PropertyType_MAX;
const int PropertyTree::PropertyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyTree::kPropertyTypeFieldNumber;
const int PropertyTree::kNodesFieldNumber;
const int PropertyTree::kNeedsUpdateFieldNumber;
const int PropertyTree::kTransformTreeDataFieldNumber;
const int PropertyTree::kScrollTreeDataFieldNumber;
const int PropertyTree::kEffectTreeDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyTree::PropertyTree()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.PropertyTree)
}

void PropertyTree::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transform_tree_data_ = const_cast< ::cc::proto::TransformTreeData*>(
      ::cc::proto::TransformTreeData::internal_default_instance());
#else
  transform_tree_data_ = const_cast< ::cc::proto::TransformTreeData*>(&::cc::proto::TransformTreeData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scroll_tree_data_ = const_cast< ::cc::proto::ScrollTreeData*>(
      ::cc::proto::ScrollTreeData::internal_default_instance());
#else
  scroll_tree_data_ = const_cast< ::cc::proto::ScrollTreeData*>(&::cc::proto::ScrollTreeData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  effect_tree_data_ = const_cast< ::cc::proto::EffectTreeData*>(
      ::cc::proto::EffectTreeData::internal_default_instance());
#else
  effect_tree_data_ = const_cast< ::cc::proto::EffectTreeData*>(&::cc::proto::EffectTreeData::default_instance());
#endif
}

PropertyTree::PropertyTree(const PropertyTree& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.PropertyTree)
}

void PropertyTree::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  property_type_ = 1;
  needs_update_ = false;
  transform_tree_data_ = NULL;
  scroll_tree_data_ = NULL;
  effect_tree_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyTree::~PropertyTree() {
  // @@protoc_insertion_point(destructor:cc.proto.PropertyTree)
  SharedDtor();
}

void PropertyTree::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete transform_tree_data_;
    delete scroll_tree_data_;
    delete effect_tree_data_;
  }
}

void PropertyTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropertyTree& PropertyTree::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

PropertyTree* PropertyTree::default_instance_ = NULL;

PropertyTree* PropertyTree::New(::google::protobuf::Arena* arena) const {
  PropertyTree* n = new PropertyTree;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyTree::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.PropertyTree)
  if (_has_bits_[0 / 32] & 61u) {
    property_type_ = 1;
    needs_update_ = false;
    if (has_transform_tree_data()) {
      if (transform_tree_data_ != NULL) transform_tree_data_->::cc::proto::TransformTreeData::Clear();
    }
    if (has_scroll_tree_data()) {
      if (scroll_tree_data_ != NULL) scroll_tree_data_->::cc::proto::ScrollTreeData::Clear();
    }
    if (has_effect_tree_data()) {
      if (effect_tree_data_ != NULL) effect_tree_data_->::cc::proto::EffectTreeData::Clear();
    }
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PropertyTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPropertyTree, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.PropertyTree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.PropertyTree.PropertyType property_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::PropertyTree_PropertyType_IsValid(value)) {
            set_property_type(static_cast< ::cc::proto::PropertyTree_PropertyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        break;
      }

      // repeated .cc.proto.TreeNode nodes = 2;
      case 2: {
        if (tag == 18) {
         parse_nodes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_nodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_needs_update;
        break;
      }

      // optional bool needs_update = 3;
      case 3: {
        if (tag == 24) {
         parse_needs_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_update_)));
          set_has_needs_update();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_transform_tree_data;
        break;
      }

      // optional .cc.proto.TransformTreeData transform_tree_data = 1000;
      case 1000: {
        if (tag == 8002) {
         parse_transform_tree_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_tree_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_scroll_tree_data;
        break;
      }

      // optional .cc.proto.ScrollTreeData scroll_tree_data = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_scroll_tree_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_tree_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8018)) goto parse_effect_tree_data;
        break;
      }

      // optional .cc.proto.EffectTreeData effect_tree_data = 1002;
      case 1002: {
        if (tag == 8018) {
         parse_effect_tree_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effect_tree_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.PropertyTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.PropertyTree)
  return false;
#undef DO_
}

void PropertyTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.PropertyTree)
  // optional .cc.proto.PropertyTree.PropertyType property_type = 1;
  if (has_property_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->property_type(), output);
  }

  // repeated .cc.proto.TreeNode nodes = 2;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->nodes(i), output);
  }

  // optional bool needs_update = 3;
  if (has_needs_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needs_update(), output);
  }

  // optional .cc.proto.TransformTreeData transform_tree_data = 1000;
  if (has_transform_tree_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1000, *this->transform_tree_data_, output);
  }

  // optional .cc.proto.ScrollTreeData scroll_tree_data = 1001;
  if (has_scroll_tree_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1001, *this->scroll_tree_data_, output);
  }

  // optional .cc.proto.EffectTreeData effect_tree_data = 1002;
  if (has_effect_tree_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1002, *this->effect_tree_data_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.PropertyTree)
}

int PropertyTree::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.PropertyTree)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 61u) {
    // optional .cc.proto.PropertyTree.PropertyType property_type = 1;
    if (has_property_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->property_type());
    }

    // optional bool needs_update = 3;
    if (has_needs_update()) {
      total_size += 1 + 1;
    }

    // optional .cc.proto.TransformTreeData transform_tree_data = 1000;
    if (has_transform_tree_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_tree_data_);
    }

    // optional .cc.proto.ScrollTreeData scroll_tree_data = 1001;
    if (has_scroll_tree_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scroll_tree_data_);
    }

    // optional .cc.proto.EffectTreeData effect_tree_data = 1002;
    if (has_effect_tree_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->effect_tree_data_);
    }

  }
  // repeated .cc.proto.TreeNode nodes = 2;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyTree::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropertyTree*>(&from));
}

void PropertyTree::MergeFrom(const PropertyTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.PropertyTree)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_type()) {
      set_property_type(from.property_type());
    }
    if (from.has_needs_update()) {
      set_needs_update(from.needs_update());
    }
    if (from.has_transform_tree_data()) {
      mutable_transform_tree_data()->::cc::proto::TransformTreeData::MergeFrom(from.transform_tree_data());
    }
    if (from.has_scroll_tree_data()) {
      mutable_scroll_tree_data()->::cc::proto::ScrollTreeData::MergeFrom(from.scroll_tree_data());
    }
    if (from.has_effect_tree_data()) {
      mutable_effect_tree_data()->::cc::proto::EffectTreeData::MergeFrom(from.effect_tree_data());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PropertyTree::CopyFrom(const PropertyTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.PropertyTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyTree::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->nodes())) return false;
  if (has_scroll_tree_data()) {
    if (!this->scroll_tree_data_->IsInitialized()) return false;
  }
  return true;
}

void PropertyTree::Swap(PropertyTree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyTree::InternalSwap(PropertyTree* other) {
  std::swap(property_type_, other->property_type_);
  nodes_.UnsafeArenaSwap(&other->nodes_);
  std::swap(needs_update_, other->needs_update_);
  std::swap(transform_tree_data_, other->transform_tree_data_);
  std::swap(scroll_tree_data_, other->scroll_tree_data_);
  std::swap(effect_tree_data_, other->effect_tree_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PropertyTree::GetTypeName() const {
  return "cc.proto.PropertyTree";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyTree

// optional .cc.proto.PropertyTree.PropertyType property_type = 1;
bool PropertyTree::has_property_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropertyTree::set_has_property_type() {
  _has_bits_[0] |= 0x00000001u;
}
void PropertyTree::clear_has_property_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropertyTree::clear_property_type() {
  property_type_ = 1;
  clear_has_property_type();
}
 ::cc::proto::PropertyTree_PropertyType PropertyTree::property_type() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTree.property_type)
  return static_cast< ::cc::proto::PropertyTree_PropertyType >(property_type_);
}
 void PropertyTree::set_property_type(::cc::proto::PropertyTree_PropertyType value) {
  assert(::cc::proto::PropertyTree_PropertyType_IsValid(value));
  set_has_property_type();
  property_type_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.PropertyTree.property_type)
}

// repeated .cc.proto.TreeNode nodes = 2;
int PropertyTree::nodes_size() const {
  return nodes_.size();
}
void PropertyTree::clear_nodes() {
  nodes_.Clear();
}
const ::cc::proto::TreeNode& PropertyTree::nodes(int index) const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTree.nodes)
  return nodes_.Get(index);
}
::cc::proto::TreeNode* PropertyTree::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:cc.proto.PropertyTree.nodes)
  return nodes_.Mutable(index);
}
::cc::proto::TreeNode* PropertyTree::add_nodes() {
  // @@protoc_insertion_point(field_add:cc.proto.PropertyTree.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::cc::proto::TreeNode >*
PropertyTree::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:cc.proto.PropertyTree.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::cc::proto::TreeNode >&
PropertyTree::nodes() const {
  // @@protoc_insertion_point(field_list:cc.proto.PropertyTree.nodes)
  return nodes_;
}

// optional bool needs_update = 3;
bool PropertyTree::has_needs_update() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PropertyTree::set_has_needs_update() {
  _has_bits_[0] |= 0x00000004u;
}
void PropertyTree::clear_has_needs_update() {
  _has_bits_[0] &= ~0x00000004u;
}
void PropertyTree::clear_needs_update() {
  needs_update_ = false;
  clear_has_needs_update();
}
 bool PropertyTree::needs_update() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTree.needs_update)
  return needs_update_;
}
 void PropertyTree::set_needs_update(bool value) {
  set_has_needs_update();
  needs_update_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.PropertyTree.needs_update)
}

// optional .cc.proto.TransformTreeData transform_tree_data = 1000;
bool PropertyTree::has_transform_tree_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PropertyTree::set_has_transform_tree_data() {
  _has_bits_[0] |= 0x00000008u;
}
void PropertyTree::clear_has_transform_tree_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void PropertyTree::clear_transform_tree_data() {
  if (transform_tree_data_ != NULL) transform_tree_data_->::cc::proto::TransformTreeData::Clear();
  clear_has_transform_tree_data();
}
const ::cc::proto::TransformTreeData& PropertyTree::transform_tree_data() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTree.transform_tree_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return transform_tree_data_ != NULL ? *transform_tree_data_ : *default_instance().transform_tree_data_;
#else
  return transform_tree_data_ != NULL ? *transform_tree_data_ : *default_instance_->transform_tree_data_;
#endif
}
::cc::proto::TransformTreeData* PropertyTree::mutable_transform_tree_data() {
  set_has_transform_tree_data();
  if (transform_tree_data_ == NULL) {
    transform_tree_data_ = new ::cc::proto::TransformTreeData;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.PropertyTree.transform_tree_data)
  return transform_tree_data_;
}
::cc::proto::TransformTreeData* PropertyTree::release_transform_tree_data() {
  // @@protoc_insertion_point(field_release:cc.proto.PropertyTree.transform_tree_data)
  clear_has_transform_tree_data();
  ::cc::proto::TransformTreeData* temp = transform_tree_data_;
  transform_tree_data_ = NULL;
  return temp;
}
void PropertyTree::set_allocated_transform_tree_data(::cc::proto::TransformTreeData* transform_tree_data) {
  delete transform_tree_data_;
  transform_tree_data_ = transform_tree_data;
  if (transform_tree_data) {
    set_has_transform_tree_data();
  } else {
    clear_has_transform_tree_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.PropertyTree.transform_tree_data)
}

// optional .cc.proto.ScrollTreeData scroll_tree_data = 1001;
bool PropertyTree::has_scroll_tree_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PropertyTree::set_has_scroll_tree_data() {
  _has_bits_[0] |= 0x00000010u;
}
void PropertyTree::clear_has_scroll_tree_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void PropertyTree::clear_scroll_tree_data() {
  if (scroll_tree_data_ != NULL) scroll_tree_data_->::cc::proto::ScrollTreeData::Clear();
  clear_has_scroll_tree_data();
}
const ::cc::proto::ScrollTreeData& PropertyTree::scroll_tree_data() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTree.scroll_tree_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return scroll_tree_data_ != NULL ? *scroll_tree_data_ : *default_instance().scroll_tree_data_;
#else
  return scroll_tree_data_ != NULL ? *scroll_tree_data_ : *default_instance_->scroll_tree_data_;
#endif
}
::cc::proto::ScrollTreeData* PropertyTree::mutable_scroll_tree_data() {
  set_has_scroll_tree_data();
  if (scroll_tree_data_ == NULL) {
    scroll_tree_data_ = new ::cc::proto::ScrollTreeData;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.PropertyTree.scroll_tree_data)
  return scroll_tree_data_;
}
::cc::proto::ScrollTreeData* PropertyTree::release_scroll_tree_data() {
  // @@protoc_insertion_point(field_release:cc.proto.PropertyTree.scroll_tree_data)
  clear_has_scroll_tree_data();
  ::cc::proto::ScrollTreeData* temp = scroll_tree_data_;
  scroll_tree_data_ = NULL;
  return temp;
}
void PropertyTree::set_allocated_scroll_tree_data(::cc::proto::ScrollTreeData* scroll_tree_data) {
  delete scroll_tree_data_;
  scroll_tree_data_ = scroll_tree_data;
  if (scroll_tree_data) {
    set_has_scroll_tree_data();
  } else {
    clear_has_scroll_tree_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.PropertyTree.scroll_tree_data)
}

// optional .cc.proto.EffectTreeData effect_tree_data = 1002;
bool PropertyTree::has_effect_tree_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PropertyTree::set_has_effect_tree_data() {
  _has_bits_[0] |= 0x00000020u;
}
void PropertyTree::clear_has_effect_tree_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void PropertyTree::clear_effect_tree_data() {
  if (effect_tree_data_ != NULL) effect_tree_data_->::cc::proto::EffectTreeData::Clear();
  clear_has_effect_tree_data();
}
const ::cc::proto::EffectTreeData& PropertyTree::effect_tree_data() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTree.effect_tree_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return effect_tree_data_ != NULL ? *effect_tree_data_ : *default_instance().effect_tree_data_;
#else
  return effect_tree_data_ != NULL ? *effect_tree_data_ : *default_instance_->effect_tree_data_;
#endif
}
::cc::proto::EffectTreeData* PropertyTree::mutable_effect_tree_data() {
  set_has_effect_tree_data();
  if (effect_tree_data_ == NULL) {
    effect_tree_data_ = new ::cc::proto::EffectTreeData;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.PropertyTree.effect_tree_data)
  return effect_tree_data_;
}
::cc::proto::EffectTreeData* PropertyTree::release_effect_tree_data() {
  // @@protoc_insertion_point(field_release:cc.proto.PropertyTree.effect_tree_data)
  clear_has_effect_tree_data();
  ::cc::proto::EffectTreeData* temp = effect_tree_data_;
  effect_tree_data_ = NULL;
  return temp;
}
void PropertyTree::set_allocated_effect_tree_data(::cc::proto::EffectTreeData* effect_tree_data) {
  delete effect_tree_data_;
  effect_tree_data_ = effect_tree_data;
  if (effect_tree_data) {
    set_has_effect_tree_data();
  } else {
    clear_has_effect_tree_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.PropertyTree.effect_tree_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForScrollOffsetMapEntry(
    ScrollOffsetMapEntry* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScrollOffsetMapEntry::kLayerIdFieldNumber;
const int ScrollOffsetMapEntry::kScrollOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScrollOffsetMapEntry::ScrollOffsetMapEntry()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.ScrollOffsetMapEntry)
}

void ScrollOffsetMapEntry::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scroll_offset_ = const_cast< ::cc::proto::SyncedProperty*>(
      ::cc::proto::SyncedProperty::internal_default_instance());
#else
  scroll_offset_ = const_cast< ::cc::proto::SyncedProperty*>(&::cc::proto::SyncedProperty::default_instance());
#endif
}

ScrollOffsetMapEntry::ScrollOffsetMapEntry(const ScrollOffsetMapEntry& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.ScrollOffsetMapEntry)
}

void ScrollOffsetMapEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_id_ = GOOGLE_LONGLONG(0);
  scroll_offset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScrollOffsetMapEntry::~ScrollOffsetMapEntry() {
  // @@protoc_insertion_point(destructor:cc.proto.ScrollOffsetMapEntry)
  SharedDtor();
}

void ScrollOffsetMapEntry::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete scroll_offset_;
  }
}

void ScrollOffsetMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScrollOffsetMapEntry& ScrollOffsetMapEntry::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

ScrollOffsetMapEntry* ScrollOffsetMapEntry::default_instance_ = NULL;

ScrollOffsetMapEntry* ScrollOffsetMapEntry::New(::google::protobuf::Arena* arena) const {
  ScrollOffsetMapEntry* n = new ScrollOffsetMapEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScrollOffsetMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.ScrollOffsetMapEntry)
  if (_has_bits_[0 / 32] & 3u) {
    layer_id_ = GOOGLE_LONGLONG(0);
    if (has_scroll_offset()) {
      if (scroll_offset_ != NULL) scroll_offset_->::cc::proto::SyncedProperty::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ScrollOffsetMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForScrollOffsetMapEntry, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.ScrollOffsetMapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 layer_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &layer_id_)));
          set_has_layer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scroll_offset;
        break;
      }

      // optional .cc.proto.SyncedProperty scroll_offset = 2;
      case 2: {
        if (tag == 18) {
         parse_scroll_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.ScrollOffsetMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.ScrollOffsetMapEntry)
  return false;
#undef DO_
}

void ScrollOffsetMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.ScrollOffsetMapEntry)
  // required int64 layer_id = 1;
  if (has_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->layer_id(), output);
  }

  // optional .cc.proto.SyncedProperty scroll_offset = 2;
  if (has_scroll_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->scroll_offset_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.ScrollOffsetMapEntry)
}

int ScrollOffsetMapEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.ScrollOffsetMapEntry)
  int total_size = 0;

  // required int64 layer_id = 1;
  if (has_layer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->layer_id());
  }
  // optional .cc.proto.SyncedProperty scroll_offset = 2;
  if (has_scroll_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scroll_offset_);
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScrollOffsetMapEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScrollOffsetMapEntry*>(&from));
}

void ScrollOffsetMapEntry::MergeFrom(const ScrollOffsetMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.ScrollOffsetMapEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer_id()) {
      set_layer_id(from.layer_id());
    }
    if (from.has_scroll_offset()) {
      mutable_scroll_offset()->::cc::proto::SyncedProperty::MergeFrom(from.scroll_offset());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ScrollOffsetMapEntry::CopyFrom(const ScrollOffsetMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.ScrollOffsetMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScrollOffsetMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ScrollOffsetMapEntry::Swap(ScrollOffsetMapEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScrollOffsetMapEntry::InternalSwap(ScrollOffsetMapEntry* other) {
  std::swap(layer_id_, other->layer_id_);
  std::swap(scroll_offset_, other->scroll_offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ScrollOffsetMapEntry::GetTypeName() const {
  return "cc.proto.ScrollOffsetMapEntry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScrollOffsetMapEntry

// required int64 layer_id = 1;
bool ScrollOffsetMapEntry::has_layer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScrollOffsetMapEntry::set_has_layer_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ScrollOffsetMapEntry::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScrollOffsetMapEntry::clear_layer_id() {
  layer_id_ = GOOGLE_LONGLONG(0);
  clear_has_layer_id();
}
 ::google::protobuf::int64 ScrollOffsetMapEntry::layer_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollOffsetMapEntry.layer_id)
  return layer_id_;
}
 void ScrollOffsetMapEntry::set_layer_id(::google::protobuf::int64 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ScrollOffsetMapEntry.layer_id)
}

// optional .cc.proto.SyncedProperty scroll_offset = 2;
bool ScrollOffsetMapEntry::has_scroll_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScrollOffsetMapEntry::set_has_scroll_offset() {
  _has_bits_[0] |= 0x00000002u;
}
void ScrollOffsetMapEntry::clear_has_scroll_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScrollOffsetMapEntry::clear_scroll_offset() {
  if (scroll_offset_ != NULL) scroll_offset_->::cc::proto::SyncedProperty::Clear();
  clear_has_scroll_offset();
}
const ::cc::proto::SyncedProperty& ScrollOffsetMapEntry::scroll_offset() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollOffsetMapEntry.scroll_offset)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return scroll_offset_ != NULL ? *scroll_offset_ : *default_instance().scroll_offset_;
#else
  return scroll_offset_ != NULL ? *scroll_offset_ : *default_instance_->scroll_offset_;
#endif
}
::cc::proto::SyncedProperty* ScrollOffsetMapEntry::mutable_scroll_offset() {
  set_has_scroll_offset();
  if (scroll_offset_ == NULL) {
    scroll_offset_ = new ::cc::proto::SyncedProperty;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.ScrollOffsetMapEntry.scroll_offset)
  return scroll_offset_;
}
::cc::proto::SyncedProperty* ScrollOffsetMapEntry::release_scroll_offset() {
  // @@protoc_insertion_point(field_release:cc.proto.ScrollOffsetMapEntry.scroll_offset)
  clear_has_scroll_offset();
  ::cc::proto::SyncedProperty* temp = scroll_offset_;
  scroll_offset_ = NULL;
  return temp;
}
void ScrollOffsetMapEntry::set_allocated_scroll_offset(::cc::proto::SyncedProperty* scroll_offset) {
  delete scroll_offset_;
  scroll_offset_ = scroll_offset;
  if (scroll_offset) {
    set_has_scroll_offset();
  } else {
    clear_has_scroll_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.ScrollOffsetMapEntry.scroll_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForScrollTreeData(
    ScrollTreeData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScrollTreeData::kCurrentlyScrollingNodeIdFieldNumber;
const int ScrollTreeData::kLayerIdToScrollOffsetMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScrollTreeData::ScrollTreeData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.ScrollTreeData)
}

void ScrollTreeData::InitAsDefaultInstance() {
}

ScrollTreeData::ScrollTreeData(const ScrollTreeData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.ScrollTreeData)
}

void ScrollTreeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currently_scrolling_node_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScrollTreeData::~ScrollTreeData() {
  // @@protoc_insertion_point(destructor:cc.proto.ScrollTreeData)
  SharedDtor();
}

void ScrollTreeData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ScrollTreeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScrollTreeData& ScrollTreeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

ScrollTreeData* ScrollTreeData::default_instance_ = NULL;

ScrollTreeData* ScrollTreeData::New(::google::protobuf::Arena* arena) const {
  ScrollTreeData* n = new ScrollTreeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScrollTreeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.ScrollTreeData)
  currently_scrolling_node_id_ = GOOGLE_LONGLONG(0);
  layer_id_to_scroll_offset_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ScrollTreeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForScrollTreeData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.ScrollTreeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 currently_scrolling_node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currently_scrolling_node_id_)));
          set_has_currently_scrolling_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layer_id_to_scroll_offset_map;
        break;
      }

      // repeated .cc.proto.ScrollOffsetMapEntry layer_id_to_scroll_offset_map = 2;
      case 2: {
        if (tag == 18) {
         parse_layer_id_to_scroll_offset_map:
          DO_(input->IncrementRecursionDepth());
         parse_loop_layer_id_to_scroll_offset_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layer_id_to_scroll_offset_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_layer_id_to_scroll_offset_map;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.ScrollTreeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.ScrollTreeData)
  return false;
#undef DO_
}

void ScrollTreeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.ScrollTreeData)
  // optional int64 currently_scrolling_node_id = 1;
  if (has_currently_scrolling_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->currently_scrolling_node_id(), output);
  }

  // repeated .cc.proto.ScrollOffsetMapEntry layer_id_to_scroll_offset_map = 2;
  for (unsigned int i = 0, n = this->layer_id_to_scroll_offset_map_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->layer_id_to_scroll_offset_map(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.ScrollTreeData)
}

int ScrollTreeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.ScrollTreeData)
  int total_size = 0;

  // optional int64 currently_scrolling_node_id = 1;
  if (has_currently_scrolling_node_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->currently_scrolling_node_id());
  }

  // repeated .cc.proto.ScrollOffsetMapEntry layer_id_to_scroll_offset_map = 2;
  total_size += 1 * this->layer_id_to_scroll_offset_map_size();
  for (int i = 0; i < this->layer_id_to_scroll_offset_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layer_id_to_scroll_offset_map(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScrollTreeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScrollTreeData*>(&from));
}

void ScrollTreeData::MergeFrom(const ScrollTreeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.ScrollTreeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  layer_id_to_scroll_offset_map_.MergeFrom(from.layer_id_to_scroll_offset_map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currently_scrolling_node_id()) {
      set_currently_scrolling_node_id(from.currently_scrolling_node_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ScrollTreeData::CopyFrom(const ScrollTreeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.ScrollTreeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScrollTreeData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->layer_id_to_scroll_offset_map())) return false;
  return true;
}

void ScrollTreeData::Swap(ScrollTreeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScrollTreeData::InternalSwap(ScrollTreeData* other) {
  std::swap(currently_scrolling_node_id_, other->currently_scrolling_node_id_);
  layer_id_to_scroll_offset_map_.UnsafeArenaSwap(&other->layer_id_to_scroll_offset_map_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ScrollTreeData::GetTypeName() const {
  return "cc.proto.ScrollTreeData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScrollTreeData

// optional int64 currently_scrolling_node_id = 1;
bool ScrollTreeData::has_currently_scrolling_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScrollTreeData::set_has_currently_scrolling_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ScrollTreeData::clear_has_currently_scrolling_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScrollTreeData::clear_currently_scrolling_node_id() {
  currently_scrolling_node_id_ = GOOGLE_LONGLONG(0);
  clear_has_currently_scrolling_node_id();
}
 ::google::protobuf::int64 ScrollTreeData::currently_scrolling_node_id() const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollTreeData.currently_scrolling_node_id)
  return currently_scrolling_node_id_;
}
 void ScrollTreeData::set_currently_scrolling_node_id(::google::protobuf::int64 value) {
  set_has_currently_scrolling_node_id();
  currently_scrolling_node_id_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.ScrollTreeData.currently_scrolling_node_id)
}

// repeated .cc.proto.ScrollOffsetMapEntry layer_id_to_scroll_offset_map = 2;
int ScrollTreeData::layer_id_to_scroll_offset_map_size() const {
  return layer_id_to_scroll_offset_map_.size();
}
void ScrollTreeData::clear_layer_id_to_scroll_offset_map() {
  layer_id_to_scroll_offset_map_.Clear();
}
const ::cc::proto::ScrollOffsetMapEntry& ScrollTreeData::layer_id_to_scroll_offset_map(int index) const {
  // @@protoc_insertion_point(field_get:cc.proto.ScrollTreeData.layer_id_to_scroll_offset_map)
  return layer_id_to_scroll_offset_map_.Get(index);
}
::cc::proto::ScrollOffsetMapEntry* ScrollTreeData::mutable_layer_id_to_scroll_offset_map(int index) {
  // @@protoc_insertion_point(field_mutable:cc.proto.ScrollTreeData.layer_id_to_scroll_offset_map)
  return layer_id_to_scroll_offset_map_.Mutable(index);
}
::cc::proto::ScrollOffsetMapEntry* ScrollTreeData::add_layer_id_to_scroll_offset_map() {
  // @@protoc_insertion_point(field_add:cc.proto.ScrollTreeData.layer_id_to_scroll_offset_map)
  return layer_id_to_scroll_offset_map_.Add();
}
::google::protobuf::RepeatedPtrField< ::cc::proto::ScrollOffsetMapEntry >*
ScrollTreeData::mutable_layer_id_to_scroll_offset_map() {
  // @@protoc_insertion_point(field_mutable_list:cc.proto.ScrollTreeData.layer_id_to_scroll_offset_map)
  return &layer_id_to_scroll_offset_map_;
}
const ::google::protobuf::RepeatedPtrField< ::cc::proto::ScrollOffsetMapEntry >&
ScrollTreeData::layer_id_to_scroll_offset_map() const {
  // @@protoc_insertion_point(field_list:cc.proto.ScrollTreeData.layer_id_to_scroll_offset_map)
  return layer_id_to_scroll_offset_map_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForTransformTreeData(
    TransformTreeData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformTreeData::kSourceToParentUpdatesAllowedFieldNumber;
const int TransformTreeData::kPageScaleFactorFieldNumber;
const int TransformTreeData::kDeviceScaleFactorFieldNumber;
const int TransformTreeData::kDeviceTransformScaleFactorFieldNumber;
const int TransformTreeData::kNodesAffectedByInnerViewportBoundsDeltaFieldNumber;
const int TransformTreeData::kNodesAffectedByOuterViewportBoundsDeltaFieldNumber;
const int TransformTreeData::kCachedDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformTreeData::TransformTreeData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.TransformTreeData)
}

void TransformTreeData::InitAsDefaultInstance() {
}

TransformTreeData::TransformTreeData(const TransformTreeData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.TransformTreeData)
}

void TransformTreeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_to_parent_updates_allowed_ = false;
  page_scale_factor_ = 0;
  device_scale_factor_ = 0;
  device_transform_scale_factor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformTreeData::~TransformTreeData() {
  // @@protoc_insertion_point(destructor:cc.proto.TransformTreeData)
  SharedDtor();
}

void TransformTreeData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TransformTreeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransformTreeData& TransformTreeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

TransformTreeData* TransformTreeData::default_instance_ = NULL;

TransformTreeData* TransformTreeData::New(::google::protobuf::Arena* arena) const {
  TransformTreeData* n = new TransformTreeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformTreeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.TransformTreeData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TransformTreeData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransformTreeData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(source_to_parent_updates_allowed_, device_transform_scale_factor_);

#undef ZR_HELPER_
#undef ZR_

  nodes_affected_by_inner_viewport_bounds_delta_.Clear();
  nodes_affected_by_outer_viewport_bounds_delta_.Clear();
  cached_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TransformTreeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForTransformTreeData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.TransformTreeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool source_to_parent_updates_allowed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &source_to_parent_updates_allowed_)));
          set_has_source_to_parent_updates_allowed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_page_scale_factor;
        break;
      }

      // optional float page_scale_factor = 2;
      case 2: {
        if (tag == 21) {
         parse_page_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &page_scale_factor_)));
          set_has_page_scale_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_device_scale_factor;
        break;
      }

      // optional float device_scale_factor = 3;
      case 3: {
        if (tag == 29) {
         parse_device_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &device_scale_factor_)));
          set_has_device_scale_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_device_transform_scale_factor;
        break;
      }

      // optional float device_transform_scale_factor = 4;
      case 4: {
        if (tag == 37) {
         parse_device_transform_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &device_transform_scale_factor_)));
          set_has_device_transform_scale_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_nodes_affected_by_inner_viewport_bounds_delta;
        break;
      }

      // repeated int64 nodes_affected_by_inner_viewport_bounds_delta = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_nodes_affected_by_inner_viewport_bounds_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_nodes_affected_by_inner_viewport_bounds_delta())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 58, input, this->mutable_nodes_affected_by_inner_viewport_bounds_delta())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_nodes_affected_by_outer_viewport_bounds_delta;
        break;
      }

      // repeated int64 nodes_affected_by_outer_viewport_bounds_delta = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_nodes_affected_by_outer_viewport_bounds_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_nodes_affected_by_outer_viewport_bounds_delta())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 66, input, this->mutable_nodes_affected_by_outer_viewport_bounds_delta())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cached_data;
        break;
      }

      // repeated .cc.proto.TransformCachedNodeData cached_data = 9;
      case 9: {
        if (tag == 74) {
         parse_cached_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_cached_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cached_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_cached_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.TransformTreeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.TransformTreeData)
  return false;
#undef DO_
}

void TransformTreeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.TransformTreeData)
  // optional bool source_to_parent_updates_allowed = 1;
  if (has_source_to_parent_updates_allowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->source_to_parent_updates_allowed(), output);
  }

  // optional float page_scale_factor = 2;
  if (has_page_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->page_scale_factor(), output);
  }

  // optional float device_scale_factor = 3;
  if (has_device_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->device_scale_factor(), output);
  }

  // optional float device_transform_scale_factor = 4;
  if (has_device_transform_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->device_transform_scale_factor(), output);
  }

  // repeated int64 nodes_affected_by_inner_viewport_bounds_delta = 7 [packed = true];
  if (this->nodes_affected_by_inner_viewport_bounds_delta_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nodes_affected_by_inner_viewport_bounds_delta_cached_byte_size_);
  }
  for (int i = 0; i < this->nodes_affected_by_inner_viewport_bounds_delta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->nodes_affected_by_inner_viewport_bounds_delta(i), output);
  }

  // repeated int64 nodes_affected_by_outer_viewport_bounds_delta = 8 [packed = true];
  if (this->nodes_affected_by_outer_viewport_bounds_delta_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nodes_affected_by_outer_viewport_bounds_delta_cached_byte_size_);
  }
  for (int i = 0; i < this->nodes_affected_by_outer_viewport_bounds_delta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->nodes_affected_by_outer_viewport_bounds_delta(i), output);
  }

  // repeated .cc.proto.TransformCachedNodeData cached_data = 9;
  for (unsigned int i = 0, n = this->cached_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->cached_data(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.TransformTreeData)
}

int TransformTreeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.TransformTreeData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bool source_to_parent_updates_allowed = 1;
    if (has_source_to_parent_updates_allowed()) {
      total_size += 1 + 1;
    }

    // optional float page_scale_factor = 2;
    if (has_page_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional float device_scale_factor = 3;
    if (has_device_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional float device_transform_scale_factor = 4;
    if (has_device_transform_scale_factor()) {
      total_size += 1 + 4;
    }

  }
  // repeated int64 nodes_affected_by_inner_viewport_bounds_delta = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->nodes_affected_by_inner_viewport_bounds_delta_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->nodes_affected_by_inner_viewport_bounds_delta(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nodes_affected_by_inner_viewport_bounds_delta_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 nodes_affected_by_outer_viewport_bounds_delta = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->nodes_affected_by_outer_viewport_bounds_delta_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->nodes_affected_by_outer_viewport_bounds_delta(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nodes_affected_by_outer_viewport_bounds_delta_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .cc.proto.TransformCachedNodeData cached_data = 9;
  total_size += 1 * this->cached_data_size();
  for (int i = 0; i < this->cached_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cached_data(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformTreeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransformTreeData*>(&from));
}

void TransformTreeData::MergeFrom(const TransformTreeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.TransformTreeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  nodes_affected_by_inner_viewport_bounds_delta_.MergeFrom(from.nodes_affected_by_inner_viewport_bounds_delta_);
  nodes_affected_by_outer_viewport_bounds_delta_.MergeFrom(from.nodes_affected_by_outer_viewport_bounds_delta_);
  cached_data_.MergeFrom(from.cached_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_to_parent_updates_allowed()) {
      set_source_to_parent_updates_allowed(from.source_to_parent_updates_allowed());
    }
    if (from.has_page_scale_factor()) {
      set_page_scale_factor(from.page_scale_factor());
    }
    if (from.has_device_scale_factor()) {
      set_device_scale_factor(from.device_scale_factor());
    }
    if (from.has_device_transform_scale_factor()) {
      set_device_transform_scale_factor(from.device_transform_scale_factor());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void TransformTreeData::CopyFrom(const TransformTreeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.TransformTreeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformTreeData::IsInitialized() const {

  return true;
}

void TransformTreeData::Swap(TransformTreeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformTreeData::InternalSwap(TransformTreeData* other) {
  std::swap(source_to_parent_updates_allowed_, other->source_to_parent_updates_allowed_);
  std::swap(page_scale_factor_, other->page_scale_factor_);
  std::swap(device_scale_factor_, other->device_scale_factor_);
  std::swap(device_transform_scale_factor_, other->device_transform_scale_factor_);
  nodes_affected_by_inner_viewport_bounds_delta_.UnsafeArenaSwap(&other->nodes_affected_by_inner_viewport_bounds_delta_);
  nodes_affected_by_outer_viewport_bounds_delta_.UnsafeArenaSwap(&other->nodes_affected_by_outer_viewport_bounds_delta_);
  cached_data_.UnsafeArenaSwap(&other->cached_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TransformTreeData::GetTypeName() const {
  return "cc.proto.TransformTreeData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformTreeData

// optional bool source_to_parent_updates_allowed = 1;
bool TransformTreeData::has_source_to_parent_updates_allowed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransformTreeData::set_has_source_to_parent_updates_allowed() {
  _has_bits_[0] |= 0x00000001u;
}
void TransformTreeData::clear_has_source_to_parent_updates_allowed() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransformTreeData::clear_source_to_parent_updates_allowed() {
  source_to_parent_updates_allowed_ = false;
  clear_has_source_to_parent_updates_allowed();
}
 bool TransformTreeData::source_to_parent_updates_allowed() const {
  // @@protoc_insertion_point(field_get:cc.proto.TransformTreeData.source_to_parent_updates_allowed)
  return source_to_parent_updates_allowed_;
}
 void TransformTreeData::set_source_to_parent_updates_allowed(bool value) {
  set_has_source_to_parent_updates_allowed();
  source_to_parent_updates_allowed_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TransformTreeData.source_to_parent_updates_allowed)
}

// optional float page_scale_factor = 2;
bool TransformTreeData::has_page_scale_factor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransformTreeData::set_has_page_scale_factor() {
  _has_bits_[0] |= 0x00000002u;
}
void TransformTreeData::clear_has_page_scale_factor() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransformTreeData::clear_page_scale_factor() {
  page_scale_factor_ = 0;
  clear_has_page_scale_factor();
}
 float TransformTreeData::page_scale_factor() const {
  // @@protoc_insertion_point(field_get:cc.proto.TransformTreeData.page_scale_factor)
  return page_scale_factor_;
}
 void TransformTreeData::set_page_scale_factor(float value) {
  set_has_page_scale_factor();
  page_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TransformTreeData.page_scale_factor)
}

// optional float device_scale_factor = 3;
bool TransformTreeData::has_device_scale_factor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransformTreeData::set_has_device_scale_factor() {
  _has_bits_[0] |= 0x00000004u;
}
void TransformTreeData::clear_has_device_scale_factor() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransformTreeData::clear_device_scale_factor() {
  device_scale_factor_ = 0;
  clear_has_device_scale_factor();
}
 float TransformTreeData::device_scale_factor() const {
  // @@protoc_insertion_point(field_get:cc.proto.TransformTreeData.device_scale_factor)
  return device_scale_factor_;
}
 void TransformTreeData::set_device_scale_factor(float value) {
  set_has_device_scale_factor();
  device_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TransformTreeData.device_scale_factor)
}

// optional float device_transform_scale_factor = 4;
bool TransformTreeData::has_device_transform_scale_factor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransformTreeData::set_has_device_transform_scale_factor() {
  _has_bits_[0] |= 0x00000008u;
}
void TransformTreeData::clear_has_device_transform_scale_factor() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransformTreeData::clear_device_transform_scale_factor() {
  device_transform_scale_factor_ = 0;
  clear_has_device_transform_scale_factor();
}
 float TransformTreeData::device_transform_scale_factor() const {
  // @@protoc_insertion_point(field_get:cc.proto.TransformTreeData.device_transform_scale_factor)
  return device_transform_scale_factor_;
}
 void TransformTreeData::set_device_transform_scale_factor(float value) {
  set_has_device_transform_scale_factor();
  device_transform_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.TransformTreeData.device_transform_scale_factor)
}

// repeated int64 nodes_affected_by_inner_viewport_bounds_delta = 7 [packed = true];
int TransformTreeData::nodes_affected_by_inner_viewport_bounds_delta_size() const {
  return nodes_affected_by_inner_viewport_bounds_delta_.size();
}
void TransformTreeData::clear_nodes_affected_by_inner_viewport_bounds_delta() {
  nodes_affected_by_inner_viewport_bounds_delta_.Clear();
}
 ::google::protobuf::int64 TransformTreeData::nodes_affected_by_inner_viewport_bounds_delta(int index) const {
  // @@protoc_insertion_point(field_get:cc.proto.TransformTreeData.nodes_affected_by_inner_viewport_bounds_delta)
  return nodes_affected_by_inner_viewport_bounds_delta_.Get(index);
}
 void TransformTreeData::set_nodes_affected_by_inner_viewport_bounds_delta(int index, ::google::protobuf::int64 value) {
  nodes_affected_by_inner_viewport_bounds_delta_.Set(index, value);
  // @@protoc_insertion_point(field_set:cc.proto.TransformTreeData.nodes_affected_by_inner_viewport_bounds_delta)
}
 void TransformTreeData::add_nodes_affected_by_inner_viewport_bounds_delta(::google::protobuf::int64 value) {
  nodes_affected_by_inner_viewport_bounds_delta_.Add(value);
  // @@protoc_insertion_point(field_add:cc.proto.TransformTreeData.nodes_affected_by_inner_viewport_bounds_delta)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TransformTreeData::nodes_affected_by_inner_viewport_bounds_delta() const {
  // @@protoc_insertion_point(field_list:cc.proto.TransformTreeData.nodes_affected_by_inner_viewport_bounds_delta)
  return nodes_affected_by_inner_viewport_bounds_delta_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TransformTreeData::mutable_nodes_affected_by_inner_viewport_bounds_delta() {
  // @@protoc_insertion_point(field_mutable_list:cc.proto.TransformTreeData.nodes_affected_by_inner_viewport_bounds_delta)
  return &nodes_affected_by_inner_viewport_bounds_delta_;
}

// repeated int64 nodes_affected_by_outer_viewport_bounds_delta = 8 [packed = true];
int TransformTreeData::nodes_affected_by_outer_viewport_bounds_delta_size() const {
  return nodes_affected_by_outer_viewport_bounds_delta_.size();
}
void TransformTreeData::clear_nodes_affected_by_outer_viewport_bounds_delta() {
  nodes_affected_by_outer_viewport_bounds_delta_.Clear();
}
 ::google::protobuf::int64 TransformTreeData::nodes_affected_by_outer_viewport_bounds_delta(int index) const {
  // @@protoc_insertion_point(field_get:cc.proto.TransformTreeData.nodes_affected_by_outer_viewport_bounds_delta)
  return nodes_affected_by_outer_viewport_bounds_delta_.Get(index);
}
 void TransformTreeData::set_nodes_affected_by_outer_viewport_bounds_delta(int index, ::google::protobuf::int64 value) {
  nodes_affected_by_outer_viewport_bounds_delta_.Set(index, value);
  // @@protoc_insertion_point(field_set:cc.proto.TransformTreeData.nodes_affected_by_outer_viewport_bounds_delta)
}
 void TransformTreeData::add_nodes_affected_by_outer_viewport_bounds_delta(::google::protobuf::int64 value) {
  nodes_affected_by_outer_viewport_bounds_delta_.Add(value);
  // @@protoc_insertion_point(field_add:cc.proto.TransformTreeData.nodes_affected_by_outer_viewport_bounds_delta)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TransformTreeData::nodes_affected_by_outer_viewport_bounds_delta() const {
  // @@protoc_insertion_point(field_list:cc.proto.TransformTreeData.nodes_affected_by_outer_viewport_bounds_delta)
  return nodes_affected_by_outer_viewport_bounds_delta_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TransformTreeData::mutable_nodes_affected_by_outer_viewport_bounds_delta() {
  // @@protoc_insertion_point(field_mutable_list:cc.proto.TransformTreeData.nodes_affected_by_outer_viewport_bounds_delta)
  return &nodes_affected_by_outer_viewport_bounds_delta_;
}

// repeated .cc.proto.TransformCachedNodeData cached_data = 9;
int TransformTreeData::cached_data_size() const {
  return cached_data_.size();
}
void TransformTreeData::clear_cached_data() {
  cached_data_.Clear();
}
const ::cc::proto::TransformCachedNodeData& TransformTreeData::cached_data(int index) const {
  // @@protoc_insertion_point(field_get:cc.proto.TransformTreeData.cached_data)
  return cached_data_.Get(index);
}
::cc::proto::TransformCachedNodeData* TransformTreeData::mutable_cached_data(int index) {
  // @@protoc_insertion_point(field_mutable:cc.proto.TransformTreeData.cached_data)
  return cached_data_.Mutable(index);
}
::cc::proto::TransformCachedNodeData* TransformTreeData::add_cached_data() {
  // @@protoc_insertion_point(field_add:cc.proto.TransformTreeData.cached_data)
  return cached_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::cc::proto::TransformCachedNodeData >*
TransformTreeData::mutable_cached_data() {
  // @@protoc_insertion_point(field_mutable_list:cc.proto.TransformTreeData.cached_data)
  return &cached_data_;
}
const ::google::protobuf::RepeatedPtrField< ::cc::proto::TransformCachedNodeData >&
TransformTreeData::cached_data() const {
  // @@protoc_insertion_point(field_list:cc.proto.TransformTreeData.cached_data)
  return cached_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForEffectTreeData(
    EffectTreeData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EffectTreeData::kMaskReplicaLayerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EffectTreeData::EffectTreeData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.EffectTreeData)
}

void EffectTreeData::InitAsDefaultInstance() {
}

EffectTreeData::EffectTreeData(const EffectTreeData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.EffectTreeData)
}

void EffectTreeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectTreeData::~EffectTreeData() {
  // @@protoc_insertion_point(destructor:cc.proto.EffectTreeData)
  SharedDtor();
}

void EffectTreeData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EffectTreeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EffectTreeData& EffectTreeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

EffectTreeData* EffectTreeData::default_instance_ = NULL;

EffectTreeData* EffectTreeData::New(::google::protobuf::Arena* arena) const {
  EffectTreeData* n = new EffectTreeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EffectTreeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.EffectTreeData)
  mask_replica_layer_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EffectTreeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForEffectTreeData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.EffectTreeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 mask_replica_layer_ids = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_mask_replica_layer_ids())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_mask_replica_layer_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.EffectTreeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.EffectTreeData)
  return false;
#undef DO_
}

void EffectTreeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.EffectTreeData)
  // repeated int64 mask_replica_layer_ids = 1 [packed = true];
  if (this->mask_replica_layer_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mask_replica_layer_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->mask_replica_layer_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->mask_replica_layer_ids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.EffectTreeData)
}

int EffectTreeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.EffectTreeData)
  int total_size = 0;

  // repeated int64 mask_replica_layer_ids = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->mask_replica_layer_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->mask_replica_layer_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mask_replica_layer_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectTreeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EffectTreeData*>(&from));
}

void EffectTreeData::MergeFrom(const EffectTreeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.EffectTreeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mask_replica_layer_ids_.MergeFrom(from.mask_replica_layer_ids_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void EffectTreeData::CopyFrom(const EffectTreeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.EffectTreeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectTreeData::IsInitialized() const {

  return true;
}

void EffectTreeData::Swap(EffectTreeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EffectTreeData::InternalSwap(EffectTreeData* other) {
  mask_replica_layer_ids_.UnsafeArenaSwap(&other->mask_replica_layer_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EffectTreeData::GetTypeName() const {
  return "cc.proto.EffectTreeData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EffectTreeData

// repeated int64 mask_replica_layer_ids = 1 [packed = true];
int EffectTreeData::mask_replica_layer_ids_size() const {
  return mask_replica_layer_ids_.size();
}
void EffectTreeData::clear_mask_replica_layer_ids() {
  mask_replica_layer_ids_.Clear();
}
 ::google::protobuf::int64 EffectTreeData::mask_replica_layer_ids(int index) const {
  // @@protoc_insertion_point(field_get:cc.proto.EffectTreeData.mask_replica_layer_ids)
  return mask_replica_layer_ids_.Get(index);
}
 void EffectTreeData::set_mask_replica_layer_ids(int index, ::google::protobuf::int64 value) {
  mask_replica_layer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:cc.proto.EffectTreeData.mask_replica_layer_ids)
}
 void EffectTreeData::add_mask_replica_layer_ids(::google::protobuf::int64 value) {
  mask_replica_layer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:cc.proto.EffectTreeData.mask_replica_layer_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
EffectTreeData::mask_replica_layer_ids() const {
  // @@protoc_insertion_point(field_list:cc.proto.EffectTreeData.mask_replica_layer_ids)
  return mask_replica_layer_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
EffectTreeData::mutable_mask_replica_layer_ids() {
  // @@protoc_insertion_point(field_mutable_list:cc.proto.EffectTreeData.mask_replica_layer_ids)
  return &mask_replica_layer_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPropertyTrees(
    PropertyTrees* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyTrees::kTransformTreeFieldNumber;
const int PropertyTrees::kEffectTreeFieldNumber;
const int PropertyTrees::kClipTreeFieldNumber;
const int PropertyTrees::kScrollTreeFieldNumber;
const int PropertyTrees::kNeedsRebuildFieldNumber;
const int PropertyTrees::kNonRootSurfacesEnabledFieldNumber;
const int PropertyTrees::kChangedFieldNumber;
const int PropertyTrees::kFullTreeDamagedFieldNumber;
const int PropertyTrees::kSequenceNumberFieldNumber;
const int PropertyTrees::kIsMainThreadFieldNumber;
const int PropertyTrees::kIsActiveFieldNumber;
const int PropertyTrees::kVerifyTransformTreeCalculationsFieldNumber;
const int PropertyTrees::kInnerViewportContainerBoundsDeltaFieldNumber;
const int PropertyTrees::kOuterViewportContainerBoundsDeltaFieldNumber;
const int PropertyTrees::kInnerViewportScrollBoundsDeltaFieldNumber;
const int PropertyTrees::kAlwaysUseActiveTreeOpacityEffectIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyTrees::PropertyTrees()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.PropertyTrees)
}

void PropertyTrees::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transform_tree_ = const_cast< ::cc::proto::PropertyTree*>(
      ::cc::proto::PropertyTree::internal_default_instance());
#else
  transform_tree_ = const_cast< ::cc::proto::PropertyTree*>(&::cc::proto::PropertyTree::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  effect_tree_ = const_cast< ::cc::proto::PropertyTree*>(
      ::cc::proto::PropertyTree::internal_default_instance());
#else
  effect_tree_ = const_cast< ::cc::proto::PropertyTree*>(&::cc::proto::PropertyTree::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clip_tree_ = const_cast< ::cc::proto::PropertyTree*>(
      ::cc::proto::PropertyTree::internal_default_instance());
#else
  clip_tree_ = const_cast< ::cc::proto::PropertyTree*>(&::cc::proto::PropertyTree::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scroll_tree_ = const_cast< ::cc::proto::PropertyTree*>(
      ::cc::proto::PropertyTree::internal_default_instance());
#else
  scroll_tree_ = const_cast< ::cc::proto::PropertyTree*>(&::cc::proto::PropertyTree::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  inner_viewport_container_bounds_delta_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  inner_viewport_container_bounds_delta_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  outer_viewport_container_bounds_delta_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  outer_viewport_container_bounds_delta_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  inner_viewport_scroll_bounds_delta_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  inner_viewport_scroll_bounds_delta_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
}

PropertyTrees::PropertyTrees(const PropertyTrees& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.PropertyTrees)
}

void PropertyTrees::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_tree_ = NULL;
  effect_tree_ = NULL;
  clip_tree_ = NULL;
  scroll_tree_ = NULL;
  needs_rebuild_ = false;
  non_root_surfaces_enabled_ = false;
  changed_ = false;
  full_tree_damaged_ = false;
  sequence_number_ = GOOGLE_LONGLONG(0);
  is_main_thread_ = false;
  is_active_ = false;
  verify_transform_tree_calculations_ = false;
  inner_viewport_container_bounds_delta_ = NULL;
  outer_viewport_container_bounds_delta_ = NULL;
  inner_viewport_scroll_bounds_delta_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyTrees::~PropertyTrees() {
  // @@protoc_insertion_point(destructor:cc.proto.PropertyTrees)
  SharedDtor();
}

void PropertyTrees::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete transform_tree_;
    delete effect_tree_;
    delete clip_tree_;
    delete scroll_tree_;
    delete inner_viewport_container_bounds_delta_;
    delete outer_viewport_container_bounds_delta_;
    delete inner_viewport_scroll_bounds_delta_;
  }
}

void PropertyTrees::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropertyTrees& PropertyTrees::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

PropertyTrees* PropertyTrees::default_instance_ = NULL;

PropertyTrees* PropertyTrees::New(::google::protobuf::Arena* arena) const {
  PropertyTrees* n = new PropertyTrees;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyTrees::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.PropertyTrees)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PropertyTrees, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PropertyTrees*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(needs_rebuild_, full_tree_damaged_);
    if (has_transform_tree()) {
      if (transform_tree_ != NULL) transform_tree_->::cc::proto::PropertyTree::Clear();
    }
    if (has_effect_tree()) {
      if (effect_tree_ != NULL) effect_tree_->::cc::proto::PropertyTree::Clear();
    }
    if (has_clip_tree()) {
      if (clip_tree_ != NULL) clip_tree_->::cc::proto::PropertyTree::Clear();
    }
    if (has_scroll_tree()) {
      if (scroll_tree_ != NULL) scroll_tree_->::cc::proto::PropertyTree::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ZR_(is_main_thread_, sequence_number_);
    if (has_inner_viewport_container_bounds_delta()) {
      if (inner_viewport_container_bounds_delta_ != NULL) inner_viewport_container_bounds_delta_->::cc::proto::Vector2dF::Clear();
    }
    if (has_outer_viewport_container_bounds_delta()) {
      if (outer_viewport_container_bounds_delta_ != NULL) outer_viewport_container_bounds_delta_->::cc::proto::Vector2dF::Clear();
    }
    if (has_inner_viewport_scroll_bounds_delta()) {
      if (inner_viewport_scroll_bounds_delta_ != NULL) inner_viewport_scroll_bounds_delta_->::cc::proto::Vector2dF::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  always_use_active_tree_opacity_effect_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PropertyTrees::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPropertyTrees, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.PropertyTrees)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.PropertyTree transform_tree = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_tree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_effect_tree;
        break;
      }

      // optional .cc.proto.PropertyTree effect_tree = 2;
      case 2: {
        if (tag == 18) {
         parse_effect_tree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effect_tree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_clip_tree;
        break;
      }

      // optional .cc.proto.PropertyTree clip_tree = 3;
      case 3: {
        if (tag == 26) {
         parse_clip_tree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip_tree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_needs_rebuild;
        break;
      }

      // optional bool needs_rebuild = 4;
      case 4: {
        if (tag == 32) {
         parse_needs_rebuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_rebuild_)));
          set_has_needs_rebuild();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_non_root_surfaces_enabled;
        break;
      }

      // optional bool non_root_surfaces_enabled = 5;
      case 5: {
        if (tag == 40) {
         parse_non_root_surfaces_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &non_root_surfaces_enabled_)));
          set_has_non_root_surfaces_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sequence_number;
        break;
      }

      // optional int64 sequence_number = 6;
      case 6: {
        if (tag == 48) {
         parse_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_scroll_tree;
        break;
      }

      // optional .cc.proto.PropertyTree scroll_tree = 7;
      case 7: {
        if (tag == 58) {
         parse_scroll_tree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_tree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_inner_viewport_container_bounds_delta;
        break;
      }

      // optional .cc.proto.Vector2dF inner_viewport_container_bounds_delta = 8;
      case 8: {
        if (tag == 66) {
         parse_inner_viewport_container_bounds_delta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_viewport_container_bounds_delta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_outer_viewport_container_bounds_delta;
        break;
      }

      // optional .cc.proto.Vector2dF outer_viewport_container_bounds_delta = 9;
      case 9: {
        if (tag == 74) {
         parse_outer_viewport_container_bounds_delta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outer_viewport_container_bounds_delta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_inner_viewport_scroll_bounds_delta;
        break;
      }

      // optional .cc.proto.Vector2dF inner_viewport_scroll_bounds_delta = 10;
      case 10: {
        if (tag == 82) {
         parse_inner_viewport_scroll_bounds_delta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_viewport_scroll_bounds_delta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_changed;
        break;
      }

      // optional bool changed = 11;
      case 11: {
        if (tag == 88) {
         parse_changed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &changed_)));
          set_has_changed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_full_tree_damaged;
        break;
      }

      // optional bool full_tree_damaged = 12;
      case 12: {
        if (tag == 96) {
         parse_full_tree_damaged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &full_tree_damaged_)));
          set_has_full_tree_damaged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_main_thread;
        break;
      }

      // optional bool is_main_thread = 13;
      case 13: {
        if (tag == 104) {
         parse_is_main_thread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_main_thread_)));
          set_has_is_main_thread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_is_active;
        break;
      }

      // optional bool is_active = 14;
      case 14: {
        if (tag == 112) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_always_use_active_tree_opacity_effect_ids;
        break;
      }

      // repeated int64 always_use_active_tree_opacity_effect_ids = 15 [packed = true];
      case 15: {
        if (tag == 122) {
         parse_always_use_active_tree_opacity_effect_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_always_use_active_tree_opacity_effect_ids())));
        } else if (tag == 120) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 122, input, this->mutable_always_use_active_tree_opacity_effect_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_verify_transform_tree_calculations;
        break;
      }

      // optional bool verify_transform_tree_calculations = 16;
      case 16: {
        if (tag == 128) {
         parse_verify_transform_tree_calculations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verify_transform_tree_calculations_)));
          set_has_verify_transform_tree_calculations();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.PropertyTrees)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.PropertyTrees)
  return false;
#undef DO_
}

void PropertyTrees::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.PropertyTrees)
  // optional .cc.proto.PropertyTree transform_tree = 1;
  if (has_transform_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->transform_tree_, output);
  }

  // optional .cc.proto.PropertyTree effect_tree = 2;
  if (has_effect_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->effect_tree_, output);
  }

  // optional .cc.proto.PropertyTree clip_tree = 3;
  if (has_clip_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->clip_tree_, output);
  }

  // optional bool needs_rebuild = 4;
  if (has_needs_rebuild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->needs_rebuild(), output);
  }

  // optional bool non_root_surfaces_enabled = 5;
  if (has_non_root_surfaces_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->non_root_surfaces_enabled(), output);
  }

  // optional int64 sequence_number = 6;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->sequence_number(), output);
  }

  // optional .cc.proto.PropertyTree scroll_tree = 7;
  if (has_scroll_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->scroll_tree_, output);
  }

  // optional .cc.proto.Vector2dF inner_viewport_container_bounds_delta = 8;
  if (has_inner_viewport_container_bounds_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->inner_viewport_container_bounds_delta_, output);
  }

  // optional .cc.proto.Vector2dF outer_viewport_container_bounds_delta = 9;
  if (has_outer_viewport_container_bounds_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->outer_viewport_container_bounds_delta_, output);
  }

  // optional .cc.proto.Vector2dF inner_viewport_scroll_bounds_delta = 10;
  if (has_inner_viewport_scroll_bounds_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->inner_viewport_scroll_bounds_delta_, output);
  }

  // optional bool changed = 11;
  if (has_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->changed(), output);
  }

  // optional bool full_tree_damaged = 12;
  if (has_full_tree_damaged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->full_tree_damaged(), output);
  }

  // optional bool is_main_thread = 13;
  if (has_is_main_thread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_main_thread(), output);
  }

  // optional bool is_active = 14;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_active(), output);
  }

  // repeated int64 always_use_active_tree_opacity_effect_ids = 15 [packed = true];
  if (this->always_use_active_tree_opacity_effect_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_always_use_active_tree_opacity_effect_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->always_use_active_tree_opacity_effect_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->always_use_active_tree_opacity_effect_ids(i), output);
  }

  // optional bool verify_transform_tree_calculations = 16;
  if (has_verify_transform_tree_calculations()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->verify_transform_tree_calculations(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.PropertyTrees)
}

int PropertyTrees::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.PropertyTrees)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .cc.proto.PropertyTree transform_tree = 1;
    if (has_transform_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_tree_);
    }

    // optional .cc.proto.PropertyTree effect_tree = 2;
    if (has_effect_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->effect_tree_);
    }

    // optional .cc.proto.PropertyTree clip_tree = 3;
    if (has_clip_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clip_tree_);
    }

    // optional .cc.proto.PropertyTree scroll_tree = 7;
    if (has_scroll_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scroll_tree_);
    }

    // optional bool needs_rebuild = 4;
    if (has_needs_rebuild()) {
      total_size += 1 + 1;
    }

    // optional bool non_root_surfaces_enabled = 5;
    if (has_non_root_surfaces_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool changed = 11;
    if (has_changed()) {
      total_size += 1 + 1;
    }

    // optional bool full_tree_damaged = 12;
    if (has_full_tree_damaged()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional int64 sequence_number = 6;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence_number());
    }

    // optional bool is_main_thread = 13;
    if (has_is_main_thread()) {
      total_size += 1 + 1;
    }

    // optional bool is_active = 14;
    if (has_is_active()) {
      total_size += 1 + 1;
    }

    // optional bool verify_transform_tree_calculations = 16;
    if (has_verify_transform_tree_calculations()) {
      total_size += 2 + 1;
    }

    // optional .cc.proto.Vector2dF inner_viewport_container_bounds_delta = 8;
    if (has_inner_viewport_container_bounds_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inner_viewport_container_bounds_delta_);
    }

    // optional .cc.proto.Vector2dF outer_viewport_container_bounds_delta = 9;
    if (has_outer_viewport_container_bounds_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->outer_viewport_container_bounds_delta_);
    }

    // optional .cc.proto.Vector2dF inner_viewport_scroll_bounds_delta = 10;
    if (has_inner_viewport_scroll_bounds_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inner_viewport_scroll_bounds_delta_);
    }

  }
  // repeated int64 always_use_active_tree_opacity_effect_ids = 15 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->always_use_active_tree_opacity_effect_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->always_use_active_tree_opacity_effect_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _always_use_active_tree_opacity_effect_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyTrees::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropertyTrees*>(&from));
}

void PropertyTrees::MergeFrom(const PropertyTrees& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.PropertyTrees)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  always_use_active_tree_opacity_effect_ids_.MergeFrom(from.always_use_active_tree_opacity_effect_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transform_tree()) {
      mutable_transform_tree()->::cc::proto::PropertyTree::MergeFrom(from.transform_tree());
    }
    if (from.has_effect_tree()) {
      mutable_effect_tree()->::cc::proto::PropertyTree::MergeFrom(from.effect_tree());
    }
    if (from.has_clip_tree()) {
      mutable_clip_tree()->::cc::proto::PropertyTree::MergeFrom(from.clip_tree());
    }
    if (from.has_scroll_tree()) {
      mutable_scroll_tree()->::cc::proto::PropertyTree::MergeFrom(from.scroll_tree());
    }
    if (from.has_needs_rebuild()) {
      set_needs_rebuild(from.needs_rebuild());
    }
    if (from.has_non_root_surfaces_enabled()) {
      set_non_root_surfaces_enabled(from.non_root_surfaces_enabled());
    }
    if (from.has_changed()) {
      set_changed(from.changed());
    }
    if (from.has_full_tree_damaged()) {
      set_full_tree_damaged(from.full_tree_damaged());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
    if (from.has_is_main_thread()) {
      set_is_main_thread(from.is_main_thread());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
    if (from.has_verify_transform_tree_calculations()) {
      set_verify_transform_tree_calculations(from.verify_transform_tree_calculations());
    }
    if (from.has_inner_viewport_container_bounds_delta()) {
      mutable_inner_viewport_container_bounds_delta()->::cc::proto::Vector2dF::MergeFrom(from.inner_viewport_container_bounds_delta());
    }
    if (from.has_outer_viewport_container_bounds_delta()) {
      mutable_outer_viewport_container_bounds_delta()->::cc::proto::Vector2dF::MergeFrom(from.outer_viewport_container_bounds_delta());
    }
    if (from.has_inner_viewport_scroll_bounds_delta()) {
      mutable_inner_viewport_scroll_bounds_delta()->::cc::proto::Vector2dF::MergeFrom(from.inner_viewport_scroll_bounds_delta());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PropertyTrees::CopyFrom(const PropertyTrees& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.PropertyTrees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyTrees::IsInitialized() const {

  if (has_transform_tree()) {
    if (!this->transform_tree_->IsInitialized()) return false;
  }
  if (has_effect_tree()) {
    if (!this->effect_tree_->IsInitialized()) return false;
  }
  if (has_clip_tree()) {
    if (!this->clip_tree_->IsInitialized()) return false;
  }
  if (has_scroll_tree()) {
    if (!this->scroll_tree_->IsInitialized()) return false;
  }
  return true;
}

void PropertyTrees::Swap(PropertyTrees* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyTrees::InternalSwap(PropertyTrees* other) {
  std::swap(transform_tree_, other->transform_tree_);
  std::swap(effect_tree_, other->effect_tree_);
  std::swap(clip_tree_, other->clip_tree_);
  std::swap(scroll_tree_, other->scroll_tree_);
  std::swap(needs_rebuild_, other->needs_rebuild_);
  std::swap(non_root_surfaces_enabled_, other->non_root_surfaces_enabled_);
  std::swap(changed_, other->changed_);
  std::swap(full_tree_damaged_, other->full_tree_damaged_);
  std::swap(sequence_number_, other->sequence_number_);
  std::swap(is_main_thread_, other->is_main_thread_);
  std::swap(is_active_, other->is_active_);
  std::swap(verify_transform_tree_calculations_, other->verify_transform_tree_calculations_);
  std::swap(inner_viewport_container_bounds_delta_, other->inner_viewport_container_bounds_delta_);
  std::swap(outer_viewport_container_bounds_delta_, other->outer_viewport_container_bounds_delta_);
  std::swap(inner_viewport_scroll_bounds_delta_, other->inner_viewport_scroll_bounds_delta_);
  always_use_active_tree_opacity_effect_ids_.UnsafeArenaSwap(&other->always_use_active_tree_opacity_effect_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PropertyTrees::GetTypeName() const {
  return "cc.proto.PropertyTrees";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyTrees

// optional .cc.proto.PropertyTree transform_tree = 1;
bool PropertyTrees::has_transform_tree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropertyTrees::set_has_transform_tree() {
  _has_bits_[0] |= 0x00000001u;
}
void PropertyTrees::clear_has_transform_tree() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropertyTrees::clear_transform_tree() {
  if (transform_tree_ != NULL) transform_tree_->::cc::proto::PropertyTree::Clear();
  clear_has_transform_tree();
}
const ::cc::proto::PropertyTree& PropertyTrees::transform_tree() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.transform_tree)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return transform_tree_ != NULL ? *transform_tree_ : *default_instance().transform_tree_;
#else
  return transform_tree_ != NULL ? *transform_tree_ : *default_instance_->transform_tree_;
#endif
}
::cc::proto::PropertyTree* PropertyTrees::mutable_transform_tree() {
  set_has_transform_tree();
  if (transform_tree_ == NULL) {
    transform_tree_ = new ::cc::proto::PropertyTree;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.PropertyTrees.transform_tree)
  return transform_tree_;
}
::cc::proto::PropertyTree* PropertyTrees::release_transform_tree() {
  // @@protoc_insertion_point(field_release:cc.proto.PropertyTrees.transform_tree)
  clear_has_transform_tree();
  ::cc::proto::PropertyTree* temp = transform_tree_;
  transform_tree_ = NULL;
  return temp;
}
void PropertyTrees::set_allocated_transform_tree(::cc::proto::PropertyTree* transform_tree) {
  delete transform_tree_;
  transform_tree_ = transform_tree;
  if (transform_tree) {
    set_has_transform_tree();
  } else {
    clear_has_transform_tree();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.PropertyTrees.transform_tree)
}

// optional .cc.proto.PropertyTree effect_tree = 2;
bool PropertyTrees::has_effect_tree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PropertyTrees::set_has_effect_tree() {
  _has_bits_[0] |= 0x00000002u;
}
void PropertyTrees::clear_has_effect_tree() {
  _has_bits_[0] &= ~0x00000002u;
}
void PropertyTrees::clear_effect_tree() {
  if (effect_tree_ != NULL) effect_tree_->::cc::proto::PropertyTree::Clear();
  clear_has_effect_tree();
}
const ::cc::proto::PropertyTree& PropertyTrees::effect_tree() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.effect_tree)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return effect_tree_ != NULL ? *effect_tree_ : *default_instance().effect_tree_;
#else
  return effect_tree_ != NULL ? *effect_tree_ : *default_instance_->effect_tree_;
#endif
}
::cc::proto::PropertyTree* PropertyTrees::mutable_effect_tree() {
  set_has_effect_tree();
  if (effect_tree_ == NULL) {
    effect_tree_ = new ::cc::proto::PropertyTree;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.PropertyTrees.effect_tree)
  return effect_tree_;
}
::cc::proto::PropertyTree* PropertyTrees::release_effect_tree() {
  // @@protoc_insertion_point(field_release:cc.proto.PropertyTrees.effect_tree)
  clear_has_effect_tree();
  ::cc::proto::PropertyTree* temp = effect_tree_;
  effect_tree_ = NULL;
  return temp;
}
void PropertyTrees::set_allocated_effect_tree(::cc::proto::PropertyTree* effect_tree) {
  delete effect_tree_;
  effect_tree_ = effect_tree;
  if (effect_tree) {
    set_has_effect_tree();
  } else {
    clear_has_effect_tree();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.PropertyTrees.effect_tree)
}

// optional .cc.proto.PropertyTree clip_tree = 3;
bool PropertyTrees::has_clip_tree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PropertyTrees::set_has_clip_tree() {
  _has_bits_[0] |= 0x00000004u;
}
void PropertyTrees::clear_has_clip_tree() {
  _has_bits_[0] &= ~0x00000004u;
}
void PropertyTrees::clear_clip_tree() {
  if (clip_tree_ != NULL) clip_tree_->::cc::proto::PropertyTree::Clear();
  clear_has_clip_tree();
}
const ::cc::proto::PropertyTree& PropertyTrees::clip_tree() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.clip_tree)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return clip_tree_ != NULL ? *clip_tree_ : *default_instance().clip_tree_;
#else
  return clip_tree_ != NULL ? *clip_tree_ : *default_instance_->clip_tree_;
#endif
}
::cc::proto::PropertyTree* PropertyTrees::mutable_clip_tree() {
  set_has_clip_tree();
  if (clip_tree_ == NULL) {
    clip_tree_ = new ::cc::proto::PropertyTree;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.PropertyTrees.clip_tree)
  return clip_tree_;
}
::cc::proto::PropertyTree* PropertyTrees::release_clip_tree() {
  // @@protoc_insertion_point(field_release:cc.proto.PropertyTrees.clip_tree)
  clear_has_clip_tree();
  ::cc::proto::PropertyTree* temp = clip_tree_;
  clip_tree_ = NULL;
  return temp;
}
void PropertyTrees::set_allocated_clip_tree(::cc::proto::PropertyTree* clip_tree) {
  delete clip_tree_;
  clip_tree_ = clip_tree;
  if (clip_tree) {
    set_has_clip_tree();
  } else {
    clear_has_clip_tree();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.PropertyTrees.clip_tree)
}

// optional .cc.proto.PropertyTree scroll_tree = 7;
bool PropertyTrees::has_scroll_tree() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PropertyTrees::set_has_scroll_tree() {
  _has_bits_[0] |= 0x00000008u;
}
void PropertyTrees::clear_has_scroll_tree() {
  _has_bits_[0] &= ~0x00000008u;
}
void PropertyTrees::clear_scroll_tree() {
  if (scroll_tree_ != NULL) scroll_tree_->::cc::proto::PropertyTree::Clear();
  clear_has_scroll_tree();
}
const ::cc::proto::PropertyTree& PropertyTrees::scroll_tree() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.scroll_tree)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return scroll_tree_ != NULL ? *scroll_tree_ : *default_instance().scroll_tree_;
#else
  return scroll_tree_ != NULL ? *scroll_tree_ : *default_instance_->scroll_tree_;
#endif
}
::cc::proto::PropertyTree* PropertyTrees::mutable_scroll_tree() {
  set_has_scroll_tree();
  if (scroll_tree_ == NULL) {
    scroll_tree_ = new ::cc::proto::PropertyTree;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.PropertyTrees.scroll_tree)
  return scroll_tree_;
}
::cc::proto::PropertyTree* PropertyTrees::release_scroll_tree() {
  // @@protoc_insertion_point(field_release:cc.proto.PropertyTrees.scroll_tree)
  clear_has_scroll_tree();
  ::cc::proto::PropertyTree* temp = scroll_tree_;
  scroll_tree_ = NULL;
  return temp;
}
void PropertyTrees::set_allocated_scroll_tree(::cc::proto::PropertyTree* scroll_tree) {
  delete scroll_tree_;
  scroll_tree_ = scroll_tree;
  if (scroll_tree) {
    set_has_scroll_tree();
  } else {
    clear_has_scroll_tree();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.PropertyTrees.scroll_tree)
}

// optional bool needs_rebuild = 4;
bool PropertyTrees::has_needs_rebuild() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PropertyTrees::set_has_needs_rebuild() {
  _has_bits_[0] |= 0x00000010u;
}
void PropertyTrees::clear_has_needs_rebuild() {
  _has_bits_[0] &= ~0x00000010u;
}
void PropertyTrees::clear_needs_rebuild() {
  needs_rebuild_ = false;
  clear_has_needs_rebuild();
}
 bool PropertyTrees::needs_rebuild() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.needs_rebuild)
  return needs_rebuild_;
}
 void PropertyTrees::set_needs_rebuild(bool value) {
  set_has_needs_rebuild();
  needs_rebuild_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.PropertyTrees.needs_rebuild)
}

// optional bool non_root_surfaces_enabled = 5;
bool PropertyTrees::has_non_root_surfaces_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PropertyTrees::set_has_non_root_surfaces_enabled() {
  _has_bits_[0] |= 0x00000020u;
}
void PropertyTrees::clear_has_non_root_surfaces_enabled() {
  _has_bits_[0] &= ~0x00000020u;
}
void PropertyTrees::clear_non_root_surfaces_enabled() {
  non_root_surfaces_enabled_ = false;
  clear_has_non_root_surfaces_enabled();
}
 bool PropertyTrees::non_root_surfaces_enabled() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.non_root_surfaces_enabled)
  return non_root_surfaces_enabled_;
}
 void PropertyTrees::set_non_root_surfaces_enabled(bool value) {
  set_has_non_root_surfaces_enabled();
  non_root_surfaces_enabled_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.PropertyTrees.non_root_surfaces_enabled)
}

// optional bool changed = 11;
bool PropertyTrees::has_changed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PropertyTrees::set_has_changed() {
  _has_bits_[0] |= 0x00000040u;
}
void PropertyTrees::clear_has_changed() {
  _has_bits_[0] &= ~0x00000040u;
}
void PropertyTrees::clear_changed() {
  changed_ = false;
  clear_has_changed();
}
 bool PropertyTrees::changed() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.changed)
  return changed_;
}
 void PropertyTrees::set_changed(bool value) {
  set_has_changed();
  changed_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.PropertyTrees.changed)
}

// optional bool full_tree_damaged = 12;
bool PropertyTrees::has_full_tree_damaged() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PropertyTrees::set_has_full_tree_damaged() {
  _has_bits_[0] |= 0x00000080u;
}
void PropertyTrees::clear_has_full_tree_damaged() {
  _has_bits_[0] &= ~0x00000080u;
}
void PropertyTrees::clear_full_tree_damaged() {
  full_tree_damaged_ = false;
  clear_has_full_tree_damaged();
}
 bool PropertyTrees::full_tree_damaged() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.full_tree_damaged)
  return full_tree_damaged_;
}
 void PropertyTrees::set_full_tree_damaged(bool value) {
  set_has_full_tree_damaged();
  full_tree_damaged_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.PropertyTrees.full_tree_damaged)
}

// optional int64 sequence_number = 6;
bool PropertyTrees::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PropertyTrees::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000100u;
}
void PropertyTrees::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000100u;
}
void PropertyTrees::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_number();
}
 ::google::protobuf::int64 PropertyTrees::sequence_number() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.sequence_number)
  return sequence_number_;
}
 void PropertyTrees::set_sequence_number(::google::protobuf::int64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.PropertyTrees.sequence_number)
}

// optional bool is_main_thread = 13;
bool PropertyTrees::has_is_main_thread() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PropertyTrees::set_has_is_main_thread() {
  _has_bits_[0] |= 0x00000200u;
}
void PropertyTrees::clear_has_is_main_thread() {
  _has_bits_[0] &= ~0x00000200u;
}
void PropertyTrees::clear_is_main_thread() {
  is_main_thread_ = false;
  clear_has_is_main_thread();
}
 bool PropertyTrees::is_main_thread() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.is_main_thread)
  return is_main_thread_;
}
 void PropertyTrees::set_is_main_thread(bool value) {
  set_has_is_main_thread();
  is_main_thread_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.PropertyTrees.is_main_thread)
}

// optional bool is_active = 14;
bool PropertyTrees::has_is_active() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PropertyTrees::set_has_is_active() {
  _has_bits_[0] |= 0x00000400u;
}
void PropertyTrees::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000400u;
}
void PropertyTrees::clear_is_active() {
  is_active_ = false;
  clear_has_is_active();
}
 bool PropertyTrees::is_active() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.is_active)
  return is_active_;
}
 void PropertyTrees::set_is_active(bool value) {
  set_has_is_active();
  is_active_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.PropertyTrees.is_active)
}

// optional bool verify_transform_tree_calculations = 16;
bool PropertyTrees::has_verify_transform_tree_calculations() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PropertyTrees::set_has_verify_transform_tree_calculations() {
  _has_bits_[0] |= 0x00000800u;
}
void PropertyTrees::clear_has_verify_transform_tree_calculations() {
  _has_bits_[0] &= ~0x00000800u;
}
void PropertyTrees::clear_verify_transform_tree_calculations() {
  verify_transform_tree_calculations_ = false;
  clear_has_verify_transform_tree_calculations();
}
 bool PropertyTrees::verify_transform_tree_calculations() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.verify_transform_tree_calculations)
  return verify_transform_tree_calculations_;
}
 void PropertyTrees::set_verify_transform_tree_calculations(bool value) {
  set_has_verify_transform_tree_calculations();
  verify_transform_tree_calculations_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.PropertyTrees.verify_transform_tree_calculations)
}

// optional .cc.proto.Vector2dF inner_viewport_container_bounds_delta = 8;
bool PropertyTrees::has_inner_viewport_container_bounds_delta() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PropertyTrees::set_has_inner_viewport_container_bounds_delta() {
  _has_bits_[0] |= 0x00001000u;
}
void PropertyTrees::clear_has_inner_viewport_container_bounds_delta() {
  _has_bits_[0] &= ~0x00001000u;
}
void PropertyTrees::clear_inner_viewport_container_bounds_delta() {
  if (inner_viewport_container_bounds_delta_ != NULL) inner_viewport_container_bounds_delta_->::cc::proto::Vector2dF::Clear();
  clear_has_inner_viewport_container_bounds_delta();
}
const ::cc::proto::Vector2dF& PropertyTrees::inner_viewport_container_bounds_delta() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.inner_viewport_container_bounds_delta)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return inner_viewport_container_bounds_delta_ != NULL ? *inner_viewport_container_bounds_delta_ : *default_instance().inner_viewport_container_bounds_delta_;
#else
  return inner_viewport_container_bounds_delta_ != NULL ? *inner_viewport_container_bounds_delta_ : *default_instance_->inner_viewport_container_bounds_delta_;
#endif
}
::cc::proto::Vector2dF* PropertyTrees::mutable_inner_viewport_container_bounds_delta() {
  set_has_inner_viewport_container_bounds_delta();
  if (inner_viewport_container_bounds_delta_ == NULL) {
    inner_viewport_container_bounds_delta_ = new ::cc::proto::Vector2dF;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.PropertyTrees.inner_viewport_container_bounds_delta)
  return inner_viewport_container_bounds_delta_;
}
::cc::proto::Vector2dF* PropertyTrees::release_inner_viewport_container_bounds_delta() {
  // @@protoc_insertion_point(field_release:cc.proto.PropertyTrees.inner_viewport_container_bounds_delta)
  clear_has_inner_viewport_container_bounds_delta();
  ::cc::proto::Vector2dF* temp = inner_viewport_container_bounds_delta_;
  inner_viewport_container_bounds_delta_ = NULL;
  return temp;
}
void PropertyTrees::set_allocated_inner_viewport_container_bounds_delta(::cc::proto::Vector2dF* inner_viewport_container_bounds_delta) {
  delete inner_viewport_container_bounds_delta_;
  inner_viewport_container_bounds_delta_ = inner_viewport_container_bounds_delta;
  if (inner_viewport_container_bounds_delta) {
    set_has_inner_viewport_container_bounds_delta();
  } else {
    clear_has_inner_viewport_container_bounds_delta();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.PropertyTrees.inner_viewport_container_bounds_delta)
}

// optional .cc.proto.Vector2dF outer_viewport_container_bounds_delta = 9;
bool PropertyTrees::has_outer_viewport_container_bounds_delta() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PropertyTrees::set_has_outer_viewport_container_bounds_delta() {
  _has_bits_[0] |= 0x00002000u;
}
void PropertyTrees::clear_has_outer_viewport_container_bounds_delta() {
  _has_bits_[0] &= ~0x00002000u;
}
void PropertyTrees::clear_outer_viewport_container_bounds_delta() {
  if (outer_viewport_container_bounds_delta_ != NULL) outer_viewport_container_bounds_delta_->::cc::proto::Vector2dF::Clear();
  clear_has_outer_viewport_container_bounds_delta();
}
const ::cc::proto::Vector2dF& PropertyTrees::outer_viewport_container_bounds_delta() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.outer_viewport_container_bounds_delta)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return outer_viewport_container_bounds_delta_ != NULL ? *outer_viewport_container_bounds_delta_ : *default_instance().outer_viewport_container_bounds_delta_;
#else
  return outer_viewport_container_bounds_delta_ != NULL ? *outer_viewport_container_bounds_delta_ : *default_instance_->outer_viewport_container_bounds_delta_;
#endif
}
::cc::proto::Vector2dF* PropertyTrees::mutable_outer_viewport_container_bounds_delta() {
  set_has_outer_viewport_container_bounds_delta();
  if (outer_viewport_container_bounds_delta_ == NULL) {
    outer_viewport_container_bounds_delta_ = new ::cc::proto::Vector2dF;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.PropertyTrees.outer_viewport_container_bounds_delta)
  return outer_viewport_container_bounds_delta_;
}
::cc::proto::Vector2dF* PropertyTrees::release_outer_viewport_container_bounds_delta() {
  // @@protoc_insertion_point(field_release:cc.proto.PropertyTrees.outer_viewport_container_bounds_delta)
  clear_has_outer_viewport_container_bounds_delta();
  ::cc::proto::Vector2dF* temp = outer_viewport_container_bounds_delta_;
  outer_viewport_container_bounds_delta_ = NULL;
  return temp;
}
void PropertyTrees::set_allocated_outer_viewport_container_bounds_delta(::cc::proto::Vector2dF* outer_viewport_container_bounds_delta) {
  delete outer_viewport_container_bounds_delta_;
  outer_viewport_container_bounds_delta_ = outer_viewport_container_bounds_delta;
  if (outer_viewport_container_bounds_delta) {
    set_has_outer_viewport_container_bounds_delta();
  } else {
    clear_has_outer_viewport_container_bounds_delta();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.PropertyTrees.outer_viewport_container_bounds_delta)
}

// optional .cc.proto.Vector2dF inner_viewport_scroll_bounds_delta = 10;
bool PropertyTrees::has_inner_viewport_scroll_bounds_delta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PropertyTrees::set_has_inner_viewport_scroll_bounds_delta() {
  _has_bits_[0] |= 0x00004000u;
}
void PropertyTrees::clear_has_inner_viewport_scroll_bounds_delta() {
  _has_bits_[0] &= ~0x00004000u;
}
void PropertyTrees::clear_inner_viewport_scroll_bounds_delta() {
  if (inner_viewport_scroll_bounds_delta_ != NULL) inner_viewport_scroll_bounds_delta_->::cc::proto::Vector2dF::Clear();
  clear_has_inner_viewport_scroll_bounds_delta();
}
const ::cc::proto::Vector2dF& PropertyTrees::inner_viewport_scroll_bounds_delta() const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.inner_viewport_scroll_bounds_delta)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return inner_viewport_scroll_bounds_delta_ != NULL ? *inner_viewport_scroll_bounds_delta_ : *default_instance().inner_viewport_scroll_bounds_delta_;
#else
  return inner_viewport_scroll_bounds_delta_ != NULL ? *inner_viewport_scroll_bounds_delta_ : *default_instance_->inner_viewport_scroll_bounds_delta_;
#endif
}
::cc::proto::Vector2dF* PropertyTrees::mutable_inner_viewport_scroll_bounds_delta() {
  set_has_inner_viewport_scroll_bounds_delta();
  if (inner_viewport_scroll_bounds_delta_ == NULL) {
    inner_viewport_scroll_bounds_delta_ = new ::cc::proto::Vector2dF;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.PropertyTrees.inner_viewport_scroll_bounds_delta)
  return inner_viewport_scroll_bounds_delta_;
}
::cc::proto::Vector2dF* PropertyTrees::release_inner_viewport_scroll_bounds_delta() {
  // @@protoc_insertion_point(field_release:cc.proto.PropertyTrees.inner_viewport_scroll_bounds_delta)
  clear_has_inner_viewport_scroll_bounds_delta();
  ::cc::proto::Vector2dF* temp = inner_viewport_scroll_bounds_delta_;
  inner_viewport_scroll_bounds_delta_ = NULL;
  return temp;
}
void PropertyTrees::set_allocated_inner_viewport_scroll_bounds_delta(::cc::proto::Vector2dF* inner_viewport_scroll_bounds_delta) {
  delete inner_viewport_scroll_bounds_delta_;
  inner_viewport_scroll_bounds_delta_ = inner_viewport_scroll_bounds_delta;
  if (inner_viewport_scroll_bounds_delta) {
    set_has_inner_viewport_scroll_bounds_delta();
  } else {
    clear_has_inner_viewport_scroll_bounds_delta();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.PropertyTrees.inner_viewport_scroll_bounds_delta)
}

// repeated int64 always_use_active_tree_opacity_effect_ids = 15 [packed = true];
int PropertyTrees::always_use_active_tree_opacity_effect_ids_size() const {
  return always_use_active_tree_opacity_effect_ids_.size();
}
void PropertyTrees::clear_always_use_active_tree_opacity_effect_ids() {
  always_use_active_tree_opacity_effect_ids_.Clear();
}
 ::google::protobuf::int64 PropertyTrees::always_use_active_tree_opacity_effect_ids(int index) const {
  // @@protoc_insertion_point(field_get:cc.proto.PropertyTrees.always_use_active_tree_opacity_effect_ids)
  return always_use_active_tree_opacity_effect_ids_.Get(index);
}
 void PropertyTrees::set_always_use_active_tree_opacity_effect_ids(int index, ::google::protobuf::int64 value) {
  always_use_active_tree_opacity_effect_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:cc.proto.PropertyTrees.always_use_active_tree_opacity_effect_ids)
}
 void PropertyTrees::add_always_use_active_tree_opacity_effect_ids(::google::protobuf::int64 value) {
  always_use_active_tree_opacity_effect_ids_.Add(value);
  // @@protoc_insertion_point(field_add:cc.proto.PropertyTrees.always_use_active_tree_opacity_effect_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PropertyTrees::always_use_active_tree_opacity_effect_ids() const {
  // @@protoc_insertion_point(field_list:cc.proto.PropertyTrees.always_use_active_tree_opacity_effect_ids)
  return always_use_active_tree_opacity_effect_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PropertyTrees::mutable_always_use_active_tree_opacity_effect_ids() {
  // @@protoc_insertion_point(field_mutable_list:cc.proto.PropertyTrees.always_use_active_tree_opacity_effect_ids)
  return &always_use_active_tree_opacity_effect_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
