// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compositor_message_to_main.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "compositor_message_to_main.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_compositor_5fmessage_5fto_5fmain_2eproto() {
  delete CompositorMessageToMain::default_instance_;
  delete BeginMainFrame::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_begin_5fmain_5fframe_5fand_5fcommit_5fstate_2eproto();
  CompositorMessageToMain::default_instance_ = new CompositorMessageToMain();
  BeginMainFrame::default_instance_ = new BeginMainFrame();
  CompositorMessageToMain::default_instance_->InitAsDefaultInstance();
  BeginMainFrame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_compositor_5fmessage_5fto_5fmain_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto_once_);
void protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto_once_,
                 &protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_compositor_5fmessage_5fto_5fmain_2eproto {
  StaticDescriptorInitializer_compositor_5fmessage_5fto_5fmain_2eproto() {
    protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto();
  }
} static_descriptor_initializer_compositor_5fmessage_5fto_5fmain_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForCompositorMessageToMain(
    CompositorMessageToMain* ptr) {
  return ptr->mutable_unknown_fields();
}

bool CompositorMessageToMain_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CompositorMessageToMain_Type CompositorMessageToMain::UNKNOWN;
const CompositorMessageToMain_Type CompositorMessageToMain::BEGIN_MAIN_FRAME;
const CompositorMessageToMain_Type CompositorMessageToMain::Type_MIN;
const CompositorMessageToMain_Type CompositorMessageToMain::Type_MAX;
const int CompositorMessageToMain::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompositorMessageToMain::kMessageTypeFieldNumber;
const int CompositorMessageToMain::kBeginMainFrameMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompositorMessageToMain::CompositorMessageToMain()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.CompositorMessageToMain)
}

void CompositorMessageToMain::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  begin_main_frame_message_ = const_cast< ::cc::proto::BeginMainFrame*>(
      ::cc::proto::BeginMainFrame::internal_default_instance());
#else
  begin_main_frame_message_ = const_cast< ::cc::proto::BeginMainFrame*>(&::cc::proto::BeginMainFrame::default_instance());
#endif
}

CompositorMessageToMain::CompositorMessageToMain(const CompositorMessageToMain& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.CompositorMessageToMain)
}

void CompositorMessageToMain::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_ = 0;
  begin_main_frame_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompositorMessageToMain::~CompositorMessageToMain() {
  // @@protoc_insertion_point(destructor:cc.proto.CompositorMessageToMain)
  SharedDtor();
}

void CompositorMessageToMain::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete begin_main_frame_message_;
  }
}

void CompositorMessageToMain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CompositorMessageToMain& CompositorMessageToMain::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto();
#endif
  return *default_instance_;
}

CompositorMessageToMain* CompositorMessageToMain::default_instance_ = NULL;

CompositorMessageToMain* CompositorMessageToMain::New(::google::protobuf::Arena* arena) const {
  CompositorMessageToMain* n = new CompositorMessageToMain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompositorMessageToMain::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.CompositorMessageToMain)
  if (_has_bits_[0 / 32] & 3u) {
    message_type_ = 0;
    if (has_begin_main_frame_message()) {
      if (begin_main_frame_message_ != NULL) begin_main_frame_message_->::cc::proto::BeginMainFrame::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CompositorMessageToMain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCompositorMessageToMain, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.CompositorMessageToMain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.CompositorMessageToMain.Type message_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::CompositorMessageToMain_Type_IsValid(value)) {
            set_message_type(static_cast< ::cc::proto::CompositorMessageToMain_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_begin_main_frame_message;
        break;
      }

      // optional .cc.proto.BeginMainFrame begin_main_frame_message = 2;
      case 2: {
        if (tag == 18) {
         parse_begin_main_frame_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin_main_frame_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.CompositorMessageToMain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.CompositorMessageToMain)
  return false;
#undef DO_
}

void CompositorMessageToMain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.CompositorMessageToMain)
  // optional .cc.proto.CompositorMessageToMain.Type message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }

  // optional .cc.proto.BeginMainFrame begin_main_frame_message = 2;
  if (has_begin_main_frame_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->begin_main_frame_message_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.CompositorMessageToMain)
}

int CompositorMessageToMain::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.CompositorMessageToMain)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .cc.proto.CompositorMessageToMain.Type message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
    }

    // optional .cc.proto.BeginMainFrame begin_main_frame_message = 2;
    if (has_begin_main_frame_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->begin_main_frame_message_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompositorMessageToMain::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CompositorMessageToMain*>(&from));
}

void CompositorMessageToMain::MergeFrom(const CompositorMessageToMain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.CompositorMessageToMain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_begin_main_frame_message()) {
      mutable_begin_main_frame_message()->::cc::proto::BeginMainFrame::MergeFrom(from.begin_main_frame_message());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CompositorMessageToMain::CopyFrom(const CompositorMessageToMain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.CompositorMessageToMain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositorMessageToMain::IsInitialized() const {

  return true;
}

void CompositorMessageToMain::Swap(CompositorMessageToMain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompositorMessageToMain::InternalSwap(CompositorMessageToMain* other) {
  std::swap(message_type_, other->message_type_);
  std::swap(begin_main_frame_message_, other->begin_main_frame_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CompositorMessageToMain::GetTypeName() const {
  return "cc.proto.CompositorMessageToMain";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompositorMessageToMain

// optional .cc.proto.CompositorMessageToMain.Type message_type = 1;
bool CompositorMessageToMain::has_message_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CompositorMessageToMain::set_has_message_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CompositorMessageToMain::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CompositorMessageToMain::clear_message_type() {
  message_type_ = 0;
  clear_has_message_type();
}
 ::cc::proto::CompositorMessageToMain_Type CompositorMessageToMain::message_type() const {
  // @@protoc_insertion_point(field_get:cc.proto.CompositorMessageToMain.message_type)
  return static_cast< ::cc::proto::CompositorMessageToMain_Type >(message_type_);
}
 void CompositorMessageToMain::set_message_type(::cc::proto::CompositorMessageToMain_Type value) {
  assert(::cc::proto::CompositorMessageToMain_Type_IsValid(value));
  set_has_message_type();
  message_type_ = value;
  // @@protoc_insertion_point(field_set:cc.proto.CompositorMessageToMain.message_type)
}

// optional .cc.proto.BeginMainFrame begin_main_frame_message = 2;
bool CompositorMessageToMain::has_begin_main_frame_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CompositorMessageToMain::set_has_begin_main_frame_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CompositorMessageToMain::clear_has_begin_main_frame_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CompositorMessageToMain::clear_begin_main_frame_message() {
  if (begin_main_frame_message_ != NULL) begin_main_frame_message_->::cc::proto::BeginMainFrame::Clear();
  clear_has_begin_main_frame_message();
}
const ::cc::proto::BeginMainFrame& CompositorMessageToMain::begin_main_frame_message() const {
  // @@protoc_insertion_point(field_get:cc.proto.CompositorMessageToMain.begin_main_frame_message)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return begin_main_frame_message_ != NULL ? *begin_main_frame_message_ : *default_instance().begin_main_frame_message_;
#else
  return begin_main_frame_message_ != NULL ? *begin_main_frame_message_ : *default_instance_->begin_main_frame_message_;
#endif
}
::cc::proto::BeginMainFrame* CompositorMessageToMain::mutable_begin_main_frame_message() {
  set_has_begin_main_frame_message();
  if (begin_main_frame_message_ == NULL) {
    begin_main_frame_message_ = new ::cc::proto::BeginMainFrame;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.CompositorMessageToMain.begin_main_frame_message)
  return begin_main_frame_message_;
}
::cc::proto::BeginMainFrame* CompositorMessageToMain::release_begin_main_frame_message() {
  // @@protoc_insertion_point(field_release:cc.proto.CompositorMessageToMain.begin_main_frame_message)
  clear_has_begin_main_frame_message();
  ::cc::proto::BeginMainFrame* temp = begin_main_frame_message_;
  begin_main_frame_message_ = NULL;
  return temp;
}
void CompositorMessageToMain::set_allocated_begin_main_frame_message(::cc::proto::BeginMainFrame* begin_main_frame_message) {
  delete begin_main_frame_message_;
  begin_main_frame_message_ = begin_main_frame_message;
  if (begin_main_frame_message) {
    set_has_begin_main_frame_message();
  } else {
    clear_has_begin_main_frame_message();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.CompositorMessageToMain.begin_main_frame_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForBeginMainFrame(
    BeginMainFrame* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginMainFrame::kBeginMainFrameStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginMainFrame::BeginMainFrame()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cc.proto.BeginMainFrame)
}

void BeginMainFrame::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  begin_main_frame_state_ = const_cast< ::cc::proto::BeginMainFrameAndCommitState*>(
      ::cc::proto::BeginMainFrameAndCommitState::internal_default_instance());
#else
  begin_main_frame_state_ = const_cast< ::cc::proto::BeginMainFrameAndCommitState*>(&::cc::proto::BeginMainFrameAndCommitState::default_instance());
#endif
}

BeginMainFrame::BeginMainFrame(const BeginMainFrame& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cc.proto.BeginMainFrame)
}

void BeginMainFrame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begin_main_frame_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginMainFrame::~BeginMainFrame() {
  // @@protoc_insertion_point(destructor:cc.proto.BeginMainFrame)
  SharedDtor();
}

void BeginMainFrame::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete begin_main_frame_state_;
  }
}

void BeginMainFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BeginMainFrame& BeginMainFrame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto();
#endif
  return *default_instance_;
}

BeginMainFrame* BeginMainFrame::default_instance_ = NULL;

BeginMainFrame* BeginMainFrame::New(::google::protobuf::Arena* arena) const {
  BeginMainFrame* n = new BeginMainFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginMainFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:cc.proto.BeginMainFrame)
  if (has_begin_main_frame_state()) {
    if (begin_main_frame_state_ != NULL) begin_main_frame_state_->::cc::proto::BeginMainFrameAndCommitState::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BeginMainFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForBeginMainFrame, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cc.proto.BeginMainFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.BeginMainFrameAndCommitState begin_main_frame_state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin_main_frame_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cc.proto.BeginMainFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cc.proto.BeginMainFrame)
  return false;
#undef DO_
}

void BeginMainFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cc.proto.BeginMainFrame)
  // optional .cc.proto.BeginMainFrameAndCommitState begin_main_frame_state = 1;
  if (has_begin_main_frame_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->begin_main_frame_state_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cc.proto.BeginMainFrame)
}

int BeginMainFrame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cc.proto.BeginMainFrame)
  int total_size = 0;

  // optional .cc.proto.BeginMainFrameAndCommitState begin_main_frame_state = 1;
  if (has_begin_main_frame_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->begin_main_frame_state_);
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginMainFrame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BeginMainFrame*>(&from));
}

void BeginMainFrame::MergeFrom(const BeginMainFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.BeginMainFrame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin_main_frame_state()) {
      mutable_begin_main_frame_state()->::cc::proto::BeginMainFrameAndCommitState::MergeFrom(from.begin_main_frame_state());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void BeginMainFrame::CopyFrom(const BeginMainFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.BeginMainFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginMainFrame::IsInitialized() const {

  return true;
}

void BeginMainFrame::Swap(BeginMainFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginMainFrame::InternalSwap(BeginMainFrame* other) {
  std::swap(begin_main_frame_state_, other->begin_main_frame_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BeginMainFrame::GetTypeName() const {
  return "cc.proto.BeginMainFrame";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeginMainFrame

// optional .cc.proto.BeginMainFrameAndCommitState begin_main_frame_state = 1;
bool BeginMainFrame::has_begin_main_frame_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BeginMainFrame::set_has_begin_main_frame_state() {
  _has_bits_[0] |= 0x00000001u;
}
void BeginMainFrame::clear_has_begin_main_frame_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void BeginMainFrame::clear_begin_main_frame_state() {
  if (begin_main_frame_state_ != NULL) begin_main_frame_state_->::cc::proto::BeginMainFrameAndCommitState::Clear();
  clear_has_begin_main_frame_state();
}
const ::cc::proto::BeginMainFrameAndCommitState& BeginMainFrame::begin_main_frame_state() const {
  // @@protoc_insertion_point(field_get:cc.proto.BeginMainFrame.begin_main_frame_state)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return begin_main_frame_state_ != NULL ? *begin_main_frame_state_ : *default_instance().begin_main_frame_state_;
#else
  return begin_main_frame_state_ != NULL ? *begin_main_frame_state_ : *default_instance_->begin_main_frame_state_;
#endif
}
::cc::proto::BeginMainFrameAndCommitState* BeginMainFrame::mutable_begin_main_frame_state() {
  set_has_begin_main_frame_state();
  if (begin_main_frame_state_ == NULL) {
    begin_main_frame_state_ = new ::cc::proto::BeginMainFrameAndCommitState;
  }
  // @@protoc_insertion_point(field_mutable:cc.proto.BeginMainFrame.begin_main_frame_state)
  return begin_main_frame_state_;
}
::cc::proto::BeginMainFrameAndCommitState* BeginMainFrame::release_begin_main_frame_state() {
  // @@protoc_insertion_point(field_release:cc.proto.BeginMainFrame.begin_main_frame_state)
  clear_has_begin_main_frame_state();
  ::cc::proto::BeginMainFrameAndCommitState* temp = begin_main_frame_state_;
  begin_main_frame_state_ = NULL;
  return temp;
}
void BeginMainFrame::set_allocated_begin_main_frame_state(::cc::proto::BeginMainFrameAndCommitState* begin_main_frame_state) {
  delete begin_main_frame_state_;
  begin_main_frame_state_ = begin_main_frame_state;
  if (begin_main_frame_state) {
    set_has_begin_main_frame_state();
  } else {
    clear_has_begin_main_frame_state();
  }
  // @@protoc_insertion_point(field_set_allocated:cc.proto.BeginMainFrame.begin_main_frame_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
