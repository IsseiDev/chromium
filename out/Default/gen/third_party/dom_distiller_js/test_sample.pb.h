// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_sample.proto

#ifndef PROTOBUF_test_5fsample_2eproto__INCLUDED
#define PROTOBUF_test_5fsample_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace dom_distiller {
namespace test_sample {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_test_5fsample_2eproto();
void protobuf_AssignDesc_test_5fsample_2eproto();
void protobuf_ShutdownFile_test_5fsample_2eproto();

class Repeated;
class Repeated_Message;
class TypeTest;
class TypeTest_Message;

// ===================================================================

class TypeTest_Message : public ::google::protobuf::MessageLite {
 public:
  TypeTest_Message();
  virtual ~TypeTest_Message();

  TypeTest_Message(const TypeTest_Message& from);

  inline TypeTest_Message& operator=(const TypeTest_Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const TypeTest_Message& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TypeTest_Message* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(TypeTest_Message* other);

  // implements Message ----------------------------------------------

  inline TypeTest_Message* New() const { return New(NULL); }

  TypeTest_Message* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TypeTest_Message& from);
  void MergeFrom(const TypeTest_Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypeTest_Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool dummy = 1;
  bool has_dummy() const;
  void clear_dummy();
  static const int kDummyFieldNumber = 1;
  bool dummy() const;
  void set_dummy(bool value);

  // @@protoc_insertion_point(class_scope:dom_distiller.test_sample.proto.TypeTest.Message)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool dummy_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_test_5fsample_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_test_5fsample_2eproto();
  #endif
  friend void protobuf_AssignDesc_test_5fsample_2eproto();
  friend void protobuf_ShutdownFile_test_5fsample_2eproto();

  void InitAsDefaultInstance();
  static TypeTest_Message* default_instance_;
};
// -------------------------------------------------------------------

class TypeTest : public ::google::protobuf::MessageLite {
 public:
  TypeTest();
  virtual ~TypeTest();

  TypeTest(const TypeTest& from);

  inline TypeTest& operator=(const TypeTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const TypeTest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TypeTest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(TypeTest* other);

  // implements Message ----------------------------------------------

  inline TypeTest* New() const { return New(NULL); }

  TypeTest* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TypeTest& from);
  void MergeFrom(const TypeTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypeTest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef TypeTest_Message Message;

  // accessors -------------------------------------------------------

  // optional float float_value = 1;
  bool has_float_value() const;
  void clear_float_value();
  static const int kFloatValueFieldNumber = 1;
  float float_value() const;
  void set_float_value(float value);

  // optional double double_value = 2;
  bool has_double_value() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 2;
  double double_value() const;
  void set_double_value(double value);

  // optional int32 int32_value = 3;
  bool has_int32_value() const;
  void clear_int32_value();
  static const int kInt32ValueFieldNumber = 3;
  ::google::protobuf::int32 int32_value() const;
  void set_int32_value(::google::protobuf::int32 value);

  // optional bool bool_value = 4;
  bool has_bool_value() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 4;
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional string string_value = 5;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 5;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // optional .dom_distiller.test_sample.proto.TypeTest.Message message_value = 6;
  bool has_message_value() const;
  void clear_message_value();
  static const int kMessageValueFieldNumber = 6;
  const ::dom_distiller::test_sample::proto::TypeTest_Message& message_value() const;
  ::dom_distiller::test_sample::proto::TypeTest_Message* mutable_message_value();
  ::dom_distiller::test_sample::proto::TypeTest_Message* release_message_value();
  void set_allocated_message_value(::dom_distiller::test_sample::proto::TypeTest_Message* message_value);

  // @@protoc_insertion_point(class_scope:dom_distiller.test_sample.proto.TypeTest)
 private:
  inline void set_has_float_value();
  inline void clear_has_float_value();
  inline void set_has_double_value();
  inline void clear_has_double_value();
  inline void set_has_int32_value();
  inline void clear_has_int32_value();
  inline void set_has_bool_value();
  inline void clear_has_bool_value();
  inline void set_has_string_value();
  inline void clear_has_string_value();
  inline void set_has_message_value();
  inline void clear_has_message_value();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double double_value_;
  float float_value_;
  ::google::protobuf::int32 int32_value_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  ::dom_distiller::test_sample::proto::TypeTest_Message* message_value_;
  bool bool_value_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_test_5fsample_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_test_5fsample_2eproto();
  #endif
  friend void protobuf_AssignDesc_test_5fsample_2eproto();
  friend void protobuf_ShutdownFile_test_5fsample_2eproto();

  void InitAsDefaultInstance();
  static TypeTest* default_instance_;
};
// -------------------------------------------------------------------

class Repeated_Message : public ::google::protobuf::MessageLite {
 public:
  Repeated_Message();
  virtual ~Repeated_Message();

  Repeated_Message(const Repeated_Message& from);

  inline Repeated_Message& operator=(const Repeated_Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Repeated_Message& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Repeated_Message* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Repeated_Message* other);

  // implements Message ----------------------------------------------

  inline Repeated_Message* New() const { return New(NULL); }

  Repeated_Message* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Repeated_Message& from);
  void MergeFrom(const Repeated_Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Repeated_Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool dummy = 1;
  int dummy_size() const;
  void clear_dummy();
  static const int kDummyFieldNumber = 1;
  bool dummy(int index) const;
  void set_dummy(int index, bool value);
  void add_dummy(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      dummy() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_dummy();

  // @@protoc_insertion_point(class_scope:dom_distiller.test_sample.proto.Repeated.Message)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< bool > dummy_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_test_5fsample_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_test_5fsample_2eproto();
  #endif
  friend void protobuf_AssignDesc_test_5fsample_2eproto();
  friend void protobuf_ShutdownFile_test_5fsample_2eproto();

  void InitAsDefaultInstance();
  static Repeated_Message* default_instance_;
};
// -------------------------------------------------------------------

class Repeated : public ::google::protobuf::MessageLite {
 public:
  Repeated();
  virtual ~Repeated();

  Repeated(const Repeated& from);

  inline Repeated& operator=(const Repeated& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Repeated& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Repeated* internal_default_instance() {
    return default_instance_;
  }
  #endif

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Repeated* other);

  // implements Message ----------------------------------------------

  inline Repeated* New() const { return New(NULL); }

  Repeated* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Repeated& from);
  void MergeFrom(const Repeated& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Repeated* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Repeated_Message Message;

  // accessors -------------------------------------------------------

  // repeated float float_value = 1;
  int float_value_size() const;
  void clear_float_value();
  static const int kFloatValueFieldNumber = 1;
  float float_value(int index) const;
  void set_float_value(int index, float value);
  void add_float_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_value();

  // repeated double double_value = 2;
  int double_value_size() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 2;
  double double_value(int index) const;
  void set_double_value(int index, double value);
  void add_double_value(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_value() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_value();

  // repeated int32 int32_value = 3;
  int int32_value_size() const;
  void clear_int32_value();
  static const int kInt32ValueFieldNumber = 3;
  ::google::protobuf::int32 int32_value(int index) const;
  void set_int32_value(int index, ::google::protobuf::int32 value);
  void add_int32_value(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32_value();

  // repeated bool bool_value = 4;
  int bool_value_size() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 4;
  bool bool_value(int index) const;
  void set_bool_value(int index, bool value);
  void add_bool_value(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      bool_value() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_bool_value();

  // repeated string string_value = 5;
  int string_value_size() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 5;
  const ::std::string& string_value(int index) const;
  ::std::string* mutable_string_value(int index);
  void set_string_value(int index, const ::std::string& value);
  void set_string_value(int index, const char* value);
  void set_string_value(int index, const char* value, size_t size);
  ::std::string* add_string_value();
  void add_string_value(const ::std::string& value);
  void add_string_value(const char* value);
  void add_string_value(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& string_value() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_value();

  // repeated .dom_distiller.test_sample.proto.Repeated.Message message_value = 6;
  int message_value_size() const;
  void clear_message_value();
  static const int kMessageValueFieldNumber = 6;
  const ::dom_distiller::test_sample::proto::Repeated_Message& message_value(int index) const;
  ::dom_distiller::test_sample::proto::Repeated_Message* mutable_message_value(int index);
  ::dom_distiller::test_sample::proto::Repeated_Message* add_message_value();
  ::google::protobuf::RepeatedPtrField< ::dom_distiller::test_sample::proto::Repeated_Message >*
      mutable_message_value();
  const ::google::protobuf::RepeatedPtrField< ::dom_distiller::test_sample::proto::Repeated_Message >&
      message_value() const;

  // @@protoc_insertion_point(class_scope:dom_distiller.test_sample.proto.Repeated)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > float_value_;
  ::google::protobuf::RepeatedField< double > double_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32_value_;
  ::google::protobuf::RepeatedField< bool > bool_value_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_value_;
  ::google::protobuf::RepeatedPtrField< ::dom_distiller::test_sample::proto::Repeated_Message > message_value_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_test_5fsample_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_test_5fsample_2eproto();
  #endif
  friend void protobuf_AssignDesc_test_5fsample_2eproto();
  friend void protobuf_ShutdownFile_test_5fsample_2eproto();

  void InitAsDefaultInstance();
  static Repeated* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TypeTest_Message

// optional bool dummy = 1;
inline bool TypeTest_Message::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TypeTest_Message::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TypeTest_Message::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TypeTest_Message::clear_dummy() {
  dummy_ = false;
  clear_has_dummy();
}
inline bool TypeTest_Message::dummy() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.Message.dummy)
  return dummy_;
}
inline void TypeTest_Message::set_dummy(bool value) {
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.Message.dummy)
}

// -------------------------------------------------------------------

// TypeTest

// optional float float_value = 1;
inline bool TypeTest::has_float_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TypeTest::set_has_float_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TypeTest::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TypeTest::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
inline float TypeTest::float_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.float_value)
  return float_value_;
}
inline void TypeTest::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.float_value)
}

// optional double double_value = 2;
inline bool TypeTest::has_double_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TypeTest::set_has_double_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TypeTest::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TypeTest::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
inline double TypeTest::double_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.double_value)
  return double_value_;
}
inline void TypeTest::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.double_value)
}

// optional int32 int32_value = 3;
inline bool TypeTest::has_int32_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TypeTest::set_has_int32_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TypeTest::clear_has_int32_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TypeTest::clear_int32_value() {
  int32_value_ = 0;
  clear_has_int32_value();
}
inline ::google::protobuf::int32 TypeTest::int32_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.int32_value)
  return int32_value_;
}
inline void TypeTest::set_int32_value(::google::protobuf::int32 value) {
  set_has_int32_value();
  int32_value_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.int32_value)
}

// optional bool bool_value = 4;
inline bool TypeTest::has_bool_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TypeTest::set_has_bool_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TypeTest::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TypeTest::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
inline bool TypeTest::bool_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.bool_value)
  return bool_value_;
}
inline void TypeTest::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.bool_value)
}

// optional string string_value = 5;
inline bool TypeTest::has_string_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TypeTest::set_has_string_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TypeTest::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TypeTest::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_value();
}
inline const ::std::string& TypeTest::string_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.string_value)
  return string_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TypeTest::set_string_value(const ::std::string& value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.string_value)
}
inline void TypeTest::set_string_value(const char* value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.test_sample.proto.TypeTest.string_value)
}
inline void TypeTest::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.test_sample.proto.TypeTest.string_value)
}
inline ::std::string* TypeTest::mutable_string_value() {
  set_has_string_value();
  // @@protoc_insertion_point(field_mutable:dom_distiller.test_sample.proto.TypeTest.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TypeTest::release_string_value() {
  // @@protoc_insertion_point(field_release:dom_distiller.test_sample.proto.TypeTest.string_value)
  clear_has_string_value();
  return string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TypeTest::set_allocated_string_value(::std::string* string_value) {
  if (string_value != NULL) {
    set_has_string_value();
  } else {
    clear_has_string_value();
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.test_sample.proto.TypeTest.string_value)
}

// optional .dom_distiller.test_sample.proto.TypeTest.Message message_value = 6;
inline bool TypeTest::has_message_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TypeTest::set_has_message_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TypeTest::clear_has_message_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TypeTest::clear_message_value() {
  if (message_value_ != NULL) message_value_->::dom_distiller::test_sample::proto::TypeTest_Message::Clear();
  clear_has_message_value();
}
inline const ::dom_distiller::test_sample::proto::TypeTest_Message& TypeTest::message_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.message_value)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return message_value_ != NULL ? *message_value_ : *default_instance().message_value_;
#else
  return message_value_ != NULL ? *message_value_ : *default_instance_->message_value_;
#endif
}
inline ::dom_distiller::test_sample::proto::TypeTest_Message* TypeTest::mutable_message_value() {
  set_has_message_value();
  if (message_value_ == NULL) {
    message_value_ = new ::dom_distiller::test_sample::proto::TypeTest_Message;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.test_sample.proto.TypeTest.message_value)
  return message_value_;
}
inline ::dom_distiller::test_sample::proto::TypeTest_Message* TypeTest::release_message_value() {
  // @@protoc_insertion_point(field_release:dom_distiller.test_sample.proto.TypeTest.message_value)
  clear_has_message_value();
  ::dom_distiller::test_sample::proto::TypeTest_Message* temp = message_value_;
  message_value_ = NULL;
  return temp;
}
inline void TypeTest::set_allocated_message_value(::dom_distiller::test_sample::proto::TypeTest_Message* message_value) {
  delete message_value_;
  message_value_ = message_value;
  if (message_value) {
    set_has_message_value();
  } else {
    clear_has_message_value();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.test_sample.proto.TypeTest.message_value)
}

// -------------------------------------------------------------------

// Repeated_Message

// repeated bool dummy = 1;
inline int Repeated_Message::dummy_size() const {
  return dummy_.size();
}
inline void Repeated_Message::clear_dummy() {
  dummy_.Clear();
}
inline bool Repeated_Message::dummy(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.Message.dummy)
  return dummy_.Get(index);
}
inline void Repeated_Message::set_dummy(int index, bool value) {
  dummy_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.Message.dummy)
}
inline void Repeated_Message::add_dummy(bool value) {
  dummy_.Add(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.Message.dummy)
}
inline const ::google::protobuf::RepeatedField< bool >&
Repeated_Message::dummy() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.Message.dummy)
  return dummy_;
}
inline ::google::protobuf::RepeatedField< bool >*
Repeated_Message::mutable_dummy() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.Message.dummy)
  return &dummy_;
}

// -------------------------------------------------------------------

// Repeated

// repeated float float_value = 1;
inline int Repeated::float_value_size() const {
  return float_value_.size();
}
inline void Repeated::clear_float_value() {
  float_value_.Clear();
}
inline float Repeated::float_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.float_value)
  return float_value_.Get(index);
}
inline void Repeated::set_float_value(int index, float value) {
  float_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.float_value)
}
inline void Repeated::add_float_value(float value) {
  float_value_.Add(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.float_value)
}
inline const ::google::protobuf::RepeatedField< float >&
Repeated::float_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.float_value)
  return float_value_;
}
inline ::google::protobuf::RepeatedField< float >*
Repeated::mutable_float_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.float_value)
  return &float_value_;
}

// repeated double double_value = 2;
inline int Repeated::double_value_size() const {
  return double_value_.size();
}
inline void Repeated::clear_double_value() {
  double_value_.Clear();
}
inline double Repeated::double_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.double_value)
  return double_value_.Get(index);
}
inline void Repeated::set_double_value(int index, double value) {
  double_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.double_value)
}
inline void Repeated::add_double_value(double value) {
  double_value_.Add(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.double_value)
}
inline const ::google::protobuf::RepeatedField< double >&
Repeated::double_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.double_value)
  return double_value_;
}
inline ::google::protobuf::RepeatedField< double >*
Repeated::mutable_double_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.double_value)
  return &double_value_;
}

// repeated int32 int32_value = 3;
inline int Repeated::int32_value_size() const {
  return int32_value_.size();
}
inline void Repeated::clear_int32_value() {
  int32_value_.Clear();
}
inline ::google::protobuf::int32 Repeated::int32_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.int32_value)
  return int32_value_.Get(index);
}
inline void Repeated::set_int32_value(int index, ::google::protobuf::int32 value) {
  int32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.int32_value)
}
inline void Repeated::add_int32_value(::google::protobuf::int32 value) {
  int32_value_.Add(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.int32_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Repeated::int32_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.int32_value)
  return int32_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Repeated::mutable_int32_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.int32_value)
  return &int32_value_;
}

// repeated bool bool_value = 4;
inline int Repeated::bool_value_size() const {
  return bool_value_.size();
}
inline void Repeated::clear_bool_value() {
  bool_value_.Clear();
}
inline bool Repeated::bool_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.bool_value)
  return bool_value_.Get(index);
}
inline void Repeated::set_bool_value(int index, bool value) {
  bool_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.bool_value)
}
inline void Repeated::add_bool_value(bool value) {
  bool_value_.Add(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.bool_value)
}
inline const ::google::protobuf::RepeatedField< bool >&
Repeated::bool_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.bool_value)
  return bool_value_;
}
inline ::google::protobuf::RepeatedField< bool >*
Repeated::mutable_bool_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.bool_value)
  return &bool_value_;
}

// repeated string string_value = 5;
inline int Repeated::string_value_size() const {
  return string_value_.size();
}
inline void Repeated::clear_string_value() {
  string_value_.Clear();
}
inline const ::std::string& Repeated::string_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.string_value)
  return string_value_.Get(index);
}
inline ::std::string* Repeated::mutable_string_value(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.test_sample.proto.Repeated.string_value)
  return string_value_.Mutable(index);
}
inline void Repeated::set_string_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.string_value)
  string_value_.Mutable(index)->assign(value);
}
inline void Repeated::set_string_value(int index, const char* value) {
  string_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dom_distiller.test_sample.proto.Repeated.string_value)
}
inline void Repeated::set_string_value(int index, const char* value, size_t size) {
  string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.test_sample.proto.Repeated.string_value)
}
inline ::std::string* Repeated::add_string_value() {
  // @@protoc_insertion_point(field_add_mutable:dom_distiller.test_sample.proto.Repeated.string_value)
  return string_value_.Add();
}
inline void Repeated::add_string_value(const ::std::string& value) {
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.string_value)
}
inline void Repeated::add_string_value(const char* value) {
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dom_distiller.test_sample.proto.Repeated.string_value)
}
inline void Repeated::add_string_value(const char* value, size_t size) {
  string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dom_distiller.test_sample.proto.Repeated.string_value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Repeated::string_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.string_value)
  return string_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Repeated::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.string_value)
  return &string_value_;
}

// repeated .dom_distiller.test_sample.proto.Repeated.Message message_value = 6;
inline int Repeated::message_value_size() const {
  return message_value_.size();
}
inline void Repeated::clear_message_value() {
  message_value_.Clear();
}
inline const ::dom_distiller::test_sample::proto::Repeated_Message& Repeated::message_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.message_value)
  return message_value_.Get(index);
}
inline ::dom_distiller::test_sample::proto::Repeated_Message* Repeated::mutable_message_value(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.test_sample.proto.Repeated.message_value)
  return message_value_.Mutable(index);
}
inline ::dom_distiller::test_sample::proto::Repeated_Message* Repeated::add_message_value() {
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.message_value)
  return message_value_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dom_distiller::test_sample::proto::Repeated_Message >*
Repeated::mutable_message_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.message_value)
  return &message_value_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dom_distiller::test_sample::proto::Repeated_Message >&
Repeated::message_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.message_value)
  return message_value_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace test_sample
}  // namespace dom_distiller

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_5fsample_2eproto__INCLUDED
