// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/blimp/core/DummyBlimpClientContext

#ifndef org_chromium_blimp_core_DummyBlimpClientContext_JNI
#define org_chromium_blimp_core_DummyBlimpClientContext_JNI

#include <jni.h>

#include "../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDummyBlimpClientContextClassPath[] =
    "org/chromium/blimp/core/DummyBlimpClientContext";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DummyBlimpClientContext_clazz __attribute__((unused))
    = 0;
#define DummyBlimpClientContext_clazz(env) base::android::LazyGetClass(env, kDummyBlimpClientContextClassPath, &g_DummyBlimpClientContext_clazz)

}  // namespace

namespace blimp {
namespace client {

// Step 2: method stubs.

static base::subtle::AtomicWord g_DummyBlimpClientContext_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_DummyBlimpClientContext_create(JNIEnv* env, jlong
    nativeDummyBlimpClientContextAndroid) {
  CHECK_CLAZZ(env, DummyBlimpClientContext_clazz(env),
      DummyBlimpClientContext_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, DummyBlimpClientContext_clazz(env),
      "create",

"("
"J"
")"
"Lorg/chromium/blimp/core/DummyBlimpClientContext;",
      &g_DummyBlimpClientContext_create);

  jobject ret =
      env->CallStaticObjectMethod(DummyBlimpClientContext_clazz(env),
          method_id, nativeDummyBlimpClientContextAndroid);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_DummyBlimpClientContext_clearNativePtr = 0;
static void Java_DummyBlimpClientContext_clearNativePtr(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      DummyBlimpClientContext_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DummyBlimpClientContext_clazz(env),
      "clearNativePtr",

"("
")"
"V",
      &g_DummyBlimpClientContext_clearNativePtr);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_DummyBlimpClientContext_getNativePtr = 0;
static jlong Java_DummyBlimpClientContext_getNativePtr(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      DummyBlimpClientContext_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, DummyBlimpClientContext_clazz(env),
      "getNativePtr",

"("
")"
"J",
      &g_DummyBlimpClientContext_getNativePtr);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

}  // namespace client
}  // namespace blimp

#endif  // org_chromium_blimp_core_DummyBlimpClientContext_JNI
